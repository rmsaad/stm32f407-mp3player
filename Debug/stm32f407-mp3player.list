
stm32f407-mp3player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002528  0800fac8  0800fac8  0001fac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ff0  08011ff0  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011ff0  08011ff0  00021ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ff8  08011ff8  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ff8  08011ff8  00021ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ffc  08011ffc  00021ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08012000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fed8  200000f8  080120f8  000300f8  2**3
                  ALLOC
 10 ._user_heap_stack 00010000  2000ffd0  080120f8  0003ffd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005739e  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009baa  00000000  00000000  000874c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e98  00000000  00000000  00091070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005388  00000000  00000000  00092f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e7cf  00000000  00000000  00098290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c78e  00000000  00000000  000c6a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6e77  00000000  00000000  000f31ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001da064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  001da0e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0002c3c4  00000000  00000000  001e0f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fab0 	.word	0x0800fab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	0800fab0 	.word	0x0800fab0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <vApplicationGetIdleTaskMemory+0x14>)
 80005a2:	6003      	str	r3, [r0, #0]
{
 80005a4:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a6:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a8:	4c03      	ldr	r4, [pc, #12]	; (80005b8 <vApplicationGetIdleTaskMemory+0x18>)
 80005aa:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80005ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000314 	.word	0x20000314
 80005b8:	20000114 	.word	0x20000114

080005bc <vUpdateLCD_TaskHandler>:
/**
  * @brief  Task: Updates LCD Screen
  * @param  params: Not used
  * @retval None
  */
void vUpdateLCD_TaskHandler(void *params){
 80005bc:	b508      	push	{r3, lr}
	for(;;){
		  vUpdateLCDScreen();                                                                                                       /*Update LCD Screen With New Information*/
		  vTaskDelay(500);                                                                                                          /*Block Task for 500 ms*/
		  taskYIELD();                                                                                                              /*Yield Task*/
 80005be:	4d07      	ldr	r5, [pc, #28]	; (80005dc <vUpdateLCD_TaskHandler+0x20>)
 80005c0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
		  vUpdateLCDScreen();                                                                                                       /*Update LCD Screen With New Information*/
 80005c4:	f003 ffa6 	bl	8004514 <vUpdateLCDScreen>
		  vTaskDelay(500);                                                                                                          /*Block Task for 500 ms*/
 80005c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005cc:	f00d ff64 	bl	800e498 <vTaskDelay>
		  taskYIELD();                                                                                                              /*Yield Task*/
 80005d0:	602c      	str	r4, [r5, #0]
 80005d2:	f3bf 8f4f 	dsb	sy
 80005d6:	f3bf 8f6f 	isb	sy
 80005da:	e7f3      	b.n	80005c4 <vUpdateLCD_TaskHandler+0x8>
 80005dc:	e000ed04 	.word	0xe000ed04

080005e0 <vReadADC_TaskHandler>:
/**
  * @brief  Poll ADC
  * @param  params: Not used
  * @retval None
  */
void vReadADC_TaskHandler(void *params){
 80005e0:	b508      	push	{r3, lr}
	for(;;){
		HAL_ADC_Start(&hadc1);                                                                                                      /*start ADC conversion*/
 80005e2:	4c12      	ldr	r4, [pc, #72]	; (800062c <vReadADC_TaskHandler+0x4c>)
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);                                                                           /*poll ADC*/
		vUpdateLCDSetVolume(REMAP(HAL_ADC_GetValue(&hadc1)));                                                                       /*get the ADC value*/
 80005e4:	4e12      	ldr	r6, [pc, #72]	; (8000630 <vReadADC_TaskHandler+0x50>)
		vTaskDelay(500);                                                                                                            /*Block Task for 500 ms*/
		taskYIELD();                                                                                                                /*Yield Task*/
 80005e6:	4d13      	ldr	r5, [pc, #76]	; (8000634 <vReadADC_TaskHandler+0x54>)
		HAL_ADC_Start(&hadc1);                                                                                                      /*start ADC conversion*/
 80005e8:	4620      	mov	r0, r4
 80005ea:	f005 f859 	bl	80056a0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);                                                                           /*poll ADC*/
 80005ee:	f04f 31ff 	mov.w	r1, #4294967295
 80005f2:	4620      	mov	r0, r4
 80005f4:	f005 f8d2 	bl	800579c <HAL_ADC_PollForConversion>
		vUpdateLCDSetVolume(REMAP(HAL_ADC_GetValue(&hadc1)));                                                                       /*get the ADC value*/
 80005f8:	4620      	mov	r0, r4
 80005fa:	f005 f91f 	bl	800583c <HAL_ADC_GetValue>
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	fb03 f000 	mul.w	r0, r3, r0
 8000604:	fba6 2300 	umull	r2, r3, r6, r0
 8000608:	1ac0      	subs	r0, r0, r3
 800060a:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 800060e:	0ac0      	lsrs	r0, r0, #11
 8000610:	f003 ff60 	bl	80044d4 <vUpdateLCDSetVolume>
		vTaskDelay(500);                                                                                                            /*Block Task for 500 ms*/
 8000614:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000618:	f00d ff3e 	bl	800e498 <vTaskDelay>
		taskYIELD();                                                                                                                /*Yield Task*/
 800061c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000620:	602b      	str	r3, [r5, #0]
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	e7dd      	b.n	80005e8 <vReadADC_TaskHandler+0x8>
 800062c:	2000d6b0 	.word	0x2000d6b0
 8000630:	00100101 	.word	0x00100101
 8000634:	e000ed04 	.word	0xe000ed04

08000638 <vReadInputButtons_TaskHandler>:
/**
  * @brief  Poll Buttons
  * @param  params: Not used
  * @retval None
  */
void vReadInputButtons_TaskHandler(void *params){
 8000638:	b580      	push	{r7, lr}
 800063a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80006e4 <vReadInputButtons_TaskHandler+0xac>
 800063e:	4d25      	ldr	r5, [pc, #148]	; (80006d4 <vReadInputButtons_TaskHandler+0x9c>)
 8000640:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80006e8 <vReadInputButtons_TaskHandler+0xb0>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == 0){                                                                            /*if Prev button is pressed*/
 8000644:	4c24      	ldr	r4, [pc, #144]	; (80006d8 <vReadInputButtons_TaskHandler+0xa0>)
			  ucNewSongFlag = 1;                                                                                                        /*Set the New Song Flag*/
			  pxCurrent = pxCurrent->pxPrev;                                                                                            /*Set LL Previous Node*/
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/

		  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                      /*if Pause button is pressed*/
 8000646:	4f25      	ldr	r7, [pc, #148]	; (80006dc <vReadInputButtons_TaskHandler+0xa4>)
			  pxCurrent = pxCurrent->pxNext;                                                                                            /*Set LL to Next Node*/
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/
		  }

		  vTaskDelay(50);                                                                                                           /*Block Task for 50 ms*/
		  taskYIELD();                                                                                                              /*Yield Task*/
 8000648:	4e25      	ldr	r6, [pc, #148]	; (80006e0 <vReadInputButtons_TaskHandler+0xa8>)
 800064a:	e012      	b.n	8000672 <vReadInputButtons_TaskHandler+0x3a>
			  pxCurrent = pxCurrent->pxPrev;                                                                                            /*Set LL Previous Node*/
 800064c:	682a      	ldr	r2, [r5, #0]
			  ucNewSongFlag = 1;                                                                                                        /*Set the New Song Flag*/
 800064e:	f888 3000 	strb.w	r3, [r8]
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/
 8000652:	f44f 70c8 	mov.w	r0, #400	; 0x190
			  pxCurrent = pxCurrent->pxPrev;                                                                                            /*Set LL Previous Node*/
 8000656:	6893      	ldr	r3, [r2, #8]
 8000658:	602b      	str	r3, [r5, #0]
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/
 800065a:	f00d ff1d 	bl	800e498 <vTaskDelay>
		  vTaskDelay(50);                                                                                                           /*Block Task for 50 ms*/
 800065e:	2032      	movs	r0, #50	; 0x32
 8000660:	f00d ff1a 	bl	800e498 <vTaskDelay>
		  taskYIELD();                                                                                                              /*Yield Task*/
 8000664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000668:	6033      	str	r3, [r6, #0]
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	f3bf 8f6f 	isb	sy
		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == 0){                                                                            /*if Prev button is pressed*/
 8000672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000676:	4620      	mov	r0, r4
 8000678:	f005 fdc8 	bl	800620c <HAL_GPIO_ReadPin>
		  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                      /*if Pause button is pressed*/
 800067c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			  ucNewSongFlag = 1;                                                                                                        /*Set the New Song Flag*/
 8000680:	2301      	movs	r3, #1
		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == 0){                                                                            /*if Prev button is pressed*/
 8000682:	2800      	cmp	r0, #0
 8000684:	d0e2      	beq.n	800064c <vReadInputButtons_TaskHandler+0x14>
		  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                      /*if Pause button is pressed*/
 8000686:	4638      	mov	r0, r7
 8000688:	f005 fdc0 	bl	800620c <HAL_GPIO_ReadPin>
		  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){                                                                      /*if Next button is pressed*/
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                      /*if Pause button is pressed*/
 8000690:	b978      	cbnz	r0, 80006b2 <vReadInputButtons_TaskHandler+0x7a>
			  ucPauseStateFlag = ucPauseStateFlag ^ 1;                                                                                  /*invert Pause State Flag*/
 8000692:	f899 3000 	ldrb.w	r3, [r9]
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000696:	4620      	mov	r0, r4
			  ucPauseStateFlag = ucPauseStateFlag ^ 1;                                                                                  /*invert Pause State Flag*/
 8000698:	f083 0301 	eor.w	r3, r3, #1
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
			  ucPauseStateFlag = ucPauseStateFlag ^ 1;                                                                                  /*invert Pause State Flag*/
 80006a0:	f889 3000 	strb.w	r3, [r9]
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006a4:	f005 fdbc 	bl	8006220 <HAL_GPIO_TogglePin>
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/
 80006a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006ac:	f00d fef4 	bl	800e498 <vTaskDelay>
 80006b0:	e7d5      	b.n	800065e <vReadInputButtons_TaskHandler+0x26>
		  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){                                                                      /*if Next button is pressed*/
 80006b2:	4638      	mov	r0, r7
 80006b4:	f005 fdaa 	bl	800620c <HAL_GPIO_ReadPin>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d1d0      	bne.n	800065e <vReadInputButtons_TaskHandler+0x26>
			  pxCurrent = pxCurrent->pxNext;                                                                                            /*Set LL to Next Node*/
 80006bc:	682a      	ldr	r2, [r5, #0]
			  ucNewSongFlag = 1;                                                                                                        /*Set the New Song Flag*/
 80006be:	2301      	movs	r3, #1
			  pxCurrent = pxCurrent->pxNext;                                                                                            /*Set LL to Next Node*/
 80006c0:	6852      	ldr	r2, [r2, #4]
 80006c2:	602a      	str	r2, [r5, #0]
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/
 80006c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
			  ucNewSongFlag = 1;                                                                                                        /*Set the New Song Flag*/
 80006c8:	f888 3000 	strb.w	r3, [r8]
			  vTaskDelay(400);                                                                                                          /*Block Task Button Debouncing*/
 80006cc:	f00d fee4 	bl	800e498 <vTaskDelay>
 80006d0:	e7c5      	b.n	800065e <vReadInputButtons_TaskHandler+0x26>
 80006d2:	bf00      	nop
 80006d4:	20000368 	.word	0x20000368
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40020400 	.word	0x40020400
 80006e0:	e000ed04 	.word	0xe000ed04
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000371 	.word	0x20000371

080006ec <vBuildMp3List>:
void vBuildMp3List(){
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	b0d5      	sub	sp, #340	; 0x154
	if(f_opendir(&xDirectory, "0:/") == FR_OK){                                                                                     /*get the read out protection status*/
 80006f0:	a801      	add	r0, sp, #4
 80006f2:	4917      	ldr	r1, [pc, #92]	; (8000750 <vBuildMp3List+0x64>)
 80006f4:	f00c fbac 	bl	800ce50 <f_opendir>
 80006f8:	bb40      	cbnz	r0, 800074c <vBuildMp3List+0x60>
			if (strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                           /*make sure file extension is .mp3*/
 80006fa:	4d16      	ldr	r5, [pc, #88]	; (8000754 <vBuildMp3List+0x68>)
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 80006fc:	f10d 044e 	add.w	r4, sp, #78	; 0x4e
		while(f_readdir(&xDirectory, &xFinf) == FR_OK){                                                                             /*start reading directory entries*/
 8000700:	a90e      	add	r1, sp, #56	; 0x38
 8000702:	a801      	add	r0, sp, #4
 8000704:	f00c fc18 	bl	800cf38 <f_readdir>
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 8000708:	212e      	movs	r1, #46	; 0x2e
		while(f_readdir(&xDirectory, &xFinf) == FR_OK){                                                                             /*start reading directory entries*/
 800070a:	b9c0      	cbnz	r0, 800073e <vBuildMp3List+0x52>
			if(xFinf.fname[0] == 0)                                                                                                 /*exit loop when finished*/
 800070c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 8000710:	4620      	mov	r0, r4
			if(xFinf.fname[0] == 0)                                                                                                 /*exit loop when finished*/
 8000712:	b1a3      	cbz	r3, 800073e <vBuildMp3List+0x52>
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 8000714:	f00e fe9f 	bl	800f456 <strrchr>
    if(!pcPeriod || pcPeriod == pcFile) return "";                                                                                  /*return "" if no "."*/
 8000718:	4603      	mov	r3, r0
			if (strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                           /*make sure file extension is .mp3*/
 800071a:	1c41      	adds	r1, r0, #1
    if(!pcPeriod || pcPeriod == pcFile) return "";                                                                                  /*return "" if no "."*/
 800071c:	2800      	cmp	r0, #0
 800071e:	d0ef      	beq.n	8000700 <vBuildMp3List+0x14>
 8000720:	42a3      	cmp	r3, r4
			if (strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                           /*make sure file extension is .mp3*/
 8000722:	4628      	mov	r0, r5
    if(!pcPeriod || pcPeriod == pcFile) return "";                                                                                  /*return "" if no "."*/
 8000724:	d0ec      	beq.n	8000700 <vBuildMp3List+0x14>
			if (strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                           /*make sure file extension is .mp3*/
 8000726:	f7ff fd53 	bl	80001d0 <strcmp>
 800072a:	2800      	cmp	r0, #0
 800072c:	d1e8      	bne.n	8000700 <vBuildMp3List+0x14>
				vSongLLAddEnd(&pxStart, pxSongLLNewElement((char*) xFinf.fname));                                                       /*add file to linked list of mp3s*/
 800072e:	4620      	mov	r0, r4
 8000730:	f003 fcda 	bl	80040e8 <pxSongLLNewElement>
 8000734:	4601      	mov	r1, r0
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <vBuildMp3List+0x6c>)
 8000738:	f003 fcee 	bl	8004118 <vSongLLAddEnd>
 800073c:	e7e0      	b.n	8000700 <vBuildMp3List+0x14>
		vSongLLCircularizeList(pxStart);                                                                                            /*head and tail of LL point to each other*/
 800073e:	4c06      	ldr	r4, [pc, #24]	; (8000758 <vBuildMp3List+0x6c>)
 8000740:	6820      	ldr	r0, [r4, #0]
 8000742:	f003 fcf5 	bl	8004130 <vSongLLCircularizeList>
		pxCurrent = pxStart;                                                                                                        /*current music track is at head of LL*/
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <vBuildMp3List+0x70>)
 8000748:	6822      	ldr	r2, [r4, #0]
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	b055      	add	sp, #340	; 0x154
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	0800fb2c 	.word	0x0800fb2c
 8000754:	0800fb30 	.word	0x0800fb30
 8000758:	2000036c 	.word	0x2000036c
 800075c:	20000368 	.word	0x20000368

08000760 <vMP3Playback_TaskHandler>:
{
 8000760:	4e28      	ldr	r6, [pc, #160]	; (8000804 <vMP3Playback_TaskHandler+0xa4>)
 8000762:	4c29      	ldr	r4, [pc, #164]	; (8000808 <vMP3Playback_TaskHandler+0xa8>)
				  taskYIELD();                                                                                                          /*Yield Task*/
 8000764:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8000814 <vMP3Playback_TaskHandler+0xb4>
			  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000768:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8000818 <vMP3Playback_TaskHandler+0xb8>
			  if(f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0) == FR_OK){                                                              /*Mount USB drive*/
 800076c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800081c <vMP3Playback_TaskHandler+0xbc>
{
 8000770:	b580      	push	{r7, lr}
  MX_USB_HOST_Init();                                                                                                               /*init code for USB_HOST*/
 8000772:	f00e fb97 	bl	800eea4 <MX_USB_HOST_Init>
 8000776:	4f25      	ldr	r7, [pc, #148]	; (800080c <vMP3Playback_TaskHandler+0xac>)
 8000778:	7833      	ldrb	r3, [r6, #0]
		  if(Appli_state == APPLICATION_READY && !ucDriveMountedFlag){                                                                  /*if Ready and Drive is not Mounted*/
 800077a:	783a      	ldrb	r2, [r7, #0]
 800077c:	2a02      	cmp	r2, #2
 800077e:	d029      	beq.n	80007d4 <vMP3Playback_TaskHandler+0x74>
		  if(ucNewSongFlag && ucDriveMountedFlag){                                                                                  /*if New Song Flag Set and Drive Mounted Set*/
 8000780:	7822      	ldrb	r2, [r4, #0]
 8000782:	b1aa      	cbz	r2, 80007b0 <vMP3Playback_TaskHandler+0x50>
 8000784:	bb5b      	cbnz	r3, 80007de <vMP3Playback_TaskHandler+0x7e>
		  if(Appli_state == APPLICATION_READY && !ucDriveMountedFlag){                                                                  /*if Ready and Drive is not Mounted*/
 8000786:	783a      	ldrb	r2, [r7, #0]
 8000788:	2a02      	cmp	r2, #2
 800078a:	d1f9      	bne.n	8000780 <vMP3Playback_TaskHandler+0x20>
			  ucDriveMountedFlag = 1;                                                                                                   /*Set the Drive Mounted Flag*/
 800078c:	2301      	movs	r3, #1
			  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800078e:	461a      	mov	r2, r3
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4650      	mov	r0, sl
			  ucDriveMountedFlag = 1;                                                                                                   /*Set the Drive Mounted Flag*/
 8000796:	7033      	strb	r3, [r6, #0]
			  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000798:	f005 fd3e 	bl	8006218 <HAL_GPIO_WritePin>
			  if(f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0) == FR_OK){                                                              /*Mount USB drive*/
 800079c:	2200      	movs	r2, #0
 800079e:	4649      	mov	r1, r9
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <vMP3Playback_TaskHandler+0xb0>)
 80007a2:	f00b fdc1 	bl	800c328 <f_mount>
 80007a6:	b348      	cbz	r0, 80007fc <vMP3Playback_TaskHandler+0x9c>
		  if(ucNewSongFlag && ucDriveMountedFlag){                                                                                  /*if New Song Flag Set and Drive Mounted Set*/
 80007a8:	7822      	ldrb	r2, [r4, #0]
 80007aa:	7833      	ldrb	r3, [r6, #0]
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d1e9      	bne.n	8000784 <vMP3Playback_TaskHandler+0x24>
			  if (!ucNewSongFlag && ucDriveMountedFlag){                                                                            /*if New Song Flag Not Set and Drive Mounted Set*/
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0e8      	beq.n	8000786 <vMP3Playback_TaskHandler+0x26>
				  taskYIELD();                                                                                                          /*Yield Task*/
 80007b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
				  vMp3PlayerDecodeFrames();                                                                                             /*Decode and Play a couple Mp3 Frasmes*/
 80007b8:	f003 fb9e 	bl	8003ef8 <vMp3PlayerDecodeFrames>
				  taskYIELD();                                                                                                          /*Yield Task*/
 80007bc:	f8c8 5000 	str.w	r5, [r8]
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	f3bf 8f6f 	isb	sy
			  if (!ucNewSongFlag && ucDriveMountedFlag){                                                                            /*if New Song Flag Not Set and Drive Mounted Set*/
 80007c8:	7823      	ldrb	r3, [r4, #0]
 80007ca:	b19b      	cbz	r3, 80007f4 <vMP3Playback_TaskHandler+0x94>
		  if(Appli_state == APPLICATION_READY && !ucDriveMountedFlag){                                                                  /*if Ready and Drive is not Mounted*/
 80007cc:	783a      	ldrb	r2, [r7, #0]
 80007ce:	7833      	ldrb	r3, [r6, #0]
 80007d0:	2a02      	cmp	r2, #2
 80007d2:	d1d5      	bne.n	8000780 <vMP3Playback_TaskHandler+0x20>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0d9      	beq.n	800078c <vMP3Playback_TaskHandler+0x2c>
		  if(ucNewSongFlag && ucDriveMountedFlag){                                                                                  /*if New Song Flag Set and Drive Mounted Set*/
 80007d8:	7823      	ldrb	r3, [r4, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0ea      	beq.n	80007b4 <vMP3Playback_TaskHandler+0x54>
			  ucNewSongFlag = 0;                                                                                                        /*Un-Set New Song Flag*/
 80007de:	2300      	movs	r3, #0
 80007e0:	7023      	strb	r3, [r4, #0]
			  vMp3PlayerFindInfo();                                                                                                     /*Find Mp3 Track info*/
 80007e2:	f003 fc01 	bl	8003fe8 <vMp3PlayerFindInfo>
			  vMp3PlayerInit();                                                                                                         /*init Mp3 Playback*/
 80007e6:	f003 fb41 	bl	8003e6c <vMp3PlayerInit>
			  if (!ucNewSongFlag && ucDriveMountedFlag){                                                                            /*if New Song Flag Not Set and Drive Mounted Set*/
 80007ea:	7822      	ldrb	r2, [r4, #0]
 80007ec:	7833      	ldrb	r3, [r6, #0]
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	d1c3      	bne.n	800077a <vMP3Playback_TaskHandler+0x1a>
 80007f2:	e7dd      	b.n	80007b0 <vMP3Playback_TaskHandler+0x50>
 80007f4:	7833      	ldrb	r3, [r6, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1de      	bne.n	80007b8 <vMP3Playback_TaskHandler+0x58>
 80007fa:	e7c4      	b.n	8000786 <vMP3Playback_TaskHandler+0x26>
				  vBuildMp3List();                                                                                                      /*Build Mp3 LL*/
 80007fc:	f7ff ff76 	bl	80006ec <vBuildMp3List>
 8000800:	e7d2      	b.n	80007a8 <vMP3Playback_TaskHandler+0x48>
 8000802:	bf00      	nop
 8000804:	20000370 	.word	0x20000370
 8000808:	20000000 	.word	0x20000000
 800080c:	2000d6a4 	.word	0x2000d6a4
 8000810:	2000e8a4 	.word	0x2000e8a4
 8000814:	e000ed04 	.word	0xe000ed04
 8000818:	40020c00 	.word	0x40020c00
 800081c:	2000d870 	.word	0x2000d870

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM7) {
 8000820:	6802      	ldr	r2, [r0, #0]
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000824:	429a      	cmp	r2, r3
 8000826:	d000      	beq.n	800082a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
}
 8000828:	4770      	bx	lr
    HAL_IncTick();
 800082a:	f004 be63 	b.w	80054f4 <HAL_IncTick>
 800082e:	bf00      	nop
 8000830:	40001400 	.word	0x40001400

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b508      	push	{r3, lr}
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083c:	4801      	ldr	r0, [pc, #4]	; (8000844 <Error_Handler+0x10>)
 800083e:	f005 fceb 	bl	8006218 <HAL_GPIO_WritePin>
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0xe>
 8000844:	40020c00 	.word	0x40020c00

08000848 <SystemClock_Config>:
{
 8000848:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	2300      	movs	r3, #0
{
 800084c:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8000852:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800085a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4924      	ldr	r1, [pc, #144]	; (80008f4 <SystemClock_Config+0xac>)
 8000864:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000868:	9303      	str	r3, [sp, #12]
 800086a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086e:	4a22      	ldr	r2, [pc, #136]	; (80008f8 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000874:	6408      	str	r0, [r1, #64]	; 0x40
 8000876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000878:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800087c:	9101      	str	r1, [sp, #4]
 800087e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	6813      	ldr	r3, [r2, #0]
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000890:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000892:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000898:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a4:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008a8:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008aa:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ae:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b2:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008b4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f007 fb3e 	bl	8007f38 <HAL_RCC_OscConfig>
 80008bc:	b9b8      	cbnz	r0, 80008ee <SystemClock_Config+0xa6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008c0:	2280      	movs	r2, #128	; 0x80
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c6:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008ce:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d4:	f007 fd44 	bl	8008360 <HAL_RCC_ClockConfig>
 80008d8:	b948      	cbnz	r0, 80008ee <SystemClock_Config+0xa6>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008da:	2332      	movs	r3, #50	; 0x32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008dc:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008de:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e4:	f007 fe0c 	bl	8008500 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	b908      	cbnz	r0, 80008ee <SystemClock_Config+0xa6>
}
 80008ea:	b019      	add	sp, #100	; 0x64
 80008ec:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80008ee:	f7ff ffa1 	bl	8000834 <Error_Handler>
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <main>:
{
 80008fc:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	2400      	movs	r4, #0
{
 8000900:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000902:	f004 fddd 	bl	80054c0 <HAL_Init>
  SystemClock_Config();
 8000906:	f7ff ff9f 	bl	8000848 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800090e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	4b92      	ldr	r3, [pc, #584]	; (8000b5c <main+0x260>)
 8000914:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800091a:	4891      	ldr	r0, [pc, #580]	; (8000b60 <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8000bb0 <main+0x2b4>
  hadc1.Instance = ADC1;
 8000920:	4d90      	ldr	r5, [pc, #576]	; (8000b64 <main+0x268>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	f042 0210 	orr.w	r2, r2, #16
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
 8000928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092a:	f002 0210 	and.w	r2, r2, #16
 800092e:	9203      	str	r2, [sp, #12]
 8000930:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	9404      	str	r4, [sp, #16]
 8000934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000936:	f042 0204 	orr.w	r2, r2, #4
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
 800093c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093e:	f002 0204 	and.w	r2, r2, #4
 8000942:	9204      	str	r2, [sp, #16]
 8000944:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	9405      	str	r4, [sp, #20]
 8000948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800094a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
 8000950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000952:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000956:	9205      	str	r2, [sp, #20]
 8000958:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	9406      	str	r4, [sp, #24]
 800095c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
 8000964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000966:	f002 0201 	and.w	r2, r2, #1
 800096a:	9206      	str	r2, [sp, #24]
 800096c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	9407      	str	r4, [sp, #28]
 8000970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000972:	f042 0202 	orr.w	r2, r2, #2
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
 8000978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800097a:	f002 0202 	and.w	r2, r2, #2
 800097e:	9207      	str	r2, [sp, #28]
 8000980:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	9408      	str	r4, [sp, #32]
 8000984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000986:	f042 0208 	orr.w	r2, r2, #8
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000994:	4622      	mov	r2, r4
 8000996:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800099a:	f005 fc3d 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	4611      	mov	r1, r2
 80009a2:	4871      	ldr	r0, [pc, #452]	; (8000b68 <main+0x26c>)
 80009a4:	f005 fc38 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a8:	4622      	mov	r2, r4
 80009aa:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009ae:	486f      	ldr	r0, [pc, #444]	; (8000b6c <main+0x270>)
 80009b0:	f005 fc32 	bl	8006218 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009b6:	f04f 0a08 	mov.w	sl, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ba:	a90f      	add	r1, sp, #60	; 0x3c
 80009bc:	4868      	ldr	r0, [pc, #416]	; (8000b60 <main+0x264>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f005 fa73 	bl	8005eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	a90f      	add	r1, sp, #60	; 0x3c
 80009cc:	4866      	ldr	r0, [pc, #408]	; (8000b68 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d0:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f005 fa68 	bl	8005eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e0:	a90f      	add	r1, sp, #60	; 0x3c
 80009e2:	4861      	ldr	r0, [pc, #388]	; (8000b68 <main+0x26c>)
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ee:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f005 fa5d 	bl	8005eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	a90f      	add	r1, sp, #60	; 0x3c
 80009f8:	485d      	ldr	r0, [pc, #372]	; (8000b70 <main+0x274>)
  GPIO_InitStruct.Pin = B1_Pin;
 80009fa:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	e9cd 8410 	strd	r8, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f005 fa56 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_12|GPIO_PIN_14;
 8000a04:	f245 0304 	movw	r3, #20484	; 0x5004
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	a90f      	add	r1, sp, #60	; 0x3c
 8000a0a:	485a      	ldr	r0, [pc, #360]	; (8000b74 <main+0x278>)
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_12|GPIO_PIN_14;
 8000a0c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f005 fa4d 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	a90f      	add	r1, sp, #60	; 0x3c
 8000a1c:	4855      	ldr	r0, [pc, #340]	; (8000b74 <main+0x278>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a1e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a20:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f005 fa41 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2e:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	a90f      	add	r1, sp, #60	; 0x3c
 8000a34:	484d      	ldr	r0, [pc, #308]	; (8000b6c <main+0x270>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a36:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f005 fa37 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
 8000a42:	f44f 6384 	mov.w	r3, #1056	; 0x420
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a46:	a90f      	add	r1, sp, #60	; 0x3c
 8000a48:	4848      	ldr	r0, [pc, #288]	; (8000b6c <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
 8000a4a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f005 fa2e 	bl	8005eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	a90f      	add	r1, sp, #60	; 0x3c
 8000a56:	4842      	ldr	r0, [pc, #264]	; (8000b60 <main+0x264>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a5a:	e9cd 780f 	strd	r7, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f005 fa27 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a62:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a66:	a90f      	add	r1, sp, #60	; 0x3c
 8000a68:	483d      	ldr	r0, [pc, #244]	; (8000b60 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a6a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a72:	f005 fa1d 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000a76:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	a90f      	add	r1, sp, #60	; 0x3c
 8000a7a:	483b      	ldr	r0, [pc, #236]	; (8000b68 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000a7c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f005 fa14 	bl	8005eb0 <HAL_GPIO_Init>
  uint16_t data_pins[8] = {GPIO_PIN_7, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_8, GPIO_PIN_10, GPIO_PIN_12, GPIO_PIN_14};
 8000a88:	f8df c128 	ldr.w	ip, [pc, #296]	; 8000bb4 <main+0x2b8>
 8000a8c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a90:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
  uint16_t control_pins[3] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_4};
 8000a94:	f10c 0c10 	add.w	ip, ip, #16
  uint16_t data_pins[8] = {GPIO_PIN_7, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_8, GPIO_PIN_10, GPIO_PIN_12, GPIO_PIN_14};
 8000a98:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  uint16_t control_pins[3] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_4};
 8000a9c:	e89c 0003 	ldmia.w	ip, {r0, r1}
  LCM1602a_Set_DATA8(GPIOE, data_pins, GPIOC, control_pins);
 8000aa0:	ab09      	add	r3, sp, #36	; 0x24
 8000aa2:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <main+0x26c>)
  uint16_t control_pins[3] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_4};
 8000aa4:	9009      	str	r0, [sp, #36]	; 0x24
 8000aa6:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  LCM1602a_Set_DATA8(GPIOE, data_pins, GPIOC, control_pins);
 8000aaa:	482d      	ldr	r0, [pc, #180]	; (8000b60 <main+0x264>)
 8000aac:	4671      	mov	r1, lr
 8000aae:	f004 fbb7 	bl	8005220 <LCM1602a_Set_DATA8>
  MX_FATFS_Init();
 8000ab2:	f008 fb23 	bl	80090fc <MX_FATFS_Init>
  hadc1.Instance = ADC1;
 8000ab6:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <main+0x27c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <main+0x280>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000ac2:	9412      	str	r4, [sp, #72]	; 0x48
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ac8:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aca:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ad4:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad6:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	616e      	str	r6, [r5, #20]
  hadc1.Instance = ADC1;
 8000adc:	602a      	str	r2, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ade:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae0:	f004 fd2c 	bl	800553c <HAL_ADC_Init>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d136      	bne.n	8000b56 <main+0x25a>
 8000ae8:	4603      	mov	r3, r0
  sConfig.Channel = ADC_CHANNEL_3;
 8000aea:	2203      	movs	r2, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	a90f      	add	r1, sp, #60	; 0x3c
 8000aee:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af0:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_3;
 8000af4:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	f004 fea5 	bl	8005844 <HAL_ADC_ConfigChannel>
 8000afa:	4604      	mov	r4, r0
 8000afc:	bb58      	cbnz	r0, 8000b56 <main+0x25a>
  LCM1602a_init(TWO_LINE_DISPLAY);
 8000afe:	4638      	mov	r0, r7
 8000b00:	f004 fc06 	bl	8005310 <LCM1602a_init>
  xTaskCreate(vMP3Playback_TaskHandler, "Task-1", 4500, NULL, 2, &xMP3TaskHandle);
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <main+0x284>)
 8000b06:	491f      	ldr	r1, [pc, #124]	; (8000b84 <main+0x288>)
 8000b08:	481f      	ldr	r0, [pc, #124]	; (8000b88 <main+0x28c>)
 8000b0a:	e9cd 7300 	strd	r7, r3, [sp]
 8000b0e:	f241 1294 	movw	r2, #4500	; 0x1194
 8000b12:	4623      	mov	r3, r4
 8000b14:	f00d fb24 	bl	800e160 <xTaskCreate>
  xTaskCreate(vUpdateLCD_TaskHandler, "Task-2", 500, NULL, 2, &xUpdateLCDTaskHandle);
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <main+0x290>)
 8000b1a:	491d      	ldr	r1, [pc, #116]	; (8000b90 <main+0x294>)
 8000b1c:	481d      	ldr	r0, [pc, #116]	; (8000b94 <main+0x298>)
 8000b1e:	e9cd 7300 	strd	r7, r3, [sp]
 8000b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b26:	4623      	mov	r3, r4
 8000b28:	f00d fb1a 	bl	800e160 <xTaskCreate>
  xTaskCreate(vReadADC_TaskHandler, "Task-3", configMINIMAL_STACK_SIZE, NULL, 2, &xADCTaskHandle);
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <main+0x29c>)
 8000b2e:	491b      	ldr	r1, [pc, #108]	; (8000b9c <main+0x2a0>)
 8000b30:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <main+0x2a4>)
 8000b32:	e9cd 7300 	strd	r7, r3, [sp]
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	4623      	mov	r3, r4
 8000b3a:	f00d fb11 	bl	800e160 <xTaskCreate>
  xTaskCreate(vReadInputButtons_TaskHandler, "Task-4", 250, NULL, 2, &xButtonsTaskHandle);
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <main+0x2a8>)
 8000b40:	9201      	str	r2, [sp, #4]
 8000b42:	4623      	mov	r3, r4
 8000b44:	22fa      	movs	r2, #250	; 0xfa
 8000b46:	4918      	ldr	r1, [pc, #96]	; (8000ba8 <main+0x2ac>)
 8000b48:	9700      	str	r7, [sp, #0]
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <main+0x2b0>)
 8000b4c:	f00d fb08 	bl	800e160 <xTaskCreate>
  vTaskStartScheduler();
 8000b50:	f00d fb3a 	bl	800e1c8 <vTaskStartScheduler>
 8000b54:	e7fe      	b.n	8000b54 <main+0x258>
    Error_Handler();
 8000b56:	f7ff fe6d 	bl	8000834 <Error_Handler>
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	2000d6b0 	.word	0x2000d6b0
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	0f000001 	.word	0x0f000001
 8000b80:	2000037c 	.word	0x2000037c
 8000b84:	0800fb0c 	.word	0x0800fb0c
 8000b88:	08000761 	.word	0x08000761
 8000b8c:	20000380 	.word	0x20000380
 8000b90:	0800fb14 	.word	0x0800fb14
 8000b94:	080005bd 	.word	0x080005bd
 8000b98:	20000374 	.word	0x20000374
 8000b9c:	0800fb1c 	.word	0x0800fb1c
 8000ba0:	080005e1 	.word	0x080005e1
 8000ba4:	20000378 	.word	0x20000378
 8000ba8:	0800fb24 	.word	0x0800fb24
 8000bac:	08000639 	.word	0x08000639
 8000bb0:	10120000 	.word	0x10120000
 8000bb4:	0800fac8 	.word	0x0800fac8

08000bb8 <get_bits>:
static uint32_t get_bits(bs_t *bs, int n)
{
    uint32_t next, cache = 0, s = bs->pos & 7;
    int shl = n + s;
    const uint8_t *p = bs->buf + (bs->pos >> 3);
    if ((bs->pos += n) > bs->limit)
 8000bb8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{
 8000bbc:	b470      	push	{r4, r5, r6}
    if ((bs->pos += n) > bs->limit)
 8000bbe:	185d      	adds	r5, r3, r1
 8000bc0:	4295      	cmp	r5, r2
    const uint8_t *p = bs->buf + (bs->pos >> 3);
 8000bc2:	6804      	ldr	r4, [r0, #0]
    if ((bs->pos += n) > bs->limit)
 8000bc4:	6045      	str	r5, [r0, #4]
 8000bc6:	dc24      	bgt.n	8000c12 <get_bits+0x5a>
    const uint8_t *p = bs->buf + (bs->pos >> 3);
 8000bc8:	10dd      	asrs	r5, r3, #3
    uint32_t next, cache = 0, s = bs->pos & 7;
 8000bca:	f003 0207 	and.w	r2, r3, #7
    int shl = n + s;
 8000bce:	4411      	add	r1, r2
        return 0;
    next = *p++ & (255 >> s);
 8000bd0:	5d63      	ldrb	r3, [r4, r5]
 8000bd2:	20ff      	movs	r0, #255	; 0xff
    while ((shl -= 8) > 0)
 8000bd4:	f1a1 0608 	sub.w	r6, r1, #8
    next = *p++ & (255 >> s);
 8000bd8:	fa40 f202 	asr.w	r2, r0, r2
    while ((shl -= 8) > 0)
 8000bdc:	2e00      	cmp	r6, #0
    const uint8_t *p = bs->buf + (bs->pos >> 3);
 8000bde:	442c      	add	r4, r5
    next = *p++ & (255 >> s);
 8000be0:	ea03 0302 	and.w	r3, r3, r2
    int shl = n + s;
 8000be4:	460d      	mov	r5, r1
    while ((shl -= 8) > 0)
 8000be6:	dd17      	ble.n	8000c18 <get_bits+0x60>
 8000be8:	4632      	mov	r2, r6
    uint32_t next, cache = 0, s = bs->pos & 7;
 8000bea:	2000      	movs	r0, #0
    {
        cache |= next << shl;
 8000bec:	4093      	lsls	r3, r2
    while ((shl -= 8) > 0)
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	2a00      	cmp	r2, #0
        cache |= next << shl;
 8000bf2:	ea40 0003 	orr.w	r0, r0, r3
        next = *p++;
 8000bf6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    while ((shl -= 8) > 0)
 8000bfa:	dcf7      	bgt.n	8000bec <get_bits+0x34>
 8000bfc:	f1a1 0209 	sub.w	r2, r1, #9
 8000c00:	f022 0207 	bic.w	r2, r2, #7
 8000c04:	1ab5      	subs	r5, r6, r2
    }
    return cache | (next >> -shl);
 8000c06:	f1c5 0208 	rsb	r2, r5, #8
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	4318      	orrs	r0, r3
}
 8000c0e:	bc70      	pop	{r4, r5, r6}
 8000c10:	4770      	bx	lr
        return 0;
 8000c12:	2000      	movs	r0, #0
}
 8000c14:	bc70      	pop	{r4, r5, r6}
 8000c16:	4770      	bx	lr
    uint32_t next, cache = 0, s = bs->pos & 7;
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e7f4      	b.n	8000c06 <get_bits+0x4e>

08000c1c <hdr_valid>:
static int hdr_valid(const uint8_t *h)
{
    return h[0] == 0xff &&
        ((h[1] & 0xF0) == 0xf0 || (h[1] & 0xFE) == 0xe2) &&
        (HDR_GET_LAYER(h) != 0) &&
        (HDR_GET_BITRATE(h) != 15) &&
 8000c1c:	7803      	ldrb	r3, [r0, #0]
 8000c1e:	2bff      	cmp	r3, #255	; 0xff
 8000c20:	d001      	beq.n	8000c26 <hdr_valid+0xa>
 8000c22:	2000      	movs	r0, #0
        (HDR_GET_SAMPLE_RATE(h) != 3);
}
 8000c24:	4770      	bx	lr
        ((h[1] & 0xF0) == 0xf0 || (h[1] & 0xFE) == 0xe2) &&
 8000c26:	7843      	ldrb	r3, [r0, #1]
    return h[0] == 0xff &&
 8000c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c2c:	2af0      	cmp	r2, #240	; 0xf0
 8000c2e:	d003      	beq.n	8000c38 <hdr_valid+0x1c>
        ((h[1] & 0xF0) == 0xf0 || (h[1] & 0xFE) == 0xe2) &&
 8000c30:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8000c34:	2ae2      	cmp	r2, #226	; 0xe2
 8000c36:	d1f4      	bne.n	8000c22 <hdr_valid+0x6>
 8000c38:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f0      	beq.n	8000c22 <hdr_valid+0x6>
        (HDR_GET_BITRATE(h) != 15) &&
 8000c40:	7880      	ldrb	r0, [r0, #2]
        (HDR_GET_LAYER(h) != 0) &&
 8000c42:	0903      	lsrs	r3, r0, #4
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d0ec      	beq.n	8000c22 <hdr_valid+0x6>
        (HDR_GET_BITRATE(h) != 15) &&
 8000c48:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8000c4c:	3803      	subs	r0, #3
 8000c4e:	bf18      	it	ne
 8000c50:	2001      	movne	r0, #1
 8000c52:	4770      	bx	lr

08000c54 <hdr_compare>:

static int hdr_compare(const uint8_t *h1, const uint8_t *h2)
{
 8000c54:	b510      	push	{r4, lr}
 8000c56:	4604      	mov	r4, r0
    return hdr_valid(h2) &&
 8000c58:	4608      	mov	r0, r1
 8000c5a:	f7ff ffdf 	bl	8000c1c <hdr_valid>
        ((h1[1] ^ h2[1]) & 0xFE) == 0 &&
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000c5e:	b1c8      	cbz	r0, 8000c94 <hdr_compare+0x40>
        ((h1[1] ^ h2[1]) & 0xFE) == 0 &&
 8000c60:	7860      	ldrb	r0, [r4, #1]
 8000c62:	784b      	ldrb	r3, [r1, #1]
 8000c64:	4058      	eors	r0, r3
    return hdr_valid(h2) &&
 8000c66:	f010 00fe 	ands.w	r0, r0, #254	; 0xfe
 8000c6a:	d114      	bne.n	8000c96 <hdr_compare+0x42>
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000c6c:	78a2      	ldrb	r2, [r4, #2]
 8000c6e:	788b      	ldrb	r3, [r1, #2]
 8000c70:	ea82 0103 	eor.w	r1, r2, r3
        ((h1[1] ^ h2[1]) & 0xFE) == 0 &&
 8000c74:	f011 0f0c 	tst.w	r1, #12
 8000c78:	d10c      	bne.n	8000c94 <hdr_compare+0x40>
        !(HDR_IS_FREE_FORMAT(h1) ^ HDR_IS_FREE_FORMAT(h2));
 8000c7a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000c7e:	bf14      	ite	ne
 8000c80:	2001      	movne	r0, #1
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f013 0ff0 	tst.w	r3, #240	; 0xf0
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	1ac0      	subs	r0, r0, r3
 8000c90:	bf18      	it	ne
 8000c92:	2001      	movne	r0, #1
}
 8000c94:	bd10      	pop	{r4, pc}
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000c96:	2000      	movs	r0, #0
}
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	bf00      	nop

08000c9c <hdr_frame_bytes>:
{
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
}

static int hdr_frame_bytes(const uint8_t *h, int free_format_size)
{
 8000c9c:	b4f0      	push	{r4, r5, r6, r7}
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8000c9e:	7843      	ldrb	r3, [r0, #1]
 8000ca0:	f003 0606 	and.w	r6, r3, #6
 8000ca4:	2e06      	cmp	r6, #6
 8000ca6:	d03b      	beq.n	8000d20 <hdr_frame_bytes+0x84>
 8000ca8:	f003 020e 	and.w	r2, r3, #14
 8000cac:	2a02      	cmp	r2, #2
 8000cae:	bf0c      	ite	eq
 8000cb0:	f44f 7410 	moveq.w	r4, #576	; 0x240
 8000cb4:	f44f 6490 	movne.w	r4, #1152	; 0x480
 8000cb8:	f003 0708 	and.w	r7, r3, #8
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8000cbc:	f3c3 0241 	ubfx	r2, r3, #1, #2
 8000cc0:	2f00      	cmp	r7, #0
 8000cc2:	7880      	ldrb	r0, [r0, #2]
 8000cc4:	4d18      	ldr	r5, [pc, #96]	; (8000d28 <hdr_frame_bytes+0x8c>)
 8000cc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8000cca:	bf14      	ite	ne
 8000ccc:	272d      	movne	r7, #45	; 0x2d
 8000cce:	2700      	moveq	r7, #0
 8000cd0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000cd4:	eb05 1510 	add.w	r5, r5, r0, lsr #4
 8000cd8:	443a      	add	r2, r7
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000cda:	f3c0 0081 	ubfx	r0, r0, #2, #2
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8000cde:	5caf      	ldrb	r7, [r5, r2]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <hdr_frame_bytes+0x90>)
 8000ce2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8000ce6:	ea4f 0247 	mov.w	r2, r7, lsl #1
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000cea:	bf0c      	ite	eq
 8000cec:	2001      	moveq	r0, #1
 8000cee:	2000      	movne	r0, #0
    int frame_bytes = hdr_frame_samples(h)*hdr_bitrate_kbps(h)*125/hdr_sample_rate_hz(h);
 8000cf0:	ebc2 1787 	rsb	r7, r2, r7, lsl #6
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000cf4:	f083 0310 	eor.w	r3, r3, #16
 8000cf8:	40c5      	lsrs	r5, r0
    if (HDR_IS_LAYER_1(h))
 8000cfa:	2e06      	cmp	r6, #6
    int frame_bytes = hdr_frame_samples(h)*hdr_bitrate_kbps(h)*125/hdr_sample_rate_hz(h);
 8000cfc:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000d00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d04:	fa25 f303 	lsr.w	r3, r5, r3
    int frame_bytes = hdr_frame_samples(h)*hdr_bitrate_kbps(h)*125/hdr_sample_rate_hz(h);
 8000d08:	fb04 f202 	mul.w	r2, r4, r2
 8000d0c:	fbb2 f0f3 	udiv	r0, r2, r3
    {
        frame_bytes &= ~3; /* slot align */
 8000d10:	bf08      	it	eq
 8000d12:	f020 0003 	biceq.w	r0, r0, #3
    }
    return frame_bytes ? frame_bytes : free_format_size;
}
 8000d16:	2800      	cmp	r0, #0
 8000d18:	bf08      	it	eq
 8000d1a:	4608      	moveq	r0, r1
 8000d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1e:	4770      	bx	lr
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8000d20:	f44f 74c0 	mov.w	r4, #384	; 0x180
 8000d24:	e7c8      	b.n	8000cb8 <hdr_frame_bytes+0x1c>
 8000d26:	bf00      	nop
 8000d28:	0801085c 	.word	0x0801085c
 8000d2c:	0800fcdc 	.word	0x0800fcdc

08000d30 <L3_read_side_info>:
    }
}
#endif /* MINIMP3_ONLY_MP3 */

static int L3_read_side_info(bs_t *bs, L3_gr_info_t *gr, const uint8_t *hdr)
{
 8000d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { 4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,0 }
    };

    unsigned tables, scfsi = 0;
    int main_data_begin, part_23_sum = 0;
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d34:	7855      	ldrb	r5, [r2, #1]
 8000d36:	f892 9002 	ldrb.w	r9, [r2, #2]
    int gr_count = HDR_IS_MONO(hdr) ? 1 : 2;
 8000d3a:	78d3      	ldrb	r3, [r2, #3]
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d3c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
{
 8000d40:	4616      	mov	r6, r2
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d42:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000d46:	4417      	add	r7, r2
 8000d48:	f3c9 0981 	ubfx	r9, r9, #2, #2
 8000d4c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8000d50:	eb17 0709 	adds.w	r7, r7, r9
    int gr_count = HDR_IS_MONO(hdr) ? 1 : 2;
 8000d54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d58:	bf14      	ite	ne
 8000d5a:	f04f 0901 	movne.w	r9, #1
 8000d5e:	f04f 0900 	moveq.w	r9, #0
    int gr_count = HDR_IS_MONO(hdr) ? 1 : 2;
 8000d62:	2bc0      	cmp	r3, #192	; 0xc0
 8000d64:	bf14      	ite	ne
 8000d66:	f04f 0a02 	movne.w	sl, #2
 8000d6a:	f04f 0a01 	moveq.w	sl, #1

    if (HDR_TEST_MPEG1(hdr))
 8000d6e:	f015 0508 	ands.w	r5, r5, #8
{
 8000d72:	b085      	sub	sp, #20
 8000d74:	468b      	mov	fp, r1
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d76:	eba7 0709 	sub.w	r7, r7, r9
{
 8000d7a:	4604      	mov	r4, r0
    if (HDR_TEST_MPEG1(hdr))
 8000d7c:	f000 8112 	beq.w	8000fa4 <L3_read_side_info+0x274>
    {
        gr_count *= 2;
        main_data_begin = get_bits(bs, 9);
 8000d80:	2109      	movs	r1, #9
 8000d82:	f7ff ff19 	bl	8000bb8 <get_bits>
        gr_count *= 2;
 8000d86:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        main_data_begin = get_bits(bs, 9);
 8000d8a:	9001      	str	r0, [sp, #4]
        scfsi = get_bits(bs, 7 + gr_count);
 8000d8c:	f10a 0107 	add.w	r1, sl, #7
 8000d90:	4620      	mov	r0, r4
 8000d92:	f7ff ff11 	bl	8000bb8 <get_bits>
 8000d96:	4605      	mov	r5, r0
 8000d98:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
                    gr->sfbtab = g_scf_short[sr_idx];
                    gr->n_long_sfb = 0;
                    gr->n_short_sfb = 39;
                } else
                {
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000d9c:	4985      	ldr	r1, [pc, #532]	; (8000fb4 <L3_read_side_info+0x284>)
                    gr->sfbtab = g_scf_short[sr_idx];
 8000d9e:	4a86      	ldr	r2, [pc, #536]	; (8000fb8 <L3_read_side_info+0x288>)
        gr->sfbtab = g_scf_long[sr_idx];
 8000da0:	4886      	ldr	r0, [pc, #536]	; (8000fbc <L3_read_side_info+0x28c>)
 8000da2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000da6:	eb07 0947 	add.w	r9, r7, r7, lsl #1
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000daa:	eb01 030c 	add.w	r3, r1, ip
        gr->sfbtab = g_scf_long[sr_idx];
 8000dae:	ebc7 07c9 	rsb	r7, r7, r9, lsl #3
 8000db2:	f10b 0b1c 	add.w	fp, fp, #28
 8000db6:	ebca 08ca 	rsb	r8, sl, sl, lsl #3
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000dba:	9303      	str	r3, [sp, #12]
                    gr->sfbtab = g_scf_short[sr_idx];
 8000dbc:	eb02 030c 	add.w	r3, r2, ip
        gr->sfbtab = g_scf_long[sr_idx];
 8000dc0:	eb00 0907 	add.w	r9, r0, r7
 8000dc4:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
                    gr->sfbtab = g_scf_short[sr_idx];
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2700      	movs	r7, #0
 8000dcc:	e062      	b.n	8000e94 <L3_read_side_info+0x164>
            gr->block_type = (uint8_t)get_bits(bs, 2);
 8000dce:	2102      	movs	r1, #2
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff fef1 	bl	8000bb8 <get_bits>
 8000dd6:	b2c0      	uxtb	r0, r0
 8000dd8:	f80b 0c11 	strb.w	r0, [fp, #-17]
            if (!gr->block_type)
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	f000 80da 	beq.w	8000f96 <L3_read_side_info+0x266>
            gr->mixed_block_flag = (uint8_t)get_bits(bs, 1);
 8000de2:	2101      	movs	r1, #1
 8000de4:	4620      	mov	r0, r4
 8000de6:	f7ff fee7 	bl	8000bb8 <get_bits>
            if (gr->block_type == SHORT_BLOCK_TYPE)
 8000dea:	f81b 3c11 	ldrb.w	r3, [fp, #-17]
            gr->region_count[0] = 7;
 8000dee:	2207      	movs	r2, #7
            gr->mixed_block_flag = (uint8_t)get_bits(bs, 1);
 8000df0:	b2c0      	uxtb	r0, r0
            gr->region_count[0] = 7;
 8000df2:	f80b 2c0a 	strb.w	r2, [fp, #-10]
            if (gr->block_type == SHORT_BLOCK_TYPE)
 8000df6:	2b02      	cmp	r3, #2
            gr->region_count[1] = 255;
 8000df8:	f04f 02ff 	mov.w	r2, #255	; 0xff
            gr->mixed_block_flag = (uint8_t)get_bits(bs, 1);
 8000dfc:	f80b 0c10 	strb.w	r0, [fp, #-16]
            gr->region_count[1] = 255;
 8000e00:	f80b 2c09 	strb.w	r2, [fp, #-9]
            if (gr->block_type == SHORT_BLOCK_TYPE)
 8000e04:	f000 809f 	beq.w	8000f46 <L3_read_side_info+0x216>
                    gr->n_long_sfb = HDR_TEST_MPEG1(hdr) ? 8 : 6;
                    gr->n_short_sfb = 30;
                }
            }
            tables = get_bits(bs, 10);
 8000e08:	210a      	movs	r1, #10
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff fed4 	bl	8000bb8 <get_bits>
            tables <<= 5;
            gr->subblock_gain[0] = (uint8_t)get_bits(bs, 3);
 8000e10:	2103      	movs	r1, #3
            tables <<= 5;
 8000e12:	ea4f 1a40 	mov.w	sl, r0, lsl #5
            gr->subblock_gain[0] = (uint8_t)get_bits(bs, 3);
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff fece 	bl	8000bb8 <get_bits>
            gr->subblock_gain[1] = (uint8_t)get_bits(bs, 3);
 8000e1c:	2103      	movs	r1, #3
            gr->subblock_gain[0] = (uint8_t)get_bits(bs, 3);
 8000e1e:	f80b 0c07 	strb.w	r0, [fp, #-7]
            gr->subblock_gain[1] = (uint8_t)get_bits(bs, 3);
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff fec8 	bl	8000bb8 <get_bits>
            gr->subblock_gain[2] = (uint8_t)get_bits(bs, 3);
 8000e28:	2103      	movs	r1, #3
            gr->subblock_gain[1] = (uint8_t)get_bits(bs, 3);
 8000e2a:	f80b 0c06 	strb.w	r0, [fp, #-6]
            gr->subblock_gain[2] = (uint8_t)get_bits(bs, 3);
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f7ff fec2 	bl	8000bb8 <get_bits>
 8000e34:	f80b 0c05 	strb.w	r0, [fp, #-5]
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
            gr->region_count[2] = 255;
        }
        gr->table_select[0] = (uint8_t)(tables >> 10);
        gr->table_select[1] = (uint8_t)((tables >> 5) & 31);
 8000e38:	f3ca 1344 	ubfx	r3, sl, #5, #5
        gr->table_select[0] = (uint8_t)(tables >> 10);
 8000e3c:	ea4f 229a 	mov.w	r2, sl, lsr #10
        gr->table_select[2] = (uint8_t)((tables) & 31);
 8000e40:	f00a 0a1f 	and.w	sl, sl, #31
        gr->table_select[0] = (uint8_t)(tables >> 10);
 8000e44:	f80b 2c0d 	strb.w	r2, [fp, #-13]
        gr->table_select[1] = (uint8_t)((tables >> 5) & 31);
 8000e48:	f80b 3c0c 	strb.w	r3, [fp, #-12]
        gr->table_select[2] = (uint8_t)((tables) & 31);
 8000e4c:	f80b ac0b 	strb.w	sl, [fp, #-11]
        gr->preflag = HDR_TEST_MPEG1(hdr) ? get_bits(bs, 1) : (gr->scalefac_compress >= 500);
 8000e50:	7873      	ldrb	r3, [r6, #1]
 8000e52:	071b      	lsls	r3, r3, #28
 8000e54:	d471      	bmi.n	8000f3a <L3_read_side_info+0x20a>
 8000e56:	f83b 0c14 	ldrh.w	r0, [fp, #-20]
 8000e5a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000e5e:	bf34      	ite	cc
 8000e60:	2000      	movcc	r0, #0
 8000e62:	2001      	movcs	r0, #1
 8000e64:	f80b 0c04 	strb.w	r0, [fp, #-4]
        gr->scalefac_scale = (uint8_t)get_bits(bs, 1);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff fea4 	bl	8000bb8 <get_bits>
        gr->count1_table = (uint8_t)get_bits(bs, 1);
 8000e70:	2101      	movs	r1, #1
        gr->scalefac_scale = (uint8_t)get_bits(bs, 1);
 8000e72:	f80b 0c03 	strb.w	r0, [fp, #-3]
        gr->count1_table = (uint8_t)get_bits(bs, 1);
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff fe9e 	bl	8000bb8 <get_bits>
        gr->scfsi = (uint8_t)((scfsi >> 12) & 15);
 8000e7c:	f3c5 3303 	ubfx	r3, r5, #12, #4
        gr->count1_table = (uint8_t)get_bits(bs, 1);
 8000e80:	f80b 0c02 	strb.w	r0, [fp, #-2]
        gr->scfsi = (uint8_t)((scfsi >> 12) & 15);
 8000e84:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8000e88:	f10b 0b1c 	add.w	fp, fp, #28
        scfsi <<= 4;
        gr++;
    } while(--gr_count);
 8000e8c:	45c3      	cmp	fp, r8
        scfsi <<= 4;
 8000e8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    } while(--gr_count);
 8000e92:	d078      	beq.n	8000f86 <L3_read_side_info+0x256>
        if (HDR_IS_MONO(hdr))
 8000e94:	78f3      	ldrb	r3, [r6, #3]
 8000e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000e9a:	2bc0      	cmp	r3, #192	; 0xc0
        gr->part_23_length = (uint16_t)get_bits(bs, 12);
 8000e9c:	f04f 010c 	mov.w	r1, #12
 8000ea0:	4620      	mov	r0, r4
            scfsi <<= 4;
 8000ea2:	bf08      	it	eq
 8000ea4:	012d      	lsleq	r5, r5, #4
        gr->part_23_length = (uint16_t)get_bits(bs, 12);
 8000ea6:	f7ff fe87 	bl	8000bb8 <get_bits>
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000eaa:	2109      	movs	r1, #9
        gr->part_23_length = (uint16_t)get_bits(bs, 12);
 8000eac:	4603      	mov	r3, r0
 8000eae:	f82b 0c18 	strh.w	r0, [fp, #-24]
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000eb2:	4620      	mov	r0, r4
        part_23_sum += gr->part_23_length;
 8000eb4:	fa17 f783 	uxtah	r7, r7, r3
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000eb8:	f7ff fe7e 	bl	8000bb8 <get_bits>
 8000ebc:	b280      	uxth	r0, r0
        if (gr->big_values > 288)
 8000ebe:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000ec2:	f82b 0c16 	strh.w	r0, [fp, #-22]
        if (gr->big_values > 288)
 8000ec6:	d866      	bhi.n	8000f96 <L3_read_side_info+0x266>
        gr->global_gain = (uint8_t)get_bits(bs, 8);
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fe74 	bl	8000bb8 <get_bits>
 8000ed0:	f80b 0c12 	strb.w	r0, [fp, #-18]
        gr->scalefac_compress = (uint16_t)get_bits(bs, HDR_TEST_MPEG1(hdr) ? 4 : 9);
 8000ed4:	7873      	ldrb	r3, [r6, #1]
 8000ed6:	f013 0f08 	tst.w	r3, #8
 8000eda:	bf0c      	ite	eq
 8000edc:	2109      	moveq	r1, #9
 8000ede:	2104      	movne	r1, #4
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff fe69 	bl	8000bb8 <get_bits>
        gr->n_long_sfb  = 22;
 8000ee6:	2216      	movs	r2, #22
        gr->n_short_sfb = 0;
 8000ee8:	2300      	movs	r3, #0
        gr->scalefac_compress = (uint16_t)get_bits(bs, HDR_TEST_MPEG1(hdr) ? 4 : 9);
 8000eea:	f82b 0c14 	strh.w	r0, [fp, #-20]
        gr->sfbtab = g_scf_long[sr_idx];
 8000eee:	f84b 9c1c 	str.w	r9, [fp, #-28]
        gr->n_long_sfb  = 22;
 8000ef2:	f80b 2c0f 	strb.w	r2, [fp, #-15]
        gr->n_short_sfb = 0;
 8000ef6:	f80b 3c0e 	strb.w	r3, [fp, #-14]
        if (get_bits(bs, 1))
 8000efa:	2101      	movs	r1, #1
 8000efc:	4620      	mov	r0, r4
 8000efe:	f7ff fe5b 	bl	8000bb8 <get_bits>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	f47f af63 	bne.w	8000dce <L3_read_side_info+0x9e>
            gr->block_type = 0;
 8000f08:	f80b 0c11 	strb.w	r0, [fp, #-17]
            gr->mixed_block_flag = 0;
 8000f0c:	f80b 0c10 	strb.w	r0, [fp, #-16]
            tables = get_bits(bs, 15);
 8000f10:	210f      	movs	r1, #15
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff fe50 	bl	8000bb8 <get_bits>
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
 8000f18:	2104      	movs	r1, #4
            tables = get_bits(bs, 15);
 8000f1a:	4682      	mov	sl, r0
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fe4b 	bl	8000bb8 <get_bits>
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
 8000f22:	2103      	movs	r1, #3
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
 8000f24:	f80b 0c0a 	strb.w	r0, [fp, #-10]
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff fe45 	bl	8000bb8 <get_bits>
            gr->region_count[2] = 255;
 8000f2e:	23ff      	movs	r3, #255	; 0xff
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
 8000f30:	f80b 0c09 	strb.w	r0, [fp, #-9]
            gr->region_count[2] = 255;
 8000f34:	f80b 3c08 	strb.w	r3, [fp, #-8]
 8000f38:	e77e      	b.n	8000e38 <L3_read_side_info+0x108>
        gr->preflag = HDR_TEST_MPEG1(hdr) ? get_bits(bs, 1) : (gr->scalefac_compress >= 500);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff fe3b 	bl	8000bb8 <get_bits>
 8000f42:	b2c0      	uxtb	r0, r0
 8000f44:	e78e      	b.n	8000e64 <L3_read_side_info+0x134>
                scfsi &= 0x0F0F;
 8000f46:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000f4a:	401d      	ands	r5, r3
                if (!gr->mixed_block_flag)
 8000f4c:	b960      	cbnz	r0, 8000f68 <L3_read_side_info+0x238>
                    gr->region_count[0] = 8;
 8000f4e:	f04f 0208 	mov.w	r2, #8
                    gr->n_short_sfb = 39;
 8000f52:	2327      	movs	r3, #39	; 0x27
                    gr->region_count[0] = 8;
 8000f54:	f80b 2c0a 	strb.w	r2, [fp, #-10]
                    gr->sfbtab = g_scf_short[sr_idx];
 8000f58:	9a02      	ldr	r2, [sp, #8]
 8000f5a:	f84b 2c1c 	str.w	r2, [fp, #-28]
                    gr->n_long_sfb = 0;
 8000f5e:	f80b 0c0f 	strb.w	r0, [fp, #-15]
                    gr->n_short_sfb = 39;
 8000f62:	f80b 3c0e 	strb.w	r3, [fp, #-14]
 8000f66:	e74f      	b.n	8000e08 <L3_read_side_info+0xd8>
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000f68:	9b03      	ldr	r3, [sp, #12]
 8000f6a:	f84b 3c1c 	str.w	r3, [fp, #-28]
                    gr->n_long_sfb = HDR_TEST_MPEG1(hdr) ? 8 : 6;
 8000f6e:	7873      	ldrb	r3, [r6, #1]
 8000f70:	f013 0f08 	tst.w	r3, #8
 8000f74:	bf0c      	ite	eq
 8000f76:	2206      	moveq	r2, #6
 8000f78:	2208      	movne	r2, #8
                    gr->n_short_sfb = 30;
 8000f7a:	231e      	movs	r3, #30
                    gr->n_long_sfb = HDR_TEST_MPEG1(hdr) ? 8 : 6;
 8000f7c:	f80b 2c0f 	strb.w	r2, [fp, #-15]
                    gr->n_short_sfb = 30;
 8000f80:	f80b 3c0e 	strb.w	r3, [fp, #-14]
 8000f84:	e740      	b.n	8000e08 <L3_read_side_info+0xd8>

    if (part_23_sum + bs->pos > bs->limit + main_data_begin*8)
 8000f86:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000f8a:	4417      	add	r7, r2
 8000f8c:	9a01      	ldr	r2, [sp, #4]
 8000f8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f92:	429f      	cmp	r7, r3
 8000f94:	dd02      	ble.n	8000f9c <L3_read_side_info+0x26c>
            return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	9301      	str	r3, [sp, #4]
    {
        return -1;
    }

    return main_data_begin;
}
 8000f9c:	9801      	ldr	r0, [sp, #4]
 8000f9e:	b005      	add	sp, #20
 8000fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        main_data_begin = get_bits(bs, 8 + gr_count) >> gr_count;
 8000fa4:	f10a 0108 	add.w	r1, sl, #8
 8000fa8:	f7ff fe06 	bl	8000bb8 <get_bits>
 8000fac:	fa20 f30a 	lsr.w	r3, r0, sl
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	e6f1      	b.n	8000d98 <L3_read_side_info+0x68>
 8000fb4:	080100f4 	.word	0x080100f4
 8000fb8:	08010288 	.word	0x08010288
 8000fbc:	0801003c 	.word	0x0801003c

08000fc0 <L3_dct3_9>:
    y[4] = s4 + s0;
    s8 = t0 - t2 + s6;
    s0 = t0 - t4 + t2;
    s4 = t0 + t4 - s6;

    s1 = y[1]; s3 = y[3]; s5 = y[5]; s7 = y[7];
 8000fc0:	ed90 6a01 	vldr	s12, [r0, #4]
 8000fc4:	edd0 6a05 	vldr	s13, [r0, #20]
 8000fc8:	ed90 3a07 	vldr	s6, [r0, #28]
    s0 = y[0]; s2 = y[2]; s4 = y[4]; s6 = y[6]; s8 = y[8];
 8000fcc:	ed90 5a02 	vldr	s10, [r0, #8]
 8000fd0:	edd0 2a08 	vldr	s5, [r0, #32]
 8000fd4:	ed90 1a00 	vldr	s2, [r0]

    s3 *= 0.86602540f;
    t0 = (s5 + s1)*0.98480775f;
 8000fd8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80010f0 <L3_dct3_9+0x130>
    s0 = y[0]; s2 = y[2]; s4 = y[4]; s6 = y[6]; s8 = y[8];
 8000fdc:	ed90 2a06 	vldr	s4, [r0, #24]
 8000fe0:	edd0 4a04 	vldr	s9, [r0, #16]
    t4 = (s5 - s7)*0.34202014f;
 8000fe4:	eddf 0a43 	vldr	s1, [pc, #268]	; 80010f4 <L3_dct3_9+0x134>
    t2 = (s1 + s7)*0.64278761f;
    s1 = (s1 - s5 - s7)*0.86602540f;

    s5 = t0 - s3 - t2;
 8000fe8:	eddf 1a43 	vldr	s3, [pc, #268]	; 80010f8 <L3_dct3_9+0x138>
    s1 = y[1]; s3 = y[3]; s5 = y[5]; s7 = y[7];
 8000fec:	ed90 4a03 	vldr	s8, [r0, #12]
{
 8000ff0:	ed2d 8b04 	vpush	{d8-d9}
    t0 = (s5 + s1)*0.98480775f;
 8000ff4:	ee36 8a26 	vadd.f32	s16, s12, s13
    s4 += s8 - s2;
 8000ff8:	ee72 5ac5 	vsub.f32	s11, s5, s10
    t0 = (s5 + s1)*0.98480775f;
 8000ffc:	ee28 8a07 	vmul.f32	s16, s16, s14
    t0 = s0 + s6*0.5f;
 8001000:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    t4 = (s5 - s7)*0.34202014f;
 8001004:	ee36 7ac3 	vsub.f32	s14, s13, s6
    t0 = s0 + s6*0.5f;
 8001008:	eef0 7a41 	vmov.f32	s15, s2
 800100c:	eee2 7a23 	vfma.f32	s15, s4, s7
    s4 += s8 - s2;
 8001010:	ee35 0aa4 	vadd.f32	s0, s11, s9
    t4 = (s5 - s7)*0.34202014f;
 8001014:	ee27 7a20 	vmul.f32	s14, s14, s1
    s0 -= s6;
 8001018:	ee71 5a42 	vsub.f32	s11, s2, s4
    t4 = (s4 + s2)*0.93969262f;
 800101c:	ee75 9a24 	vadd.f32	s19, s10, s9
    t2 = (s8 + s2)*0.76604444f;
 8001020:	ee35 2a22 	vadd.f32	s4, s10, s5
    s0 = t0 - t4 + t2;
 8001024:	ed9f 9a35 	vldr	s18, [pc, #212]	; 80010fc <L3_dct3_9+0x13c>
    s8 = t0 - t2 + s6;
 8001028:	eddf 8a35 	vldr	s17, [pc, #212]	; 8001100 <L3_dct3_9+0x140>
    s2 = s0 - s4*0.5f;
 800102c:	eeb0 1a65 	vmov.f32	s2, s11
    s7 = t4 - s3 - t0;
    s3 = t4 + s3 - t2;
 8001030:	eef0 0a47 	vmov.f32	s1, s14
    s5 = t0 - s3 - t2;
 8001034:	eeb1 5a44 	vneg.f32	s10, s8
    s2 = s0 - s4*0.5f;
 8001038:	eea0 1a63 	vfms.f32	s2, s0, s7
    s3 = t4 + s3 - t2;
 800103c:	eee4 0a21 	vfma.f32	s1, s8, s3
    s5 = t0 - s3 - t2;
 8001040:	eef0 3a48 	vmov.f32	s7, s16
    s6 = (s4 - s8)*0.17364818f;
 8001044:	ee34 4ae2 	vsub.f32	s8, s9, s5
    s4 = t0 + t4 - s6;
 8001048:	eef0 4a67 	vmov.f32	s9, s15
    s1 = (s1 - s5 - s7)*0.86602540f;
 800104c:	ee76 6a66 	vsub.f32	s13, s12, s13
    s7 = t4 - s3 - t0;
 8001050:	eea5 7a21 	vfma.f32	s14, s10, s3
    s5 = t0 - s3 - t2;
 8001054:	eee5 3a21 	vfma.f32	s7, s10, s3
    s4 = t0 + t4 - s6;
 8001058:	eee9 4a89 	vfma.f32	s9, s19, s18
    s0 = t0 - t4 + t2;
 800105c:	eeb0 5a67 	vmov.f32	s10, s15
    s8 = t0 - t2 + s6;
 8001060:	eee2 7a68 	vfms.f32	s15, s4, s17
    t2 = (s1 + s7)*0.64278761f;
 8001064:	ee36 6a03 	vadd.f32	s12, s12, s6
    s0 = t0 - t4 + t2;
 8001068:	eea9 5ac9 	vfms.f32	s10, s19, s18
    s1 = (s1 - s5 - s7)*0.86602540f;
 800106c:	ee76 6ac3 	vsub.f32	s13, s13, s6
    s8 = t0 - t2 + s6;
 8001070:	eddf 2a24 	vldr	s5, [pc, #144]	; 8001104 <L3_dct3_9+0x144>
    s5 = t0 - s3 - t2;
 8001074:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8001108 <L3_dct3_9+0x148>
 8001078:	eeb1 6a46 	vneg.f32	s12, s12
    s4 = t0 + t4 - s6;
 800107c:	eee4 4a62 	vfms.f32	s9, s8, s5
    s8 = t0 - t2 + s6;
 8001080:	eee4 7a22 	vfma.f32	s15, s8, s5
    s5 = t0 - s3 - t2;
 8001084:	eee6 3a03 	vfma.f32	s7, s12, s6
    s3 = t4 + s3 - t2;
 8001088:	eeb0 4a60 	vmov.f32	s8, s1
 800108c:	eea6 4a03 	vfma.f32	s8, s12, s6
    s0 = t0 - t4 + t2;
 8001090:	eea2 5a28 	vfma.f32	s10, s4, s17

    y[0] = s4 - s7;
    y[1] = s2 + s1;
 8001094:	eeb0 3a41 	vmov.f32	s6, s2
    s7 = t4 - s3 - t0;
 8001098:	ee37 7a48 	vsub.f32	s14, s14, s16
    y[1] = s2 + s1;
 800109c:	eea6 3aa1 	vfma.f32	s6, s13, s3
    y[3] = s8 + s5;
    y[5] = s8 - s5;
    y[6] = s0 + s3;
    y[7] = s2 - s1;
    y[8] = s4 + s7;
}
 80010a0:	ecbd 8b04 	vpop	{d8-d9}
    y[7] = s2 - s1;
 80010a4:	eea6 1ae1 	vfms.f32	s2, s13, s3
    s5 = t0 - s3 - t2;
 80010a8:	eeb0 6a63 	vmov.f32	s12, s7
    y[0] = s4 - s7;
 80010ac:	ee74 2ac7 	vsub.f32	s5, s9, s14
    y[2] = s0 - s3;
 80010b0:	ee75 3a44 	vsub.f32	s7, s10, s8
    y[8] = s4 + s7;
 80010b4:	ee34 7a87 	vadd.f32	s14, s9, s14
    y[4] = s4 + s0;
 80010b8:	ee75 5a80 	vadd.f32	s11, s11, s0
    y[3] = s8 + s5;
 80010bc:	ee77 4a86 	vadd.f32	s9, s15, s12
    y[6] = s0 + s3;
 80010c0:	ee35 5a04 	vadd.f32	s10, s10, s8
    y[5] = s8 - s5;
 80010c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
    y[4] = s4 + s0;
 80010c8:	edc0 5a04 	vstr	s11, [r0, #16]
    y[0] = s4 - s7;
 80010cc:	edc0 2a00 	vstr	s5, [r0]
    y[8] = s4 + s7;
 80010d0:	ed80 7a08 	vstr	s14, [r0, #32]
    y[1] = s2 + s1;
 80010d4:	ed80 3a01 	vstr	s6, [r0, #4]
    y[7] = s2 - s1;
 80010d8:	ed80 1a07 	vstr	s2, [r0, #28]
    y[2] = s0 - s3;
 80010dc:	edc0 3a02 	vstr	s7, [r0, #8]
    y[6] = s0 + s3;
 80010e0:	ed80 5a06 	vstr	s10, [r0, #24]
    y[3] = s8 + s5;
 80010e4:	edc0 4a03 	vstr	s9, [r0, #12]
    y[5] = s8 - s5;
 80010e8:	edc0 7a05 	vstr	s15, [r0, #20]
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	3f7c1c5c 	.word	0x3f7c1c5c
 80010f4:	3eaf1d44 	.word	0x3eaf1d44
 80010f8:	3f5db3d7 	.word	0x3f5db3d7
 80010fc:	3f708fb2 	.word	0x3f708fb2
 8001100:	3f441b7d 	.word	0x3f441b7d
 8001104:	3e31d0d4 	.word	0x3e31d0d4
 8001108:	3f248dbb 	.word	0x3f248dbb

0800110c <L3_imdct36>:

static void L3_imdct36(float *grbuf, float *overlap, const float *window, int nbands)
{
 800110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001110:	ed2d 8b02 	vpush	{d8}
 8001114:	b095      	sub	sp, #84	; 0x54
    int i, j;
    static const float g_twid9[18] = {
        0.73727734f,0.79335334f,0.84339145f,0.88701083f,0.92387953f,0.95371695f,0.97629601f,0.99144486f,0.99904822f,0.67559021f,0.60876143f,0.53729961f,0.46174861f,0.38268343f,0.30070580f,0.21643961f,0.13052619f,0.04361938f
    };

    for (j = 0; j < nbands; j++, grbuf += 18, overlap += 9)
 8001116:	2b00      	cmp	r3, #0
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	f340 809d 	ble.w	8001258 <L3_imdct36+0x14c>
 800111e:	f102 0324 	add.w	r3, r2, #36	; 0x24
        L3_dct3_9(si);

        si[1] = -si[1];
        si[3] = -si[3];
        si[5] = -si[5];
        si[7] = -si[7];
 8001122:	eddf 8a50 	vldr	s17, [pc, #320]	; 8001264 <L3_imdct36+0x158>
 8001126:	ed9f 8a50 	vldr	s16, [pc, #320]	; 8001268 <L3_imdct36+0x15c>
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	4683      	mov	fp, r0
    for (j = 0; j < nbands; j++, grbuf += 18, overlap += 9)
 800112e:	f04f 0a00 	mov.w	sl, #0
 8001132:	460b      	mov	r3, r1
        co[0] = -grbuf[0];
 8001134:	eddb 7a00 	vldr	s15, [fp]
        si[0] = grbuf[17];
 8001138:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 800113c:	910b      	str	r1, [sp, #44]	; 0x2c
        co[0] = -grbuf[0];
 800113e:	eef1 7a67 	vneg.f32	s15, s15
 8001142:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8001146:	f10d 0908 	add.w	r9, sp, #8
 800114a:	edcd 7a02 	vstr	s15, [sp, #8]
 800114e:	465f      	mov	r7, fp
 8001150:	f10b 0540 	add.w	r5, fp, #64	; 0x40
        si[0] = grbuf[17];
 8001154:	464c      	mov	r4, r9
 8001156:	4641      	mov	r1, r8
 8001158:	4658      	mov	r0, fp
            si[7 - 2*i] =   grbuf[4*i + 4] - grbuf[4*i + 3];
 800115a:	ed90 6a04 	vldr	s12, [r0, #16]
 800115e:	edd0 6a03 	vldr	s13, [r0, #12]
            si[8 - 2*i] =   grbuf[4*i + 1] - grbuf[4*i + 2];
 8001162:	ed90 7a01 	vldr	s14, [r0, #4]
 8001166:	edd0 7a02 	vldr	s15, [r0, #8]
            co[2 + 2*i] = -(grbuf[4*i + 3] + grbuf[4*i + 4]);
 800116a:	ee76 5a26 	vadd.f32	s11, s12, s13
            si[7 - 2*i] =   grbuf[4*i + 4] - grbuf[4*i + 3];
 800116e:	ee76 6a66 	vsub.f32	s13, s12, s13
            co[1 + 2*i] =   grbuf[4*i + 1] + grbuf[4*i + 2];
 8001172:	ee37 6a27 	vadd.f32	s12, s14, s15
            si[8 - 2*i] =   grbuf[4*i + 1] - grbuf[4*i + 2];
 8001176:	ee77 7a67 	vsub.f32	s15, s14, s15
            co[2 + 2*i] = -(grbuf[4*i + 3] + grbuf[4*i + 4]);
 800117a:	eeb1 7a65 	vneg.f32	s14, s11
 800117e:	3010      	adds	r0, #16
 8001180:	ee17 6a10 	vmov	r6, s14
        for (i = 0; i < 4; i++)
 8001184:	4285      	cmp	r5, r0
            si[7 - 2*i] =   grbuf[4*i + 4] - grbuf[4*i + 3];
 8001186:	edc1 6a07 	vstr	s13, [r1, #28]
            co[1 + 2*i] =   grbuf[4*i + 1] + grbuf[4*i + 2];
 800118a:	ed84 6a01 	vstr	s12, [r4, #4]
            si[8 - 2*i] =   grbuf[4*i + 1] - grbuf[4*i + 2];
 800118e:	edc1 7a08 	vstr	s15, [r1, #32]
            co[2 + 2*i] = -(grbuf[4*i + 3] + grbuf[4*i + 4]);
 8001192:	f844 6f08 	str.w	r6, [r4, #8]!
 8001196:	f1a1 0108 	sub.w	r1, r1, #8
        for (i = 0; i < 4; i++)
 800119a:	d1de      	bne.n	800115a <L3_imdct36+0x4e>
        L3_dct3_9(co);
 800119c:	a802      	add	r0, sp, #8
 800119e:	f7ff ff0f 	bl	8000fc0 <L3_dct3_9>
        L3_dct3_9(si);
 80011a2:	a80b      	add	r0, sp, #44	; 0x2c
 80011a4:	f7ff ff0c 	bl	8000fc0 <L3_dct3_9>
        si[1] = -si[1];
 80011a8:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
        si[3] = -si[3];
 80011ac:	eddd 5a0e 	vldr	s11, [sp, #56]	; 0x38
        si[5] = -si[5];
 80011b0:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
        si[7] = -si[7];
 80011b4:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80011b8:	4d2c      	ldr	r5, [pc, #176]	; (800126c <L3_imdct36+0x160>)
 80011ba:	9801      	ldr	r0, [sp, #4]
 80011bc:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
        si[1] = -si[1];
 80011c0:	eeb1 5a45 	vneg.f32	s10, s10
        si[3] = -si[3];
 80011c4:	eef1 5a65 	vneg.f32	s11, s11
        si[5] = -si[5];
 80011c8:	eeb1 7a47 	vneg.f32	s14, s14
        si[7] = -si[7];
 80011cc:	eef1 7a67 	vneg.f32	s15, s15
 80011d0:	eeb0 6a68 	vmov.f32	s12, s17
 80011d4:	eef0 6a48 	vmov.f32	s13, s16
        si[1] = -si[1];
 80011d8:	ed8d 5a0c 	vstr	s10, [sp, #48]	; 0x30
        si[3] = -si[3];
 80011dc:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
        si[5] = -si[5];
 80011e0:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
        si[7] = -si[7];
 80011e4:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 80011e8:	465e      	mov	r6, fp
 80011ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80011ee:	4614      	mov	r4, r2
 80011f0:	e003      	b.n	80011fa <L3_imdct36+0xee>
 80011f2:	edd5 6a09 	vldr	s13, [r5, #36]	; 0x24
 80011f6:	ecb5 6a01 	vldmia	r5!, {s12}
        }
#endif /* HAVE_SIMD */
        for (; i < 9; i++)
        {
            float ovl  = overlap[i];
            float sum  = co[i]*g_twid9[9 + i] + si[i]*g_twid9[0 + i];
 80011fa:	ecf8 7a01 	vldmia	r8!, {s15}
 80011fe:	ecb9 5a01 	vldmia	r9!, {s10}
            float ovl  = overlap[i];
 8001202:	edd3 5a00 	vldr	s11, [r3]
            overlap[i] = co[i]*g_twid9[0 + i] - si[i]*g_twid9[9 + i];
 8001206:	ee26 7ae7 	vnmul.f32	s14, s13, s15
            float sum  = co[i]*g_twid9[9 + i] + si[i]*g_twid9[0 + i];
 800120a:	ee67 7a86 	vmul.f32	s15, s15, s12
            overlap[i] = co[i]*g_twid9[0 + i] - si[i]*g_twid9[9 + i];
 800120e:	eea5 7a06 	vfma.f32	s14, s10, s12
 8001212:	4684      	mov	ip, r0
 8001214:	46a6      	mov	lr, r4
            float sum  = co[i]*g_twid9[9 + i] + si[i]*g_twid9[0 + i];
 8001216:	eee5 7a26 	vfma.f32	s15, s10, s13
            overlap[i] = co[i]*g_twid9[0 + i] - si[i]*g_twid9[9 + i];
 800121a:	eca3 7a01 	vstmia	r3!, {s14}
            grbuf[i]      = ovl*window[0 + i] - sum*window[9 + i];
 800121e:	ecb0 7a01 	vldmia	r0!, {s14}
 8001222:	ecf4 6a01 	vldmia	r4!, {s13}
 8001226:	ee27 7a67 	vnmul.f32	s14, s14, s15
        for (; i < 9; i++)
 800122a:	4299      	cmp	r1, r3
            grbuf[i]      = ovl*window[0 + i] - sum*window[9 + i];
 800122c:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8001230:	eca7 7a01 	vstmia	r7!, {s14}
            grbuf[17 - i] = ovl*window[9 + i] + sum*window[0 + i];
 8001234:	ed9e 7a00 	vldr	s14, [lr]
 8001238:	eddc 6a00 	vldr	s13, [ip]
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8001244:	ed66 7a01 	vstmdb	r6!, {s15}
        for (; i < 9; i++)
 8001248:	d1d3      	bne.n	80011f2 <L3_imdct36+0xe6>
    for (j = 0; j < nbands; j++, grbuf += 18, overlap += 9)
 800124a:	460b      	mov	r3, r1
 800124c:	9900      	ldr	r1, [sp, #0]
 800124e:	f10a 0a01 	add.w	sl, sl, #1
 8001252:	4551      	cmp	r1, sl
 8001254:	f47f af6e 	bne.w	8001134 <L3_imdct36+0x28>
        }
    }
}
 8001258:	b015      	add	sp, #84	; 0x54
 800125a:	ecbd 8b02 	vpop	{d8}
 800125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001262:	bf00      	nop
 8001264:	3f3cbe35 	.word	0x3f3cbe35
 8001268:	3f2cf37b 	.word	0x3f2cf37b
 800126c:	08010454 	.word	0x08010454

08001270 <L3_imdct12>:
{
    static const float g_twid3[6] = { 0.79335334f,0.92387953f,0.99144486f, 0.60876143f,0.38268343f,0.13052619f };
    float co[3], si[3];
    int i;

    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 8001270:	ed90 6a03 	vldr	s12, [r0, #12]
 8001274:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8001278:	ed90 4a06 	vldr	s8, [r0, #24]
 800127c:	edd0 3a0c 	vldr	s7, [r0, #48]	; 0x30
    L3_idct3(x[15], x[12] - x[9], x[6] - x[3], si);
 8001280:	edd0 7a0f 	vldr	s15, [r0, #60]	; 0x3c
    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 8001284:	ed90 1a00 	vldr	s2, [r0]
    dst[0] = a1 + m1;
 8001288:	eddf 1a37 	vldr	s3, [pc, #220]	; 8001368 <L3_imdct12+0xf8>
 800128c:	4837      	ldr	r0, [pc, #220]	; (800136c <L3_imdct12+0xfc>)
    si[1] = -si[1];
 800128e:	eddf 4a38 	vldr	s9, [pc, #224]	; 8001370 <L3_imdct12+0x100>
 8001292:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8001374 <L3_imdct12+0x104>
 8001296:	eddf 5a38 	vldr	s11, [pc, #224]	; 8001378 <L3_imdct12+0x108>
 800129a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800137c <L3_imdct12+0x10c>
    L3_idct3(x[15], x[12] - x[9], x[6] - x[3], si);
 800129e:	ee74 0a46 	vsub.f32	s1, s8, s12
    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 80012a2:	ee73 2a87 	vadd.f32	s5, s7, s14
    float a1 = x0 - x2*0.5f;
 80012a6:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80012aa:	eeb0 2a67 	vmov.f32	s4, s15
 80012ae:	eeb0 0a41 	vmov.f32	s0, s2
 80012b2:	eea0 2ac3 	vfms.f32	s4, s1, s6
{
 80012b6:	b4f0      	push	{r4, r5, r6, r7}
    float a1 = x0 - x2*0.5f;
 80012b8:	ee92 0ac3 	vfnma.f32	s0, s5, s6
{
 80012bc:	b086      	sub	sp, #24
 80012be:	f101 0418 	add.w	r4, r1, #24
    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 80012c2:	ee34 4a06 	vadd.f32	s8, s8, s12
    L3_idct3(x[15], x[12] - x[9], x[6] - x[3], si);
 80012c6:	ee73 3ac7 	vsub.f32	s7, s7, s14
    float a1 = x0 - x2*0.5f;
 80012ca:	eeb0 3a40 	vmov.f32	s6, s0
    dst[0] = a1 + m1;
 80012ce:	eeb0 7a42 	vmov.f32	s14, s4
 80012d2:	eeb0 6a40 	vmov.f32	s12, s0
 80012d6:	eea4 6a21 	vfma.f32	s12, s8, s3
 80012da:	1d03      	adds	r3, r0, #4
 80012dc:	1f07      	subs	r7, r0, #4
 80012de:	eea3 7aa1 	vfma.f32	s14, s7, s3
 80012e2:	ae01      	add	r6, sp, #4
 80012e4:	ad04      	add	r5, sp, #16
    dst[2] = a1 - m1;
 80012e6:	eea3 2ae1 	vfms.f32	s4, s7, s3
 80012ea:	eea4 3a61 	vfms.f32	s6, s8, s3
    dst[1] = x0 + x2;
 80012ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80012f2:	ee72 2ac1 	vsub.f32	s5, s5, s2
    si[1] = -si[1];
 80012f6:	eef1 7a67 	vneg.f32	s15, s15
    dst[0] = a1 + m1;
 80012fa:	ed8d 6a00 	vstr	s12, [sp]
 80012fe:	ed8d 7a03 	vstr	s14, [sp, #12]
    dst[2] = a1 - m1;
 8001302:	ed8d 2a05 	vstr	s4, [sp, #20]
    si[1] = -si[1];
 8001306:	edcd 7a04 	vstr	s15, [sp, #16]
    dst[1] = x0 + x2;
 800130a:	edcd 2a01 	vstr	s5, [sp, #4]
    dst[2] = a1 - m1;
 800130e:	ed8d 3a02 	vstr	s6, [sp, #8]

    for (i = 0; i < 3; i++)
    {
        float ovl  = overlap[i];
        float sum  = co[i]*g_twid3[3 + i] + si[i]*g_twid3[0 + i];
 8001312:	ee67 7a25 	vmul.f32	s15, s14, s11
        float ovl  = overlap[i];
 8001316:	ed92 4a00 	vldr	s8, [r2]
        float sum  = co[i]*g_twid3[3 + i] + si[i]*g_twid3[0 + i];
 800131a:	eee6 7a26 	vfma.f32	s15, s12, s13
    for (i = 0; i < 3; i++)
 800131e:	429f      	cmp	r7, r3
        overlap[i] = co[i]*g_twid3[0 + i] - si[i]*g_twid3[3 + i];
 8001320:	ee27 7a66 	vnmul.f32	s14, s14, s13
        dst[i]     = ovl*g_twid3[2 - i] - sum*g_twid3[5 - i];
 8001324:	ee64 6ae7 	vnmul.f32	s13, s9, s15
        dst[5 - i] = ovl*g_twid3[5 - i] + sum*g_twid3[2 - i];
 8001328:	ee67 7a85 	vmul.f32	s15, s15, s10
        overlap[i] = co[i]*g_twid3[0 + i] - si[i]*g_twid3[3 + i];
 800132c:	eea6 7a25 	vfma.f32	s14, s12, s11
        dst[i]     = ovl*g_twid3[2 - i] - sum*g_twid3[5 - i];
 8001330:	eee4 6a05 	vfma.f32	s13, s8, s10
        dst[5 - i] = ovl*g_twid3[5 - i] + sum*g_twid3[2 - i];
 8001334:	eee4 7a24 	vfma.f32	s15, s8, s9
        overlap[i] = co[i]*g_twid3[0 + i] - si[i]*g_twid3[3 + i];
 8001338:	eca2 7a01 	vstmia	r2!, {s14}
        dst[i]     = ovl*g_twid3[2 - i] - sum*g_twid3[5 - i];
 800133c:	ece1 6a01 	vstmia	r1!, {s13}
        dst[5 - i] = ovl*g_twid3[5 - i] + sum*g_twid3[2 - i];
 8001340:	ed64 7a01 	vstmdb	r4!, {s15}
    for (i = 0; i < 3; i++)
 8001344:	d00c      	beq.n	8001360 <L3_imdct12+0xf0>
 8001346:	ed33 5a01 	vldmdb	r3!, {s10}
 800134a:	edd0 6a03 	vldr	s13, [r0, #12]
 800134e:	edd3 4a03 	vldr	s9, [r3, #12]
 8001352:	ecb6 6a01 	vldmia	r6!, {s12}
 8001356:	ecb5 7a01 	vldmia	r5!, {s14}
 800135a:	ecf0 5a01 	vldmia	r0!, {s11}
 800135e:	e7d8      	b.n	8001312 <L3_imdct12+0xa2>
    }
}
 8001360:	b006      	add	sp, #24
 8001362:	bcf0      	pop	{r4, r5, r6, r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	3f5db3d7 	.word	0x3f5db3d7
 800136c:	0801043c 	.word	0x0801043c
 8001370:	3e05a8a8 	.word	0x3e05a8a8
 8001374:	3f7dcf55 	.word	0x3f7dcf55
 8001378:	3f4b1934 	.word	0x3f4b1934
 800137c:	3f1bd7ca 	.word	0x3f1bd7ca

08001380 <mp3d_synth_pair>:
    return sample*(1.f/32768.f);
}
#endif /* MINIMP3_FLOAT_OUTPUT */

static void mp3d_synth_pair(mp3d_sample_t *pcm, int nch, const float *z)
{
 8001380:	b430      	push	{r4, r5}
    float a;
    a  = (z[14*64] - z[    0]) * 29;
    a += (z[ 1*64] + z[13*64]) * 213;
 8001382:	f502 6350 	add.w	r3, r2, #3328	; 0xd00
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	edd2 7a40 	vldr	s15, [r2, #256]	; 0x100
    a  = (z[14*64] - z[    0]) * 29;
 800138e:	edd2 3a00 	vldr	s7, [r2]
    a +=  z[ 7*64]             * 75038;
    pcm[0] = mp3d_scale_pcm(a);

    z += 2;
    a  = z[14*64] * 104;
    a += z[12*64] * 1567;
 8001392:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80014fc <mp3d_synth_pair+0x17c>
    a += (z[12*64] - z[ 2*64]) * 459;
 8001396:	ed92 3a80 	vldr	s6, [r2, #512]	; 0x200
    a += z[12*64] * 1567;
 800139a:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8001500 <mp3d_synth_pair+0x180>
    a += (z[12*64] - z[ 2*64]) * 459;
 800139e:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001504 <mp3d_synth_pair+0x184>
    a += (z[ 3*64] + z[11*64]) * 2037;
 80013a2:	ed92 6ac0 	vldr	s12, [r2, #768]	; 0x300
    a += z[10*64] * 9727;
 80013a6:	ed9f 5a58 	vldr	s10, [pc, #352]	; 8001508 <mp3d_synth_pair+0x188>
    a += z[ 8*64] * 64019;
 80013aa:	eddf 4a58 	vldr	s9, [pc, #352]	; 800150c <mp3d_synth_pair+0x18c>
    a += (z[10*64] - z[ 4*64]) * 5153;
 80013ae:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001510 <mp3d_synth_pair+0x190>
    a += z[ 6*64] * -9975;
 80013b2:	eddf 1a58 	vldr	s3, [pc, #352]	; 8001514 <mp3d_synth_pair+0x194>
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80013b6:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8001518 <mp3d_synth_pair+0x198>
    a += z[ 4*64] * -45;
 80013ba:	eddf 2a58 	vldr	s5, [pc, #352]	; 800151c <mp3d_synth_pair+0x19c>
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80013be:	ed9f 4a58 	vldr	s8, [pc, #352]	; 8001520 <mp3d_synth_pair+0x1a0>
    a  = (z[14*64] - z[    0]) * 29;
 80013c2:	f502 6460 	add.w	r4, r2, #3584	; 0xe00
{
 80013c6:	ed2d 8b02 	vpush	{d8}
    a  = (z[14*64] - z[    0]) * 29;
 80013ca:	edd4 5a00 	vldr	s11, [r4]
    a += (z[ 1*64] + z[13*64]) * 213;
 80013ce:	eddf 8a55 	vldr	s17, [pc, #340]	; 8001524 <mp3d_synth_pair+0x1a4>
    a += (z[ 3*64] + z[11*64]) * 2037;
 80013d2:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8001528 <mp3d_synth_pair+0x1a8>
    a += z[12*64] * 1567;
 80013d6:	f602 4308 	addw	r3, r2, #3080	; 0xc08
    a += (z[ 1*64] + z[13*64]) * 213;
 80013da:	ee77 7a87 	vadd.f32	s15, s15, s14
    a += z[12*64] * 1567;
 80013de:	ed93 7a00 	vldr	s14, [r3]
    a  = (z[14*64] - z[    0]) * 29;
 80013e2:	ee75 5ae3 	vsub.f32	s11, s11, s7
    a += (z[ 1*64] + z[13*64]) * 213;
 80013e6:	ee67 7aa8 	vmul.f32	s15, s15, s17
    a  = z[14*64] * 104;
 80013ea:	f602 6308 	addw	r3, r2, #3592	; 0xe08
    a += (z[12*64] - z[ 2*64]) * 459;
 80013ee:	f502 6440 	add.w	r4, r2, #3072	; 0xc00
    a += z[12*64] * 1567;
 80013f2:	ee27 7a26 	vmul.f32	s14, s14, s13
    a += (z[ 1*64] + z[13*64]) * 213;
 80013f6:	eef3 6a0d 	vmov.f32	s13, #61	; 0x41e80000  29.0
    a += z[12*64] * 1567;
 80013fa:	edd3 8a00 	vldr	s17, [r3]
    a += (z[ 1*64] + z[13*64]) * 213;
 80013fe:	eee5 7aa6 	vfma.f32	s15, s11, s13
    a += z[10*64] * 9727;
 8001402:	f602 2308 	addw	r3, r2, #2568	; 0xa08
    a += (z[10*64] - z[ 4*64]) * 5153;
 8001406:	f502 6520 	add.w	r5, r2, #2560	; 0xa00
    a += (z[12*64] - z[ 2*64]) * 459;
 800140a:	edd4 6a00 	vldr	s13, [r4]
    a += z[10*64] * 9727;
 800140e:	edd3 3a00 	vldr	s7, [r3]
    a += z[12*64] * 1567;
 8001412:	eea8 7a81 	vfma.f32	s14, s17, s2
    a += (z[ 3*64] + z[11*64]) * 2037;
 8001416:	f502 6430 	add.w	r4, r2, #2816	; 0xb00
    a += z[ 8*64] * 64019;
 800141a:	f602 0308 	addw	r3, r2, #2056	; 0x808
    a += (z[12*64] - z[ 2*64]) * 459;
 800141e:	ee76 6ac3 	vsub.f32	s13, s13, s6
    a += (z[ 3*64] + z[11*64]) * 2037;
 8001422:	edd4 5a00 	vldr	s11, [r4]
    a += z[ 8*64] * 64019;
 8001426:	ed93 1a00 	vldr	s2, [r3]
    a += z[ 2*64] * 146;
 800142a:	ed92 3a82 	vldr	s6, [r2, #520]	; 0x208
    a += (z[12*64] - z[ 2*64]) * 459;
 800142e:	eee6 7aa0 	vfma.f32	s15, s13, s1
    a += (z[10*64] - z[ 4*64]) * 5153;
 8001432:	f502 6480 	add.w	r4, r2, #1024	; 0x400
    a += z[ 6*64] * -9975;
 8001436:	f502 63c1 	add.w	r3, r2, #1544	; 0x608
    a += z[10*64] * 9727;
 800143a:	eea3 7a85 	vfma.f32	s14, s7, s10
    a += z[ 0*64] * -5;
    pcm[16*nch] = mp3d_scale_pcm(a);
 800143e:	0149      	lsls	r1, r1, #5
    a += (z[ 3*64] + z[11*64]) * 2037;
 8001440:	ee36 6a25 	vadd.f32	s12, s12, s11
    a += (z[10*64] - z[ 4*64]) * 5153;
 8001444:	edd5 6a00 	vldr	s13, [r5]
 8001448:	edd4 5a00 	vldr	s11, [r4]
    a += z[ 6*64] * -9975;
 800144c:	edd3 0a00 	vldr	s1, [r3]
    a += z[ 2*64] * 146;
 8001450:	eddf 3a36 	vldr	s7, [pc, #216]	; 800152c <mp3d_synth_pair+0x1ac>
    a +=  z[ 7*64]             * 75038;
 8001454:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8001530 <mp3d_synth_pair+0x1b0>
    a += (z[ 3*64] + z[11*64]) * 2037;
 8001458:	eee6 7a08 	vfma.f32	s15, s12, s16
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 800145c:	f502 65a0 	add.w	r5, r2, #1280	; 0x500
 8001460:	f502 6410 	add.w	r4, r2, #2304	; 0x900
    a += z[ 8*64] * 64019;
 8001464:	eea1 7a24 	vfma.f32	s14, s2, s9
    a += z[ 4*64] * -45;
 8001468:	f502 6381 	add.w	r3, r2, #1032	; 0x408
}
 800146c:	ecbd 8b02 	vpop	{d8}
    a += (z[10*64] - z[ 4*64]) * 5153;
 8001470:	ee76 6ae5 	vsub.f32	s13, s13, s11
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 8001474:	edd4 4a00 	vldr	s9, [r4]
 8001478:	ed95 6a00 	vldr	s12, [r5]
    a += z[ 4*64] * -45;
 800147c:	ed93 1a00 	vldr	s2, [r3]
    a += z[ 0*64] * -5;
 8001480:	edd2 5a02 	vldr	s11, [r2, #8]
    a += (z[10*64] - z[ 4*64]) * 5153;
 8001484:	eee6 7a80 	vfma.f32	s15, s13, s0
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 8001488:	f502 6400 	add.w	r4, r2, #2048	; 0x800
 800148c:	f502 63c0 	add.w	r3, r2, #1536	; 0x600
    a += z[ 6*64] * -9975;
 8001490:	eea0 7aa1 	vfma.f32	s14, s1, s3
    a +=  z[ 7*64]             * 75038;
 8001494:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 8001498:	ee36 6a24 	vadd.f32	s12, s12, s9
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 800149c:	edd4 6a00 	vldr	s13, [r4]
 80014a0:	edd3 1a00 	vldr	s3, [r3]
    a +=  z[ 7*64]             * 75038;
 80014a4:	edd2 4a00 	vldr	s9, [r2]
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80014a8:	eee6 7a02 	vfma.f32	s15, s12, s4
}
 80014ac:	bc30      	pop	{r4, r5}
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80014ae:	ee76 6ae1 	vsub.f32	s13, s13, s3
    a += z[ 4*64] * -45;
 80014b2:	eea1 7a22 	vfma.f32	s14, s2, s5
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80014b6:	eee6 7a84 	vfma.f32	s15, s13, s8
    a += z[ 2*64] * 146;
 80014ba:	eea3 7a23 	vfma.f32	s14, s6, s7
    a +=  z[ 7*64]             * 75038;
 80014be:	eee4 7a85 	vfma.f32	s15, s9, s10
    a += z[ 0*64] * -5;
 80014c2:	eef9 6a04 	vmov.f32	s13, #148	; 0xc0a00000 -5.0
 80014c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
    int32_t s32 = (int32_t)(sample + .5f);
 80014ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80014ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80014d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014da:	ee17 3a90 	vmov	r3, s15
 80014de:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    s32 -= (s32 < 0);
 80014e2:	eba3 73d3 	sub.w	r3, r3, r3, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 80014e6:	ee17 2a90 	vmov	r2, s15
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 80014ea:	f303 030f 	ssat	r3, #16, r3
    s32 -= (s32 < 0);
 80014ee:	eba2 72d2 	sub.w	r2, r2, r2, lsr #31
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 80014f2:	8003      	strh	r3, [r0, #0]
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 80014f4:	f302 020f 	ssat	r2, #16, r2
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 80014f8:	5242      	strh	r2, [r0, r1]
}
 80014fa:	4770      	bx	lr
 80014fc:	44c3e000 	.word	0x44c3e000
 8001500:	42d00000 	.word	0x42d00000
 8001504:	43e58000 	.word	0x43e58000
 8001508:	4617fc00 	.word	0x4617fc00
 800150c:	477a1300 	.word	0x477a1300
 8001510:	45a10800 	.word	0x45a10800
 8001514:	c61bdc00 	.word	0xc61bdc00
 8001518:	45cd7000 	.word	0x45cd7000
 800151c:	c2340000 	.word	0xc2340000
 8001520:	47127100 	.word	0x47127100
 8001524:	43550000 	.word	0x43550000
 8001528:	44fea000 	.word	0x44fea000
 800152c:	43120000 	.word	0x43120000
 8001530:	47928f00 	.word	0x47928f00

08001534 <mp3d_synth_granule>:
    }
#endif /* MINIMP3_ONLY_SIMD */
}

static void mp3d_synth_granule(float *qmf_state, float *grbuf, int nbands, int nch, mp3d_sample_t *pcm, float *lins)
{
 8001534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001538:	ed2d 8b0a 	vpush	{d8-d12}
 800153c:	b0c1      	sub	sp, #260	; 0x104
    int i;
    for (i = 0; i < nch; i++)
 800153e:	2b00      	cmp	r3, #0
{
 8001540:	921a      	str	r2, [sp, #104]	; 0x68
 8001542:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8001544:	9202      	str	r2, [sp, #8]
 8001546:	9a55      	ldr	r2, [sp, #340]	; 0x154
 8001548:	901b      	str	r0, [sp, #108]	; 0x6c
 800154a:	9101      	str	r1, [sp, #4]
 800154c:	9219      	str	r2, [sp, #100]	; 0x64
    for (i = 0; i < nch; i++)
 800154e:	9312      	str	r3, [sp, #72]	; 0x48
 8001550:	f340 843c 	ble.w	8001dcc <mp3d_synth_granule+0x898>
 8001554:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001556:	9a01      	ldr	r2, [sp, #4]
        float t[4][8], *x, *y = grbuf + k;
 8001558:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80015cc <mp3d_synth_granule+0x98>
 800155c:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80015d0 <mp3d_synth_granule+0x9c>
 8001560:	eddf 1a1c 	vldr	s3, [pc, #112]	; 80015d4 <mp3d_synth_granule+0xa0>
            x[4] = (x0 - x1)*0.70710677f;
 8001564:	eddf 4a1c 	vldr	s9, [pc, #112]	; 80015d8 <mp3d_synth_granule+0xa4>
            x5 -= x7*0.198912367f;  /* rotate by PI/8 */
 8001568:	ed9f 4a1c 	vldr	s8, [pc, #112]	; 80015dc <mp3d_synth_granule+0xa8>
            x7 += x5*0.382683432f;
 800156c:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 80015e0 <mp3d_synth_granule+0xac>
            x[1] = (xt + x7)*0.50979561f;
 8001570:	eddf 2a1c 	vldr	s5, [pc, #112]	; 80015e4 <mp3d_synth_granule+0xb0>
            x[2] = (x4 + x3)*0.54119611f;
 8001574:	ed9f 3a1c 	vldr	s6, [pc, #112]	; 80015e8 <mp3d_synth_granule+0xb4>
            x[3] = (x0 - x5)*0.60134488f;
 8001578:	eddf 3a1c 	vldr	s7, [pc, #112]	; 80015ec <mp3d_synth_granule+0xb8>
 800157c:	eb03 0ac3 	add.w	sl, r3, r3, lsl #3
 8001580:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001582:	ebc3 7983 	rsb	r9, r3, r3, lsl #30
 8001586:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800158a:	eb03 1a8a 	add.w	sl, r3, sl, lsl #6
 800158e:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 8001592:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8001596:	9100      	str	r1, [sp, #0]
 8001598:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 800159c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 80015a0:	f50d 7e90 	add.w	lr, sp, #288	; 0x120
 80015a4:	9b00      	ldr	r3, [sp, #0]
 80015a6:	eb0b 0c08 	add.w	ip, fp, r8
 80015aa:	eb03 0608 	add.w	r6, r3, r8
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <mp3d_synth_granule+0xbc>)
        float t[4][8], *x, *y = grbuf + k;
 80015b0:	eeb0 0a60 	vmov.f32	s0, s1
 80015b4:	eeb0 5a41 	vmov.f32	s10, s2
 80015b8:	eeb0 8a61 	vmov.f32	s16, s3
 80015bc:	4662      	mov	r2, ip
 80015be:	f5a6 716a 	sub.w	r1, r6, #936	; 0x3a8
 80015c2:	f5a6 67bd 	sub.w	r7, r6, #1512	; 0x5e8
 80015c6:	4664      	mov	r4, ip
        for (x = t[0], i = 0; i < 8; i++, x++)
 80015c8:	464b      	mov	r3, r9
 80015ca:	e01f      	b.n	800160c <mp3d_synth_granule+0xd8>
 80015cc:	3f009e8d 	.word	0x3f009e8d
 80015d0:	3f002785 	.word	0x3f002785
 80015d4:	41230a46 	.word	0x41230a46
 80015d8:	3f3504f3 	.word	0x3f3504f3
 80015dc:	3e4bafaf 	.word	0x3e4bafaf
 80015e0:	3ec3ef15 	.word	0x3ec3ef15
 80015e4:	3f0281f7 	.word	0x3f0281f7
 80015e8:	3f0a8bd4 	.word	0x3f0a8bd4
 80015ec:	3f19f1bd 	.word	0x3f19f1bd
 80015f0:	080103e4 	.word	0x080103e4
 80015f4:	3f6664d7 	.word	0x3f6664d7
 80015f8:	3fa73d75 	.word	0x3fa73d75
 80015fc:	402406cf 	.word	0x402406cf
 8001600:	ed10 8a03 	vldr	s16, [r0, #-12]
 8001604:	ed10 5a02 	vldr	s10, [r0, #-8]
 8001608:	ed10 0a01 	vldr	s0, [r0, #-4]
            float x0 = y[i*18];
 800160c:	ed94 6a00 	vldr	s12, [r4]
            float x1 = y[(15 - i)*18];
 8001610:	edd1 7a00 	vldr	s15, [r1]
            float x3 = y[(31 - i)*18];
 8001614:	f501 6590 	add.w	r5, r1, #1152	; 0x480
 8001618:	ed95 7a00 	vldr	s14, [r5]
            float x2 = y[(16 + i)*18];
 800161c:	f504 6590 	add.w	r5, r4, #1152	; 0x480
            float t3 = (x0 - x3)*g_sec[3*i + 1];
 8001620:	ee76 5a47 	vsub.f32	s11, s12, s14
            float x2 = y[(16 + i)*18];
 8001624:	edd5 6a00 	vldr	s13, [r5]
            float t3 = (x0 - x3)*g_sec[3*i + 1];
 8001628:	ee65 5a85 	vmul.f32	s11, s11, s10
            float t2 = (x1 - x2)*g_sec[3*i + 0];
 800162c:	ee37 5ae6 	vsub.f32	s10, s15, s13
            float t0 = x0 + x3;
 8001630:	ee36 7a07 	vadd.f32	s14, s12, s14
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 8001634:	eeb0 6a65 	vmov.f32	s12, s11
            float t1 = x1 + x2;
 8001638:	ee77 7aa6 	vadd.f32	s15, s15, s13
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 800163c:	eea5 6a48 	vfms.f32	s12, s10, s16
 8001640:	3948      	subs	r1, #72	; 0x48
        for (x = t[0], i = 0; i < 8; i++, x++)
 8001642:	428f      	cmp	r7, r1
            x[8] = (t0 - t1)*g_sec[3*i + 2];
 8001644:	ee77 6a67 	vsub.f32	s13, s14, s15
            x[16] = t3 + t2;
 8001648:	eee5 5a08 	vfma.f32	s11, s10, s16
 800164c:	f100 000c 	add.w	r0, r0, #12
 8001650:	f104 0448 	add.w	r4, r4, #72	; 0x48
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 8001654:	ee26 6a00 	vmul.f32	s12, s12, s0
            x[0] = t0 + t1;
 8001658:	ee77 7a27 	vadd.f32	s15, s14, s15
            x[8] = (t0 - t1)*g_sec[3*i + 2];
 800165c:	ee26 0a80 	vmul.f32	s0, s13, s0
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 8001660:	ed83 6a18 	vstr	s12, [r3, #96]	; 0x60
            x[16] = t3 + t2;
 8001664:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40
            x[8] = (t0 - t1)*g_sec[3*i + 2];
 8001668:	ed83 0a08 	vstr	s0, [r3, #32]
            x[0] = t0 + t1;
 800166c:	edc3 7a00 	vstr	s15, [r3]
        for (x = t[0], i = 0; i < 8; i++, x++)
 8001670:	f103 0304 	add.w	r3, r3, #4
 8001674:	d1c4      	bne.n	8001600 <mp3d_synth_granule+0xcc>
            x[5] = (x0 + x5)*0.89997619f;
 8001676:	ed1f aa21 	vldr	s20, [pc, #-132]	; 80015f4 <mp3d_synth_granule+0xc0>
            x[6] = (x4 - x3)*1.30656302f;
 800167a:	ed5f 9a21 	vldr	s19, [pc, #-132]	; 80015f8 <mp3d_synth_granule+0xc4>
            x[7] = (xt - x7)*2.56291556f;
 800167e:	ed1f 9a21 	vldr	s18, [pc, #-132]	; 80015fc <mp3d_synth_granule+0xc8>
 8001682:	ab28      	add	r3, sp, #160	; 0xa0
 8001684:	4649      	mov	r1, r9
            float x0 = x[0], x1 = x[1], x2 = x[2], x3 = x[3], x4 = x[4], x5 = x[5], x6 = x[6], x7 = x[7], xt;
 8001686:	ed13 7a01 	vldr	s14, [r3, #-4]
 800168a:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 800168e:	ed53 6a03 	vldr	s13, [r3, #-12]
 8001692:	ed53 aa05 	vldr	s21, [r3, #-20]	; 0xffffffec
 8001696:	ed53 8a04 	vldr	s17, [r3, #-16]
 800169a:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 800169e:	ed13 0a02 	vldr	s0, [r3, #-8]
 80016a2:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
            xt = x0 - x7; x0 += x7;
 80016a6:	ee78 5a47 	vsub.f32	s11, s16, s14
            x7 = x1 - x6; x1 += x6;
 80016aa:	ee77 bac0 	vsub.f32	s23, s15, s0
            x6 = x2 - x5; x2 += x5;
 80016ae:	ee35 ba66 	vsub.f32	s22, s10, s13
            x5 = x3 - x4; x3 += x4;
 80016b2:	ee3a 6ae8 	vsub.f32	s12, s21, s17
            x7 =  x7 + xt;
 80016b6:	ee35 caab 	vadd.f32	s24, s11, s23
            x5 =  x5 + x6;
 80016ba:	ee3b 6a06 	vadd.f32	s12, s22, s12
            xt = x0 - x7; x0 += x7;
 80016be:	ee38 8a07 	vadd.f32	s16, s16, s14
            x5 -= x7*0.198912367f;  /* rotate by PI/8 */
 80016c2:	eeac 6a44 	vfms.f32	s12, s24, s8
 80016c6:	3320      	adds	r3, #32
            x7 = x1 - x6; x1 += x6;
 80016c8:	ee37 0a80 	vadd.f32	s0, s15, s0
            x6 = x2 - x5; x2 += x5;
 80016cc:	ee35 5a26 	vadd.f32	s10, s10, s13
            x5 = x3 - x4; x3 += x4;
 80016d0:	ee7a 7aa8 	vadd.f32	s15, s21, s17
            x7 += x5*0.382683432f;
 80016d4:	eea6 ca02 	vfma.f32	s24, s12, s4
            x4 = x0 - x3; x0 += x3;
 80016d8:	ee78 8a67 	vsub.f32	s17, s16, s15
            x6 = (x6 + x7)*0.70710677f;
 80016dc:	ee3b 7a8b 	vadd.f32	s14, s23, s22
            x3 = x1 - x2; x1 += x2;
 80016e0:	ee70 aa45 	vsub.f32	s21, s0, s10
            x0 = xt - x6; xt += x6;
 80016e4:	eef0 6a65 	vmov.f32	s13, s11
            x5 -= x7*0.198912367f;
 80016e8:	eeac 6a44 	vfms.f32	s12, s24, s8
            x0 = xt - x6; xt += x6;
 80016ec:	eee7 6a64 	vfms.f32	s13, s14, s9
 80016f0:	eee7 5a24 	vfma.f32	s11, s14, s9
            x3 = (x3 + x4)*0.70710677f;
 80016f4:	ee7a aaa8 	vadd.f32	s21, s21, s17
            x4 = x0 - x3; x0 += x3;
 80016f8:	ee38 7a27 	vadd.f32	s14, s16, s15
            x3 = x1 - x2; x1 += x2;
 80016fc:	ee70 7a05 	vadd.f32	s15, s0, s10
            x[2] = (x4 + x3)*0.54119611f;
 8001700:	eeb0 5a68 	vmov.f32	s10, s17
 8001704:	eeaa 5aa4 	vfma.f32	s10, s21, s9
            x[6] = (x4 - x3)*1.30656302f;
 8001708:	eeea 8ae4 	vfms.f32	s17, s21, s9
            x[3] = (x0 - x5)*0.60134488f;
 800170c:	ee36 8ac6 	vsub.f32	s16, s13, s12
            x[1] = (xt + x7)*0.50979561f;
 8001710:	ee3c 0a25 	vadd.f32	s0, s24, s11
            x[5] = (x0 + x5)*0.89997619f;
 8001714:	ee76 6a26 	vadd.f32	s13, s12, s13
            x[7] = (xt - x7)*2.56291556f;
 8001718:	ee75 5acc 	vsub.f32	s11, s11, s24
            x[4] = (x0 - x1)*0.70710677f;
 800171c:	ee37 6a67 	vsub.f32	s12, s14, s15
            x[3] = (x0 - x5)*0.60134488f;
 8001720:	ee28 8a23 	vmul.f32	s16, s16, s7
            x[5] = (x0 + x5)*0.89997619f;
 8001724:	ee66 6a8a 	vmul.f32	s13, s13, s20
            x[1] = (xt + x7)*0.50979561f;
 8001728:	ee20 0a22 	vmul.f32	s0, s0, s5
            x[7] = (xt - x7)*2.56291556f;
 800172c:	ee65 5a89 	vmul.f32	s11, s11, s18
            x[2] = (x4 + x3)*0.54119611f;
 8001730:	ee25 5a03 	vmul.f32	s10, s10, s6
            x[6] = (x4 - x3)*1.30656302f;
 8001734:	ee68 8aa9 	vmul.f32	s17, s17, s19
            x[4] = (x0 - x1)*0.70710677f;
 8001738:	ee26 6a24 	vmul.f32	s12, s12, s9
            x[0] = x0 + x1;
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
            x[3] = (x0 - x5)*0.60134488f;
 8001740:	ed03 8a0d 	vstr	s16, [r3, #-52]	; 0xffffffcc
            x[5] = (x0 + x5)*0.89997619f;
 8001744:	ed43 6a0b 	vstr	s13, [r3, #-44]	; 0xffffffd4
            x[1] = (xt + x7)*0.50979561f;
 8001748:	ed03 0a0f 	vstr	s0, [r3, #-60]	; 0xffffffc4
            x[7] = (xt - x7)*2.56291556f;
 800174c:	ed43 5a09 	vstr	s11, [r3, #-36]	; 0xffffffdc
            x[2] = (x4 + x3)*0.54119611f;
 8001750:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
            x[6] = (x4 - x3)*1.30656302f;
 8001754:	ed43 8a0a 	vstr	s17, [r3, #-40]	; 0xffffffd8
            x[4] = (x0 - x1)*0.70710677f;
 8001758:	ed03 6a0c 	vstr	s12, [r3, #-48]	; 0xffffffd0
            x[0] = x0 + x1;
 800175c:	ed43 7a10 	vstr	s15, [r3, #-64]	; 0xffffffc0
        for (x = t[0], i = 0; i < 4; i++, x += 8)
 8001760:	459e      	cmp	lr, r3
 8001762:	d190      	bne.n	8001686 <mp3d_synth_granule+0x152>
 8001764:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 8001768:	eddd 7a38 	vldr	s15, [sp, #224]	; 0xe0
 800176c:	ed9d 7a28 	vldr	s14, [sp, #160]	; 0xa0
            y[0*18] = t[0][i];
 8001770:	f851 3b04 	ldr.w	r3, [r1], #4
 8001774:	6013      	str	r3, [r2, #0]
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 8001776:	ee35 6aa7 	vadd.f32	s12, s11, s15
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 800177a:	edd1 5a10 	vldr	s11, [r1, #64]	; 0x40
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 800177e:	edd1 6a18 	vldr	s13, [r1, #96]	; 0x60
            y[2*18] = t[1][i] + t[1][i + 1];
 8001782:	ed91 5a08 	vldr	s10, [r1, #32]
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 8001786:	ee75 7aa7 	vadd.f32	s15, s11, s15
            y[2*18] = t[1][i] + t[1][i + 1];
 800178a:	ee35 7a07 	vadd.f32	s14, s10, s14
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 800178e:	ee77 7aa6 	vadd.f32	s15, s15, s13
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 8001792:	ee36 6a26 	vadd.f32	s12, s12, s13
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 8001796:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
            y[2*18] = t[1][i] + t[1][i + 1];
 800179a:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 800179e:	ed82 6a12 	vstr	s12, [r2, #72]	; 0x48
        for (i = 0; i < 7; i++, y += 4*18)
 80017a2:	f502 7290 	add.w	r2, r2, #288	; 0x120
 80017a6:	42b2      	cmp	r2, r6
 80017a8:	eef0 7a66 	vmov.f32	s15, s13
 80017ac:	eeb0 7a45 	vmov.f32	s14, s10
 80017b0:	d1de      	bne.n	8001770 <mp3d_synth_granule+0x23c>
        y[0*18] = t[0][7];
 80017b2:	4616      	mov	r6, r2
        y[1*18] = t[2][7] + t[3][7];
 80017b4:	ed9d 7a3f 	vldr	s14, [sp, #252]	; 0xfc
 80017b8:	eddd 7a37 	vldr	s15, [sp, #220]	; 0xdc
        y[0*18] = t[0][7];
 80017bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80017be:	f846 1b04 	str.w	r1, [r6], #4
        y[1*18] = t[2][7] + t[3][7];
 80017c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c6:	f10c 0c04 	add.w	ip, ip, #4
        y[2*18] = t[1][7];
 80017ca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
        y[3*18] = t[3][7];
 80017cc:	ed86 7a35 	vstr	s14, [r6, #212]	; 0xd4
    for (; k < n; k++)
 80017d0:	45c4      	cmp	ip, r8
        y[1*18] = t[2][7] + t[3][7];
 80017d2:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
        y[2*18] = t[1][7];
 80017d6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    for (; k < n; k++)
 80017da:	f47f aee8 	bne.w	80015ae <mp3d_synth_granule+0x7a>
 80017de:	f508 6810 	add.w	r8, r8, #2304	; 0x900
    for (i = 0; i < nch; i++)
 80017e2:	45c2      	cmp	sl, r8
 80017e4:	f47f aede 	bne.w	80015a4 <mp3d_synth_granule+0x70>
    {
        mp3d_DCT_II(grbuf + 576*i, nbands);
    }

    memcpy(lins, qmf_state, sizeof(float)*15*64);
 80017e8:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80017ec:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80017ee:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80017f2:	4640      	mov	r0, r8
 80017f4:	f00d fd0d 	bl	800f212 <memcpy>
    mp3d_sample_t *dstr = dstl + (nch - 1);
 80017f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80017fa:	9802      	ldr	r0, [sp, #8]
 80017fc:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8001800:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 8001804:	3a01      	subs	r2, #1
 8001806:	0052      	lsls	r2, r2, #1
 8001808:	1c94      	adds	r4, r2, #2
 800180a:	1907      	adds	r7, r0, r4
 800180c:	463e      	mov	r6, r7
 800180e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8001812:	9709      	str	r7, [sp, #36]	; 0x24
 8001814:	9f01      	ldr	r7, [sp, #4]
 8001816:	970d      	str	r7, [sp, #52]	; 0x34
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4637      	mov	r7, r6
 800181c:	eb02 0b04 	add.w	fp, r2, r4
 8001820:	441f      	add	r7, r3
 8001822:	eb03 050b 	add.w	r5, r3, fp
 8001826:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800182a:	940c      	str	r4, [sp, #48]	; 0x30
 800182c:	4638      	mov	r0, r7
 800182e:	eb05 040c 	add.w	r4, r5, ip
 8001832:	4484      	add	ip, r0
 8001834:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001836:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8001838:	f8cd c010 	str.w	ip, [sp, #16]
 800183c:	4684      	mov	ip, r0
 800183e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001840:	9708      	str	r7, [sp, #32]
 8001842:	4682      	mov	sl, r0
 8001844:	ebcc 1c80 	rsb	ip, ip, r0, lsl #6
 8001848:	1e77      	subs	r7, r6, #1
 800184a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800184c:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8001850:	f508 5687 	add.w	r6, r8, #4320	; 0x10e0
    float *xr = xl + 576*(nch - 1);
 8001854:	3901      	subs	r1, #1
 8001856:	9600      	str	r6, [sp, #0]
 8001858:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800185c:	eb00 2101 	add.w	r1, r0, r1, lsl #8
 8001860:	9800      	ldr	r0, [sp, #0]
 8001862:	3008      	adds	r0, #8
 8001864:	9000      	str	r0, [sp, #0]
 8001866:	9802      	ldr	r0, [sp, #8]
 8001868:	1945      	adds	r5, r0, r5
 800186a:	950a      	str	r5, [sp, #40]	; 0x28
 800186c:	4605      	mov	r5, r0
 800186e:	eb03 0e04 	add.w	lr, r3, r4
 8001872:	4425      	add	r5, r4
 8001874:	9c04      	ldr	r4, [sp, #16]
 8001876:	9507      	str	r5, [sp, #28]
 8001878:	18e5      	adds	r5, r4, r3
 800187a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800187c:	9505      	str	r5, [sp, #20]
 800187e:	eb00 060b 	add.w	r6, r0, fp
 8001882:	4486      	add	lr, r0
 8001884:	1aa2      	subs	r2, r4, r2
 8001886:	9800      	ldr	r0, [sp, #0]
 8001888:	9216      	str	r2, [sp, #88]	; 0x58
 800188a:	087f      	lsrs	r7, r7, #1
 800188c:	f501 6299 	add.w	r2, r1, #1224	; 0x4c8
 8001890:	920e      	str	r2, [sp, #56]	; 0x38
 8001892:	eb00 2247 	add.w	r2, r0, r7, lsl #9
 8001896:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001898:	9215      	str	r2, [sp, #84]	; 0x54
 800189a:	ebca 7cca 	rsb	ip, sl, sl, lsl #31
 800189e:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80018a2:	9210      	str	r2, [sp, #64]	; 0x40
 80018a4:	f06f 0881 	mvn.w	r8, #129	; 0x81
 80018a8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80018ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80018ae:	fb08 f20a 	mul.w	r2, r8, sl
 80018b2:	9603      	str	r6, [sp, #12]
 80018b4:	f8cd e018 	str.w	lr, [sp, #24]
 80018b8:	4653      	mov	r3, sl
 80018ba:	9218      	str	r2, [sp, #96]	; 0x60
 80018bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80018be:	01db      	lsls	r3, r3, #7
 80018c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80018c2:	f606 63e8 	addw	r3, r6, #3816	; 0xee8
 80018c6:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t s32 = (int32_t)(sample + .5f);
 80018c8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    zlin[4*15]     = xl[18*16];
 80018cc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80018ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80018d0:	f856 3c48 	ldr.w	r3, [r6, #-72]
    zlin[4*15 + 1] = xr[18*16];
 80018d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    zlin[4*15]     = xl[18*16];
 80018d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    zlin[4*15 + 1] = xr[18*16];
 80018da:	f855 3c48 	ldr.w	r3, [r5, #-72]
    zlin[4*15 + 2] = xl[0];
 80018de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    zlin[4*15 + 1] = xr[18*16];
 80018e0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
    zlin[4*15 + 2] = xl[0];
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
    zlin[4*15 + 3] = xr[0];
 80018ea:	f5a5 6399 	sub.w	r3, r5, #1224	; 0x4c8
    mp3d_synth_pair(dstr, nch, lins + 4*15 + 1);
 80018ee:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    zlin[4*15 + 3] = xr[0];
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    zlin[4*31]     = xl[1 + 18*16];
 80018f8:	f856 3c44 	ldr.w	r3, [r6, #-68]
 80018fc:	f8c1 3208 	str.w	r3, [r1, #520]	; 0x208
    zlin[4*31 + 1] = xr[1 + 18*16];
 8001900:	f855 3c44 	ldr.w	r3, [r5, #-68]
 8001904:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    zlin[4*31 + 2] = xl[1];
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	f8c1 2210 	str.w	r2, [r1, #528]	; 0x210
    zlin[4*31 + 3] = xr[1];
 800190e:	f2a5 43c4 	subw	r3, r5, #1220	; 0x4c4
 8001912:	9a03      	ldr	r2, [sp, #12]
 8001914:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
    zlin[4*31 + 2] = xl[1];
 800191c:	460c      	mov	r4, r1
 800191e:	4410      	add	r0, r2
    mp3d_synth_pair(dstr, nch, lins + 4*15 + 1);
 8001920:	f6a1 52f4 	subw	r2, r1, #3572	; 0xdf4
 8001924:	4641      	mov	r1, r8
 8001926:	9013      	str	r0, [sp, #76]	; 0x4c
 8001928:	f7ff fd2a 	bl	8001380 <mp3d_synth_pair>
 800192c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800192e:	9909      	ldr	r1, [sp, #36]	; 0x24
    mp3d_synth_pair(dstr + 32*nch, nch, lins + 4*15 + 64 + 1);
 8001930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001932:	9f03      	ldr	r7, [sp, #12]
 8001934:	1841      	adds	r1, r0, r1
 8001936:	f6a4 42f4 	subw	r2, r4, #3316	; 0xcf4
 800193a:	19d8      	adds	r0, r3, r7
 800193c:	9111      	str	r1, [sp, #68]	; 0x44
 800193e:	4641      	mov	r1, r8
 8001940:	f7ff fd1e 	bl	8001380 <mp3d_synth_pair>
    mp3d_synth_pair(dstl, nch, lins + 4*15);
 8001944:	f6a4 52f8 	subw	r2, r4, #3576	; 0xdf8
 8001948:	4641      	mov	r1, r8
 800194a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800194c:	f7ff fd18 	bl	8001380 <mp3d_synth_pair>
    mp3d_synth_pair(dstl + 32*nch, nch, lins + 4*15 + 64);
 8001950:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001952:	9803      	ldr	r0, [sp, #12]
 8001954:	f6a4 42f8 	subw	r2, r4, #3320	; 0xcf8
 8001958:	4641      	mov	r1, r8
 800195a:	1818      	adds	r0, r3, r0
 800195c:	f7ff fd10 	bl	8001380 <mp3d_synth_pair>
 8001960:	f1a5 0190 	sub.w	r1, r5, #144	; 0x90
    mp3d_synth_pair(dstl, nch, lins + 4*15);
 8001964:	4627      	mov	r7, r4
 8001966:	f6a4 63e8 	subw	r3, r4, #3816	; 0xee8
    mp3d_synth_pair(dstl + 32*nch, nch, lins + 4*15 + 64);
 800196a:	e9cd 1500 	strd	r1, r5, [sp]
 800196e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001970:	4a98      	ldr	r2, [pc, #608]	; (8001bd4 <mp3d_synth_granule+0x6a0>)
 8001972:	9602      	str	r6, [sp, #8]
 8001974:	f04f 0c00 	mov.w	ip, #0
 8001978:	46e6      	mov	lr, ip
 800197a:	f504 6887 	add.w	r8, r4, #1080	; 0x438
        zlin[4*i]     = xl[18*(31 - i)];
 800197e:	9802      	ldr	r0, [sp, #8]
        zlin[4*i + 1] = xr[18*(31 - i)];
 8001980:	9c01      	ldr	r4, [sp, #4]
        zlin[4*i]     = xl[18*(31 - i)];
 8001982:	6801      	ldr	r1, [r0, #0]
 8001984:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
        zlin[4*i + 1] = xr[18*(31 - i)];
 8001988:	6821      	ldr	r1, [r4, #0]
 800198a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
        zlin[4*i + 2] = xl[1 + 18*(31 - i)];
 800198e:	6841      	ldr	r1, [r0, #4]
 8001990:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
        zlin[4*i + 3] = xr[1 + 18*(31 - i)];
 8001994:	6861      	ldr	r1, [r4, #4]
 8001996:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
        zlin[4*(i + 16)]   = xl[1 + 18*(1 + i)];
 800199a:	f8d8 1004 	ldr.w	r1, [r8, #4]
        zlin[4*(i + 16) + 1] = xr[1 + 18*(1 + i)];
 800199e:	9800      	ldr	r0, [sp, #0]
        zlin[4*(i + 16)]   = xl[1 + 18*(1 + i)];
 80019a0:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
        zlin[4*(i + 16) + 1] = xr[1 + 18*(1 + i)];
 80019a4:	6841      	ldr	r1, [r0, #4]
 80019a6:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
        zlin[4*(i - 16) + 2] = xl[18*(1 + i)];
 80019aa:	f8d8 1000 	ldr.w	r1, [r8]
 80019ae:	6039      	str	r1, [r7, #0]
        zlin[4*(i - 16) + 3] = xr[18*(1 + i)];
 80019b0:	6801      	ldr	r1, [r0, #0]
 80019b2:	6079      	str	r1, [r7, #4]
        S0(0) S2(1) S1(2) S2(3) S1(4) S2(5) S1(6) S2(7)
 80019b4:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 80019b8:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 80019bc:	a91c      	add	r1, sp, #112	; 0x70
 80019be:	f503 647e 	add.w	r4, r3, #4064	; 0xfe0
 80019c2:	f103 0ae0 	add.w	sl, r3, #224	; 0xe0
 80019c6:	4648      	mov	r0, r9
 80019c8:	f503 6b7f 	add.w	fp, r3, #4080	; 0xff0
 80019cc:	460e      	mov	r6, r1
 80019ce:	464d      	mov	r5, r9
 80019d0:	ecfa 7a01 	vldmia	sl!, {s15}
 80019d4:	ecf4 6a01 	vldmia	r4!, {s13}
 80019d8:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80019dc:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 80019e0:	eea6 7a26 	vfma.f32	s14, s12, s13
 80019e4:	45a3      	cmp	fp, r4
 80019e6:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80019ea:	eca5 7a01 	vstmia	r5!, {s14}
 80019ee:	ece6 7a01 	vstmia	r6!, {s15}
 80019f2:	d1ed      	bne.n	80019d0 <mp3d_synth_granule+0x49c>
 80019f4:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 80019f8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80019fc:	f503 666e 	add.w	r6, r3, #3808	; 0xee0
 8001a00:	f503 7af0 	add.w	sl, r3, #480	; 0x1e0
 8001a04:	f503 6b6f 	add.w	fp, r3, #3824	; 0xef0
 8001a08:	ad1c      	add	r5, sp, #112	; 0x70
 8001a0a:	464c      	mov	r4, r9
 8001a0c:	ecf6 5a01 	vldmia	r6!, {s11}
 8001a10:	ecba 5a01 	vldmia	sl!, {s10}
 8001a14:	ed94 7a00 	vldr	s14, [r4]
 8001a18:	ed95 6a00 	vldr	s12, [r5]
 8001a1c:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001a20:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001a24:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001a28:	45b3      	cmp	fp, r6
 8001a2a:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001a2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a36:	ece5 6a01 	vstmia	r5!, {s13}
 8001a3a:	ece4 7a01 	vstmia	r4!, {s15}
 8001a3e:	d1e5      	bne.n	8001a0c <mp3d_synth_granule+0x4d8>
 8001a40:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8001a44:	ed12 5a0b 	vldr	s10, [r2, #-44]	; 0xffffffd4
 8001a48:	f503 665e 	add.w	r6, r3, #3552	; 0xde0
 8001a4c:	f503 7a38 	add.w	sl, r3, #736	; 0x2e0
 8001a50:	f503 6b5f 	add.w	fp, r3, #3568	; 0xdf0
 8001a54:	ad1c      	add	r5, sp, #112	; 0x70
 8001a56:	464c      	mov	r4, r9
 8001a58:	ecfa 7a01 	vldmia	sl!, {s15}
 8001a5c:	ecf6 5a01 	vldmia	r6!, {s11}
 8001a60:	ed94 6a00 	vldr	s12, [r4]
 8001a64:	ed95 7a00 	vldr	s14, [r5]
 8001a68:	ee64 6aa7 	vmul.f32	s13, s9, s15
 8001a6c:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8001a70:	eee5 6a25 	vfma.f32	s13, s10, s11
 8001a74:	45b3      	cmp	fp, r6
 8001a76:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001a7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a82:	ece4 6a01 	vstmia	r4!, {s13}
 8001a86:	ece5 7a01 	vstmia	r5!, {s15}
 8001a8a:	d1e5      	bne.n	8001a58 <mp3d_synth_granule+0x524>
 8001a8c:	ed12 4a0a 	vldr	s8, [r2, #-40]	; 0xffffffd8
 8001a90:	ed52 4a09 	vldr	s9, [r2, #-36]	; 0xffffffdc
 8001a94:	f503 664e 	add.w	r6, r3, #3296	; 0xce0
 8001a98:	f503 7a78 	add.w	sl, r3, #992	; 0x3e0
 8001a9c:	f503 6b4f 	add.w	fp, r3, #3312	; 0xcf0
 8001aa0:	ad1c      	add	r5, sp, #112	; 0x70
 8001aa2:	464c      	mov	r4, r9
 8001aa4:	ecf6 5a01 	vldmia	r6!, {s11}
 8001aa8:	ecba 5a01 	vldmia	sl!, {s10}
 8001aac:	ed94 7a00 	vldr	s14, [r4]
 8001ab0:	ed95 6a00 	vldr	s12, [r5]
 8001ab4:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001ab8:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001abc:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001ac0:	45b3      	cmp	fp, r6
 8001ac2:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001ac6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ace:	ece5 6a01 	vstmia	r5!, {s13}
 8001ad2:	ece4 7a01 	vstmia	r4!, {s15}
 8001ad6:	d1e5      	bne.n	8001aa4 <mp3d_synth_granule+0x570>
 8001ad8:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8001adc:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 8001ae0:	f503 663e 	add.w	r6, r3, #3040	; 0xbe0
 8001ae4:	f503 6a9c 	add.w	sl, r3, #1248	; 0x4e0
 8001ae8:	f503 6b3f 	add.w	fp, r3, #3056	; 0xbf0
 8001aec:	ad1c      	add	r5, sp, #112	; 0x70
 8001aee:	464c      	mov	r4, r9
 8001af0:	ecfa 7a01 	vldmia	sl!, {s15}
 8001af4:	ecf6 5a01 	vldmia	r6!, {s11}
 8001af8:	ed94 6a00 	vldr	s12, [r4]
 8001afc:	ed95 7a00 	vldr	s14, [r5]
 8001b00:	ee64 6aa7 	vmul.f32	s13, s9, s15
 8001b04:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8001b08:	eee5 6a25 	vfma.f32	s13, s10, s11
 8001b0c:	45b3      	cmp	fp, r6
 8001b0e:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001b12:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1a:	ece4 6a01 	vstmia	r4!, {s13}
 8001b1e:	ece5 7a01 	vstmia	r5!, {s15}
 8001b22:	d1e5      	bne.n	8001af0 <mp3d_synth_granule+0x5bc>
 8001b24:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8001b28:	ed52 4a05 	vldr	s9, [r2, #-20]	; 0xffffffec
 8001b2c:	f503 662e 	add.w	r6, r3, #2784	; 0xae0
 8001b30:	f503 6abc 	add.w	sl, r3, #1504	; 0x5e0
 8001b34:	f503 6b2f 	add.w	fp, r3, #2800	; 0xaf0
 8001b38:	ad1c      	add	r5, sp, #112	; 0x70
 8001b3a:	464c      	mov	r4, r9
 8001b3c:	ecf6 5a01 	vldmia	r6!, {s11}
 8001b40:	ecba 5a01 	vldmia	sl!, {s10}
 8001b44:	ed94 7a00 	vldr	s14, [r4]
 8001b48:	ed95 6a00 	vldr	s12, [r5]
 8001b4c:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001b50:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001b54:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001b58:	45b3      	cmp	fp, r6
 8001b5a:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001b5e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b66:	ece5 6a01 	vstmia	r5!, {s13}
 8001b6a:	ece4 7a01 	vstmia	r4!, {s15}
 8001b6e:	d1e5      	bne.n	8001b3c <mp3d_synth_granule+0x608>
 8001b70:	ed52 4a04 	vldr	s9, [r2, #-16]
 8001b74:	ed12 5a03 	vldr	s10, [r2, #-12]
 8001b78:	f503 661e 	add.w	r6, r3, #2528	; 0x9e0
 8001b7c:	f503 6adc 	add.w	sl, r3, #1760	; 0x6e0
 8001b80:	f503 6b1f 	add.w	fp, r3, #2544	; 0x9f0
 8001b84:	ad1c      	add	r5, sp, #112	; 0x70
 8001b86:	464c      	mov	r4, r9
 8001b88:	ecfa 7a01 	vldmia	sl!, {s15}
 8001b8c:	ecf6 5a01 	vldmia	r6!, {s11}
 8001b90:	ed94 6a00 	vldr	s12, [r4]
 8001b94:	ed95 7a00 	vldr	s14, [r5]
 8001b98:	ee64 6aa7 	vmul.f32	s13, s9, s15
 8001b9c:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8001ba0:	eee5 6a25 	vfma.f32	s13, s10, s11
 8001ba4:	45b3      	cmp	fp, r6
 8001ba6:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001baa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bb2:	ece4 6a01 	vstmia	r4!, {s13}
 8001bb6:	ece5 7a01 	vstmia	r5!, {s15}
 8001bba:	d1e5      	bne.n	8001b88 <mp3d_synth_granule+0x654>
 8001bbc:	ed12 4a02 	vldr	s8, [r2, #-8]
 8001bc0:	ed52 4a01 	vldr	s9, [r2, #-4]
 8001bc4:	f503 640e 	add.w	r4, r3, #2272	; 0x8e0
 8001bc8:	f503 65fc 	add.w	r5, r3, #2016	; 0x7e0
 8001bcc:	f503 660f 	add.w	r6, r3, #2288	; 0x8f0
 8001bd0:	e002      	b.n	8001bd8 <mp3d_synth_granule+0x6a4>
 8001bd2:	bf00      	nop
 8001bd4:	080104d8 	.word	0x080104d8
 8001bd8:	ecf4 5a01 	vldmia	r4!, {s11}
 8001bdc:	ecb5 5a01 	vldmia	r5!, {s10}
 8001be0:	ed90 7a00 	vldr	s14, [r0]
 8001be4:	ed91 6a00 	vldr	s12, [r1]
 8001be8:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001bec:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001bf0:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001bf4:	42a6      	cmp	r6, r4
 8001bf6:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001bfa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001bfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c02:	ece1 6a01 	vstmia	r1!, {s13}
 8001c06:	ece0 7a01 	vstmia	r0!, {s15}
 8001c0a:	d1e5      	bne.n	8001bd8 <mp3d_synth_granule+0x6a4>
 8001c0c:	9d02      	ldr	r5, [sp, #8]
    int32_t s32 = (int32_t)(sample + .5f);
 8001c0e:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 8001c12:	eddd 4a21 	vldr	s9, [sp, #132]	; 0x84
 8001c16:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8001c1a:	eddd 5a20 	vldr	s11, [sp, #128]	; 0x80
 8001c1e:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 8001c22:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8001c26:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 8001c2a:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 8001c2e:	3548      	adds	r5, #72	; 0x48
 8001c30:	9502      	str	r5, [sp, #8]
 8001c32:	9d01      	ldr	r5, [sp, #4]
 8001c34:	ee34 4a08 	vadd.f32	s8, s8, s16
 8001c38:	3548      	adds	r5, #72	; 0x48
 8001c3a:	9501      	str	r5, [sp, #4]
 8001c3c:	9d00      	ldr	r5, [sp, #0]
 8001c3e:	ee74 4a88 	vadd.f32	s9, s9, s16
 8001c42:	eebd 4ac4 	vcvt.s32.f32	s8, s8
 8001c46:	3d48      	subs	r5, #72	; 0x48
 8001c48:	ee35 5a08 	vadd.f32	s10, s10, s16
 8001c4c:	ee75 5a88 	vadd.f32	s11, s11, s16
 8001c50:	ee14 4a10 	vmov	r4, s8
 8001c54:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 8001c58:	9500      	str	r5, [sp, #0]
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001c5a:	9d03      	ldr	r5, [sp, #12]
    int32_t s32 = (int32_t)(sample + .5f);
 8001c5c:	ee36 6a08 	vadd.f32	s12, s12, s16
 8001c60:	ee14 0a90 	vmov	r0, s9
 8001c64:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    s32 -= (s32 < 0);
 8001c68:	eba4 74d4 	sub.w	r4, r4, r4, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001c6c:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001c70:	f304 040f 	ssat	r4, #16, r4
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001c74:	f825 400c 	strh.w	r4, [r5, ip]
 8001c78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001c7a:	9d08      	ldr	r5, [sp, #32]
    int32_t s32 = (int32_t)(sample + .5f);
 8001c7c:	ee76 6a88 	vadd.f32	s13, s13, s16
 8001c80:	ee15 1a10 	vmov	r1, s10
    s32 -= (s32 < 0);
 8001c84:	eba0 70d0 	sub.w	r0, r0, r0, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001c88:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001c8c:	f300 000f 	ssat	r0, #16, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001c90:	f824 000e 	strh.w	r0, [r4, lr]
 8001c94:	9809      	ldr	r0, [sp, #36]	; 0x24
    int32_t s32 = (int32_t)(sample + .5f);
 8001c96:	ee15 4a90 	vmov	r4, s11
 8001c9a:	ee37 7a08 	vadd.f32	s14, s14, s16
    s32 -= (s32 < 0);
 8001c9e:	eba1 71d1 	sub.w	r1, r1, r1, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001ca2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001ca6:	f301 010f 	ssat	r1, #16, r1
    s32 -= (s32 < 0);
 8001caa:	eba4 74d4 	sub.w	r4, r4, r4, lsr #31
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cae:	f820 100c 	strh.w	r1, [r0, ip]
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001cb2:	f304 040f 	ssat	r4, #16, r4
    int32_t s32 = (int32_t)(sample + .5f);
 8001cb6:	ee16 0a10 	vmov	r0, s12
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cba:	f825 400e 	strh.w	r4, [r5, lr]
 8001cbe:	9c07      	ldr	r4, [sp, #28]
    int32_t s32 = (int32_t)(sample + .5f);
 8001cc0:	ee16 1a90 	vmov	r1, s13
    s32 -= (s32 < 0);
 8001cc4:	eba0 70d0 	sub.w	r0, r0, r0, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001cc8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001ccc:	f300 000f 	ssat	r0, #16, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cd0:	f824 000c 	strh.w	r0, [r4, ip]
 8001cd4:	9c06      	ldr	r4, [sp, #24]
    int32_t s32 = (int32_t)(sample + .5f);
 8001cd6:	ee77 7a88 	vadd.f32	s15, s15, s16
    s32 -= (s32 < 0);
 8001cda:	eba1 71d1 	sub.w	r1, r1, r1, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001cde:	ee17 0a10 	vmov	r0, s14
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001ce2:	f301 010f 	ssat	r1, #16, r1
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001ce6:	f824 100e 	strh.w	r1, [r4, lr]
 8001cea:	9c04      	ldr	r4, [sp, #16]
    int32_t s32 = (int32_t)(sample + .5f);
 8001cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    s32 -= (s32 < 0);
 8001cf0:	eba0 70d0 	sub.w	r0, r0, r0, lsr #31
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001cf4:	f300 000f 	ssat	r0, #16, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cf8:	f824 000c 	strh.w	r0, [r4, ip]
 8001cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
    int32_t s32 = (int32_t)(sample + .5f);
 8001cfe:	ee17 1a90 	vmov	r1, s15
 8001d02:	4484      	add	ip, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d04:	9805      	ldr	r0, [sp, #20]
    s32 -= (s32 < 0);
 8001d06:	eba1 71d1 	sub.w	r1, r1, r1, lsr #31
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001d0a:	f301 010f 	ssat	r1, #16, r1
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d0e:	f820 100e 	strh.w	r1, [r0, lr]
 8001d12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d14:	448e      	add	lr, r1
    for (i = 14; i >= 0; i--)
 8001d16:	492f      	ldr	r1, [pc, #188]	; (8001dd4 <mp3d_synth_granule+0x8a0>)
 8001d18:	3240      	adds	r2, #64	; 0x40
 8001d1a:	4291      	cmp	r1, r2
 8001d1c:	f1a7 0710 	sub.w	r7, r7, #16
 8001d20:	f1a3 0310 	sub.w	r3, r3, #16
 8001d24:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8001d28:	f47f ae29 	bne.w	800197e <mp3d_synth_granule+0x44a>
 8001d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d30:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001d32:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8001d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d38:	910f      	str	r1, [sp, #60]	; 0x3c
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8001d3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001d40:	4614      	mov	r4, r2
 8001d42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d44:	1a1b      	subs	r3, r3, r0
 8001d46:	1a12      	subs	r2, r2, r0
 8001d48:	9303      	str	r3, [sp, #12]
 8001d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8001d4e:	4628      	mov	r0, r5
 8001d50:	9a07      	ldr	r2, [sp, #28]
 8001d52:	4418      	add	r0, r3
 8001d54:	9008      	str	r0, [sp, #32]
 8001d56:	4610      	mov	r0, r2
 8001d58:	9a06      	ldr	r2, [sp, #24]
 8001d5a:	4418      	add	r0, r3
 8001d5c:	9007      	str	r0, [sp, #28]
 8001d5e:	4610      	mov	r0, r2
 8001d60:	9a04      	ldr	r2, [sp, #16]
 8001d62:	4418      	add	r0, r3
 8001d64:	9006      	str	r0, [sp, #24]
 8001d66:	4610      	mov	r0, r2
 8001d68:	9a05      	ldr	r2, [sp, #20]
 8001d6a:	441c      	add	r4, r3
 8001d6c:	4418      	add	r0, r3
 8001d6e:	441a      	add	r2, r3
 8001d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001d72:	940a      	str	r4, [sp, #40]	; 0x28
 8001d74:	3308      	adds	r3, #8
 8001d76:	9310      	str	r3, [sp, #64]	; 0x40
 8001d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d7a:	9004      	str	r0, [sp, #16]
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	930e      	str	r3, [sp, #56]	; 0x38

    for (i = 0; i < nbands; i += 2)
 8001d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001d82:	9205      	str	r2, [sp, #20]
 8001d84:	428b      	cmp	r3, r1
 8001d86:	f47f ada1 	bne.w	80018cc <mp3d_synth_granule+0x398>
    {
        mp3d_synth(grbuf + i, pcm + 32*nch*i, nch, lins + i*64);
    }
#ifndef MINIMP3_NONSTANDARD_BUT_LOGICAL
    if (nch == 1)
 8001d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 8001d92:	d10f      	bne.n	8001db4 <mp3d_synth_granule+0x880>
 8001d94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001d9a:	f503 6070 	add.w	r0, r3, #3840	; 0xf00
    {
        for (i = 0; i < 15*64; i += 2)
        {
            qmf_state[i] = lins[nbands*64 + i];
 8001d9e:	f853 1b08 	ldr.w	r1, [r3], #8
 8001da2:	f842 1b08 	str.w	r1, [r2], #8
        for (i = 0; i < 15*64; i += 2)
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d1f9      	bne.n	8001d9e <mp3d_synth_granule+0x86a>
    } else
#endif /* MINIMP3_NONSTANDARD_BUT_LOGICAL */
    {
        memcpy(qmf_state, lins + nbands*64, sizeof(float)*15*64);
    }
}
 8001daa:	b041      	add	sp, #260	; 0x104
 8001dac:	ecbd 8b0a 	vpop	{d8-d12}
 8001db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(qmf_state, lins + nbands*64, sizeof(float)*15*64);
 8001db4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001db6:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 8001dba:	f44f 6270 	mov.w	r2, #3840	; 0xf00
}
 8001dbe:	b041      	add	sp, #260	; 0x104
 8001dc0:	ecbd 8b0a 	vpop	{d8-d12}
 8001dc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memcpy(qmf_state, lins + nbands*64, sizeof(float)*15*64);
 8001dc8:	f00d ba23 	b.w	800f212 <memcpy>
 8001dcc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 8001dd0:	e50a      	b.n	80017e8 <mp3d_synth_granule+0x2b4>
 8001dd2:	bf00      	nop
 8001dd4:	08010898 	.word	0x08010898

08001dd8 <mp3dec_skip_id3v1>:

#ifdef MINIMP3_IMPLEMENTATION
#include <limits.h>

static void mp3dec_skip_id3v1(const uint8_t *buf, size_t *pbuf_size)
{
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t buf_size = *pbuf_size;
 8001dda:	680c      	ldr	r4, [r1, #0]
#ifndef MINIMP3_NOSKIP_ID3V1
    if (buf_size >= 128 && !memcmp(buf + buf_size - 128, "TAG", 3))
 8001ddc:	2c7f      	cmp	r4, #127	; 0x7f
{
 8001dde:	460e      	mov	r6, r1
 8001de0:	4607      	mov	r7, r0
    if (buf_size >= 128 && !memcmp(buf + buf_size - 128, "TAG", 3))
 8001de2:	d917      	bls.n	8001e14 <mp3dec_skip_id3v1+0x3c>
 8001de4:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8001de8:	18c2      	adds	r2, r0, r3
 8001dea:	5cc1      	ldrb	r1, [r0, r3]
 8001dec:	2954      	cmp	r1, #84	; 0x54
 8001dee:	d015      	beq.n	8001e1c <mp3dec_skip_id3v1+0x44>
        if (buf_size >= 227 && !memcmp(buf + buf_size - 227, "TAG+", 4))
            buf_size -= 227;
    }
#endif
#ifndef MINIMP3_NOSKIP_APEV2
    if (buf_size > 32 && !memcmp(buf + buf_size - 32, "APETAGEX", 8))
 8001df0:	f1a4 0520 	sub.w	r5, r4, #32
 8001df4:	1978      	adds	r0, r7, r5
 8001df6:	2208      	movs	r2, #8
 8001df8:	4919      	ldr	r1, [pc, #100]	; (8001e60 <mp3dec_skip_id3v1+0x88>)
 8001dfa:	f00d f9fb 	bl	800f1f4 <memcmp>
 8001dfe:	b930      	cbnz	r0, 8001e0e <mp3dec_skip_id3v1+0x36>
    {
        buf_size -= 32;
        const uint8_t *tag = buf + buf_size + 8 + 4;
        uint32_t tag_size = (uint32_t)(tag[3] << 24) | (tag[2] << 16) | (tag[1] << 8) | tag[0];
 8001e00:	443c      	add	r4, r7
 8001e02:	f854 4c14 	ldr.w	r4, [r4, #-20]
        if (buf_size >= tag_size)
 8001e06:	42a5      	cmp	r5, r4
            buf_size -= tag_size;
 8001e08:	bf2c      	ite	cs
 8001e0a:	1b2c      	subcs	r4, r5, r4
 8001e0c:	462c      	movcc	r4, r5
    }
#endif
    *pbuf_size = buf_size;
 8001e0e:	6034      	str	r4, [r6, #0]
}
 8001e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e12:	461c      	mov	r4, r3
    if (buf_size > 32 && !memcmp(buf + buf_size - 32, "APETAGEX", 8))
 8001e14:	2c20      	cmp	r4, #32
 8001e16:	d8eb      	bhi.n	8001df0 <mp3dec_skip_id3v1+0x18>
    *pbuf_size = buf_size;
 8001e18:	6034      	str	r4, [r6, #0]
}
 8001e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (buf_size >= 128 && !memcmp(buf + buf_size - 128, "TAG", 3))
 8001e1c:	7851      	ldrb	r1, [r2, #1]
 8001e1e:	2941      	cmp	r1, #65	; 0x41
 8001e20:	f102 0201 	add.w	r2, r2, #1
 8001e24:	d1e4      	bne.n	8001df0 <mp3dec_skip_id3v1+0x18>
 8001e26:	7852      	ldrb	r2, [r2, #1]
 8001e28:	2a47      	cmp	r2, #71	; 0x47
 8001e2a:	d1e1      	bne.n	8001df0 <mp3dec_skip_id3v1+0x18>
        if (buf_size >= 227 && !memcmp(buf + buf_size - 227, "TAG+", 4))
 8001e2c:	2be2      	cmp	r3, #226	; 0xe2
 8001e2e:	d9f0      	bls.n	8001e12 <mp3dec_skip_id3v1+0x3a>
 8001e30:	f46f 72b1 	mvn.w	r2, #354	; 0x162
 8001e34:	4414      	add	r4, r2
 8001e36:	1902      	adds	r2, r0, r4
 8001e38:	5d01      	ldrb	r1, [r0, r4]
 8001e3a:	2954      	cmp	r1, #84	; 0x54
 8001e3c:	d001      	beq.n	8001e42 <mp3dec_skip_id3v1+0x6a>
 8001e3e:	461c      	mov	r4, r3
 8001e40:	e7d6      	b.n	8001df0 <mp3dec_skip_id3v1+0x18>
 8001e42:	7851      	ldrb	r1, [r2, #1]
 8001e44:	2941      	cmp	r1, #65	; 0x41
 8001e46:	f102 0201 	add.w	r2, r2, #1
 8001e4a:	d1f8      	bne.n	8001e3e <mp3dec_skip_id3v1+0x66>
 8001e4c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001e50:	2947      	cmp	r1, #71	; 0x47
 8001e52:	d1f4      	bne.n	8001e3e <mp3dec_skip_id3v1+0x66>
 8001e54:	7852      	ldrb	r2, [r2, #1]
 8001e56:	2a2b      	cmp	r2, #43	; 0x2b
 8001e58:	d0dc      	beq.n	8001e14 <mp3dec_skip_id3v1+0x3c>
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	e7c8      	b.n	8001df0 <mp3dec_skip_id3v1+0x18>
 8001e5e:	bf00      	nop
 8001e60:	080108c4 	.word	0x080108c4

08001e64 <mp3dec_check_vbrtag>:
    *pbuf = (const uint8_t *)buf;
    *pbuf_size = buf_size;
}

static int mp3dec_check_vbrtag(const uint8_t *frame, int frame_size, uint32_t *frames, int *delay, int *padding)
{
 8001e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e68:	4604      	mov	r4, r0
    /  MPEG1          17     32
    /  MPEG2 & 2.5     9     17*/
    bs_t bs[1];
    L3_gr_info_t gr_info[4];
    bs_init(bs, frame + HDR_SIZE, frame_size - HDR_SIZE);
    if (HDR_IS_CRC(frame))
 8001e6a:	7840      	ldrb	r0, [r0, #1]
{
 8001e6c:	b0a0      	sub	sp, #128	; 0x80
 8001e6e:	460d      	mov	r5, r1
    bs_init(bs, frame + HDR_SIZE, frame_size - HDR_SIZE);
 8001e70:	3904      	subs	r1, #4
    bs->limit = bytes*8;
 8001e72:	00c9      	lsls	r1, r1, #3
 8001e74:	f104 0c04 	add.w	ip, r4, #4
{
 8001e78:	461e      	mov	r6, r3
    if (HDR_IS_CRC(frame))
 8001e7a:	07c0      	lsls	r0, r0, #31
    bs->pos   = 0;
 8001e7c:	f04f 0300 	mov.w	r3, #0
{
 8001e80:	4617      	mov	r7, r2
    bs->limit = bytes*8;
 8001e82:	9103      	str	r1, [sp, #12]
    bs->pos   = 0;
 8001e84:	e9cd c301 	strd	ip, r3, [sp, #4]
        get_bits(bs, 16);
 8001e88:	f10d 0804 	add.w	r8, sp, #4
    if (HDR_IS_CRC(frame))
 8001e8c:	d52c      	bpl.n	8001ee8 <mp3dec_check_vbrtag+0x84>
    if (L3_read_side_info(bs, gr_info, frame) < 0)
 8001e8e:	4640      	mov	r0, r8
 8001e90:	4622      	mov	r2, r4
 8001e92:	a904      	add	r1, sp, #16
 8001e94:	f7fe ff4c 	bl	8000d30 <L3_read_side_info>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	db0f      	blt.n	8001ebc <mp3dec_check_vbrtag+0x58>
        return 0; /* side info corrupted */

    const uint8_t *tag = frame + HDR_SIZE + bs->pos/8;
 8001e9c:	9b02      	ldr	r3, [sp, #8]
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001e9e:	4939      	ldr	r1, [pc, #228]	; (8001f84 <mp3dec_check_vbrtag+0x120>)
    const uint8_t *tag = frame + HDR_SIZE + bs->pos/8;
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bfb8      	it	lt
 8001ea4:	3307      	addlt	r3, #7
 8001ea6:	10db      	asrs	r3, r3, #3
 8001ea8:	3304      	adds	r3, #4
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001eaa:	7808      	ldrb	r0, [r1, #0]
 8001eac:	5ce2      	ldrb	r2, [r4, r3]
 8001eae:	4290      	cmp	r0, r2
    const uint8_t *tag = frame + HDR_SIZE + bs->pos/8;
 8001eb0:	4423      	add	r3, r4
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001eb2:	d007      	beq.n	8001ec4 <mp3dec_check_vbrtag+0x60>
 8001eb4:	4934      	ldr	r1, [pc, #208]	; (8001f88 <mp3dec_check_vbrtag+0x124>)
 8001eb6:	7808      	ldrb	r0, [r1, #0]
 8001eb8:	4290      	cmp	r0, r2
 8001eba:	d01a      	beq.n	8001ef2 <mp3dec_check_vbrtag+0x8e>
        return 0; /* side info corrupted */
 8001ebc:	2000      	movs	r0, #0
            return 0;
        *delay   = ((tag[0] << 4) | (tag[1] >> 4)) + (528 + 1);
        *padding = (((tag[1] & 0xF) << 8) | tag[2]) - (528 + 1);
    }
    return 1;
}
 8001ebe:	b020      	add	sp, #128	; 0x80
 8001ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001ec4:	7848      	ldrb	r0, [r1, #1]
 8001ec6:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001eca:	4560      	cmp	r0, ip
 8001ecc:	f103 0e01 	add.w	lr, r3, #1
 8001ed0:	d1f0      	bne.n	8001eb4 <mp3dec_check_vbrtag+0x50>
 8001ed2:	7888      	ldrb	r0, [r1, #2]
 8001ed4:	f81e cf01 	ldrb.w	ip, [lr, #1]!
 8001ed8:	4560      	cmp	r0, ip
 8001eda:	d1eb      	bne.n	8001eb4 <mp3dec_check_vbrtag+0x50>
 8001edc:	78c8      	ldrb	r0, [r1, #3]
 8001ede:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8001ee2:	4288      	cmp	r0, r1
 8001ee4:	d1e6      	bne.n	8001eb4 <mp3dec_check_vbrtag+0x50>
 8001ee6:	e014      	b.n	8001f12 <mp3dec_check_vbrtag+0xae>
        get_bits(bs, 16);
 8001ee8:	4640      	mov	r0, r8
 8001eea:	2110      	movs	r1, #16
 8001eec:	f7fe fe64 	bl	8000bb8 <get_bits>
 8001ef0:	e7cd      	b.n	8001e8e <mp3dec_check_vbrtag+0x2a>
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001ef2:	784a      	ldrb	r2, [r1, #1]
 8001ef4:	7858      	ldrb	r0, [r3, #1]
 8001ef6:	4282      	cmp	r2, r0
 8001ef8:	f103 0c01 	add.w	ip, r3, #1
 8001efc:	d1de      	bne.n	8001ebc <mp3dec_check_vbrtag+0x58>
 8001efe:	788a      	ldrb	r2, [r1, #2]
 8001f00:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8001f04:	4282      	cmp	r2, r0
 8001f06:	d1d9      	bne.n	8001ebc <mp3dec_check_vbrtag+0x58>
 8001f08:	78c9      	ldrb	r1, [r1, #3]
 8001f0a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8001f0e:	4291      	cmp	r1, r2
 8001f10:	d1d4      	bne.n	8001ebc <mp3dec_check_vbrtag+0x58>
    int flags = tag[7];
 8001f12:	79da      	ldrb	r2, [r3, #7]
    if (!((flags & FRAMES_FLAG)))
 8001f14:	07d1      	lsls	r1, r2, #31
 8001f16:	d532      	bpl.n	8001f7e <mp3dec_check_vbrtag+0x11a>
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	ba09      	rev	r1, r1
    *frames = (uint32_t)(tag[0] << 24) | (tag[1] << 16) | (tag[2] << 8) | tag[3];
 8001f1c:	6039      	str	r1, [r7, #0]
    if (flags & BYTES_FLAG)
 8001f1e:	0797      	lsls	r7, r2, #30
        tag += 4;
 8001f20:	bf4c      	ite	mi
 8001f22:	3310      	addmi	r3, #16
    tag += 4;
 8001f24:	330c      	addpl	r3, #12
    if (flags & TOC_FLAG)
 8001f26:	0750      	lsls	r0, r2, #29
        tag += 100;
 8001f28:	bf48      	it	mi
 8001f2a:	3364      	addmi	r3, #100	; 0x64
    if (flags & VBR_SCALE_FLAG)
 8001f2c:	0711      	lsls	r1, r2, #28
    *delay = *padding = 0;
 8001f2e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001f30:	f04f 0200 	mov.w	r2, #0
        tag += 4;
 8001f34:	bf48      	it	mi
 8001f36:	3304      	addmi	r3, #4
    *delay = *padding = 0;
 8001f38:	600a      	str	r2, [r1, #0]
 8001f3a:	6032      	str	r2, [r6, #0]
    if (*tag)
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	b1d2      	cbz	r2, 8001f76 <mp3dec_check_vbrtag+0x112>
        if (tag - frame + 14 >= frame_size)
 8001f40:	1b18      	subs	r0, r3, r4
 8001f42:	3023      	adds	r0, #35	; 0x23
 8001f44:	42a8      	cmp	r0, r5
 8001f46:	dab9      	bge.n	8001ebc <mp3dec_check_vbrtag+0x58>
        *delay   = ((tag[0] << 4) | (tag[1] >> 4)) + (528 + 1);
 8001f48:	7d9a      	ldrb	r2, [r3, #22]
 8001f4a:	7d59      	ldrb	r1, [r3, #21]
 8001f4c:	0912      	lsrs	r2, r2, #4
 8001f4e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8001f52:	f202 2211 	addw	r2, r2, #529	; 0x211
 8001f56:	6032      	str	r2, [r6, #0]
        *padding = (((tag[1] & 0xF) << 8) | tag[2]) - (528 + 1);
 8001f58:	7d9a      	ldrb	r2, [r3, #22]
 8001f5a:	7dd9      	ldrb	r1, [r3, #23]
 8001f5c:	0213      	lsls	r3, r2, #8
 8001f5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f46f 7204 	mvn.w	r2, #528	; 0x210
 8001f68:	4413      	add	r3, r2
 8001f6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    return 1;
 8001f6c:	2001      	movs	r0, #1
        *padding = (((tag[1] & 0xF) << 8) | tag[2]) - (528 + 1);
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	b020      	add	sp, #128	; 0x80
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 1;
 8001f76:	2001      	movs	r0, #1
}
 8001f78:	b020      	add	sp, #128	; 0x80
 8001f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f82:	e79c      	b.n	8001ebe <mp3dec_check_vbrtag+0x5a>
 8001f84:	08010858 	.word	0x08010858
 8001f88:	0800fce8 	.word	0x0800fce8

08001f8c <prvMp3PlayerMiniIoSeek>:
  * @brief  custom minimp3 io seek function
  * @param  seek position
  * @param  mp3 file pointer
  * @retval FRESULT code
  */
static int prvMp3PlayerMiniIoSeek(uint64_t ullPosition, void* pvUserData){
 8001f8c:	b508      	push	{r3, lr}
	return f_lseek((FIL*) pvUserData, ullPosition);
 8001f8e:	4601      	mov	r1, r0
 8001f90:	4610      	mov	r0, r2
 8001f92:	f00a fdb9 	bl	800cb08 <f_lseek>
}
 8001f96:	bd08      	pop	{r3, pc}

08001f98 <prvMp3PlayerMiniIoRead>:
static size_t prvMp3PlayerMiniIoRead(void* pvBuf, size_t xSize, void* pvUserData){
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	b082      	sub	sp, #8
	f_read((FIL*) pvUserData, pvBuf, (unsigned int) xSize, (unsigned int*) &uxBytesRead);
 8001f9e:	460a      	mov	r2, r1
 8001fa0:	ab01      	add	r3, sp, #4
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f00a fbd9 	bl	800c75c <f_read>
}
 8001faa:	9801      	ldr	r0, [sp, #4]
 8001fac:	b002      	add	sp, #8
 8001fae:	bd10      	pop	{r4, pc}

08001fb0 <mp3dec_skip_id3v2>:
    if (buf_size >= MINIMP3_ID3_DETECT_SIZE && !memcmp(buf, "ID3", 3) && !((buf[5] & 15) || (buf[6] & 0x80) || (buf[7] & 0x80) || (buf[8] & 0x80) || (buf[9] & 0x80)))
 8001fb0:	2909      	cmp	r1, #9
 8001fb2:	d902      	bls.n	8001fba <mp3dec_skip_id3v2+0xa>
 8001fb4:	7803      	ldrb	r3, [r0, #0]
 8001fb6:	2b49      	cmp	r3, #73	; 0x49
 8001fb8:	d001      	beq.n	8001fbe <mp3dec_skip_id3v2+0xe>
    return 0;
 8001fba:	2000      	movs	r0, #0
}
 8001fbc:	4770      	bx	lr
    if (buf_size >= MINIMP3_ID3_DETECT_SIZE && !memcmp(buf, "ID3", 3) && !((buf[5] & 15) || (buf[6] & 0x80) || (buf[7] & 0x80) || (buf[8] & 0x80) || (buf[9] & 0x80)))
 8001fbe:	7843      	ldrb	r3, [r0, #1]
 8001fc0:	2b44      	cmp	r3, #68	; 0x44
 8001fc2:	d1fa      	bne.n	8001fba <mp3dec_skip_id3v2+0xa>
 8001fc4:	7883      	ldrb	r3, [r0, #2]
 8001fc6:	2b33      	cmp	r3, #51	; 0x33
 8001fc8:	d1f7      	bne.n	8001fba <mp3dec_skip_id3v2+0xa>
{
 8001fca:	b430      	push	{r4, r5}
    if (buf_size >= MINIMP3_ID3_DETECT_SIZE && !memcmp(buf, "ID3", 3) && !((buf[5] & 15) || (buf[6] & 0x80) || (buf[7] & 0x80) || (buf[8] & 0x80) || (buf[9] & 0x80)))
 8001fcc:	7945      	ldrb	r5, [r0, #5]
 8001fce:	f015 030f 	ands.w	r3, r5, #15
 8001fd2:	d11b      	bne.n	800200c <mp3dec_skip_id3v2+0x5c>
 8001fd4:	7981      	ldrb	r1, [r0, #6]
 8001fd6:	060a      	lsls	r2, r1, #24
 8001fd8:	d418      	bmi.n	800200c <mp3dec_skip_id3v2+0x5c>
 8001fda:	79c2      	ldrb	r2, [r0, #7]
 8001fdc:	0614      	lsls	r4, r2, #24
 8001fde:	d415      	bmi.n	800200c <mp3dec_skip_id3v2+0x5c>
 8001fe0:	7a04      	ldrb	r4, [r0, #8]
 8001fe2:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001fe6:	d114      	bne.n	8002012 <mp3dec_skip_id3v2+0x62>
 8001fe8:	7a40      	ldrb	r0, [r0, #9]
 8001fea:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fee:	d110      	bne.n	8002012 <mp3dec_skip_id3v2+0x62>
        size_t id3v2size = (((buf[6] & 0x7f) << 21) | ((buf[7] & 0x7f) << 14) | ((buf[8] & 0x7f) << 7) | (buf[9] & 0x7f)) + 10;
 8001ff0:	0393      	lsls	r3, r2, #14
 8001ff2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001ff6:	4303      	orrs	r3, r0
 8001ff8:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
        if ((buf[5] & 16))
 8001ffc:	06ea      	lsls	r2, r5, #27
        size_t id3v2size = (((buf[6] & 0x7f) << 21) | ((buf[7] & 0x7f) << 14) | ((buf[8] & 0x7f) << 7) | (buf[9] & 0x7f)) + 10;
 8001ffe:	f103 000a 	add.w	r0, r3, #10
        if ((buf[5] & 16))
 8002002:	d501      	bpl.n	8002008 <mp3dec_skip_id3v2+0x58>
            id3v2size += 10; /* footer */
 8002004:	f103 0014 	add.w	r0, r3, #20
}
 8002008:	bc30      	pop	{r4, r5}
 800200a:	4770      	bx	lr
    return 0;
 800200c:	2000      	movs	r0, #0
}
 800200e:	bc30      	pop	{r4, r5}
 8002010:	4770      	bx	lr
    return 0;
 8002012:	4618      	mov	r0, r3
 8002014:	e7f8      	b.n	8002008 <mp3dec_skip_id3v2+0x58>
 8002016:	bf00      	nop

08002018 <mp3d_find_frame>:
    }
    return 1;
}

static int mp3d_find_frame(const uint8_t *mp3, int mp3_bytes, int *free_format_bytes, int *ptr_frame_bytes)
{
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i, k;
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 800201c:	f1a1 0904 	sub.w	r9, r1, #4
{
 8002020:	b087      	sub	sp, #28
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 8002022:	f1b9 0f00 	cmp.w	r9, #0
{
 8002026:	9101      	str	r1, [sp, #4]
 8002028:	9202      	str	r2, [sp, #8]
 800202a:	9305      	str	r3, [sp, #20]
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 800202c:	dd65      	ble.n	80020fa <mp3d_find_frame+0xe2>
 800202e:	4605      	mov	r5, r0
 8002030:	f04f 0800 	mov.w	r8, #0
 8002034:	e005      	b.n	8002042 <mp3d_find_frame+0x2a>
 8002036:	f108 0801 	add.w	r8, r8, #1
 800203a:	45c8      	cmp	r8, r9
 800203c:	f105 0501 	add.w	r5, r5, #1
 8002040:	d05b      	beq.n	80020fa <mp3d_find_frame+0xe2>
    {
        if (hdr_valid(mp3))
 8002042:	4628      	mov	r0, r5
 8002044:	f7fe fdea 	bl	8000c1c <hdr_valid>
 8002048:	2800      	cmp	r0, #0
 800204a:	d0f4      	beq.n	8002036 <mp3d_find_frame+0x1e>
        {
            int frame_bytes = hdr_frame_bytes(mp3, *free_format_bytes);
 800204c:	9b02      	ldr	r3, [sp, #8]
 800204e:	4628      	mov	r0, r5
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	f7fe fe23 	bl	8000c9c <hdr_frame_bytes>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 8002056:	78aa      	ldrb	r2, [r5, #2]
            int frame_bytes = hdr_frame_bytes(mp3, *free_format_bytes);
 8002058:	4683      	mov	fp, r0
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 800205a:	0790      	lsls	r0, r2, #30
 800205c:	d556      	bpl.n	800210c <mp3d_find_frame+0xf4>
 800205e:	786a      	ldrb	r2, [r5, #1]
 8002060:	f002 0206 	and.w	r2, r2, #6
 8002064:	2a06      	cmp	r2, #6
 8002066:	bf0c      	ite	eq
 8002068:	f10b 0304 	addeq.w	r3, fp, #4
 800206c:	f10b 0301 	addne.w	r3, fp, #1
 8002070:	9304      	str	r3, [sp, #16]
            int frame_and_padding = frame_bytes + hdr_padding(mp3);

            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 8002072:	f1bb 0f00 	cmp.w	fp, #0
 8002076:	d04e      	beq.n	8002116 <mp3d_find_frame+0xfe>
 8002078:	9f04      	ldr	r7, [sp, #16]
 800207a:	eb07 0a08 	add.w	sl, r7, r8
                    frame_and_padding = k;
                    frame_bytes = fb;
                    *free_format_bytes = fb;
                }
            }
            if ((frame_bytes && i + frame_and_padding <= mp3_bytes &&
 800207e:	9b01      	ldr	r3, [sp, #4]
 8002080:	4553      	cmp	r3, sl
 8002082:	db2c      	blt.n	80020de <mp3d_find_frame+0xc6>
 8002084:	9b01      	ldr	r3, [sp, #4]
 8002086:	f8cd 900c 	str.w	r9, [sp, #12]
    for (i = 0, nmatch = 0; nmatch < MAX_FRAME_SYNC_MATCHES; nmatch++)
 800208a:	2400      	movs	r4, #0
 800208c:	eba3 0308 	sub.w	r3, r3, r8
 8002090:	462e      	mov	r6, r5
 8002092:	46a1      	mov	r9, r4
 8002094:	469a      	mov	sl, r3
        i += hdr_frame_bytes(hdr + i, frame_bytes) + hdr_padding(hdr + i);
 8002096:	4659      	mov	r1, fp
 8002098:	4630      	mov	r0, r6
 800209a:	f7fe fdff 	bl	8000c9c <hdr_frame_bytes>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 800209e:	78b1      	ldrb	r1, [r6, #2]
 80020a0:	078b      	lsls	r3, r1, #30
        i += hdr_frame_bytes(hdr + i, frame_bytes) + hdr_padding(hdr + i);
 80020a2:	4602      	mov	r2, r0
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80020a4:	d506      	bpl.n	80020b4 <mp3d_find_frame+0x9c>
 80020a6:	7871      	ldrb	r1, [r6, #1]
 80020a8:	f001 0106 	and.w	r1, r1, #6
 80020ac:	2906      	cmp	r1, #6
 80020ae:	bf0c      	ite	eq
 80020b0:	3204      	addeq	r2, #4
 80020b2:	3201      	addne	r2, #1
        i += hdr_frame_bytes(hdr + i, frame_bytes) + hdr_padding(hdr + i);
 80020b4:	4491      	add	r9, r2
        if (i + HDR_SIZE > mp3_bytes)
 80020b6:	f109 0203 	add.w	r2, r9, #3
        if (!hdr_compare(hdr, hdr + i))
 80020ba:	eb05 0609 	add.w	r6, r5, r9
        if (i + HDR_SIZE > mp3_bytes)
 80020be:	4592      	cmp	sl, r2
        if (!hdr_compare(hdr, hdr + i))
 80020c0:	4628      	mov	r0, r5
 80020c2:	4631      	mov	r1, r6
        if (i + HDR_SIZE > mp3_bytes)
 80020c4:	f340 8088 	ble.w	80021d8 <mp3d_find_frame+0x1c0>
        if (!hdr_compare(hdr, hdr + i))
 80020c8:	f7fe fdc4 	bl	8000c54 <hdr_compare>
    for (i = 0, nmatch = 0; nmatch < MAX_FRAME_SYNC_MATCHES; nmatch++)
 80020cc:	3401      	adds	r4, #1
        if (!hdr_compare(hdr, hdr + i))
 80020ce:	b120      	cbz	r0, 80020da <mp3d_find_frame+0xc2>
    for (i = 0, nmatch = 0; nmatch < MAX_FRAME_SYNC_MATCHES; nmatch++)
 80020d0:	2c03      	cmp	r4, #3
 80020d2:	d1e0      	bne.n	8002096 <mp3d_find_frame+0x7e>
                mp3d_match_frame(mp3, mp3_bytes - i, frame_bytes)) ||
                (!i && frame_and_padding == mp3_bytes))
            {
                *ptr_frame_bytes = frame_and_padding;
 80020d4:	9b05      	ldr	r3, [sp, #20]
 80020d6:	601f      	str	r7, [r3, #0]
                return i;
 80020d8:	e014      	b.n	8002104 <mp3d_find_frame+0xec>
 80020da:	f8dd 900c 	ldr.w	r9, [sp, #12]
                mp3d_match_frame(mp3, mp3_bytes - i, frame_bytes)) ||
 80020de:	f1b8 0f00 	cmp.w	r8, #0
 80020e2:	d067      	beq.n	80021b4 <mp3d_find_frame+0x19c>
            }
            *free_format_bytes = 0;
 80020e4:	9b02      	ldr	r3, [sp, #8]
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 80020e6:	f108 0801 	add.w	r8, r8, #1
            *free_format_bytes = 0;
 80020ea:	461a      	mov	r2, r3
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 80020ec:	45c8      	cmp	r8, r9
            *free_format_bytes = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	6013      	str	r3, [r2, #0]
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 80020f4:	f105 0501 	add.w	r5, r5, #1
 80020f8:	d1a3      	bne.n	8002042 <mp3d_find_frame+0x2a>
        }
    }
    *ptr_frame_bytes = 0;
 80020fa:	9a05      	ldr	r2, [sp, #20]
    return mp3_bytes;
 80020fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
    *ptr_frame_bytes = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	4640      	mov	r0, r8
 8002106:	b007      	add	sp, #28
 8002108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int frame_bytes = hdr_frame_bytes(mp3, *free_format_bytes);
 800210c:	f8cd b010 	str.w	fp, [sp, #16]
            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 8002110:	f1bb 0f00 	cmp.w	fp, #0
 8002114:	d1b0      	bne.n	8002078 <mp3d_find_frame+0x60>
 8002116:	f108 33ff 	add.w	r3, r8, #4294967295
 800211a:	2404      	movs	r4, #4
 800211c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002120:	469b      	mov	fp, r3
 8002122:	9b03      	ldr	r3, [sp, #12]
 8002124:	eb03 0644 	add.w	r6, r3, r4, lsl #1
 8002128:	45b1      	cmp	r9, r6
 800212a:	dd52      	ble.n	80021d2 <mp3d_find_frame+0x1ba>
 800212c:	4627      	mov	r7, r4
                if (hdr_compare(mp3, mp3 + k))
 800212e:	1929      	adds	r1, r5, r4
 8002130:	4628      	mov	r0, r5
 8002132:	f7fe fd8f 	bl	8000c54 <hdr_compare>
 8002136:	3401      	adds	r4, #1
 8002138:	b380      	cbz	r0, 800219c <mp3d_find_frame+0x184>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 800213a:	78ab      	ldrb	r3, [r5, #2]
 800213c:	0799      	lsls	r1, r3, #30
 800213e:	d53f      	bpl.n	80021c0 <mp3d_find_frame+0x1a8>
 8002140:	786b      	ldrb	r3, [r5, #1]
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	2b06      	cmp	r3, #6
 8002148:	bf0c      	ite	eq
 800214a:	f1a7 0804 	subeq.w	r8, r7, #4
 800214e:	f107 38ff 	addne.w	r8, r7, #4294967295
 8002152:	192a      	adds	r2, r5, r4
 8002154:	7852      	ldrb	r2, [r2, #1]
 8002156:	0792      	lsls	r2, r2, #30
 8002158:	d530      	bpl.n	80021bc <mp3d_find_frame+0x1a4>
 800215a:	5d2a      	ldrb	r2, [r5, r4]
 800215c:	f002 0206 	and.w	r2, r2, #6
 8002160:	2a06      	cmp	r2, #6
 8002162:	bf0c      	ite	eq
 8002164:	f108 0104 	addeq.w	r1, r8, #4
 8002168:	f108 0101 	addne.w	r1, r8, #1
 800216c:	eb0b 0a04 	add.w	sl, fp, r4
                    if (i + k + nextfb + HDR_SIZE > mp3_bytes || !hdr_compare(mp3, mp3 + k + nextfb))
 8002170:	eb0a 0201 	add.w	r2, sl, r1
 8002174:	9b01      	ldr	r3, [sp, #4]
 8002176:	3203      	adds	r2, #3
 8002178:	429a      	cmp	r2, r3
 800217a:	da0f      	bge.n	800219c <mp3d_find_frame+0x184>
 800217c:	4439      	add	r1, r7
 800217e:	4429      	add	r1, r5
 8002180:	4628      	mov	r0, r5
 8002182:	f7fe fd67 	bl	8000c54 <hdr_compare>
 8002186:	b148      	cbz	r0, 800219c <mp3d_find_frame+0x184>
                    *free_format_bytes = fb;
 8002188:	9b02      	ldr	r3, [sp, #8]
 800218a:	f8c3 8000 	str.w	r8, [r3]
            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 800218e:	f1b8 0f00 	cmp.w	r8, #0
 8002192:	d017      	beq.n	80021c4 <mp3d_find_frame+0x1ac>
 8002194:	46c3      	mov	fp, r8
 8002196:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800219a:	e770      	b.n	800207e <mp3d_find_frame+0x66>
 800219c:	f5b4 6f10 	cmp.w	r4, #2304	; 0x900
 80021a0:	d003      	beq.n	80021aa <mp3d_find_frame+0x192>
 80021a2:	3602      	adds	r6, #2
 80021a4:	454e      	cmp	r6, r9
 80021a6:	4627      	mov	r7, r4
 80021a8:	dbc1      	blt.n	800212e <mp3d_find_frame+0x116>
 80021aa:	e9dd 8703 	ldrd	r8, r7, [sp, #12]
                mp3d_match_frame(mp3, mp3_bytes - i, frame_bytes)) ||
 80021ae:	f1b8 0f00 	cmp.w	r8, #0
 80021b2:	d197      	bne.n	80020e4 <mp3d_find_frame+0xcc>
                (!i && frame_and_padding == mp3_bytes))
 80021b4:	9b01      	ldr	r3, [sp, #4]
 80021b6:	42bb      	cmp	r3, r7
 80021b8:	d194      	bne.n	80020e4 <mp3d_find_frame+0xcc>
 80021ba:	e78b      	b.n	80020d4 <mp3d_find_frame+0xbc>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80021bc:	4641      	mov	r1, r8
 80021be:	e7d5      	b.n	800216c <mp3d_find_frame+0x154>
 80021c0:	46b8      	mov	r8, r7
 80021c2:	e7c6      	b.n	8002152 <mp3d_find_frame+0x13a>
            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 80021c4:	f5b4 6f10 	cmp.w	r4, #2304	; 0x900
 80021c8:	9704      	str	r7, [sp, #16]
 80021ca:	d1aa      	bne.n	8002122 <mp3d_find_frame+0x10a>
 80021cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80021d0:	e785      	b.n	80020de <mp3d_find_frame+0xc6>
 80021d2:	4698      	mov	r8, r3
 80021d4:	9f04      	ldr	r7, [sp, #16]
 80021d6:	e782      	b.n	80020de <mp3d_find_frame+0xc6>
 80021d8:	f8dd 900c 	ldr.w	r9, [sp, #12]
            if ((frame_bytes && i + frame_and_padding <= mp3_bytes &&
 80021dc:	2c00      	cmp	r4, #0
 80021de:	f43f af7e 	beq.w	80020de <mp3d_find_frame+0xc6>
 80021e2:	e777      	b.n	80020d4 <mp3d_find_frame+0xbc>

080021e4 <mp3dec_decode_frame>:
{
    dec->header[0] = 0;
}

int mp3dec_decode_frame(mp3dec_t *dec, const uint8_t *mp3, int mp3_bytes, mp3d_sample_t *pcm, mp3dec_frame_info_t *info)
{
 80021e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e8:	ed2d 8b04 	vpush	{d8-d9}
 80021ec:	f5ad 4d87 	sub.w	sp, sp, #17280	; 0x4380
 80021f0:	b085      	sub	sp, #20
 80021f2:	4615      	mov	r5, r2
    int i = 0, igr, frame_size = 0, success = 1;
    const uint8_t *hdr;
    bs_t bs_frame[1];
    mp3dec_scratch_t scratch;

    if (mp3_bytes > 4 && dec->header[0] == 0xff && hdr_compare(dec->header, mp3))
 80021f4:	2d04      	cmp	r5, #4
    int i = 0, igr, frame_size = 0, success = 1;
 80021f6:	f04f 0200 	mov.w	r2, #0
{
 80021fa:	900d      	str	r0, [sp, #52]	; 0x34
 80021fc:	9312      	str	r3, [sp, #72]	; 0x48
    int i = 0, igr, frame_size = 0, success = 1;
 80021fe:	9223      	str	r2, [sp, #140]	; 0x8c
{
 8002200:	910e      	str	r1, [sp, #56]	; 0x38
    if (mp3_bytes > 4 && dec->header[0] == 0xff && hdr_compare(dec->header, mp3))
 8002202:	dd07      	ble.n	8002214 <mp3dec_decode_frame+0x30>
 8002204:	f641 0308 	movw	r3, #6152	; 0x1808
 8002208:	4602      	mov	r2, r0
 800220a:	4418      	add	r0, r3
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	f000 8202 	beq.w	8002618 <mp3dec_decode_frame+0x434>
            frame_size = 0;
        }
    }
    if (!frame_size)
    {
        memset(dec, 0, sizeof(mp3dec_t));
 8002214:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002216:	f641 220c 	movw	r2, #6668	; 0x1a0c
 800221a:	2100      	movs	r1, #0
 800221c:	4620      	mov	r0, r4
 800221e:	f00d f81c 	bl	800f25a <memset>
        i = mp3d_find_frame(mp3, mp3_bytes, &dec->free_format_bytes, &frame_size);
 8002222:	f504 52c0 	add.w	r2, r4, #6144	; 0x1800
 8002226:	3204      	adds	r2, #4
 8002228:	ab23      	add	r3, sp, #140	; 0x8c
 800222a:	4629      	mov	r1, r5
 800222c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800222e:	f7ff fef3 	bl	8002018 <mp3d_find_frame>
        if (!frame_size || i + frame_size > mp3_bytes)
 8002232:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002234:	2c00      	cmp	r4, #0
 8002236:	f000 81e2 	beq.w	80025fe <mp3dec_decode_frame+0x41a>
 800223a:	1823      	adds	r3, r4, r0
 800223c:	42ab      	cmp	r3, r5
 800223e:	f300 81de 	bgt.w	80025fe <mp3dec_decode_frame+0x41a>
 8002242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002244:	4402      	add	r2, r0
 8002246:	920e      	str	r2, [sp, #56]	; 0x38
            return 0;
        }
    }

    hdr = mp3 + i;
    memcpy(dec->header, hdr, HDR_SIZE);
 8002248:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800224a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800224c:	6829      	ldr	r1, [r5, #0]
 800224e:	f641 0208 	movw	r2, #6152	; 0x1808
 8002252:	50b1      	str	r1, [r6, r2]
    info->frame_bytes = i + frame_size;
 8002254:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 8002258:	3248      	adds	r2, #72	; 0x48
    info->frame_offset = i;
    info->channels = HDR_IS_MONO(hdr) ? 1 : 2;
 800225a:	f50d 4187 	add.w	r1, sp, #17280	; 0x4380
    info->frame_bytes = i + frame_size;
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	6013      	str	r3, [r2, #0]
    info->frame_offset = i;
 8002262:	6050      	str	r0, [r2, #4]
    info->channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8002264:	78eb      	ldrb	r3, [r5, #3]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8002266:	4864      	ldr	r0, [pc, #400]	; (80023f8 <mp3dec_decode_frame+0x214>)
    info->channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8002268:	3148      	adds	r1, #72	; 0x48
 800226a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800226e:	2bc0      	cmp	r3, #192	; 0xc0
 8002270:	6809      	ldr	r1, [r1, #0]
 8002272:	462a      	mov	r2, r5
 8002274:	bf14      	ite	ne
 8002276:	2302      	movne	r3, #2
 8002278:	2301      	moveq	r3, #1
 800227a:	608b      	str	r3, [r1, #8]
 800227c:	462e      	mov	r6, r5
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 800227e:	7892      	ldrb	r2, [r2, #2]
 8002280:	7873      	ldrb	r3, [r6, #1]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8002282:	4d5e      	ldr	r5, [pc, #376]	; (80023fc <mp3dec_decode_frame+0x218>)
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8002284:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002288:	f083 0108 	eor.w	r1, r3, #8
 800228c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002290:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8002294:	f083 0310 	eor.w	r3, r3, #16
 8002298:	40ca      	lsrs	r2, r1
 800229a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
    info->hz = hdr_sample_rate_hz(hdr);
 80022a2:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 80022a6:	3248      	adds	r2, #72	; 0x48
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	60d3      	str	r3, [r2, #12]
    info->layer = 4 - HDR_GET_LAYER(hdr);
 80022ac:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80022b0:	7872      	ldrb	r2, [r6, #1]
 80022b2:	3348      	adds	r3, #72	; 0x48
 80022b4:	f3c2 0241 	ubfx	r2, r2, #1, #2
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1c2 0204 	rsb	r2, r2, #4
 80022be:	611a      	str	r2, [r3, #16]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 80022c0:	7873      	ldrb	r3, [r6, #1]
 80022c2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 80022c6:	0041      	lsls	r1, r0, #1
 80022c8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80022cc:	4401      	add	r1, r0
 80022ce:	3b01      	subs	r3, #1
 80022d0:	78b0      	ldrb	r0, [r6, #2]
 80022d2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80022d6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80022da:	440b      	add	r3, r1
 80022dc:	eb05 1110 	add.w	r1, r5, r0, lsr #4
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
    info->bitrate_kbps = hdr_bitrate_kbps(hdr);
 80022e2:	f50d 4187 	add.w	r1, sp, #17280	; 0x4380
 80022e6:	3148      	adds	r1, #72	; 0x48
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 80022e8:	005b      	lsls	r3, r3, #1
    info->bitrate_kbps = hdr_bitrate_kbps(hdr);
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	614b      	str	r3, [r1, #20]

    if (!pcm)
 80022ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8203 	beq.w	80026fc <mp3dec_decode_frame+0x518>
    {
        return hdr_frame_samples(hdr);
    }

    bs_init(bs_frame, hdr + HDR_SIZE, frame_size - HDR_SIZE);
    if (HDR_IS_CRC(hdr))
 80022f6:	980e      	ldr	r0, [sp, #56]	; 0x38
    bs_init(bs_frame, hdr + HDR_SIZE, frame_size - HDR_SIZE);
 80022f8:	1f23      	subs	r3, r4, #4
    bs->limit = bytes*8;
 80022fa:	00db      	lsls	r3, r3, #3
    if (HDR_IS_CRC(hdr))
 80022fc:	7841      	ldrb	r1, [r0, #1]
    bs->limit = bytes*8;
 80022fe:	9327      	str	r3, [sp, #156]	; 0x9c
    bs->pos   = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	9326      	str	r3, [sp, #152]	; 0x98
    if (HDR_IS_CRC(hdr))
 8002304:	07c9      	lsls	r1, r1, #31
    bs_init(bs_frame, hdr + HDR_SIZE, frame_size - HDR_SIZE);
 8002306:	f100 0304 	add.w	r3, r0, #4
    bs->buf   = data;
 800230a:	9325      	str	r3, [sp, #148]	; 0x94
    if (HDR_IS_CRC(hdr))
 800230c:	f140 8222 	bpl.w	8002754 <mp3dec_decode_frame+0x570>
    {
        get_bits(bs_frame, 16);
    }

    if (info->layer == 3)
 8002310:	2a03      	cmp	r2, #3
 8002312:	f000 822b 	beq.w	800276c <mp3dec_decode_frame+0x588>
    int mode = HDR_GET_STEREO_MODE(hdr);
 8002316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002318:	78db      	ldrb	r3, [r3, #3]
 800231a:	0999      	lsrs	r1, r3, #6
    int nbands, stereo_bands = (mode == MODE_MONO) ? 0 : (mode == MODE_JOINT_STEREO) ? (HDR_GET_STEREO_MODE_EXT(hdr) << 2) + 4 : 32;
 800231c:	2903      	cmp	r1, #3
 800231e:	f000 82e3 	beq.w	80028e8 <mp3dec_decode_frame+0x704>
 8002322:	2901      	cmp	r1, #1
 8002324:	f000 82ec 	beq.w	8002900 <mp3dec_decode_frame+0x71c>
 8002328:	2320      	movs	r3, #32
    if (HDR_IS_LAYER_1(hdr))
 800232a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800232c:	7862      	ldrb	r2, [r4, #1]
 800232e:	f002 0006 	and.w	r0, r2, #6
 8002332:	2806      	cmp	r0, #6
 8002334:	f000 8203 	beq.w	800273e <mp3dec_decode_frame+0x55a>
    } else if (!HDR_TEST_MPEG1(hdr))
 8002338:	0710      	lsls	r0, r2, #28
 800233a:	f140 82d7 	bpl.w	80028ec <mp3dec_decode_frame+0x708>
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 800233e:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8002342:	3a01      	subs	r2, #1
        int sample_rate_idx = HDR_GET_SAMPLE_RATE(hdr);
 8002344:	78a0      	ldrb	r0, [r4, #2]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8002346:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800234a:	442a      	add	r2, r5
 800234c:	eb02 1210 	add.w	r2, r2, r0, lsr #4
        unsigned kbps = hdr_bitrate_kbps(hdr) >> (int)(mode != MODE_MONO);
 8002350:	3903      	subs	r1, #3
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8002352:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
        unsigned kbps = hdr_bitrate_kbps(hdr) >> (int)(mode != MODE_MONO);
 8002356:	bf18      	it	ne
 8002358:	2101      	movne	r1, #1
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 800235a:	0052      	lsls	r2, r2, #1
        if (!kbps) /* free-format */
 800235c:	40ca      	lsrs	r2, r1
 800235e:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8002362:	f040 82d9 	bne.w	8002918 <mp3dec_decode_frame+0x734>
        } else if (kbps >= 96 && sample_rate_idx != 1)
 8002366:	2801      	cmp	r0, #1
 8002368:	f001 81e5 	beq.w	8003736 <mp3dec_decode_frame+0x1552>
 800236c:	f04f 0b1e 	mov.w	fp, #30
        alloc = g_alloc_L2M1;
 8002370:	4e23      	ldr	r6, [pc, #140]	; (8002400 <mp3dec_decode_frame+0x21c>)
            nbands = 30;
 8002372:	465d      	mov	r5, fp
        } else if (kbps >= 96 && sample_rate_idx != 1)
 8002374:	f04f 093c 	mov.w	r9, #60	; 0x3c
    sci->total_bands = (uint8_t)nbands;
 8002378:	aa28      	add	r2, sp, #160	; 0xa0
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 800237a:	429d      	cmp	r5, r3
    sci->total_bands = (uint8_t)nbands;
 800237c:	9207      	str	r2, [sp, #28]
 800237e:	f882 b300 	strb.w	fp, [r2, #768]	; 0x300
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 8002382:	f280 81e4 	bge.w	800274e <mp3dec_decode_frame+0x56a>
 8002386:	9b07      	ldr	r3, [sp, #28]
    const uint8_t *ba_code_tab = g_bitalloc_code_tab;
 8002388:	4f1e      	ldr	r7, [pc, #120]	; (8002404 <mp3dec_decode_frame+0x220>)
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 800238a:	f883 b301 	strb.w	fp, [r3, #769]	; 0x301
    int i, k = 0, ba_bits = 0;
 800238e:	2300      	movs	r3, #0
    for (i = 0; i < sci->total_bands; i++)
 8002390:	f8cd 900c 	str.w	r9, [sp, #12]
    int i, k = 0, ba_bits = 0;
 8002394:	469a      	mov	sl, r3
    for (i = 0; i < sci->total_bands; i++)
 8002396:	4698      	mov	r8, r3
 8002398:	4699      	mov	r9, r3
 800239a:	9b07      	ldr	r3, [sp, #28]
        if (i == k)
 800239c:	45d1      	cmp	r9, sl
        ba = ba_code_tab[get_bits(bs, ba_bits)];
 800239e:	a825      	add	r0, sp, #148	; 0x94
 80023a0:	eb03 0449 	add.w	r4, r3, r9, lsl #1
        if (i == k)
 80023a4:	d108      	bne.n	80023b8 <mp3dec_decode_frame+0x1d4>
            k += subband_alloc->band_count;
 80023a6:	f896 a002 	ldrb.w	sl, [r6, #2]
            ba_bits = subband_alloc->code_tab_width;
 80023aa:	f896 8001 	ldrb.w	r8, [r6, #1]
            ba_code_tab = g_bitalloc_code_tab + subband_alloc->tab_offset;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <mp3dec_decode_frame+0x220>)
 80023b0:	f816 7b03 	ldrb.w	r7, [r6], #3
            k += subband_alloc->band_count;
 80023b4:	44ca      	add	sl, r9
            ba_code_tab = g_bitalloc_code_tab + subband_alloc->tab_offset;
 80023b6:	441f      	add	r7, r3
        ba = ba_code_tab[get_bits(bs, ba_bits)];
 80023b8:	4641      	mov	r1, r8
 80023ba:	f7fe fbfd 	bl	8000bb8 <get_bits>
        if (i < sci->stereo_bands)
 80023be:	45d9      	cmp	r9, fp
        ba = ba_code_tab[get_bits(bs, ba_bits)];
 80023c0:	5c39      	ldrb	r1, [r7, r0]
        sci->bitalloc[2*i] = ba;
 80023c2:	f884 1302 	strb.w	r1, [r4, #770]	; 0x302
    for (i = 0; i < sci->total_bands; i++)
 80023c6:	f109 0901 	add.w	r9, r9, #1
        if (i < sci->stereo_bands)
 80023ca:	da04      	bge.n	80023d6 <mp3dec_decode_frame+0x1f2>
            ba = ba_code_tab[get_bits(bs, ba_bits)];
 80023cc:	4641      	mov	r1, r8
 80023ce:	a825      	add	r0, sp, #148	; 0x94
 80023d0:	f7fe fbf2 	bl	8000bb8 <get_bits>
 80023d4:	5c39      	ldrb	r1, [r7, r0]
        sci->bitalloc[2*i + 1] = sci->stereo_bands ? ba : 0;
 80023d6:	f1bb 0f00 	cmp.w	fp, #0
 80023da:	bf08      	it	eq
 80023dc:	2100      	moveq	r1, #0
    for (i = 0; i < sci->total_bands; i++)
 80023de:	45a9      	cmp	r9, r5
        sci->bitalloc[2*i + 1] = sci->stereo_bands ? ba : 0;
 80023e0:	f884 1303 	strb.w	r1, [r4, #771]	; 0x303
    for (i = 0; i < sci->total_bands; i++)
 80023e4:	d1d9      	bne.n	800239a <mp3dec_decode_frame+0x1b6>
 80023e6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80023ea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80023ec:	f20d 34a1 	addw	r4, sp, #929	; 0x3a1
 80023f0:	eb04 0509 	add.w	r5, r4, r9
 80023f4:	e01a      	b.n	800242c <mp3dec_decode_frame+0x248>
 80023f6:	bf00      	nop
 80023f8:	0800fcdc 	.word	0x0800fcdc
 80023fc:	0801085c 	.word	0x0801085c
 8002400:	0800fb78 	.word	0x0800fb78
 8002404:	0800fb98 	.word	0x0800fb98
 8002408:	00000000 	.word	0x00000000
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 800240c:	7873      	ldrb	r3, [r6, #1]
 800240e:	f003 0306 	and.w	r3, r3, #6
 8002412:	2b06      	cmp	r3, #6
 8002414:	f04f 0102 	mov.w	r1, #2
 8002418:	a825      	add	r0, sp, #148	; 0x94
 800241a:	f000 812a 	beq.w	8002672 <mp3dec_decode_frame+0x48e>
 800241e:	f7fe fbcb 	bl	8000bb8 <get_bits>
 8002422:	b2c0      	uxtb	r0, r0
    for (i = 0; i < 2*sci->total_bands; i++)
 8002424:	42a5      	cmp	r5, r4
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 8002426:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    for (i = 0; i < 2*sci->total_bands; i++)
 800242a:	d008      	beq.n	800243e <mp3dec_decode_frame+0x25a>
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 800242c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1eb      	bne.n	800240c <mp3dec_decode_frame+0x228>
 8002434:	2006      	movs	r0, #6
    for (i = 0; i < 2*sci->total_bands; i++)
 8002436:	42a5      	cmp	r5, r4
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 8002438:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    for (i = 0; i < 2*sci->total_bands; i++)
 800243c:	d1f6      	bne.n	800242c <mp3dec_decode_frame+0x248>
 800243e:	f8dd 801c 	ldr.w	r8, [sp, #28]
        float s = 0;
 8002442:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8002408 <mp3dec_decode_frame+0x224>
    for (i = 0; i < bands; i++)
 8002446:	f04f 0b00 	mov.w	fp, #0
    for (i = 0; i < 2*sci->total_bands; i++)
 800244a:	f20d 3aa2 	addw	sl, sp, #930	; 0x3a2
        int ba = *pba++;
 800244e:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8002452:	4645      	mov	r5, r8
 8002454:	461e      	mov	r6, r3
        int mask = ba ? 4 + ((19 >> scfcod[i]) & 3) : 0;
 8002456:	b13b      	cbz	r3, 8002468 <mp3dec_decode_frame+0x284>
 8002458:	f89a 603f 	ldrb.w	r6, [sl, #63]	; 0x3f
 800245c:	2213      	movs	r2, #19
 800245e:	fa42 f606 	asr.w	r6, r2, r6
 8002462:	f006 0603 	and.w	r6, r6, #3
 8002466:	3604      	adds	r6, #4
                s = g_deq_L12[ba*3 - 6 + b % 3]*(1 << 21 >> b/3);
 8002468:	2703      	movs	r7, #3
 800246a:	f06f 0205 	mvn.w	r2, #5
        float s = 0;
 800246e:	eef0 7a66 	vmov.f32	s15, s13
 8002472:	f108 080c 	add.w	r8, r8, #12
                s = g_deq_L12[ba*3 - 6 + b % 3]*(1 << 21 >> b/3);
 8002476:	fb17 2703 	smlabb	r7, r7, r3, r2
        for (m = 4; m; m >>= 1)
 800247a:	2404      	movs	r4, #4
            if (mask & m)
 800247c:	4226      	tst	r6, r4
        for (m = 4; m; m >>= 1)
 800247e:	ea4f 0464 	mov.w	r4, r4, asr #1
            if (mask & m)
 8002482:	f040 811e 	bne.w	80026c2 <mp3dec_decode_frame+0x4de>
            *scf++ = s;
 8002486:	ece5 7a01 	vstmia	r5!, {s15}
        for (m = 4; m; m >>= 1)
 800248a:	4545      	cmp	r5, r8
 800248c:	d1f6      	bne.n	800247c <mp3dec_decode_frame+0x298>
    for (i = 0; i < bands; i++)
 800248e:	f10b 0b01 	add.w	fp, fp, #1
 8002492:	45cb      	cmp	fp, r9
 8002494:	dbdb      	blt.n	800244e <mp3dec_decode_frame+0x26a>
    for (i = sci->stereo_bands; i < sci->total_bands; i++)
 8002496:	9b07      	ldr	r3, [sp, #28]
 8002498:	f893 5301 	ldrb.w	r5, [r3, #769]	; 0x301
 800249c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80024a0:	930a      	str	r3, [sp, #40]	; 0x28
 80024a2:	429d      	cmp	r5, r3
 80024a4:	f080 8231 	bcs.w	800290a <mp3dec_decode_frame+0x726>
 80024a8:	9a07      	ldr	r2, [sp, #28]
 80024aa:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80024ae:	b22e      	sxth	r6, r5
 80024b0:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 80024b4:	eb02 0144 	add.w	r1, r2, r4, lsl #1
        sci->bitalloc[2*i + 1] = 0;
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 80024be:	3302      	adds	r3, #2
    for (i = sci->stereo_bands; i < sci->total_bands; i++)
 80024c0:	4299      	cmp	r1, r3
 80024c2:	d1fa      	bne.n	80024ba <mp3dec_decode_frame+0x2d6>
        return 0;
#else /* MINIMP3_ONLY_MP3 */
        L12_scale_info sci[1];
        L12_read_scale_info(hdr, bs_frame, sci);

        memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 80024c4:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 80024c8:	9310      	str	r3, [sp, #64]	; 0x40
 80024ca:	f50d 637a 	add.w	r3, sp, #4000	; 0xfa0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80024d4:	2100      	movs	r1, #0
 80024d6:	f00c fec0 	bl	800f25a <memset>
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 80024da:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 80024de:	00f2      	lsls	r2, r6, #3
        memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 80024e0:	4603      	mov	r3, r0
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 80024e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80024e4:	f502 6010 	add.w	r0, r2, #2304	; 0x900
 80024e8:	1818      	adds	r0, r3, r0
 80024ea:	4413      	add	r3, r2
 80024ec:	1b4d      	subs	r5, r1, r5
 80024ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80024f0:	9907      	ldr	r1, [sp, #28]
 80024f2:	900e      	str	r0, [sp, #56]	; 0x38
 80024f4:	2303      	movs	r3, #3
 80024f6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80024fa:	930c      	str	r3, [sp, #48]	; 0x30
        for (i = 0, igr = 0; igr < 3; igr++)
 80024fc:	2300      	movs	r3, #0
        for (i = 0; i < 2*sci->total_bands; i++)
 80024fe:	0064      	lsls	r4, r4, #1
 8002500:	f201 3101 	addw	r1, r1, #769	; 0x301
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 8002504:	00ed      	lsls	r5, r5, #3
        for (i = 0, igr = 0; igr < 3; igr++)
 8002506:	9309      	str	r3, [sp, #36]	; 0x24
 8002508:	f20d 4324 	addw	r3, sp, #1060	; 0x424
        for (i = 0; i < 2*sci->total_bands; i++)
 800250c:	9408      	str	r4, [sp, #32]
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 800250e:	9511      	str	r5, [sp, #68]	; 0x44
 8002510:	eb01 0b04 	add.w	fp, r1, r4
 8002514:	930b      	str	r3, [sp, #44]	; 0x2c
        {
            if (12 == (i += L12_dequantize_granule(scratch.grbuf[0] + i, bs_frame, sci, info->layer | 1)))
 8002516:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 800251a:	3348      	adds	r3, #72	; 0x48
 800251c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002524:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002530:	9205      	str	r2, [sp, #20]
 8002532:	9304      	str	r3, [sp, #16]
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	2304      	movs	r3, #4
 8002538:	9203      	str	r2, [sp, #12]
 800253a:	9306      	str	r3, [sp, #24]
    int i, j, k, choff = 576;
 800253c:	f44f 7610 	mov.w	r6, #576	; 0x240
        for (i = 0; i < 2*sci->total_bands; i++)
 8002540:	9b08      	ldr	r3, [sp, #32]
        float *dst = grbuf + group_size*j;
 8002542:	9f04      	ldr	r7, [sp, #16]
        for (i = 0; i < 2*sci->total_bands; i++)
 8002544:	b34b      	cbz	r3, 800259a <mp3dec_decode_frame+0x3b6>
 8002546:	f20d 35a1 	addw	r5, sp, #929	; 0x3a1
            int ba = sci->bitalloc[i];
 800254a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
            if (ba != 0)
 800254e:	b1f4      	cbz	r4, 800258e <mp3dec_decode_frame+0x3aa>
                if (ba < 17)
 8002550:	2c10      	cmp	r4, #16
 8002552:	f300 8090 	bgt.w	8002676 <mp3dec_decode_frame+0x492>
                    int half = (1 << (ba - 1)) - 1;
 8002556:	2301      	movs	r3, #1
 8002558:	f104 39ff 	add.w	r9, r4, #4294967295
 800255c:	fa03 f909 	lsl.w	r9, r3, r9
                    for (k = 0; k < group_size; k++)
 8002560:	9b05      	ldr	r3, [sp, #20]
 8002562:	2b00      	cmp	r3, #0
                    int half = (1 << (ba - 1)) - 1;
 8002564:	f109 39ff 	add.w	r9, r9, #4294967295
                    for (k = 0; k < group_size; k++)
 8002568:	dd11      	ble.n	800258e <mp3dec_decode_frame+0x3aa>
 800256a:	9b03      	ldr	r3, [sp, #12]
 800256c:	46b8      	mov	r8, r7
 800256e:	eb07 0a03 	add.w	sl, r7, r3
                        dst[k] = (float)((int)get_bits(bs, ba) - half);
 8002572:	4621      	mov	r1, r4
 8002574:	a825      	add	r0, sp, #148	; 0x94
 8002576:	f7fe fb1f 	bl	8000bb8 <get_bits>
 800257a:	eba0 0009 	sub.w	r0, r0, r9
 800257e:	ee07 0a90 	vmov	s15, r0
 8002582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002586:	ece8 7a01 	vstmia	r8!, {s15}
                    for (k = 0; k < group_size; k++)
 800258a:	45c2      	cmp	sl, r8
 800258c:	d1f1      	bne.n	8002572 <mp3dec_decode_frame+0x38e>
        for (i = 0; i < 2*sci->total_bands; i++)
 800258e:	45ab      	cmp	fp, r5
            dst += choff;
 8002590:	eb07 0786 	add.w	r7, r7, r6, lsl #2
            choff = 18 - choff;
 8002594:	f1c6 0612 	rsb	r6, r6, #18
        for (i = 0; i < 2*sci->total_bands; i++)
 8002598:	d1d7      	bne.n	800254a <mp3dec_decode_frame+0x366>
 800259a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	9304      	str	r3, [sp, #16]
    for (j = 0; j < 4; j++)
 80025a2:	9b06      	ldr	r3, [sp, #24]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	9306      	str	r3, [sp, #24]
 80025a8:	d1ca      	bne.n	8002540 <mp3dec_decode_frame+0x35c>
            if (12 == (i += L12_dequantize_granule(scratch.grbuf[0] + i, bs_frame, sci, info->layer | 1)))
 80025aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ac:	4413      	add	r3, r2
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	9309      	str	r3, [sp, #36]	; 0x24
 80025b2:	f000 8140 	beq.w	8002836 <mp3dec_decode_frame+0x652>
                L12_apply_scf_384(sci, sci->scf + igr, scratch.grbuf[0]);
                mp3d_synth_granule(dec->qmf_state, scratch.grbuf[0], 12, info->channels, pcm, scratch.syn[0]);
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
                pcm += 384*info->channels;
            }
            if (bs_frame->pos > bs_frame->limit)
 80025b6:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80025ba:	429a      	cmp	r2, r3
 80025bc:	f300 80b3 	bgt.w	8002726 <mp3dec_decode_frame+0x542>
        for (i = 0, igr = 0; igr < 3; igr++)
 80025c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025c2:	3b01      	subs	r3, #1
 80025c4:	930c      	str	r3, [sp, #48]	; 0x30
 80025c6:	d1a6      	bne.n	8002516 <mp3dec_decode_frame+0x332>
 80025c8:	2001      	movs	r0, #1
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 80025ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80025cc:	f641 0309 	movw	r3, #6153	; 0x1809
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	f003 0206 	and.w	r2, r3, #6
 80025d6:	2a06      	cmp	r2, #6
 80025d8:	f000 818f 	beq.w	80028fa <mp3dec_decode_frame+0x716>
 80025dc:	f003 030e 	and.w	r3, r3, #14
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	bf14      	ite	ne
 80025e4:	f44f 6390 	movne.w	r3, #1152	; 0x480
 80025e8:	f44f 7310 	moveq.w	r3, #576	; 0x240
                return 0;
            }
        }
#endif /* MINIMP3_ONLY_MP3 */
    }
    return success*hdr_frame_samples(dec->header);
 80025ec:	fb00 f003 	mul.w	r0, r0, r3
}
 80025f0:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 80025f4:	b005      	add	sp, #20
 80025f6:	ecbd 8b04 	vpop	{d8-d9}
 80025fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            info->frame_bytes = i;
 80025fe:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 8002602:	3348      	adds	r3, #72	; 0x48
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6018      	str	r0, [r3, #0]
            return 0;
 8002608:	2000      	movs	r0, #0
}
 800260a:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 800260e:	b005      	add	sp, #20
 8002610:	ecbd 8b04 	vpop	{d8-d9}
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (mp3_bytes > 4 && dec->header[0] == 0xff && hdr_compare(dec->header, mp3))
 8002618:	f7fe fb1c 	bl	8000c54 <hdr_compare>
 800261c:	2800      	cmp	r0, #0
 800261e:	f43f adf9 	beq.w	8002214 <mp3dec_decode_frame+0x30>
        frame_size = hdr_frame_bytes(mp3, dec->free_format_bytes) + hdr_padding(mp3);
 8002622:	f641 0304 	movw	r3, #6148	; 0x1804
 8002626:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002628:	990d      	ldr	r1, [sp, #52]	; 0x34
 800262a:	4630      	mov	r0, r6
 800262c:	58c9      	ldr	r1, [r1, r3]
 800262e:	f7fe fb35 	bl	8000c9c <hdr_frame_bytes>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 8002632:	78b3      	ldrb	r3, [r6, #2]
        frame_size = hdr_frame_bytes(mp3, dec->free_format_bytes) + hdr_padding(mp3);
 8002634:	4604      	mov	r4, r0
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 8002636:	0798      	lsls	r0, r3, #30
 8002638:	d506      	bpl.n	8002648 <mp3dec_decode_frame+0x464>
 800263a:	7873      	ldrb	r3, [r6, #1]
 800263c:	f003 0306 	and.w	r3, r3, #6
 8002640:	2b06      	cmp	r3, #6
 8002642:	bf0c      	ite	eq
 8002644:	3404      	addeq	r4, #4
 8002646:	3401      	addne	r4, #1
        if (frame_size != mp3_bytes && (frame_size + HDR_SIZE > mp3_bytes || !hdr_compare(mp3, mp3 + frame_size)))
 8002648:	42a5      	cmp	r5, r4
        frame_size = hdr_frame_bytes(mp3, dec->free_format_bytes) + hdr_padding(mp3);
 800264a:	9423      	str	r4, [sp, #140]	; 0x8c
        if (frame_size != mp3_bytes && (frame_size + HDR_SIZE > mp3_bytes || !hdr_compare(mp3, mp3 + frame_size)))
 800264c:	d00e      	beq.n	800266c <mp3dec_decode_frame+0x488>
 800264e:	1ce3      	adds	r3, r4, #3
 8002650:	42ab      	cmp	r3, r5
 8002652:	f280 8172 	bge.w	800293a <mp3dec_decode_frame+0x756>
 8002656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002658:	1919      	adds	r1, r3, r4
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fafa 	bl	8000c54 <hdr_compare>
 8002660:	2800      	cmp	r0, #0
 8002662:	f000 816a 	beq.w	800293a <mp3dec_decode_frame+0x756>
    if (!frame_size)
 8002666:	2c00      	cmp	r4, #0
 8002668:	f43f add4 	beq.w	8002214 <mp3dec_decode_frame+0x30>
 800266c:	4623      	mov	r3, r4
    int i = 0, igr, frame_size = 0, success = 1;
 800266e:	2000      	movs	r0, #0
 8002670:	e5ea      	b.n	8002248 <mp3dec_decode_frame+0x64>
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 8002672:	2002      	movs	r0, #2
 8002674:	e6d6      	b.n	8002424 <mp3dec_decode_frame+0x240>
                    unsigned mod = (2 << (ba - 17)) + 1;    /* 3, 5, 9 */
 8002676:	2202      	movs	r2, #2
 8002678:	f1a4 0311 	sub.w	r3, r4, #17
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	f103 0901 	add.w	r9, r3, #1
                    unsigned code = get_bits(bs, mod + 2 - (mod >> 3));  /* 5, 7, 10 */
 8002684:	3303      	adds	r3, #3
 8002686:	eba3 01d9 	sub.w	r1, r3, r9, lsr #3
 800268a:	a825      	add	r0, sp, #148	; 0x94
 800268c:	f7fe fa94 	bl	8000bb8 <get_bits>
                    for (k = 0; k < group_size; k++, code /= mod)
 8002690:	9b05      	ldr	r3, [sp, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f77f af7b 	ble.w	800258e <mp3dec_decode_frame+0x3aa>
 8002698:	9a03      	ldr	r2, [sp, #12]
                        dst[k] = (float)((int)(code % mod - mod/2));
 800269a:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 800269e:	463b      	mov	r3, r7
 80026a0:	18b9      	adds	r1, r7, r2
 80026a2:	fbb0 f2f9 	udiv	r2, r0, r9
 80026a6:	fb09 0012 	mls	r0, r9, r2, r0
 80026aa:	eba0 000c 	sub.w	r0, r0, ip
 80026ae:	ee07 0a90 	vmov	s15, r0
 80026b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    for (k = 0; k < group_size; k++, code /= mod)
 80026b6:	4610      	mov	r0, r2
                        dst[k] = (float)((int)(code % mod - mod/2));
 80026b8:	ece3 7a01 	vstmia	r3!, {s15}
                    for (k = 0; k < group_size; k++, code /= mod)
 80026bc:	4299      	cmp	r1, r3
 80026be:	d1f0      	bne.n	80026a2 <mp3dec_decode_frame+0x4be>
 80026c0:	e765      	b.n	800258e <mp3dec_decode_frame+0x3aa>
                int b = get_bits(bs, 6);
 80026c2:	2106      	movs	r1, #6
 80026c4:	a825      	add	r0, sp, #148	; 0x94
 80026c6:	f7fe fa77 	bl	8000bb8 <get_bits>
                s = g_deq_L12[ba*3 - 6 + b % 3]*(1 << 21 >> b/3);
 80026ca:	4b9d      	ldr	r3, [pc, #628]	; (8002940 <mp3dec_decode_frame+0x75c>)
 80026cc:	fb83 3200 	smull	r3, r2, r3, r0
 80026d0:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 80026d4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80026d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026dc:	1ac3      	subs	r3, r0, r3
 80026de:	fa41 f202 	asr.w	r2, r1, r2
 80026e2:	4898      	ldr	r0, [pc, #608]	; (8002944 <mp3dec_decode_frame+0x760>)
 80026e4:	443b      	add	r3, r7
 80026e6:	ee07 2a90 	vmov	s15, r2
 80026ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80026ee:	ed93 7a00 	vldr	s14, [r3]
 80026f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fa:	e6c4      	b.n	8002486 <mp3dec_decode_frame+0x2a2>
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 80026fc:	7873      	ldrb	r3, [r6, #1]
 80026fe:	f003 0206 	and.w	r2, r3, #6
 8002702:	2a06      	cmp	r2, #6
 8002704:	f000 8105 	beq.w	8002912 <mp3dec_decode_frame+0x72e>
 8002708:	f003 030e 	and.w	r3, r3, #14
 800270c:	2b02      	cmp	r3, #2
 800270e:	bf14      	ite	ne
 8002710:	f44f 6090 	movne.w	r0, #1152	; 0x480
 8002714:	f44f 7010 	moveq.w	r0, #576	; 0x240
}
 8002718:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 800271c:	b005      	add	sp, #20
 800271e:	ecbd 8b04 	vpop	{d8-d9}
 8002722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec->header[0] = 0;
 8002726:	f641 0308 	movw	r3, #6152	; 0x1808
 800272a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800272c:	2000      	movs	r0, #0
 800272e:	54d0      	strb	r0, [r2, r3]
}
 8002730:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 8002734:	b005      	add	sp, #20
 8002736:	ecbd 8b04 	vpop	{d8-d9}
 800273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sci->total_bands = (uint8_t)nbands;
 800273e:	aa28      	add	r2, sp, #160	; 0xa0
 8002740:	2520      	movs	r5, #32
        alloc = g_alloc_L1;
 8002742:	4e81      	ldr	r6, [pc, #516]	; (8002948 <mp3dec_decode_frame+0x764>)
    sci->total_bands = (uint8_t)nbands;
 8002744:	9207      	str	r2, [sp, #28]
 8002746:	f882 5300 	strb.w	r5, [r2, #768]	; 0x300
 800274a:	f04f 0940 	mov.w	r9, #64	; 0x40
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 800274e:	fa5f fb83 	uxtb.w	fp, r3
 8002752:	e618      	b.n	8002386 <mp3dec_decode_frame+0x1a2>
        get_bits(bs_frame, 16);
 8002754:	2110      	movs	r1, #16
 8002756:	a825      	add	r0, sp, #148	; 0x94
 8002758:	f7fe fa2e 	bl	8000bb8 <get_bits>
 800275c:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 8002760:	3348      	adds	r3, #72	; 0x48
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
    if (info->layer == 3)
 8002766:	2a03      	cmp	r2, #3
 8002768:	f47f add5 	bne.w	8002316 <mp3dec_decode_frame+0x132>
        int main_data_begin = L3_read_side_info(bs_frame, scratch.gr_info, hdr);
 800276c:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 8002770:	f50d 6173 	add.w	r1, sp, #3888	; 0xf30
 8002774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002776:	9310      	str	r3, [sp, #64]	; 0x40
 8002778:	a825      	add	r0, sp, #148	; 0x94
 800277a:	f7fe fad9 	bl	8000d30 <L3_read_side_info>
        if (main_data_begin < 0 || bs_frame->pos > bs_frame->limit)
 800277e:	1e07      	subs	r7, r0, #0
 8002780:	dbd1      	blt.n	8002726 <mp3dec_decode_frame+0x542>
 8002782:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 8002786:	42a5      	cmp	r5, r4
 8002788:	dccd      	bgt.n	8002726 <mp3dec_decode_frame+0x542>
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 800278a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800278c:	f502 53c0 	add.w	r3, r2, #6144	; 0x1800
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 8002790:	f103 000c 	add.w	r0, r3, #12
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 8002794:	681e      	ldr	r6, [r3, #0]
 8002796:	9321      	str	r3, [sp, #132]	; 0x84
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 8002798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800279a:	901f      	str	r0, [sp, #124]	; 0x7c
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 800279c:	42b7      	cmp	r7, r6
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 800279e:	eba6 0107 	sub.w	r1, r6, r7
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 80027a2:	46b8      	mov	r8, r7
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 80027a4:	f1a3 0320 	sub.w	r3, r3, #32
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 80027a8:	bfa8      	it	ge
 80027aa:	46b0      	movge	r8, r6
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 80027ac:	2900      	cmp	r1, #0
 80027ae:	bfa8      	it	ge
 80027b0:	1840      	addge	r0, r0, r1
 80027b2:	4601      	mov	r1, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f00c fd2b 	bl	800f212 <memcpy>
    int frame_bytes = (bs->limit - bs->pos)/8;
 80027bc:	1b64      	subs	r4, r4, r5
    memcpy(s->maindata + bytes_have, bs->buf + bs->pos/8, frame_bytes);
 80027be:	9925      	ldr	r1, [sp, #148]	; 0x94
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	bfb8      	it	lt
 80027c4:	3507      	addlt	r5, #7
    int frame_bytes = (bs->limit - bs->pos)/8;
 80027c6:	10e4      	asrs	r4, r4, #3
    memcpy(s->maindata + bytes_have, bs->buf + bs->pos/8, frame_bytes);
 80027c8:	eb01 01e5 	add.w	r1, r1, r5, asr #3
 80027cc:	4622      	mov	r2, r4
 80027ce:	4440      	add	r0, r8
 80027d0:	f00c fd1f 	bl	800f212 <memcpy>
    bs->buf   = data;
 80027d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    bs_init(&s->bs, s->maindata, bytes_have + frame_bytes);
 80027d6:	eb04 0208 	add.w	r2, r4, r8
    bs->buf   = data;
 80027da:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
    return h->reserv >= main_data_begin;
 80027de:	42b7      	cmp	r7, r6
    bs->pos   = 0;
 80027e0:	f04f 0300 	mov.w	r3, #0
    bs->buf   = data;
 80027e4:	900b      	str	r0, [sp, #44]	; 0x2c
    bs->limit = bytes*8;
 80027e6:	ea4f 01c2 	mov.w	r1, r2, lsl #3
    return h->reserv >= main_data_begin;
 80027ea:	bfd8      	it	le
 80027ec:	2001      	movle	r0, #1
    bs->buf   = data;
 80027ee:	f1a5 0220 	sub.w	r2, r5, #32
    return h->reserv >= main_data_begin;
 80027f2:	bfc8      	it	gt
 80027f4:	4618      	movgt	r0, r3
    bs->pos   = 0;
 80027f6:	e945 310a 	strd	r3, r1, [r5, #-40]	; 0x28
    return h->reserv >= main_data_begin;
 80027fa:	9020      	str	r0, [sp, #128]	; 0x80
    bs->buf   = data;
 80027fc:	f845 2c2c 	str.w	r2, [r5, #-44]
        if (success)
 8002800:	f340 80ac 	ble.w	800295c <mp3dec_decode_frame+0x778>
 8002804:	461a      	mov	r2, r3
    int remains = s->bs.limit/8u - pos;
 8002806:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
    if (remains > MAX_BITRESERVOIR_BYTES)
 800280a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    int remains = s->bs.limit/8u - pos;
 800280e:	4614      	mov	r4, r2
    if (remains > MAX_BITRESERVOIR_BYTES)
 8002810:	f2c0 808f 	blt.w	8002932 <mp3dec_decode_frame+0x74e>
        pos += remains - MAX_BITRESERVOIR_BYTES;
 8002814:	f46f 74ff 	mvn.w	r4, #510	; 0x1fe
 8002818:	1911      	adds	r1, r2, r4
 800281a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800281e:	440b      	add	r3, r1
        remains = MAX_BITRESERVOIR_BYTES;
 8002820:	4614      	mov	r4, r2
        memmove(h->reserv_buf, s->maindata + pos, remains);
 8002822:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002824:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8002826:	3920      	subs	r1, #32
 8002828:	4419      	add	r1, r3
 800282a:	f00c fcf2 	bl	800f212 <memcpy>
    h->reserv = remains;
 800282e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002830:	9820      	ldr	r0, [sp, #128]	; 0x80
 8002832:	601c      	str	r4, [r3, #0]
 8002834:	e6c9      	b.n	80025ca <mp3dec_decode_frame+0x3e6>
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 8002836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002838:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800283c:	f00c fce9 	bl	800f212 <memcpy>
    for (i = 0; i < sci->total_bands; i++, dst += 18, scf += 6)
 8002840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002842:	b343      	cbz	r3, 8002896 <mp3dec_decode_frame+0x6b2>
 8002844:	9b07      	ldr	r3, [sp, #28]
 8002846:	9c06      	ldr	r4, [sp, #24]
 8002848:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800284a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800284e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002850:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8002854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002856:	f503 6535 	add.w	r5, r3, #2896	; 0xb50
            dst[k + 0]   *= scf[0];
 800285a:	ed50 6a06 	vldr	s13, [r0, #-24]	; 0xffffffe8
            dst[k + 576] *= scf[3];
 800285e:	ed10 7a03 	vldr	s14, [r0, #-12]
 8002862:	462b      	mov	r3, r5
 8002864:	f505 6210 	add.w	r2, r5, #2304	; 0x900
 8002868:	f105 0130 	add.w	r1, r5, #48	; 0x30
            dst[k + 0]   *= scf[0];
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002874:	ece3 7a01 	vstmia	r3!, {s15}
            dst[k + 576] *= scf[3];
 8002878:	edd2 7a00 	vldr	s15, [r2]
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (k = 0; k < 12; k++)
 8002880:	4299      	cmp	r1, r3
            dst[k + 576] *= scf[3];
 8002882:	ece2 7a01 	vstmia	r2!, {s15}
        for (k = 0; k < 12; k++)
 8002886:	d1f1      	bne.n	800286c <mp3dec_decode_frame+0x688>
    for (i = 0; i < sci->total_bands; i++, dst += 18, scf += 6)
 8002888:	3401      	adds	r4, #1
 800288a:	42b4      	cmp	r4, r6
 800288c:	f105 0548 	add.w	r5, r5, #72	; 0x48
 8002890:	f100 0018 	add.w	r0, r0, #24
 8002894:	d1e1      	bne.n	800285a <mp3dec_decode_frame+0x676>
                mp3d_synth_granule(dec->qmf_state, scratch.grbuf[0], 12, info->channels, pcm, scratch.syn[0]);
 8002896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002898:	9910      	ldr	r1, [sp, #64]	; 0x40
 800289a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800289c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800289e:	f503 52f0 	add.w	r2, r3, #7680	; 0x1e00
 80028a2:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80028a6:	3348      	adds	r3, #72	; 0x48
 80028a8:	321c      	adds	r2, #28
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f501 6435 	add.w	r4, r1, #2896	; 0xb50
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	4621      	mov	r1, r4
 80028b6:	220c      	movs	r2, #12
 80028b8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80028bc:	9500      	str	r5, [sp, #0]
 80028be:	f7fe fe39 	bl	8001534 <mp3d_synth_granule>
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 80028c2:	4620      	mov	r0, r4
 80028c4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80028c8:	2100      	movs	r1, #0
 80028ca:	f00c fcc6 	bl	800f25a <memset>
                pcm += 384*info->channels;
 80028ce:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80028d2:	3348      	adds	r3, #72	; 0x48
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80028dc:	eb05 2303 	add.w	r3, r5, r3, lsl #8
 80028e0:	9312      	str	r3, [sp, #72]	; 0x48
                i = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	9309      	str	r3, [sp, #36]	; 0x24
 80028e6:	e666      	b.n	80025b6 <mp3dec_decode_frame+0x3d2>
    int nbands, stereo_bands = (mode == MODE_MONO) ? 0 : (mode == MODE_JOINT_STEREO) ? (HDR_GET_STEREO_MODE_EXT(hdr) << 2) + 4 : 32;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e51e      	b.n	800232a <mp3dec_decode_frame+0x146>
    } else if (!HDR_TEST_MPEG1(hdr))
 80028ec:	f04f 0b1e 	mov.w	fp, #30
        nbands = 30;
 80028f0:	465d      	mov	r5, fp
    } else if (!HDR_TEST_MPEG1(hdr))
 80028f2:	f04f 093c 	mov.w	r9, #60	; 0x3c
        alloc = g_alloc_L2M2;
 80028f6:	4e15      	ldr	r6, [pc, #84]	; (800294c <mp3dec_decode_frame+0x768>)
 80028f8:	e53e      	b.n	8002378 <mp3dec_decode_frame+0x194>
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 80028fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028fe:	e675      	b.n	80025ec <mp3dec_decode_frame+0x408>
    int nbands, stereo_bands = (mode == MODE_MONO) ? 0 : (mode == MODE_JOINT_STEREO) ? (HDR_GET_STEREO_MODE_EXT(hdr) << 2) + 4 : 32;
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	3304      	adds	r3, #4
 8002908:	e50f      	b.n	800232a <mp3dec_decode_frame+0x146>
 800290a:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 800290e:	b22e      	sxth	r6, r5
 8002910:	e5d8      	b.n	80024c4 <mp3dec_decode_frame+0x2e0>
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8002912:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8002916:	e678      	b.n	800260a <mp3dec_decode_frame+0x426>
        if (kbps < 56)
 8002918:	2a37      	cmp	r2, #55	; 0x37
 800291a:	f200 8701 	bhi.w	8003720 <mp3dec_decode_frame+0x153c>
            nbands = sample_rate_idx == 2 ? 12 : 8;
 800291e:	2802      	cmp	r0, #2
 8002920:	f000 872e 	beq.w	8003780 <mp3dec_decode_frame+0x159c>
 8002924:	f04f 0b08 	mov.w	fp, #8
 8002928:	465d      	mov	r5, fp
 800292a:	f04f 0910 	mov.w	r9, #16
            alloc = g_alloc_L2M1_lowrate;
 800292e:	4e08      	ldr	r6, [pc, #32]	; (8002950 <mp3dec_decode_frame+0x76c>)
 8002930:	e522      	b.n	8002378 <mp3dec_decode_frame+0x194>
    if (remains > 0)
 8002932:	2a00      	cmp	r2, #0
 8002934:	f73f af75 	bgt.w	8002822 <mp3dec_decode_frame+0x63e>
 8002938:	e779      	b.n	800282e <mp3dec_decode_frame+0x64a>
            frame_size = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	9323      	str	r3, [sp, #140]	; 0x8c
 800293e:	e469      	b.n	8002214 <mp3dec_decode_frame+0x30>
 8002940:	55555556 	.word	0x55555556
 8002944:	0800fbf4 	.word	0x0800fbf4
 8002948:	0800fb74 	.word	0x0800fb74
 800294c:	0800fb8c 	.word	0x0800fb8c
 8002950:	0800fb84 	.word	0x0800fb84
 8002954:	3e638e39 	.word	0x3e638e39
 8002958:	3faaaaab 	.word	0x3faaaaab
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 800295c:	ed5f 8a03 	vldr	s17, [pc, #-12]	; 8002954 <mp3dec_decode_frame+0x770>
 8002960:	ed1f 8a03 	vldr	s16, [pc, #-12]	; 8002958 <mp3dec_decode_frame+0x774>
            for (igr = 0; igr < (HDR_TEST_MPEG1(hdr) ? 2 : 1); igr++, pcm += 576*info->channels)
 8002964:	931b      	str	r3, [sp, #108]	; 0x6c
 8002966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002968:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	f013 0f08 	tst.w	r3, #8
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2302      	movne	r3, #2
 8002976:	429a      	cmp	r2, r3
 8002978:	f280 86ca 	bge.w	8003710 <mp3dec_decode_frame+0x152c>
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 800297c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800297e:	f504 6335 	add.w	r3, r4, #2896	; 0xb50
 8002982:	4618      	mov	r0, r3
 8002984:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8002988:	2100      	movs	r1, #0
 800298a:	f00c fc66 	bl	800f25a <memset>
                L3_decode(dec, &scratch, scratch.gr_info + igr*info->channels, info->channels);
 800298e:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 8002992:	3248      	adds	r2, #72	; 0x48
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 8002994:	4603      	mov	r3, r0
                L3_decode(dec, &scratch, scratch.gr_info + igr*info->channels, info->channels);
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	6891      	ldr	r1, [r2, #8]
 800299a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800299c:	911a      	str	r1, [sp, #104]	; 0x68
 800299e:	4610      	mov	r0, r2
 80029a0:	460a      	mov	r2, r1
 80029a2:	fb00 f202 	mul.w	r2, r0, r2
 80029a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80029aa:	f504 602e 	add.w	r0, r4, #2784	; 0xae0
 80029ae:	921e      	str	r2, [sp, #120]	; 0x78
    for (ch = 0; ch < nch; ch++)
 80029b0:	2900      	cmp	r1, #0
                L3_decode(dec, &scratch, scratch.gr_info + igr*info->channels, info->channels);
 80029b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80029b6:	901d      	str	r0, [sp, #116]	; 0x74
 80029b8:	921c      	str	r2, [sp, #112]	; 0x70
    for (ch = 0; ch < nch; ch++)
 80029ba:	f340 856b 	ble.w	8003494 <mp3dec_decode_frame+0x12b0>
 80029be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80029c2:	9314      	str	r3, [sp, #80]	; 0x50
 80029c4:	f502 547c 	add.w	r4, r2, #16128	; 0x3f00
 80029c8:	f501 50c0 	add.w	r0, r1, #6144	; 0x1800
 80029cc:	f104 031c 	add.w	r3, r4, #28
 80029d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80029d2:	f100 030b 	add.w	r3, r0, #11
 80029d6:	9319      	str	r3, [sp, #100]	; 0x64
 80029d8:	f100 0309 	add.w	r3, r0, #9
 80029dc:	9318      	str	r3, [sp, #96]	; 0x60
 80029de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80029e0:	6852      	ldr	r2, [r2, #4]
 80029e2:	9211      	str	r2, [sp, #68]	; 0x44
 80029e4:	330f      	adds	r3, #15
 80029e6:	930c      	str	r3, [sp, #48]	; 0x30
 80029e8:	2300      	movs	r3, #0
 80029ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80029ec:	ab28      	add	r3, sp, #160	; 0xa0
 80029ee:	9315      	str	r3, [sp, #84]	; 0x54
    const uint8_t *scf_partition = g_scf_partitions[!!gr->n_short_sfb + !gr->n_long_sfb];
 80029f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (HDR_TEST_MPEG1(hdr))
 80029f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    const uint8_t *scf_partition = g_scf_partitions[!!gr->n_short_sfb + !gr->n_long_sfb];
 80029f4:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80029f8:	f815 4c01 	ldrb.w	r4, [r5, #-1]
        int layer3gr_limit = s->bs.pos + gr_info[ch].part_23_length;
 80029fc:	f835 0c0b 	ldrh.w	r0, [r5, #-11]
    int i, scf_shift = gr->scalefac_scale + 1, gain_exp, scfsi = gr->scfsi;
 8002a00:	7aa9      	ldrb	r1, [r5, #10]
    if (HDR_TEST_MPEG1(hdr))
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	f835 6c07 	ldrh.w	r6, [r5, #-7]
    const uint8_t *scf_partition = g_scf_partitions[!!gr->n_short_sfb + !gr->n_long_sfb];
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	2c00      	cmp	r4, #0
 8002a10:	bf18      	it	ne
 8002a12:	3301      	addne	r3, #1
 8002a14:	4cc0      	ldr	r4, [pc, #768]	; (8002d18 <mp3dec_decode_frame+0xb34>)
 8002a16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002a1a:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
        int layer3gr_limit = s->bs.pos + gr_info[ch].part_23_length;
 8002a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
        L3_decode_scalefactors(h->header, s->ist_pos[ch], &s->bs, gr_info + ch, s->scf, ch);
 8002a20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
        int layer3gr_limit = s->bs.pos + gr_info[ch].part_23_length;
 8002a22:	4403      	add	r3, r0
 8002a24:	9311      	str	r3, [sp, #68]	; 0x44
    if (HDR_TEST_MPEG1(hdr))
 8002a26:	0717      	lsls	r7, r2, #28
    int i, scf_shift = gr->scalefac_scale + 1, gain_exp, scfsi = gr->scfsi;
 8002a28:	f101 0301 	add.w	r3, r1, #1
 8002a2c:	9305      	str	r3, [sp, #20]
    if (HDR_TEST_MPEG1(hdr))
 8002a2e:	f140 8423 	bpl.w	8003278 <mp3dec_decode_frame+0x1094>
        int part = g_scfc_decode[gr->scalefac_compress];
 8002a32:	4bba      	ldr	r3, [pc, #744]	; (8002d1c <mp3dec_decode_frame+0xb38>)
    int i, scf_shift = gr->scalefac_scale + 1, gain_exp, scfsi = gr->scfsi;
 8002a34:	f895 900c 	ldrb.w	r9, [r5, #12]
        int part = g_scfc_decode[gr->scalefac_compress];
 8002a38:	5d9b      	ldrb	r3, [r3, r6]
        scf_size[1] = scf_size[0] = (uint8_t)(part >> 2);
 8002a3a:	089a      	lsrs	r2, r3, #2
        scf_size[3] = scf_size[2] = (uint8_t)(part & 3);
 8002a3c:	f003 0303 	and.w	r3, r3, #3
        scf_size[1] = scf_size[0] = (uint8_t)(part >> 2);
 8002a40:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8002a44:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
        scf_size[3] = scf_size[2] = (uint8_t)(part & 3);
 8002a48:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 8002a4c:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8002a50:	f10a 33ff 	add.w	r3, sl, #4294967295
    for (i = 0; i < 4 && scf_count[i]; i++, scfsi *= 2)
 8002a54:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8002a56:	9303      	str	r3, [sp, #12]
 8002a58:	f04f 0800 	mov.w	r8, #0
 8002a5c:	9b03      	ldr	r3, [sp, #12]
 8002a5e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8002a62:	9303      	str	r3, [sp, #12]
 8002a64:	b1e5      	cbz	r5, 8002aa0 <mp3dec_decode_frame+0x8bc>
        if (scfsi & 8)
 8002a66:	f019 0f08 	tst.w	r9, #8
 8002a6a:	f040 827e 	bne.w	8002f6a <mp3dec_decode_frame+0xd86>
            int bits = scf_size[i];
 8002a6e:	ab24      	add	r3, sp, #144	; 0x90
 8002a70:	f813 7008 	ldrb.w	r7, [r3, r8]
            if (!bits)
 8002a74:	2f00      	cmp	r7, #0
 8002a76:	f040 824a 	bne.w	8002f0e <mp3dec_decode_frame+0xd2a>
                memset(scf, 0, cnt);
 8002a7a:	462a      	mov	r2, r5
 8002a7c:	4639      	mov	r1, r7
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f00c fbeb 	bl	800f25a <memset>
                memset(ist_pos, 0, cnt);
 8002a84:	4620      	mov	r0, r4
 8002a86:	462a      	mov	r2, r5
 8002a88:	4639      	mov	r1, r7
 8002a8a:	f00c fbe6 	bl	800f25a <memset>
 8002a8e:	442c      	add	r4, r5
    for (i = 0; i < 4 && scf_count[i]; i++, scfsi *= 2)
 8002a90:	f108 0801 	add.w	r8, r8, #1
 8002a94:	f1b8 0f04 	cmp.w	r8, #4
        scf += cnt;
 8002a98:	442e      	add	r6, r5
    for (i = 0; i < 4 && scf_count[i]; i++, scfsi *= 2)
 8002a9a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002a9e:	d1dd      	bne.n	8002a5c <mp3dec_decode_frame+0x878>
    if (gr->n_short_sfb)
 8002aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002aa2:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8002aa6:	f813 5c02 	ldrb.w	r5, [r3, #-2]
    scf[0] = scf[1] = scf[2] = 0;
 8002aaa:	2200      	movs	r2, #0
 8002aac:	70b2      	strb	r2, [r6, #2]
 8002aae:	7072      	strb	r2, [r6, #1]
 8002ab0:	7032      	strb	r2, [r6, #0]
    if (gr->n_short_sfb)
 8002ab2:	2f00      	cmp	r7, #0
 8002ab4:	f040 841a 	bne.w	80032ec <mp3dec_decode_frame+0x1108>
    } else if (gr->preflag)
 8002ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002aba:	7a5b      	ldrb	r3, [r3, #9]
 8002abc:	b17b      	cbz	r3, 8002ade <mp3dec_decode_frame+0x8fa>
 8002abe:	ab44      	add	r3, sp, #272	; 0x110
 8002ac0:	f1a3 045c 	sub.w	r4, r3, #92	; 0x5c
 8002ac4:	4896      	ldr	r0, [pc, #600]	; (8002d20 <mp3dec_decode_frame+0xb3c>)
 8002ac6:	f10d 01aa 	add.w	r1, sp, #170	; 0xaa
 8002aca:	2301      	movs	r3, #1
 8002acc:	e001      	b.n	8002ad2 <mp3dec_decode_frame+0x8ee>
 8002ace:	f810 3f01 	ldrb.w	r3, [r0, #1]!
            iscf[11 + i] += g_preamp[i];
 8002ad2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002ad6:	4413      	add	r3, r2
        for (i = 0; i < 10; i++)
 8002ad8:	428c      	cmp	r4, r1
            iscf[11 + i] += g_preamp[i];
 8002ada:	700b      	strb	r3, [r1, #0]
        for (i = 0; i < 10; i++)
 8002adc:	d1f7      	bne.n	8002ace <mp3dec_decode_frame+0x8ea>
    gain_exp = gr->global_gain + BITS_DEQUANTIZER_OUT*4 - 210 - (HDR_IS_MS_STEREO(hdr) ? 2 : 0);
 8002ade:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ae4:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8002ae8:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 8002aec:	2a60      	cmp	r2, #96	; 0x60
 8002aee:	f1a1 03d6 	sub.w	r3, r1, #214	; 0xd6
 8002af2:	f000 8420 	beq.w	8003336 <mp3dec_decode_frame+0x1152>
    gain = L3_ldexp_q2(1 << (MAX_SCFI/4),  MAX_SCFI - gain_exp);
 8002af6:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8002d24 <mp3dec_decode_frame+0xb40>
 8002afa:	f1c3 032c 	rsb	r3, r3, #44	; 0x2c
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002afe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
        e = MINIMP3_MIN(30*4, exp_q2);
 8002b02:	2b78      	cmp	r3, #120	; 0x78
 8002b04:	461a      	mov	r2, r3
 8002b06:	bfa8      	it	ge
 8002b08:	2278      	movge	r2, #120	; 0x78
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b0a:	1090      	asrs	r0, r2, #2
 8002b0c:	fa44 f000 	asr.w	r0, r4, r0
 8002b10:	4e85      	ldr	r6, [pc, #532]	; (8002d28 <mp3dec_decode_frame+0xb44>)
 8002b12:	ee07 0a90 	vmov	s15, r0
 8002b16:	f002 0103 	and.w	r1, r2, #3
 8002b1a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8002b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b22:	edd1 7a00 	vldr	s15, [r1]
    } while ((exp_q2 -= e) > 0);
 8002b26:	1a9b      	subs	r3, r3, r2
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b28:	ee67 7a27 	vmul.f32	s15, s14, s15
    } while ((exp_q2 -= e) > 0);
 8002b2c:	2b00      	cmp	r3, #0
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b2e:	ee26 6a27 	vmul.f32	s12, s12, s15
    } while ((exp_q2 -= e) > 0);
 8002b32:	dce6      	bgt.n	8002b02 <mp3dec_decode_frame+0x91e>
    for (i = 0; i < (int)(gr->n_long_sfb + gr->n_short_sfb); i++)
 8002b34:	19ef      	adds	r7, r5, r7
 8002b36:	d02e      	beq.n	8002b96 <mp3dec_decode_frame+0x9b2>
 8002b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b3a:	9d15      	ldr	r5, [sp, #84]	; 0x54
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b3c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002b40:	f503 56eb 	add.w	r6, r3, #7520	; 0x1d60
 8002b44:	442f      	add	r7, r5
 8002b46:	361c      	adds	r6, #28
 8002b48:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
        scf[i] = L3_ldexp_q2(gain, iscf[i] << scf_shift);
 8002b4c:	f815 3b01 	ldrb.w	r3, [r5], #1
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b50:	eef0 6a46 	vmov.f32	s13, s12
        scf[i] = L3_ldexp_q2(gain, iscf[i] << scf_shift);
 8002b54:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b58:	46ae      	mov	lr, r5
        e = MINIMP3_MIN(30*4, exp_q2);
 8002b5a:	2b78      	cmp	r3, #120	; 0x78
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	bfa8      	it	ge
 8002b60:	2278      	movge	r2, #120	; 0x78
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b62:	1090      	asrs	r0, r2, #2
 8002b64:	fa44 f000 	asr.w	r0, r4, r0
 8002b68:	4d6f      	ldr	r5, [pc, #444]	; (8002d28 <mp3dec_decode_frame+0xb44>)
 8002b6a:	ee07 0a90 	vmov	s15, r0
 8002b6e:	f002 0103 	and.w	r1, r2, #3
 8002b72:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7a:	edd1 7a00 	vldr	s15, [r1]
    } while ((exp_q2 -= e) > 0);
 8002b7e:	1a9b      	subs	r3, r3, r2
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b80:	ee67 7a27 	vmul.f32	s15, s14, s15
    } while ((exp_q2 -= e) > 0);
 8002b84:	2b00      	cmp	r3, #0
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b86:	ee66 6aa7 	vmul.f32	s13, s13, s15
    } while ((exp_q2 -= e) > 0);
 8002b8a:	dce6      	bgt.n	8002b5a <mp3dec_decode_frame+0x976>
    for (i = 0; i < (int)(gr->n_long_sfb + gr->n_short_sfb); i++)
 8002b8c:	4577      	cmp	r7, lr
 8002b8e:	4675      	mov	r5, lr
        scf[i] = L3_ldexp_q2(gain, iscf[i] << scf_shift);
 8002b90:	ece6 6a01 	vstmia	r6!, {s13}
    for (i = 0; i < (int)(gr->n_long_sfb + gr->n_short_sfb); i++)
 8002b94:	d1da      	bne.n	8002b4c <mp3dec_decode_frame+0x968>
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        L3_huffman(s->grbuf[ch], &s->bs, gr_info + ch, s->scf, layer3gr_limit);
 8002b98:	9e14      	ldr	r6, [sp, #80]	; 0x50
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002b9a:	6858      	ldr	r0, [r3, #4]
        L3_huffman(s->grbuf[ch], &s->bs, gr_info + ch, s->scf, layer3gr_limit);
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	9316      	str	r3, [sp, #88]	; 0x58
    int ireg = 0, big_val_cnt = gr_info->big_values;
 8002ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002ba2:	9916      	ldr	r1, [sp, #88]	; 0x58
    int ireg = 0, big_val_cnt = gr_info->big_values;
 8002ba4:	f833 2c09 	ldrh.w	r2, [r3, #-9]
    const uint8_t *sfb = gr_info->sfbtab;
 8002ba8:	f853 3c0f 	ldr.w	r3, [r3, #-15]
 8002bac:	9304      	str	r3, [sp, #16]
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	bfb8      	it	lt
 8002bb4:	1dc3      	addlt	r3, r0, #7
 8002bb6:	10db      	asrs	r3, r3, #3
    int ireg = 0, big_val_cnt = gr_info->big_values;
 8002bb8:	9203      	str	r2, [sp, #12]
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002bba:	18ca      	adds	r2, r1, r3
    uint32_t bs_cache = (((bs_next_ptr[0]*256u + bs_next_ptr[1])*256u + bs_next_ptr[2])*256u + bs_next_ptr[3]) << (bs->pos & 7);
 8002bbc:	5cc9      	ldrb	r1, [r1, r3]
 8002bbe:	7853      	ldrb	r3, [r2, #1]
 8002bc0:	7894      	ldrb	r4, [r2, #2]
 8002bc2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002bc6:	78d1      	ldrb	r1, [r2, #3]
 8002bc8:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8002bcc:	f000 0e07 	and.w	lr, r0, #7
 8002bd0:	eb01 2303 	add.w	r3, r1, r3, lsl #8
 8002bd4:	fa03 fb0e 	lsl.w	fp, r3, lr
    while (big_val_cnt > 0)
 8002bd8:	9b03      	ldr	r3, [sp, #12]
    bs_next_ptr += 4;
 8002bda:	f102 0904 	add.w	r9, r2, #4
    int pairs_to_decode, np, bs_sh = (bs->pos & 7) - 8;
 8002bde:	f1ae 0808 	sub.w	r8, lr, #8
    while (big_val_cnt > 0)
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 844e 	beq.w	8003484 <mp3dec_decode_frame+0x12a0>
 8002be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bea:	f8df a150 	ldr.w	sl, [pc, #336]	; 8002d3c <mp3dec_decode_frame+0xb58>
    if (x < 1024)
 8002bee:	eddf 4a4f 	vldr	s9, [pc, #316]	; 8002d2c <mp3dec_decode_frame+0xb48>
    while (big_val_cnt > 0)
 8002bf2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8002bf6:	331c      	adds	r3, #28
 8002bf8:	9305      	str	r3, [sp, #20]
 8002bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8002bfe:	46b6      	mov	lr, r6
        int tab_num = gr_info->table_select[ireg];
 8002c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        const int16_t *codebook = tabs + tabindex[tab_num];
 8002c02:	494b      	ldr	r1, [pc, #300]	; (8002d30 <mp3dec_decode_frame+0xb4c>)
        int tab_num = gr_info->table_select[ireg];
 8002c04:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002c08:	920f      	str	r2, [sp, #60]	; 0x3c
        const int16_t *codebook = tabs + tabindex[tab_num];
 8002c0a:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
        int linbits = g_linbits[tab_num];
 8002c0e:	4949      	ldr	r1, [pc, #292]	; (8002d34 <mp3dec_decode_frame+0xb50>)
        int sfb_cnt = gr_info->region_count[ireg++];
 8002c10:	7892      	ldrb	r2, [r2, #2]
 8002c12:	9206      	str	r2, [sp, #24]
        int linbits = g_linbits[tab_num];
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
        const int16_t *codebook = tabs + tabindex[tab_num];
 8002c16:	4a48      	ldr	r2, [pc, #288]	; (8002d38 <mp3dec_decode_frame+0xb54>)
 8002c18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
        if (linbits)
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80f2 	beq.w	8002e06 <mp3dec_decode_frame+0xc22>
                            lsb += PEEK_BITS(linbits);
 8002c22:	f1c3 0220 	rsb	r2, r3, #32
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002c26:	4671      	mov	r1, lr
                            lsb += PEEK_BITS(linbits);
 8002c28:	9209      	str	r2, [sp, #36]	; 0x24
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002c2a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002c2e:	469e      	mov	lr, r3
                np = *sfb++ / 2;
 8002c30:	9a04      	ldr	r2, [sp, #16]
 8002c32:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002c36:	9204      	str	r2, [sp, #16]
                one = *scf++;
 8002c38:	9a05      	ldr	r2, [sp, #20]
 8002c3a:	ecb2 7a01 	vldmia	r2!, {s14}
 8002c3e:	9205      	str	r2, [sp, #20]
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002c40:	9a03      	ldr	r2, [sp, #12]
                np = *sfb++ / 2;
 8002c42:	085b      	lsrs	r3, r3, #1
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002c44:	429a      	cmp	r2, r3
 8002c46:	bfa8      	it	ge
 8002c48:	461a      	movge	r2, r3
 8002c4a:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
                np = *sfb++ / 2;
 8002c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c50:	46bc      	mov	ip, r7
                    int leaf = codebook[PEEK_BITS(w)];
 8002c52:	ea4f 63db 	mov.w	r3, fp, lsr #27
 8002c56:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da0f      	bge.n	8002c7e <mp3dec_decode_frame+0xa9a>
                    int j, w = 5;
 8002c5e:	2005      	movs	r0, #5
                        FLUSH_BITS(w);
 8002c60:	fa0b fb00 	lsl.w	fp, fp, r0
 8002c64:	4480      	add	r8, r0
                        w = leaf & 7;
 8002c66:	f003 0007 	and.w	r0, r3, #7
                        leaf = codebook[PEEK_BITS(w) - (leaf >> 3)];
 8002c6a:	f1c0 0220 	rsb	r2, r0, #32
 8002c6e:	fa2b f202 	lsr.w	r2, fp, r2
 8002c72:	eba2 03e3 	sub.w	r3, r2, r3, asr #3
 8002c76:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	dbf0      	blt.n	8002c60 <mp3dec_decode_frame+0xa7c>
                    FLUSH_BITS(leaf >> 8);
 8002c7e:	121a      	asrs	r2, r3, #8
 8002c80:	fa0b fb02 	lsl.w	fp, fp, r2
 8002c84:	4490      	add	r8, r2
 8002c86:	f101 0008 	add.w	r0, r1, #8
 8002c8a:	4627      	mov	r7, r4
                        int lsb = leaf & 0x0F;
 8002c8c:	f003 020f 	and.w	r2, r3, #15
                        if (lsb == 15)
 8002c90:	2a0f      	cmp	r2, #15
 8002c92:	d055      	beq.n	8002d40 <mp3dec_decode_frame+0xb5c>
                            *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002c94:	ea4f 74db 	mov.w	r4, fp, lsr #31
 8002c98:	f102 0510 	add.w	r5, r2, #16
 8002c9c:	eba5 1404 	sub.w	r4, r5, r4, lsl #4
 8002ca0:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8002ca4:	edd4 7a00 	vldr	s15, [r4]
 8002ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
                        FLUSH_BITS(lsb ? 1 : 0);
 8002cac:	3200      	adds	r2, #0
                            *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002cae:	edc1 7a00 	vstr	s15, [r1]
                    for (j = 0; j < 2; j++, dst++, leaf >>= 4)
 8002cb2:	f101 0104 	add.w	r1, r1, #4
                        FLUSH_BITS(lsb ? 1 : 0);
 8002cb6:	bf18      	it	ne
 8002cb8:	2201      	movne	r2, #1
                    for (j = 0; j < 2; j++, dst++, leaf >>= 4)
 8002cba:	4281      	cmp	r1, r0
                        FLUSH_BITS(lsb ? 1 : 0);
 8002cbc:	fa0b fb02 	lsl.w	fp, fp, r2
 8002cc0:	4490      	add	r8, r2
                    for (j = 0; j < 2; j++, dst++, leaf >>= 4)
 8002cc2:	ea4f 1323 	mov.w	r3, r3, asr #4
 8002cc6:	d1e1      	bne.n	8002c8c <mp3dec_decode_frame+0xaa8>
                    CHECK_BITS;
 8002cc8:	f1b8 0f00 	cmp.w	r8, #0
 8002ccc:	463c      	mov	r4, r7
 8002cce:	4601      	mov	r1, r0
 8002cd0:	db12      	blt.n	8002cf8 <mp3dec_decode_frame+0xb14>
 8002cd2:	4643      	mov	r3, r8
 8002cd4:	464d      	mov	r5, r9
 8002cd6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	ea4b 0b02 	orr.w	fp, fp, r2
 8002ce2:	d5f8      	bpl.n	8002cd6 <mp3dec_decode_frame+0xaf2>
 8002ce4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8002ce8:	ebc3 7243 	rsb	r2, r3, r3, lsl #29
 8002cec:	f1a8 0808 	sub.w	r8, r8, #8
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
 8002cf6:	4499      	add	r9, r3
                } while (--pairs_to_decode);
 8002cf8:	4560      	cmp	r0, ip
 8002cfa:	d1aa      	bne.n	8002c52 <mp3dec_decode_frame+0xa6e>
            } while ((big_val_cnt -= np) > 0 && --sfb_cnt >= 0);
 8002cfc:	9b03      	ldr	r3, [sp, #12]
 8002cfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	9303      	str	r3, [sp, #12]
 8002d06:	f340 82a9 	ble.w	800325c <mp3dec_decode_frame+0x1078>
 8002d0a:	9b06      	ldr	r3, [sp, #24]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	9306      	str	r3, [sp, #24]
 8002d10:	3301      	adds	r3, #1
 8002d12:	d18d      	bne.n	8002c30 <mp3dec_decode_frame+0xa4c>
 8002d14:	468e      	mov	lr, r1
 8002d16:	e773      	b.n	8002c00 <mp3dec_decode_frame+0xa1c>
 8002d18:	08010234 	.word	0x08010234
 8002d1c:	080103c8 	.word	0x080103c8
 8002d20:	08010030 	.word	0x08010030
 8002d24:	45000000 	.word	0x45000000
 8002d28:	0800fccc 	.word	0x0800fccc
 8002d2c:	43800000 	.word	0x43800000
 8002d30:	080108fc 	.word	0x080108fc
 8002d34:	0800fcec 	.word	0x0800fcec
 8002d38:	0801093c 	.word	0x0801093c
 8002d3c:	0800fdec 	.word	0x0800fdec
                            lsb += PEEK_BITS(linbits);
 8002d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
                            CHECK_BITS;
 8002d42:	eb18 080e 	adds.w	r8, r8, lr
                            lsb += PEEK_BITS(linbits);
 8002d46:	fa2b f202 	lsr.w	r2, fp, r2
 8002d4a:	f102 020f 	add.w	r2, r2, #15
                            FLUSH_BITS(linbits);
 8002d4e:	fa0b fb0e 	lsl.w	fp, fp, lr
                            CHECK_BITS;
 8002d52:	d412      	bmi.n	8002d7a <mp3dec_decode_frame+0xb96>
 8002d54:	4644      	mov	r4, r8
 8002d56:	464e      	mov	r6, r9
 8002d58:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002d5c:	40a5      	lsls	r5, r4
 8002d5e:	3c08      	subs	r4, #8
 8002d60:	ea4b 0b05 	orr.w	fp, fp, r5
 8002d64:	d5f8      	bpl.n	8002d58 <mp3dec_decode_frame+0xb74>
 8002d66:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 8002d6a:	ebc4 7544 	rsb	r5, r4, r4, lsl #29
 8002d6e:	f1a8 0808 	sub.w	r8, r8, #8
 8002d72:	3401      	adds	r4, #1
 8002d74:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002d78:	44a1      	add	r9, r4
    if (x < 129)
 8002d7a:	2a80      	cmp	r2, #128	; 0x80
 8002d7c:	dd3e      	ble.n	8002dfc <mp3dec_decode_frame+0xc18>
    if (x < 1024)
 8002d7e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
        x <<= 3;
 8002d82:	bfb4      	ite	lt
 8002d84:	00d4      	lsllt	r4, r2, #3
    if (x < 1024)
 8002d86:	4614      	movge	r4, r2
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002d88:	f004 063f 	and.w	r6, r4, #63	; 0x3f
 8002d8c:	9608      	str	r6, [sp, #32]
 8002d8e:	f024 063f 	bic.w	r6, r4, #63	; 0x3f
    sign = 2*x & 64;
 8002d92:	ea4f 0544 	mov.w	r5, r4, lsl #1
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002d96:	9607      	str	r6, [sp, #28]
 8002d98:	9e08      	ldr	r6, [sp, #32]
    sign = 2*x & 64;
 8002d9a:	f005 0540 	and.w	r5, r5, #64	; 0x40
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002d9e:	eba6 0605 	sub.w	r6, r6, r5
 8002da2:	ee07 6a90 	vmov	s15, r6
 8002da6:	9e07      	ldr	r6, [sp, #28]
 8002da8:	442e      	add	r6, r5
 8002daa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002dae:	ee07 6a90 	vmov	s15, r6
 8002db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002db6:	442c      	add	r4, r5
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002db8:	eec6 5a27 	vdiv.f32	s11, s12, s15
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002dbc:	ea4f 14a4 	mov.w	r4, r4, asr #6
 8002dc0:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8002dc4:	eeb0 6a48 	vmov.f32	s12, s16
 8002dc8:	eea5 6aa8 	vfma.f32	s12, s11, s17
 8002dcc:	eeb0 4a45 	vmov.f32	s8, s10
 8002dd0:	eea5 4a86 	vfma.f32	s8, s11, s12
 8002dd4:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8002dd8:	ee64 7a27 	vmul.f32	s15, s8, s15
        x <<= 3;
 8002ddc:	bfb4      	ite	lt
 8002dde:	eef3 6a00 	vmovlt.f32	s13, #48	; 0x41800000  16.0
    if (x < 1024)
 8002de2:	eef0 6a64 	vmovge.f32	s13, s9
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002de6:	ee67 7aa6 	vmul.f32	s15, s15, s13
                            *dst = one*L3_pow_43(lsb)*((int32_t)bs_cache < 0 ? -1: 1);
 8002dea:	f1bb 0f00 	cmp.w	fp, #0
 8002dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df2:	f6bf af5b 	bge.w	8002cac <mp3dec_decode_frame+0xac8>
 8002df6:	eef1 7a67 	vneg.f32	s15, s15
 8002dfa:	e757      	b.n	8002cac <mp3dec_decode_frame+0xac8>
        return g_pow43[16 + x];
 8002dfc:	eb0a 0482 	add.w	r4, sl, r2, lsl #2
 8002e00:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8002e04:	e7f1      	b.n	8002dea <mp3dec_decode_frame+0xc06>
 8002e06:	4658      	mov	r0, fp
 8002e08:	f8cd e01c 	str.w	lr, [sp, #28]
                np = *sfb++ / 2;
 8002e0c:	9b04      	ldr	r3, [sp, #16]
 8002e0e:	9a07      	ldr	r2, [sp, #28]
 8002e10:	f813 bb01 	ldrb.w	fp, [r3], #1
 8002e14:	9304      	str	r3, [sp, #16]
                one = *scf++;
 8002e16:	9b05      	ldr	r3, [sp, #20]
 8002e18:	ecb3 7a01 	vldmia	r3!, {s14}
 8002e1c:	9305      	str	r3, [sp, #20]
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002e1e:	9b03      	ldr	r3, [sp, #12]
                np = *sfb++ / 2;
 8002e20:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002e24:	455b      	cmp	r3, fp
 8002e26:	bfa8      	it	ge
 8002e28:	465b      	movge	r3, fp
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f102 0c08 	add.w	ip, r2, #8
 8002e30:	9308      	str	r3, [sp, #32]
 8002e32:	eb0c 0e03 	add.w	lr, ip, r3
                    int leaf = codebook[PEEK_BITS(w)];
 8002e36:	0ec3      	lsrs	r3, r0, #27
 8002e38:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da0e      	bge.n	8002e5e <mp3dec_decode_frame+0xc7a>
                    int j, w = 5;
 8002e40:	2105      	movs	r1, #5
                        FLUSH_BITS(w);
 8002e42:	4088      	lsls	r0, r1
 8002e44:	4488      	add	r8, r1
                        w = leaf & 7;
 8002e46:	f003 0107 	and.w	r1, r3, #7
                        leaf = codebook[PEEK_BITS(w) - (leaf >> 3)];
 8002e4a:	f1c1 0220 	rsb	r2, r1, #32
 8002e4e:	fa20 f202 	lsr.w	r2, r0, r2
 8002e52:	eba2 03e3 	sub.w	r3, r2, r3, asr #3
 8002e56:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dbf1      	blt.n	8002e42 <mp3dec_decode_frame+0xc5e>
                        int lsb = leaf & 0x0F;
 8002e5e:	f003 020f 	and.w	r2, r3, #15
                        FLUSH_BITS(lsb ? 1 : 0);
 8002e62:	1c16      	adds	r6, r2, #0
                    FLUSH_BITS(leaf >> 8);
 8002e64:	ea4f 2123 	mov.w	r1, r3, asr #8
                        FLUSH_BITS(lsb ? 1 : 0);
 8002e68:	bf18      	it	ne
 8002e6a:	2601      	movne	r6, #1
                    FLUSH_BITS(leaf >> 8);
 8002e6c:	4088      	lsls	r0, r1
                        FLUSH_BITS(lsb ? 1 : 0);
 8002e6e:	fa00 f506 	lsl.w	r5, r0, r6
                        int lsb = leaf & 0x0F;
 8002e72:	f3c3 1303 	ubfx	r3, r3, #4, #4
                        *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002e76:	0fc0      	lsrs	r0, r0, #31
 8002e78:	3210      	adds	r2, #16
 8002e7a:	eba2 1200 	sub.w	r2, r2, r0, lsl #4
 8002e7e:	0fef      	lsrs	r7, r5, #31
 8002e80:	f103 0010 	add.w	r0, r3, #16
 8002e84:	eba0 1007 	sub.w	r0, r0, r7, lsl #4
 8002e88:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8002e8c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8002e90:	edd0 6a00 	vldr	s13, [r0]
 8002e94:	edd2 7a00 	vldr	s15, [r2]
                        FLUSH_BITS(lsb ? 1 : 0);
 8002e98:	3300      	adds	r3, #0
                    FLUSH_BITS(leaf >> 8);
 8002e9a:	4488      	add	r8, r1
                        FLUSH_BITS(lsb ? 1 : 0);
 8002e9c:	bf18      	it	ne
 8002e9e:	2301      	movne	r3, #1
                        *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002ea0:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
                        FLUSH_BITS(lsb ? 1 : 0);
 8002ea8:	44b0      	add	r8, r6
                    CHECK_BITS;
 8002eaa:	eb13 0808 	adds.w	r8, r3, r8
                        FLUSH_BITS(lsb ? 1 : 0);
 8002eae:	fa05 f003 	lsl.w	r0, r5, r3
                        *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002eb2:	ed4c 6a01 	vstr	s13, [ip, #-4]
 8002eb6:	ed4c 7a02 	vstr	s15, [ip, #-8]
                    CHECK_BITS;
 8002eba:	d412      	bmi.n	8002ee2 <mp3dec_decode_frame+0xcfe>
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	3b08      	subs	r3, #8
 8002ec8:	ea40 0002 	orr.w	r0, r0, r2
 8002ecc:	d5f8      	bpl.n	8002ec0 <mp3dec_decode_frame+0xcdc>
 8002ece:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8002ed2:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8002ed6:	f1a8 0808 	sub.w	r8, r8, #8
 8002eda:	3201      	adds	r2, #1
 8002edc:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 8002ee0:	4491      	add	r9, r2
 8002ee2:	f10c 0c08 	add.w	ip, ip, #8
                } while (--pairs_to_decode);
 8002ee6:	45e6      	cmp	lr, ip
 8002ee8:	d1a5      	bne.n	8002e36 <mp3dec_decode_frame+0xc52>
            } while ((big_val_cnt -= np) > 0 && --sfb_cnt >= 0);
 8002eea:	9b03      	ldr	r3, [sp, #12]
 8002eec:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 8002ef0:	eba3 030b 	sub.w	r3, r3, fp
 8002ef4:	440a      	add	r2, r1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	9207      	str	r2, [sp, #28]
 8002efc:	dd3c      	ble.n	8002f78 <mp3dec_decode_frame+0xd94>
 8002efe:	9b06      	ldr	r3, [sp, #24]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	9306      	str	r3, [sp, #24]
 8002f04:	3301      	adds	r3, #1
 8002f06:	d181      	bne.n	8002e0c <mp3dec_decode_frame+0xc28>
 8002f08:	4683      	mov	fp, r0
 8002f0a:	4696      	mov	lr, r2
 8002f0c:	e678      	b.n	8002c00 <mp3dec_decode_frame+0xa1c>
                int max_scf = (scfsi < 0) ? (1 << bits) - 1 : -1;
 8002f0e:	f1b9 0f00 	cmp.w	r9, #0
 8002f12:	bfbe      	ittt	lt
 8002f14:	f04f 0a01 	movlt.w	sl, #1
 8002f18:	fa0a fa07 	lsllt.w	sl, sl, r7
 8002f1c:	f10a 33ff 	addlt.w	r3, sl, #4294967295
 8002f20:	f106 3bff 	add.w	fp, r6, #4294967295
 8002f24:	bfa8      	it	ge
 8002f26:	f04f 33ff 	movge.w	r3, #4294967295
 8002f2a:	46a2      	mov	sl, r4
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8002f32:	442c      	add	r4, r5
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	465d      	mov	r5, fp
 8002f38:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8002f3c:	9304      	str	r3, [sp, #16]
 8002f3e:	4656      	mov	r6, sl
 8002f40:	4692      	mov	sl, r2
                    int s = get_bits(bitbuf, bits);
 8002f42:	4639      	mov	r1, r7
 8002f44:	4658      	mov	r0, fp
 8002f46:	f7fd fe37 	bl	8000bb8 <get_bits>
                    ist_pos[k] = (s == max_scf ? -1 : s);
 8002f4a:	4550      	cmp	r0, sl
 8002f4c:	bf14      	ite	ne
 8002f4e:	b2c0      	uxtbne	r0, r0
 8002f50:	20ff      	moveq	r0, #255	; 0xff
 8002f52:	f806 0b01 	strb.w	r0, [r6], #1
 8002f56:	bf0c      	ite	eq
 8002f58:	9904      	ldreq	r1, [sp, #16]
 8002f5a:	4601      	movne	r1, r0
                for (k = 0; k < cnt; k++)
 8002f5c:	42b4      	cmp	r4, r6
                    scf[k] = s;
 8002f5e:	f805 1f01 	strb.w	r1, [r5, #1]!
                for (k = 0; k < cnt; k++)
 8002f62:	d1ee      	bne.n	8002f42 <mp3dec_decode_frame+0xd5e>
 8002f64:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 8002f68:	e592      	b.n	8002a90 <mp3dec_decode_frame+0x8ac>
            memcpy(scf, ist_pos, cnt);
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	4630      	mov	r0, r6
 8002f70:	442c      	add	r4, r5
 8002f72:	f00c f94e 	bl	800f212 <memcpy>
 8002f76:	e58b      	b.n	8002a90 <mp3dec_decode_frame+0x8ac>
 8002f78:	9e07      	ldr	r6, [sp, #28]
 8002f7a:	4683      	mov	fp, r0
 8002f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f7e:	4ab8      	ldr	r2, [pc, #736]	; (8003260 <mp3dec_decode_frame+0x107c>)
 8002f80:	7adf      	ldrb	r7, [r3, #11]
 8002f82:	49b8      	ldr	r1, [pc, #736]	; (8003264 <mp3dec_decode_frame+0x1080>)
    for (np = 1 - big_val_cnt;; dst += 4)
 8002f84:	9b03      	ldr	r3, [sp, #12]
 8002f86:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8002f8a:	2f00      	cmp	r7, #0
 8002f8c:	bf08      	it	eq
 8002f8e:	460a      	moveq	r2, r1
 8002f90:	f106 0410 	add.w	r4, r6, #16
 8002f94:	4617      	mov	r7, r2
 8002f96:	e9dd 6c04 	ldrd	r6, ip, [sp, #16]
 8002f9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002f9c:	f1c3 0301 	rsb	r3, r3, #1
 8002fa0:	eba9 0502 	sub.w	r5, r9, r2
 8002fa4:	4692      	mov	sl, r2
        int leaf = codebook_count1[PEEK_BITS(4)];
 8002fa6:	ea4f 721b 	mov.w	r2, fp, lsr #28
 8002faa:	5cba      	ldrb	r2, [r7, r2]
        if (!(leaf & 8))
 8002fac:	0710      	lsls	r0, r2, #28
 8002fae:	d40a      	bmi.n	8002fc6 <mp3dec_decode_frame+0xde2>
            leaf = codebook_count1[(leaf >> 3) + (bs_cache << 4 >> (32 - (leaf & 3)))];
 8002fb0:	f002 0003 	and.w	r0, r2, #3
 8002fb4:	f1c0 0020 	rsb	r0, r0, #32
 8002fb8:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8002fbc:	eb07 02d2 	add.w	r2, r7, r2, lsr #3
 8002fc0:	fa21 f000 	lsr.w	r0, r1, r0
 8002fc4:	5c12      	ldrb	r2, [r2, r0]
        FLUSH_BITS(leaf & 7);
 8002fc6:	f002 0007 	and.w	r0, r2, #7
 8002fca:	4480      	add	r8, r0
        if (BSPOS > layer3gr_limit)
 8002fcc:	1ee9      	subs	r1, r5, #3
 8002fce:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 8002fd2:	458e      	cmp	lr, r1
        FLUSH_BITS(leaf & 7);
 8002fd4:	fa0b fb00 	lsl.w	fp, fp, r0
        if (BSPOS > layer3gr_limit)
 8002fd8:	db6b      	blt.n	80030b2 <mp3dec_decode_frame+0xece>
        RELOAD_SCALEFACTOR;
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	d108      	bne.n	8002ff0 <mp3dec_decode_frame+0xe0c>
 8002fde:	7833      	ldrb	r3, [r6, #0]
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	f106 0601 	add.w	r6, r6, #1
 8002fe6:	d064      	beq.n	80030b2 <mp3dec_decode_frame+0xece>
 8002fe8:	ed9c 7a00 	vldr	s14, [ip]
 8002fec:	f10c 0c04 	add.w	ip, ip, #4
        DEQ_COUNT1(0);
 8002ff0:	0611      	lsls	r1, r2, #24
 8002ff2:	d50c      	bpl.n	800300e <mp3dec_decode_frame+0xe2a>
 8002ff4:	f1bb 0f00 	cmp.w	fp, #0
 8002ff8:	bfb4      	ite	lt
 8002ffa:	eef1 7a47 	vneglt.f32	s15, s14
 8002ffe:	eef0 7a47 	vmovge.f32	s15, s14
 8003002:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003006:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800300a:	f108 0801 	add.w	r8, r8, #1
        DEQ_COUNT1(1);
 800300e:	0650      	lsls	r0, r2, #25
 8003010:	d50c      	bpl.n	800302c <mp3dec_decode_frame+0xe48>
 8003012:	f1bb 0f00 	cmp.w	fp, #0
 8003016:	bfb4      	ite	lt
 8003018:	eef1 7a47 	vneglt.f32	s15, s14
 800301c:	eef0 7a47 	vmovge.f32	s15, s14
 8003020:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003024:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003028:	f108 0801 	add.w	r8, r8, #1
        RELOAD_SCALEFACTOR;
 800302c:	3b01      	subs	r3, #1
 800302e:	d108      	bne.n	8003042 <mp3dec_decode_frame+0xe5e>
 8003030:	7833      	ldrb	r3, [r6, #0]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	f106 0601 	add.w	r6, r6, #1
 8003038:	d03b      	beq.n	80030b2 <mp3dec_decode_frame+0xece>
 800303a:	ed9c 7a00 	vldr	s14, [ip]
 800303e:	f10c 0c04 	add.w	ip, ip, #4
        DEQ_COUNT1(2);
 8003042:	0691      	lsls	r1, r2, #26
 8003044:	d50c      	bpl.n	8003060 <mp3dec_decode_frame+0xe7c>
 8003046:	f1bb 0f00 	cmp.w	fp, #0
 800304a:	bfb4      	ite	lt
 800304c:	eef1 7a47 	vneglt.f32	s15, s14
 8003050:	eef0 7a47 	vmovge.f32	s15, s14
 8003054:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003058:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800305c:	f108 0801 	add.w	r8, r8, #1
        DEQ_COUNT1(3);
 8003060:	06d2      	lsls	r2, r2, #27
 8003062:	d50c      	bpl.n	800307e <mp3dec_decode_frame+0xe9a>
 8003064:	f1bb 0f00 	cmp.w	fp, #0
 8003068:	bfb4      	ite	lt
 800306a:	eef1 7a47 	vneglt.f32	s15, s14
 800306e:	eef0 7a47 	vmovge.f32	s15, s14
 8003072:	ed44 7a01 	vstr	s15, [r4, #-4]
 8003076:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800307a:	f108 0801 	add.w	r8, r8, #1
        CHECK_BITS;
 800307e:	f1b8 0f00 	cmp.w	r8, #0
 8003082:	db14      	blt.n	80030ae <mp3dec_decode_frame+0xeca>
 8003084:	4642      	mov	r2, r8
 8003086:	4648      	mov	r0, r9
 8003088:	f810 1b01 	ldrb.w	r1, [r0], #1
 800308c:	4091      	lsls	r1, r2
 800308e:	3a08      	subs	r2, #8
 8003090:	ea4b 0b01 	orr.w	fp, fp, r1
 8003094:	d5f8      	bpl.n	8003088 <mp3dec_decode_frame+0xea4>
 8003096:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 800309a:	1c51      	adds	r1, r2, #1
 800309c:	f1a8 0808 	sub.w	r8, r8, #8
 80030a0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80030a4:	4489      	add	r9, r1
 80030a6:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
 80030aa:	eba9 050a 	sub.w	r5, r9, sl
 80030ae:	3410      	adds	r4, #16
 80030b0:	e779      	b.n	8002fa6 <mp3dec_decode_frame+0xdc2>
    bs->pos = layer3gr_limit;
 80030b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (ch = 0; ch < nch; ch++)
 80030b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    bs->pos = layer3gr_limit;
 80030b6:	4611      	mov	r1, r2
 80030b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80030ba:	604a      	str	r2, [r1, #4]
 80030bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80030be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c2:	9214      	str	r2, [sp, #80]	; 0x50
 80030c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80030c6:	3227      	adds	r2, #39	; 0x27
 80030c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80030ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030cc:	321c      	adds	r2, #28
 80030ce:	920c      	str	r2, [sp, #48]	; 0x30
    for (ch = 0; ch < nch; ch++)
 80030d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80030d2:	3301      	adds	r3, #1
 80030d4:	429a      	cmp	r2, r3
 80030d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80030d8:	f47f ac8a 	bne.w	80029f0 <mp3dec_decode_frame+0x80c>
    if (HDR_TEST_I_STEREO(h->header))
 80030dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80030de:	7819      	ldrb	r1, [r3, #0]
 80030e0:	06cb      	lsls	r3, r1, #27
 80030e2:	f100 81f4 	bmi.w	80034ce <mp3dec_decode_frame+0x12ea>
    } else if (HDR_IS_MS_STEREO(h->header))
 80030e6:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
 80030ea:	2960      	cmp	r1, #96	; 0x60
 80030ec:	f000 81d8 	beq.w	80034a0 <mp3dec_decode_frame+0x12bc>
    for (ch = 0; ch < nch; ch++, gr_info++)
 80030f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f340 808e 	ble.w	8003214 <mp3dec_decode_frame+0x1030>
 80030f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80030fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030fc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
        int aa_bands = 31;
 80030fe:	eddf 9a5a 	vldr	s19, [pc, #360]	; 8003268 <mp3dec_decode_frame+0x1084>
 8003102:	ed9f 9a5a 	vldr	s18, [pc, #360]	; 800326c <mp3dec_decode_frame+0x1088>
 8003106:	9203      	str	r2, [sp, #12]
 8003108:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800310c:	f502 50c0 	add.w	r0, r2, #6144	; 0x1800
 8003110:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003114:	9306      	str	r3, [sp, #24]
 8003116:	f100 0309 	add.w	r3, r0, #9
 800311a:	9318      	str	r3, [sp, #96]	; 0x60
 800311c:	f100 030a 	add.w	r3, r0, #10
 8003120:	9307      	str	r3, [sp, #28]
 8003122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003124:	f603 3b98 	addw	fp, r3, #2968	; 0xb98
        int n_long_bands = (gr_info->mixed_block_flag ? 2 : 0) << (int)(HDR_GET_MY_SAMPLE_RATE(h->header) == 2);
 8003128:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800312a:	7b31      	ldrb	r1, [r6, #12]
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	9b07      	ldr	r3, [sp, #28]
 8003130:	7818      	ldrb	r0, [r3, #0]
 8003132:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 8003136:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800313a:	4413      	add	r3, r2
 800313c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003140:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8003144:	4413      	add	r3, r2
 8003146:	f1a3 0302 	sub.w	r3, r3, #2
 800314a:	2900      	cmp	r1, #0
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8003154:	bf0c      	ite	eq
 8003156:	2500      	moveq	r5, #0
 8003158:	2502      	movne	r5, #2
        if (gr_info->n_short_sfb)
 800315a:	7bb2      	ldrb	r2, [r6, #14]
        int n_long_bands = (gr_info->mixed_block_flag ? 2 : 0) << (int)(HDR_GET_MY_SAMPLE_RATE(h->header) == 2);
 800315c:	409d      	lsls	r5, r3
 800315e:	f1ab 0348 	sub.w	r3, fp, #72	; 0x48
 8003162:	9304      	str	r3, [sp, #16]
        if (gr_info->n_short_sfb)
 8003164:	2a00      	cmp	r2, #0
 8003166:	f040 80ea 	bne.w	800333e <mp3dec_decode_frame+0x115a>
        int aa_bands = 31;
 800316a:	271f      	movs	r7, #31
 800316c:	465c      	mov	r4, fp
 800316e:	4940      	ldr	r1, [pc, #256]	; (8003270 <mp3dec_decode_frame+0x108c>)
 8003170:	eeb0 6a69 	vmov.f32	s12, s19
 8003174:	eef0 6a49 	vmov.f32	s13, s18
 8003178:	f104 0020 	add.w	r0, r4, #32
 800317c:	4622      	mov	r2, r4
 800317e:	4623      	mov	r3, r4
 8003180:	e003      	b.n	800318a <mp3dec_decode_frame+0xfa6>
 8003182:	ecf1 6a01 	vldmia	r1!, {s13}
 8003186:	ed91 6a07 	vldr	s12, [r1, #28]
            float d = grbuf[17 - i];
 800318a:	ed72 7a01 	vldmdb	r2!, {s15}
            float u = grbuf[18 + i];
 800318e:	edd3 5a00 	vldr	s11, [r3]
            grbuf[18 + i] = u*g_aa[0][i] - d*g_aa[1][i];
 8003192:	ee26 7a67 	vnmul.f32	s14, s12, s15
            grbuf[17 - i] = u*g_aa[1][i] + d*g_aa[0][i];
 8003196:	ee67 7aa6 	vmul.f32	s15, s15, s13
            grbuf[18 + i] = u*g_aa[0][i] - d*g_aa[1][i];
 800319a:	eea5 7aa6 	vfma.f32	s14, s11, s13
            grbuf[17 - i] = u*g_aa[1][i] + d*g_aa[0][i];
 800319e:	eee5 7a86 	vfma.f32	s15, s11, s12
            grbuf[18 + i] = u*g_aa[0][i] - d*g_aa[1][i];
 80031a2:	eca3 7a01 	vstmia	r3!, {s14}
        for(; i < 8; i++)
 80031a6:	4298      	cmp	r0, r3
            grbuf[17 - i] = u*g_aa[1][i] + d*g_aa[0][i];
 80031a8:	edc2 7a00 	vstr	s15, [r2]
        for(; i < 8; i++)
 80031ac:	d1e9      	bne.n	8003182 <mp3dec_decode_frame+0xf9e>
    for (; nbands > 0; nbands--, grbuf += 18)
 80031ae:	3f01      	subs	r7, #1
 80031b0:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80031b4:	d1db      	bne.n	800316e <mp3dec_decode_frame+0xf8a>
        L3_imdct_gr(s->grbuf[ch], h->mdct_overlap[ch], gr_info->block_type, n_long_bands);
 80031b6:	9c03      	ldr	r4, [sp, #12]
 80031b8:	7af7      	ldrb	r7, [r6, #11]
    if (n_long_bands)
 80031ba:	2d00      	cmp	r5, #0
 80031bc:	f040 810d 	bne.w	80033da <mp3dec_decode_frame+0x11f6>
    if (block_type == SHORT_BLOCK_TYPE)
 80031c0:	2f02      	cmp	r7, #2
 80031c2:	f1c5 0520 	rsb	r5, r5, #32
 80031c6:	f000 811e 	beq.w	8003406 <mp3dec_decode_frame+0x1222>
        L3_imdct36(grbuf, overlap, g_mdct_window[block_type == STOP_BLOCK_TYPE], 32 - n_long_bands);
 80031ca:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <mp3dec_decode_frame+0x1090>)
 80031cc:	9804      	ldr	r0, [sp, #16]
 80031ce:	2f03      	cmp	r7, #3
 80031d0:	bf0c      	ite	eq
 80031d2:	2748      	moveq	r7, #72	; 0x48
 80031d4:	2700      	movne	r7, #0
 80031d6:	462b      	mov	r3, r5
 80031d8:	4621      	mov	r1, r4
 80031da:	443a      	add	r2, r7
 80031dc:	f7fd ff96 	bl	800110c <L3_imdct36>
    for (b = 0, grbuf += 18; b < 32; b += 2, grbuf += 36)
 80031e0:	4659      	mov	r1, fp
 80031e2:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 80031e6:	460b      	mov	r3, r1
 80031e8:	f101 0248 	add.w	r2, r1, #72	; 0x48
            grbuf[i] = -grbuf[i];
 80031ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80031f0:	eef1 7a67 	vneg.f32	s15, s15
 80031f4:	edc3 7a01 	vstr	s15, [r3, #4]
 80031f8:	3308      	adds	r3, #8
        for (i = 1; i < 18; i += 2)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d1f6      	bne.n	80031ec <mp3dec_decode_frame+0x1008>
    for (b = 0, grbuf += 18; b < 32; b += 2, grbuf += 36)
 80031fe:	3190      	adds	r1, #144	; 0x90
 8003200:	4559      	cmp	r1, fp
 8003202:	d1f0      	bne.n	80031e6 <mp3dec_decode_frame+0x1002>
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800320a:	9303      	str	r3, [sp, #12]
    for (ch = 0; ch < nch; ch++, gr_info++)
 800320c:	9b06      	ldr	r3, [sp, #24]
 800320e:	361c      	adds	r6, #28
 8003210:	429e      	cmp	r6, r3
 8003212:	d189      	bne.n	8003128 <mp3dec_decode_frame+0xf44>
                mp3d_synth_granule(dec->qmf_state, scratch.grbuf[0], 18, info->channels, pcm, scratch.syn[0]);
 8003214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003216:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003218:	980d      	ldr	r0, [sp, #52]	; 0x34
 800321a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800321c:	f503 52f0 	add.w	r2, r3, #7680	; 0x1e00
 8003220:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 8003224:	3348      	adds	r3, #72	; 0x48
 8003226:	321c      	adds	r2, #28
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f501 6135 	add.w	r1, r1, #2896	; 0xb50
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	9201      	str	r2, [sp, #4]
 8003232:	9400      	str	r4, [sp, #0]
 8003234:	2212      	movs	r2, #18
 8003236:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800323a:	f7fe f97b 	bl	8001534 <mp3d_synth_granule>
            for (igr = 0; igr < (HDR_TEST_MPEG1(hdr) ? 2 : 1); igr++, pcm += 576*info->channels)
 800323e:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 8003242:	3348      	adds	r3, #72	; 0x48
 8003244:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800324e:	3201      	adds	r2, #1
 8003250:	eb04 13c3 	add.w	r3, r4, r3, lsl #7
 8003254:	921b      	str	r2, [sp, #108]	; 0x6c
 8003256:	9312      	str	r3, [sp, #72]	; 0x48
 8003258:	f7ff bb85 	b.w	8002966 <mp3dec_decode_frame+0x782>
 800325c:	460e      	mov	r6, r1
 800325e:	e68d      	b.n	8002f7c <mp3dec_decode_frame+0xd98>
 8003260:	080108ec 	.word	0x080108ec
 8003264:	080108d0 	.word	0x080108d0
 8003268:	3f03b5fe 	.word	0x3f03b5fe
 800326c:	3f5b84a8 	.word	0x3f5b84a8
 8003270:	0800fb38 	.word	0x0800fb38
 8003274:	0800fd0c 	.word	0x0800fd0c
        int k, modprod, sfc, ist = HDR_TEST_I_STEREO(hdr) && ch;
 8003278:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f013 0e10 	ands.w	lr, r3, #16
 8003280:	f000 80fd 	beq.w	800347e <mp3dec_decode_frame+0x129a>
 8003284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003286:	1c1a      	adds	r2, r3, #0
 8003288:	bf18      	it	ne
 800328a:	2201      	movne	r2, #1
 800328c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8003290:	4496      	add	lr, r2
 8003292:	4baa      	ldr	r3, [pc, #680]	; (800353c <mp3dec_decode_frame+0x1358>)
 8003294:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003298:	eb03 010e 	add.w	r1, r3, lr
 800329c:	4116      	asrs	r6, r2
 800329e:	78c9      	ldrb	r1, [r1, #3]
 80032a0:	f10e 0c02 	add.w	ip, lr, #2
 80032a4:	449c      	add	ip, r3
 80032a6:	f10d 088f 	add.w	r8, sp, #143	; 0x8f
 80032aa:	f10d 0593 	add.w	r5, sp, #147	; 0x93
 80032ae:	4667      	mov	r7, ip
            for (modprod = 1, i = 3; i >= 0; i--)
 80032b0:	2001      	movs	r0, #1
                scf_size[i] = (uint8_t)(sfc / modprod % g_mod[k + i]);
 80032b2:	fb96 f2f0 	sdiv	r2, r6, r0
 80032b6:	fb92 f3f1 	sdiv	r3, r2, r1
 80032ba:	fb01 2313 	mls	r3, r1, r3, r2
 80032be:	f805 3901 	strb.w	r3, [r5], #-1
            for (modprod = 1, i = 3; i >= 0; i--)
 80032c2:	45a8      	cmp	r8, r5
                modprod *= g_mod[k + i];
 80032c4:	fb01 f000 	mul.w	r0, r1, r0
            for (modprod = 1, i = 3; i >= 0; i--)
 80032c8:	d002      	beq.n	80032d0 <mp3dec_decode_frame+0x10ec>
 80032ca:	f817 1901 	ldrb.w	r1, [r7], #-1
 80032ce:	e7f0      	b.n	80032b2 <mp3dec_decode_frame+0x10ce>
        for (k = ist*3*4; sfc >= 0; sfc -= modprod, k += 4)
 80032d0:	1a36      	subs	r6, r6, r0
 80032d2:	f10e 0e04 	add.w	lr, lr, #4
 80032d6:	f10c 0c04 	add.w	ip, ip, #4
 80032da:	d402      	bmi.n	80032e2 <mp3dec_decode_frame+0x10fe>
 80032dc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80032e0:	e7e3      	b.n	80032aa <mp3dec_decode_frame+0x10c6>
        scf_partition += k;
 80032e2:	44f2      	add	sl, lr
        scfsi = -16;
 80032e4:	f06f 090f 	mvn.w	r9, #15
 80032e8:	f7ff bbb2 	b.w	8002a50 <mp3dec_decode_frame+0x86c>
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 80032ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032ee:	f893 e006 	ldrb.w	lr, [r3, #6]
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 80032f2:	f893 c007 	ldrb.w	ip, [r3, #7]
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 80032f6:	7a1e      	ldrb	r6, [r3, #8]
        int sh = 3 - scf_shift;
 80032f8:	9b05      	ldr	r3, [sp, #20]
 80032fa:	f1c3 0303 	rsb	r3, r3, #3
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 80032fe:	fa0e fe03 	lsl.w	lr, lr, r3
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 8003302:	fa0c fc03 	lsl.w	ip, ip, r3
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 8003306:	409e      	lsls	r6, r3
 8003308:	9b15      	ldr	r3, [sp, #84]	; 0x54
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 800330a:	fa5f fe8e 	uxtb.w	lr, lr
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 800330e:	fa5f fc8c 	uxtb.w	ip, ip
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 8003312:	b2f6      	uxtb	r6, r6
 8003314:	442b      	add	r3, r5
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 8003316:	781c      	ldrb	r4, [r3, #0]
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 8003318:	7858      	ldrb	r0, [r3, #1]
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 800331a:	7899      	ldrb	r1, [r3, #2]
        for (i = 0; i < gr->n_short_sfb; i += 3)
 800331c:	3203      	adds	r2, #3
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 800331e:	4474      	add	r4, lr
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 8003320:	4460      	add	r0, ip
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 8003322:	4431      	add	r1, r6
        for (i = 0; i < gr->n_short_sfb; i += 3)
 8003324:	42ba      	cmp	r2, r7
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 8003326:	701c      	strb	r4, [r3, #0]
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 8003328:	7058      	strb	r0, [r3, #1]
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 800332a:	7099      	strb	r1, [r3, #2]
 800332c:	f103 0303 	add.w	r3, r3, #3
        for (i = 0; i < gr->n_short_sfb; i += 3)
 8003330:	dbf1      	blt.n	8003316 <mp3dec_decode_frame+0x1132>
 8003332:	f7ff bbd4 	b.w	8002ade <mp3dec_decode_frame+0x8fa>
 8003336:	f1a1 03d8 	sub.w	r3, r1, #216	; 0xd8
 800333a:	f7ff bbdc 	b.w	8002af6 <mp3dec_decode_frame+0x912>
            L3_reorder(s->grbuf[ch] + n_long_bands*18, s->syn[0], gr_info->sfbtab + gr_info->n_long_sfb);
 800333e:	7b71      	ldrb	r1, [r6, #13]
 8003340:	f8d6 a000 	ldr.w	sl, [r6]
 8003344:	980b      	ldr	r0, [sp, #44]	; 0x2c
    for (;0 != (len = *sfb); sfb += 3, src += 2*len)
 8003346:	f81a 2001 	ldrb.w	r2, [sl, r1]
            L3_reorder(s->grbuf[ch] + n_long_bands*18, s->syn[0], gr_info->sfbtab + gr_info->n_long_sfb);
 800334a:	448a      	add	sl, r1
 800334c:	9904      	ldr	r1, [sp, #16]
 800334e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003352:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 8003356:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800335a:	f100 031c 	add.w	r3, r0, #28
 800335e:	9105      	str	r1, [sp, #20]
 8003360:	9308      	str	r3, [sp, #32]
            aa_bands = n_long_bands - 1;
 8003362:	1e6f      	subs	r7, r5, #1
    for (;0 != (len = *sfb); sfb += 3, src += 2*len)
 8003364:	b352      	cbz	r2, 80033bc <mp3dec_decode_frame+0x11d8>
    float *src = grbuf, *dst = scratch;
 8003366:	46ae      	mov	lr, r5
 8003368:	4699      	mov	r9, r3
 800336a:	4615      	mov	r5, r2
 800336c:	4608      	mov	r0, r1
            *dst++ = src[1*len];
 800336e:	b212      	sxth	r2, r2
            *dst++ = src[2*len];
 8003370:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003374:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8003378:	f109 030c 	add.w	r3, r9, #12
 800337c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        for (i = 0; i < len; i++, src++)
 8003380:	2100      	movs	r1, #0
 8003382:	e000      	b.n	8003386 <mp3dec_decode_frame+0x11a2>
 8003384:	4663      	mov	r3, ip
            *dst++ = src[0*len];
 8003386:	f850 cb04 	ldr.w	ip, [r0], #4
 800338a:	f843 cc0c 	str.w	ip, [r3, #-12]
            *dst++ = src[1*len];
 800338e:	f854 cb04 	ldr.w	ip, [r4], #4
 8003392:	f843 cc08 	str.w	ip, [r3, #-8]
        for (i = 0; i < len; i++, src++)
 8003396:	3101      	adds	r1, #1
            *dst++ = src[2*len];
 8003398:	f852 cb04 	ldr.w	ip, [r2], #4
 800339c:	f843 cc04 	str.w	ip, [r3, #-4]
        for (i = 0; i < len; i++, src++)
 80033a0:	42a9      	cmp	r1, r5
 80033a2:	4699      	mov	r9, r3
 80033a4:	f103 0c0c 	add.w	ip, r3, #12
 80033a8:	dbec      	blt.n	8003384 <mp3dec_decode_frame+0x11a0>
    for (;0 != (len = *sfb); sfb += 3, src += 2*len)
 80033aa:	f81a 5f03 	ldrb.w	r5, [sl, #3]!
 80033ae:	4440      	add	r0, r8
 80033b0:	462a      	mov	r2, r5
 80033b2:	2d00      	cmp	r5, #0
 80033b4:	d1db      	bne.n	800336e <mp3dec_decode_frame+0x118a>
 80033b6:	9a08      	ldr	r2, [sp, #32]
 80033b8:	4675      	mov	r5, lr
 80033ba:	1a9a      	subs	r2, r3, r2
    memcpy(grbuf, scratch, (dst - scratch)*sizeof(float));
 80033bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033be:	9805      	ldr	r0, [sp, #20]
 80033c0:	f503 51f0 	add.w	r1, r3, #7680	; 0x1e00
 80033c4:	311c      	adds	r1, #28
 80033c6:	f00b ff24 	bl	800f212 <memcpy>
    for (; nbands > 0; nbands--, grbuf += 18)
 80033ca:	2f00      	cmp	r7, #0
 80033cc:	f73f aece 	bgt.w	800316c <mp3dec_decode_frame+0xf88>
        L3_imdct_gr(s->grbuf[ch], h->mdct_overlap[ch], gr_info->block_type, n_long_bands);
 80033d0:	9c03      	ldr	r4, [sp, #12]
 80033d2:	7af7      	ldrb	r7, [r6, #11]
    if (n_long_bands)
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	f43f aef3 	beq.w	80031c0 <mp3dec_decode_frame+0xfdc>
        L3_imdct36(grbuf, overlap, g_mdct_window[0], n_long_bands);
 80033da:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80033de:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80033e2:	4a57      	ldr	r2, [pc, #348]	; (8003540 <mp3dec_decode_frame+0x135c>)
 80033e4:	462b      	mov	r3, r5
        grbuf += 18*n_long_bands;
 80033e6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
        L3_imdct36(grbuf, overlap, g_mdct_window[0], n_long_bands);
 80033ea:	4649      	mov	r1, r9
 80033ec:	4640      	mov	r0, r8
 80033ee:	f7fd fe8d 	bl	800110c <L3_imdct36>
        grbuf += 18*n_long_bands;
 80033f2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
    if (block_type == SHORT_BLOCK_TYPE)
 80033f6:	2f02      	cmp	r7, #2
        grbuf += 18*n_long_bands;
 80033f8:	9304      	str	r3, [sp, #16]
        overlap += 9*n_long_bands;
 80033fa:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 80033fe:	f1c5 0520 	rsb	r5, r5, #32
    if (block_type == SHORT_BLOCK_TYPE)
 8003402:	f47f aee2 	bne.w	80031ca <mp3dec_decode_frame+0xfe6>
 8003406:	9b04      	ldr	r3, [sp, #16]
 8003408:	f103 0818 	add.w	r8, r3, #24
        L3_imdct12(tmp + 1, grbuf + 12, overlap + 6);
 800340c:	ab29      	add	r3, sp, #164	; 0xa4
 800340e:	9304      	str	r3, [sp, #16]
        L3_imdct12(tmp + 2, overlap, overlap + 6);
 8003410:	ab2a      	add	r3, sp, #168	; 0xa8
 8003412:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
 8003416:	9305      	str	r3, [sp, #20]
        memcpy(tmp, grbuf, sizeof(tmp));
 8003418:	f1a8 0718 	sub.w	r7, r8, #24
 800341c:	4639      	mov	r1, r7
 800341e:	2248      	movs	r2, #72	; 0x48
 8003420:	4648      	mov	r0, r9
 8003422:	f00b fef6 	bl	800f212 <memcpy>
        memcpy(grbuf, overlap, 6*sizeof(float));
 8003426:	6821      	ldr	r1, [r4, #0]
 8003428:	6860      	ldr	r0, [r4, #4]
 800342a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800342e:	68e2      	ldr	r2, [r4, #12]
 8003430:	f848 1c18 	str.w	r1, [r8, #-24]
 8003434:	f104 0a18 	add.w	sl, r4, #24
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	f848 0c14 	str.w	r0, [r8, #-20]
 800343e:	6960      	ldr	r0, [r4, #20]
 8003440:	f848 cc10 	str.w	ip, [r8, #-16]
 8003444:	f848 2c0c 	str.w	r2, [r8, #-12]
 8003448:	f848 1c08 	str.w	r1, [r8, #-8]
 800344c:	f848 0c04 	str.w	r0, [r8, #-4]
        L3_imdct12(tmp, grbuf + 6, overlap + 6);
 8003450:	4641      	mov	r1, r8
 8003452:	4652      	mov	r2, sl
 8003454:	4648      	mov	r0, r9
 8003456:	f7fd ff0b 	bl	8001270 <L3_imdct12>
        L3_imdct12(tmp + 1, grbuf + 12, overlap + 6);
 800345a:	f108 0118 	add.w	r1, r8, #24
 800345e:	4652      	mov	r2, sl
 8003460:	9804      	ldr	r0, [sp, #16]
 8003462:	f7fd ff05 	bl	8001270 <L3_imdct12>
        L3_imdct12(tmp + 2, overlap, overlap + 6);
 8003466:	4621      	mov	r1, r4
 8003468:	4652      	mov	r2, sl
 800346a:	9805      	ldr	r0, [sp, #20]
 800346c:	f7fd ff00 	bl	8001270 <L3_imdct12>
    for (;nbands > 0; nbands--, overlap += 9, grbuf += 18)
 8003470:	3d01      	subs	r5, #1
 8003472:	f108 0848 	add.w	r8, r8, #72	; 0x48
 8003476:	f104 0424 	add.w	r4, r4, #36	; 0x24
 800347a:	d1cd      	bne.n	8003418 <mp3dec_decode_frame+0x1234>
 800347c:	e6b0      	b.n	80031e0 <mp3dec_decode_frame+0xffc>
 800347e:	4b2f      	ldr	r3, [pc, #188]	; (800353c <mp3dec_decode_frame+0x1358>)
        int k, modprod, sfc, ist = HDR_TEST_I_STEREO(hdr) && ch;
 8003480:	2104      	movs	r1, #4
 8003482:	e70d      	b.n	80032a0 <mp3dec_decode_frame+0x10bc>
    while (big_val_cnt > 0)
 8003484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    float one = 0.0f;
 8003486:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003544 <mp3dec_decode_frame+0x1360>
    while (big_val_cnt > 0)
 800348a:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800348e:	331c      	adds	r3, #28
 8003490:	9305      	str	r3, [sp, #20]
 8003492:	e573      	b.n	8002f7c <mp3dec_decode_frame+0xd98>
 8003494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003496:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800349a:	330b      	adds	r3, #11
 800349c:	9319      	str	r3, [sp, #100]	; 0x64
 800349e:	e61d      	b.n	80030dc <mp3dec_decode_frame+0xef8>
 80034a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034a2:	f503 52a3 	add.w	r2, r3, #5216	; 0x1460
 80034a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034a8:	321c      	adds	r2, #28
 80034aa:	4611      	mov	r1, r2
 80034ac:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
        float a = left[i];
 80034b0:	ed93 7a00 	vldr	s14, [r3]
        float b = right[i];
 80034b4:	edd2 7a00 	vldr	s15, [r2]
        left[i] = a + b;
 80034b8:	ee77 6a27 	vadd.f32	s13, s14, s15
        right[i] = a - b;
 80034bc:	ee77 7a67 	vsub.f32	s15, s14, s15
        left[i] = a + b;
 80034c0:	ece3 6a01 	vstmia	r3!, {s13}
    for (; i < n; i++)
 80034c4:	4299      	cmp	r1, r3
        right[i] = a - b;
 80034c6:	ece2 7a01 	vstmia	r2!, {s15}
    for (; i < n; i++)
 80034ca:	d1f1      	bne.n	80034b0 <mp3dec_decode_frame+0x12cc>
 80034cc:	e610      	b.n	80030f0 <mp3dec_decode_frame+0xf0c>
    int max_band[3], n_sfb = gr->n_long_sfb + gr->n_short_sfb;
 80034ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80034d0:	f893 e00e 	ldrb.w	lr, [r3, #14]
 80034d4:	f893 c00d 	ldrb.w	ip, [r3, #13]
    L3_stereo_top_band(left + 576, gr->sfbtab, n_sfb, max_band);
 80034d8:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
    int i, max_blocks = gr->n_short_sfb ? 3 : 1;
 80034dc:	f1be 0f00 	cmp.w	lr, #0
    L3_stereo_top_band(left + 576, gr->sfbtab, n_sfb, max_band);
 80034e0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    int i, max_blocks = gr->n_short_sfb ? 3 : 1;
 80034e4:	bf08      	it	eq
 80034e6:	2701      	moveq	r7, #1
    max_band[0] = max_band[1] = max_band[2] = -1;
 80034e8:	aa28      	add	r2, sp, #160	; 0xa0
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
    int i, max_blocks = gr->n_short_sfb ? 3 : 1;
 80034ee:	bf18      	it	ne
 80034f0:	2703      	movne	r7, #3
    for (i = 0; i < nbands; i++)
 80034f2:	eb1c 0e0e 	adds.w	lr, ip, lr
    max_band[0] = max_band[1] = max_band[2] = -1;
 80034f6:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80034fa:	9215      	str	r2, [sp, #84]	; 0x54
 80034fc:	9328      	str	r3, [sp, #160]	; 0xa0
    for (i = 0; i < nbands; i++)
 80034fe:	d040      	beq.n	8003582 <mp3dec_decode_frame+0x139e>
 8003500:	441c      	add	r4, r3
 8003502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                max_band[i % 3] = i;
 8003504:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003548 <mp3dec_decode_frame+0x1364>
    for (i = 0; i < nbands; i++)
 8003508:	f503 50a3 	add.w	r0, r3, #5216	; 0x1460
 800350c:	eb04 080e 	add.w	r8, r4, lr
 8003510:	301c      	adds	r0, #28
 8003512:	2600      	movs	r6, #0
        for (k = 0; k < sfb[i]; k += 2)
 8003514:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8003518:	b36d      	cbz	r5, 8003576 <mp3dec_decode_frame+0x1392>
            if (right[k] != 0 || right[k + 1] != 0)
 800351a:	edd0 7a00 	vldr	s15, [r0]
 800351e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d164      	bne.n	80035f2 <mp3dec_decode_frame+0x140e>
 8003528:	edd0 7a01 	vldr	s15, [r0, #4]
 800352c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	d15d      	bne.n	80035f2 <mp3dec_decode_frame+0x140e>
 8003536:	4603      	mov	r3, r0
        for (k = 0; k < sfb[i]; k += 2)
 8003538:	2200      	movs	r2, #0
 800353a:	e019      	b.n	8003570 <mp3dec_decode_frame+0x138c>
 800353c:	0800fd9c 	.word	0x0800fd9c
 8003540:	0800fd0c 	.word	0x0800fd0c
 8003544:	00000000 	.word	0x00000000
 8003548:	aaaaaaab 	.word	0xaaaaaaab
 800354c:	3fb504f3 	.word	0x3fb504f3
            if (right[k] != 0 || right[k + 1] != 0)
 8003550:	edd3 7a02 	vldr	s15, [r3, #8]
 8003554:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	f103 0308 	add.w	r3, r3, #8
 8003560:	d147      	bne.n	80035f2 <mp3dec_decode_frame+0x140e>
 8003562:	edd3 7a01 	vldr	s15, [r3, #4]
 8003566:	eef5 7a40 	vcmp.f32	s15, #0.0
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	d140      	bne.n	80035f2 <mp3dec_decode_frame+0x140e>
        for (k = 0; k < sfb[i]; k += 2)
 8003570:	3202      	adds	r2, #2
 8003572:	42aa      	cmp	r2, r5
 8003574:	dbec      	blt.n	8003550 <mp3dec_decode_frame+0x136c>
    for (i = 0; i < nbands; i++)
 8003576:	45a0      	cmp	r8, r4
        right += sfb[i];
 8003578:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    for (i = 0; i < nbands; i++)
 800357c:	f106 0601 	add.w	r6, r6, #1
 8003580:	d1c8      	bne.n	8003514 <mp3dec_decode_frame+0x1330>
 8003582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003584:	461a      	mov	r2, r3
 8003586:	6818      	ldr	r0, [r3, #0]
    if (gr->n_long_sfb)
 8003588:	f1bc 0f00 	cmp.w	ip, #0
 800358c:	d00b      	beq.n	80035a6 <mp3dec_decode_frame+0x13c2>
        max_band[0] = max_band[1] = max_band[2] = MINIMP3_MAX(MINIMP3_MAX(max_band[0], max_band[1]), max_band[2]);
 800358e:	461c      	mov	r4, r3
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	4298      	cmp	r0, r3
 8003596:	bfb8      	it	lt
 8003598:	4618      	movlt	r0, r3
 800359a:	4290      	cmp	r0, r2
 800359c:	bfb8      	it	lt
 800359e:	4610      	movlt	r0, r2
 80035a0:	60a0      	str	r0, [r4, #8]
 80035a2:	6060      	str	r0, [r4, #4]
 80035a4:	6020      	str	r0, [r4, #0]
        int default_pos = HDR_TEST_MPEG1(hdr) ? 3 : 0;
 80035a6:	f641 0309 	movw	r3, #6153	; 0x1809
 80035aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80035ae:	5cd2      	ldrb	r2, [r2, r3]
 80035b0:	ebae 0e07 	sub.w	lr, lr, r7
 80035b4:	f50e 537d 	add.w	r3, lr, #16192	; 0x3f40
        ist_pos[itop] = max_band[i] >= prev ? default_pos : ist_pos[prev];
 80035b8:	f012 0208 	ands.w	r2, r2, #8
 80035bc:	f103 0303 	add.w	r3, r3, #3
 80035c0:	4423      	add	r3, r4
 80035c2:	bf18      	it	ne
 80035c4:	f04f 0c03 	movne.w	ip, #3
 80035c8:	ebae 0407 	sub.w	r4, lr, r7
 80035cc:	bf08      	it	eq
 80035ce:	f04f 0c00 	moveq.w	ip, #0
 80035d2:	427f      	negs	r7, r7
 80035d4:	ae29      	add	r6, sp, #164	; 0xa4
 80035d6:	4605      	mov	r5, r0
 80035d8:	42ac      	cmp	r4, r5
 80035da:	f104 0401 	add.w	r4, r4, #1
 80035de:	bfcc      	ite	gt
 80035e0:	5ddd      	ldrbgt	r5, [r3, r7]
 80035e2:	4665      	movle	r5, ip
    for (i = 0; i < max_blocks; i++)
 80035e4:	45a6      	cmp	lr, r4
        ist_pos[itop] = max_band[i] >= prev ? default_pos : ist_pos[prev];
 80035e6:	f803 5b01 	strb.w	r5, [r3], #1
    for (i = 0; i < max_blocks; i++)
 80035ea:	d012      	beq.n	8003612 <mp3dec_decode_frame+0x142e>
 80035ec:	f856 5b04 	ldr.w	r5, [r6], #4
 80035f0:	e7f2      	b.n	80035d8 <mp3dec_decode_frame+0x13f4>
                max_band[i % 3] = i;
 80035f2:	fba9 2306 	umull	r2, r3, r9, r6
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80035fc:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 8003600:	1af3      	subs	r3, r6, r3
 8003602:	3210      	adds	r2, #16
 8003604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003608:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 800360c:	f843 6c70 	str.w	r6, [r3, #-112]
 8003610:	e7b1      	b.n	8003576 <mp3dec_decode_frame+0x1392>
    L3_stereo_process(left, ist_pos, gr->sfbtab, hdr, max_band, gr[1].scalefac_compress & 1);
 8003612:	e9dd 341d 	ldrd	r3, r4, [sp, #116]	; 0x74
 8003616:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800361a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for (i = 0; sfb[i]; i++)
 800361c:	7835      	ldrb	r5, [r6, #0]
    L3_stereo_process(left, ist_pos, gr->sfbtab, hdr, max_band, gr[1].scalefac_compress & 1);
 800361e:	f8b3 8024 	ldrh.w	r8, [r3, #36]	; 0x24
    unsigned i, max_pos = HDR_TEST_MPEG1(hdr) ? 7 : 64;
 8003622:	2a00      	cmp	r2, #0
 8003624:	bf0c      	ite	eq
 8003626:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 800362a:	f04f 0c07 	movne.w	ip, #7
    L3_stereo_process(left, ist_pos, gr->sfbtab, hdr, max_band, gr[1].scalefac_compress & 1);
 800362e:	f008 0801 	and.w	r8, r8, #1
    for (i = 0; sfb[i]; i++)
 8003632:	2d00      	cmp	r5, #0
 8003634:	f43f ad5c 	beq.w	80030f0 <mp3dec_decode_frame+0xf0c>
 8003638:	ed5f 6a3c 	vldr	s13, [pc, #-240]	; 800354c <mp3dec_decode_frame+0x1368>
 800363c:	9b10      	ldr	r3, [sp, #64]	; 0x40
                kl = g_pan[2*ipos];
 800363e:	4f54      	ldr	r7, [pc, #336]	; (8003790 <mp3dec_decode_frame+0x15ac>)
 8003640:	f011 0b20 	ands.w	fp, r1, #32
 8003644:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003648:	bf08      	it	eq
 800364a:	eef0 6a67 	vmoveq.f32	s13, s15
    for (i = 0; sfb[i]; i++)
 800364e:	f503 6e35 	add.w	lr, r3, #2896	; 0xb50
 8003652:	2400      	movs	r4, #0
        unsigned ipos = ist_pos[i];
 8003654:	f643 7a43 	movw	sl, #16195	; 0x3f43
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8003658:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
        if ((int)i > max_band[i % 3] && ipos < max_pos)
 800365c:	4284      	cmp	r4, r0
 800365e:	dd05      	ble.n	800366c <mp3dec_decode_frame+0x1488>
        unsigned ipos = ist_pos[i];
 8003660:	eb04 030a 	add.w	r3, r4, sl
 8003664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003666:	5cc9      	ldrb	r1, [r1, r3]
        if ((int)i > max_band[i % 3] && ipos < max_pos)
 8003668:	4561      	cmp	r1, ip
 800366a:	d31c      	bcc.n	80036a6 <mp3dec_decode_frame+0x14c2>
        } else if (HDR_TEST_MS_STEREO(hdr))
 800366c:	f1bb 0f00 	cmp.w	fp, #0
 8003670:	d13a      	bne.n	80036e8 <mp3dec_decode_frame+0x1504>
        left += sfb[i];
 8003672:	7833      	ldrb	r3, [r6, #0]
    for (i = 0; sfb[i]; i++)
 8003674:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8003678:	3401      	adds	r4, #1
        left += sfb[i];
 800367a:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
    for (i = 0; sfb[i]; i++)
 800367e:	2d00      	cmp	r5, #0
 8003680:	f43f ad36 	beq.w	80030f0 <mp3dec_decode_frame+0xf0c>
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <mp3dec_decode_frame+0x15b0>)
 8003686:	fba3 1304 	umull	r1, r3, r3, r4
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003690:	f50d 4187 	add.w	r1, sp, #17280	; 0x4380
 8003694:	1ae3      	subs	r3, r4, r3
 8003696:	3110      	adds	r1, #16
 8003698:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800369c:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 80036a0:	f853 0c70 	ldr.w	r0, [r3, #-112]
 80036a4:	e7da      	b.n	800365c <mp3dec_decode_frame+0x1478>
            if (HDR_TEST_MPEG1(hdr))
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d04d      	beq.n	8003746 <mp3dec_decode_frame+0x1562>
                kl = g_pan[2*ipos];
 80036aa:	b209      	sxth	r1, r1
 80036ac:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
 80036b0:	edd3 7a00 	vldr	s15, [r3]
                kr = g_pan[2*ipos + 1];
 80036b4:	ed93 7a01 	vldr	s14, [r3, #4]
            L3_intensity_stereo_band(left, sfb[i], kl*s, kr*s);
 80036b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036bc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80036c0:	4673      	mov	r3, lr
 80036c2:	f50e 6010 	add.w	r0, lr, #2304	; 0x900
    for (i = 0; i < n; i++)
 80036c6:	2100      	movs	r1, #0
        left[i + 576] = left[i]*kr;
 80036c8:	ed93 6a00 	vldr	s12, [r3]
 80036cc:	ee26 6a07 	vmul.f32	s12, s12, s14
    for (i = 0; i < n; i++)
 80036d0:	3101      	adds	r1, #1
        left[i + 576] = left[i]*kr;
 80036d2:	eca0 6a01 	vstmia	r0!, {s12}
        left[i] = left[i]*kl;
 80036d6:	ed93 6a00 	vldr	s12, [r3]
 80036da:	ee26 6a27 	vmul.f32	s12, s12, s15
    for (i = 0; i < n; i++)
 80036de:	428d      	cmp	r5, r1
        left[i] = left[i]*kl;
 80036e0:	eca3 6a01 	vstmia	r3!, {s12}
    for (i = 0; i < n; i++)
 80036e4:	dcf0      	bgt.n	80036c8 <mp3dec_decode_frame+0x14e4>
 80036e6:	e7c4      	b.n	8003672 <mp3dec_decode_frame+0x148e>
 80036e8:	4670      	mov	r0, lr
 80036ea:	f50e 6110 	add.w	r1, lr, #2304	; 0x900
    int i = 0;
 80036ee:	2300      	movs	r3, #0
        float a = left[i];
 80036f0:	ed90 7a00 	vldr	s14, [r0]
        float b = right[i];
 80036f4:	edd1 7a00 	vldr	s15, [r1]
    for (; i < n; i++)
 80036f8:	3301      	adds	r3, #1
        left[i] = a + b;
 80036fa:	ee37 6a27 	vadd.f32	s12, s14, s15
        right[i] = a - b;
 80036fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    for (; i < n; i++)
 8003702:	429d      	cmp	r5, r3
        left[i] = a + b;
 8003704:	eca0 6a01 	vstmia	r0!, {s12}
        right[i] = a - b;
 8003708:	ece1 7a01 	vstmia	r1!, {s15}
    for (; i < n; i++)
 800370c:	dcf0      	bgt.n	80036f0 <mp3dec_decode_frame+0x150c>
 800370e:	e7b0      	b.n	8003672 <mp3dec_decode_frame+0x148e>
 8003710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003712:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8003716:	3207      	adds	r2, #7
 8003718:	08d2      	lsrs	r2, r2, #3
 800371a:	4613      	mov	r3, r2
 800371c:	f7ff b873 	b.w	8002806 <mp3dec_decode_frame+0x622>
        } else if (kbps >= 96 && sample_rate_idx != 1)
 8003720:	2a5f      	cmp	r2, #95	; 0x5f
 8003722:	f63e ae20 	bhi.w	8002366 <mp3dec_decode_frame+0x182>
 8003726:	f04f 0b1b 	mov.w	fp, #27
        nbands = 27;
 800372a:	465d      	mov	r5, fp
        } else if (kbps >= 96 && sample_rate_idx != 1)
 800372c:	f04f 0936 	mov.w	r9, #54	; 0x36
        alloc = g_alloc_L2M1;
 8003730:	4e19      	ldr	r6, [pc, #100]	; (8003798 <mp3dec_decode_frame+0x15b4>)
 8003732:	f7fe be21 	b.w	8002378 <mp3dec_decode_frame+0x194>
        } else if (kbps >= 96 && sample_rate_idx != 1)
 8003736:	f04f 0b1b 	mov.w	fp, #27
        alloc = g_alloc_L2M1;
 800373a:	4e17      	ldr	r6, [pc, #92]	; (8003798 <mp3dec_decode_frame+0x15b4>)
        nbands = 27;
 800373c:	465d      	mov	r5, fp
        } else if (kbps >= 96 && sample_rate_idx != 1)
 800373e:	f04f 0936 	mov.w	r9, #54	; 0x36
 8003742:	f7fe be19 	b.w	8002378 <mp3dec_decode_frame+0x194>
                kr = L3_ldexp_q2(1, (ipos + 1) >> 1 << mpeg2_sh);
 8003746:	1c4b      	adds	r3, r1, #1
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	fa03 f308 	lsl.w	r3, r3, r8
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 800374e:	1098      	asrs	r0, r3, #2
 8003750:	fa49 f000 	asr.w	r0, r9, r0
 8003754:	ee07 0a90 	vmov	s15, r0
 8003758:	4810      	ldr	r0, [pc, #64]	; (800379c <mp3dec_decode_frame+0x15b8>)
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
                if (ipos & 1)
 800376e:	07cb      	lsls	r3, r1, #31
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8003770:	bf56      	itet	pl
 8003772:	eeb0 7a67 	vmovpl.f32	s14, s15
                    kr = 1;
 8003776:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
                kl = 1;
 800377a:	eef7 7a00 	vmovpl.f32	s15, #112	; 0x3f800000  1.0
 800377e:	e79b      	b.n	80036b8 <mp3dec_decode_frame+0x14d4>
            nbands = sample_rate_idx == 2 ? 12 : 8;
 8003780:	f04f 0b0c 	mov.w	fp, #12
 8003784:	465d      	mov	r5, fp
 8003786:	f04f 0918 	mov.w	r9, #24
            alloc = g_alloc_L2M1_lowrate;
 800378a:	4e05      	ldr	r6, [pc, #20]	; (80037a0 <mp3dec_decode_frame+0x15bc>)
 800378c:	f7fe bdf4 	b.w	8002378 <mp3dec_decode_frame+0x194>
 8003790:	0800fdb4 	.word	0x0800fdb4
 8003794:	aaaaaaab 	.word	0xaaaaaaab
 8003798:	0800fb78 	.word	0x0800fb78
 800379c:	0800fccc 	.word	0x0800fccc
 80037a0:	0800fb84 	.word	0x0800fb84

080037a4 <mp3dec_load_index>:
    } while (1);
    return 0;
}

static int mp3dec_load_index(void *user_data, const uint8_t *frame, int frame_size, int free_format_bytes, size_t buf_size, uint64_t offset, mp3dec_frame_info_t *info)
{
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	4604      	mov	r4, r0
    mp3dec_frame_t *idx_frame;
    mp3dec_ex_t *dec = (mp3dec_ex_t *)user_data;
    if (!dec->index.frames && !dec->start_offset)
 80037aa:	f641 2018 	movw	r0, #6680	; 0x1a18
{
 80037ae:	b089      	sub	sp, #36	; 0x24
    if (!dec->index.frames && !dec->start_offset)
 80037b0:	5825      	ldr	r5, [r4, r0]
{
 80037b2:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80037b6:	460f      	mov	r7, r1
    if (!dec->index.frames && !dec->start_offset)
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	f000 8087 	beq.w	80038cc <mp3dec_load_index+0x128>
                return MP3D_E_USER;
            } else if (ret < 0)
                return 0;
        }
    }
    if (dec->flags & MP3D_DO_NOT_SCAN)
 80037be:	f642 437c 	movw	r3, #11388	; 0x2c7c
 80037c2:	58e5      	ldr	r5, [r4, r3]
 80037c4:	f015 0502 	ands.w	r5, r5, #2
 80037c8:	f040 811a 	bne.w	8003a00 <mp3dec_load_index+0x25c>
        return MP3D_E_USER;
    if (dec->index.num_frames + 1 > dec->index.capacity)
 80037cc:	f641 231c 	movw	r3, #6684	; 0x1a1c
 80037d0:	f504 5cd1 	add.w	ip, r4, #6688	; 0x1a20
 80037d4:	58e2      	ldr	r2, [r4, r3]
 80037d6:	f8dc 3000 	ldr.w	r3, [ip]
 80037da:	f641 2018 	movw	r0, #6680	; 0x1a18
 80037de:	1c51      	adds	r1, r2, #1
 80037e0:	4299      	cmp	r1, r3
 80037e2:	5820      	ldr	r0, [r4, r0]
 80037e4:	d914      	bls.n	8003810 <mp3dec_load_index+0x6c>
    {
        if (!dec->index.capacity)
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 8105 	bne.w	80039f6 <mp3dec_load_index+0x252>
            dec->index.capacity = 4096;
 80037ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f0:	f8cc 3000 	str.w	r3, [ip]
 80037f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
        else
            dec->index.capacity *= 2;
        mp3dec_frame_t *alloc_buf = (mp3dec_frame_t *)realloc((void*)dec->index.frames, sizeof(mp3dec_frame_t)*dec->index.capacity);
 80037f8:	f00b fde0 	bl	800f3bc <realloc>
        if (!alloc_buf)
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f000 810d 	beq.w	8003a1c <mp3dec_load_index+0x278>
 8003802:	f641 221c 	movw	r2, #6684	; 0x1a1c
            return MP3D_E_MEMORY;
        dec->index.frames = alloc_buf;
 8003806:	f641 2318 	movw	r3, #6680	; 0x1a18
 800380a:	58a2      	ldr	r2, [r4, r2]
 800380c:	50e0      	str	r0, [r4, r3]
 800380e:	1c51      	adds	r1, r2, #1
    }
    idx_frame = &dec->index.frames[dec->index.num_frames++];
    idx_frame->offset = offset;
    idx_frame->sample = dec->samples;
 8003810:	f504 58d1 	add.w	r8, r4, #6688	; 0x1a20
 8003814:	f108 0810 	add.w	r8, r8, #16
    idx_frame = &dec->index.frames[dec->index.num_frames++];
 8003818:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    idx_frame->sample = dec->samples;
 800381c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003820:	e9cd 2302 	strd	r2, r3, [sp, #8]
    idx_frame->offset = offset;
 8003824:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    idx_frame = &dec->index.frames[dec->index.num_frames++];
 8003828:	f641 2c1c 	movw	ip, #6684	; 0x1a1c
    if (!dec->buffer_samples && dec->index.num_frames < 256)
 800382c:	f642 498c 	movw	r9, #11404	; 0x2c8c
    idx_frame = &dec->index.frames[dec->index.num_frames++];
 8003830:	f844 100c 	str.w	r1, [r4, ip]
    idx_frame->offset = offset;
 8003834:	e9c0 2302 	strd	r2, r3, [r0, #8]
    idx_frame->sample = dec->samples;
 8003838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    if (!dec->buffer_samples && dec->index.num_frames < 256)
 800383c:	f854 6009 	ldr.w	r6, [r4, r9]
    idx_frame->sample = dec->samples;
 8003840:	e9c0 2300 	strd	r2, r3, [r0]
    if (!dec->buffer_samples && dec->index.num_frames < 256)
 8003844:	bb1e      	cbnz	r6, 800388e <mp3dec_load_index+0xea>
 8003846:	29ff      	cmp	r1, #255	; 0xff
 8003848:	d821      	bhi.n	800388e <mp3dec_load_index+0xea>
    {   /* for some cutted mp3 frames, bit-reservoir not filled and decoding can't be started from first frames */
        /* try to decode up to 255 first frames till samples starts to decode */
        dec->buffer_samples = mp3dec_decode_frame(&dec->mp3d, frame, MINIMP3_MIN(buf_size, (size_t)INT_MAX), dec->buffer, info);
 800384a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800384c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800384e:	f8cd b000 	str.w	fp, [sp]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f504 53d3 	add.w	r3, r4, #6752	; 0x1a60
 8003858:	bfb8      	it	lt
 800385a:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
 800385e:	4639      	mov	r1, r7
 8003860:	3310      	adds	r3, #16
 8003862:	4620      	mov	r0, r4
 8003864:	f7fe fcbe 	bl	80021e4 <mp3dec_decode_frame>
        dec->samples += dec->buffer_samples*info->channels;
 8003868:	f8db 1008 	ldr.w	r1, [fp, #8]
        dec->buffer_samples = mp3dec_decode_frame(&dec->mp3d, frame, MINIMP3_MIN(buf_size, (size_t)INT_MAX), dec->buffer, info);
 800386c:	f844 0009 	str.w	r0, [r4, r9]
        dec->samples += dec->buffer_samples*info->channels;
 8003870:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003874:	fb01 f000 	mul.w	r0, r1, r0
 8003878:	eb12 0900 	adds.w	r9, r2, r0
 800387c:	eb43 7ae0 	adc.w	sl, r3, r0, asr #31
 8003880:	e9c8 9a00 	strd	r9, sl, [r8]
    } else
        dec->samples += hdr_frame_samples(frame)*info->channels;
    return 0;
 8003884:	4635      	mov	r5, r6
}
 8003886:	4628      	mov	r0, r5
 8003888:	b009      	add	sp, #36	; 0x24
 800388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 800388e:	7879      	ldrb	r1, [r7, #1]
 8003890:	f001 0006 	and.w	r0, r1, #6
 8003894:	2806      	cmp	r0, #6
 8003896:	d016      	beq.n	80038c6 <mp3dec_load_index+0x122>
 8003898:	f001 010e 	and.w	r1, r1, #14
 800389c:	2902      	cmp	r1, #2
 800389e:	bf14      	ite	ne
 80038a0:	f44f 6090 	movne.w	r0, #1152	; 0x480
 80038a4:	f44f 7010 	moveq.w	r0, #576	; 0x240
        dec->samples += hdr_frame_samples(frame)*info->channels;
 80038a8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80038ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038b0:	fb01 f100 	mul.w	r1, r1, r0
 80038b4:	1852      	adds	r2, r2, r1
 80038b6:	f143 0300 	adc.w	r3, r3, #0
}
 80038ba:	4628      	mov	r0, r5
        dec->samples += hdr_frame_samples(frame)*info->channels;
 80038bc:	e9c8 2300 	strd	r2, r3, [r8]
}
 80038c0:	b009      	add	sp, #36	; 0x24
 80038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80038ca:	e7ed      	b.n	80038a8 <mp3dec_load_index+0x104>
    if (!dec->index.frames && !dec->start_offset)
 80038cc:	f504 58d2 	add.w	r8, r4, #6720	; 0x1a40
 80038d0:	4691      	mov	r9, r2
 80038d2:	461e      	mov	r6, r3
 80038d4:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	f108 0808 	add.w	r8, r8, #8
 80038de:	f47f af6e 	bne.w	80037be <mp3dec_load_index+0x1a>
        dec->info = *info;
 80038e2:	46da      	mov	sl, fp
 80038e4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80038e8:	f504 5cd2 	add.w	ip, r4, #6720	; 0x1a40
 80038ec:	f10c 0c18 	add.w	ip, ip, #24
 80038f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80038f4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80038f8:	e88c 0003 	stmia.w	ip, {r0, r1}
        if (3 == dec->info.layer)
 80038fc:	f641 2368 	movw	r3, #6760	; 0x1a68
        dec->end_offset   = offset + buf_size;
 8003900:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
        if (3 == dec->info.layer)
 8003904:	58e3      	ldr	r3, [r4, r3]
 8003906:	9302      	str	r3, [sp, #8]
        dec->end_offset   = offset + buf_size;
 8003908:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800390a:	18c9      	adds	r1, r1, r3
 800390c:	f142 0200 	adc.w	r2, r2, #0
 8003910:	4613      	mov	r3, r2
 8003912:	460a      	mov	r2, r1
        dec->start_offset = dec->offset = offset;
 8003914:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003918:	f504 5ad1 	add.w	sl, r4, #6688	; 0x1a20
        dec->end_offset   = offset + buf_size;
 800391c:	f504 5ed2 	add.w	lr, r4, #6720	; 0x1a40
        dec->start_offset = dec->offset = offset;
 8003920:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003924:	e9c8 0100 	strd	r0, r1, [r8]
        dec->end_offset   = offset + buf_size;
 8003928:	e9ce 2304 	strd	r2, r3, [lr, #16]
        if (3 == dec->info.layer)
 800392c:	9b02      	ldr	r3, [sp, #8]
        dec->free_format_bytes = free_format_bytes; /* should not change */
 800392e:	f642 4c88 	movw	ip, #11400	; 0x2c88
        if (3 == dec->info.layer)
 8003932:	2b03      	cmp	r3, #3
        dec->start_offset = dec->offset = offset;
 8003934:	f10a 0a08 	add.w	sl, sl, #8
        dec->end_offset   = offset + buf_size;
 8003938:	f10e 0e10 	add.w	lr, lr, #16
        dec->free_format_bytes = free_format_bytes; /* should not change */
 800393c:	f844 600c 	str.w	r6, [r4, ip]
        if (3 == dec->info.layer)
 8003940:	f47f af3d 	bne.w	80037be <mp3dec_load_index+0x1a>
            int ret = mp3dec_check_vbrtag(frame, frame_size, &frames, &delay, &padding);
 8003944:	ab07      	add	r3, sp, #28
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	aa05      	add	r2, sp, #20
 800394a:	ab06      	add	r3, sp, #24
 800394c:	4649      	mov	r1, r9
 800394e:	4638      	mov	r0, r7
 8003950:	f7fe fa88 	bl	8001e64 <mp3dec_check_vbrtag>
            if (ret)
 8003954:	2800      	cmp	r0, #0
 8003956:	f43f af32 	beq.w	80037be <mp3dec_load_index+0x1a>
                dec->start_offset = dec->offset = offset + frame_size;
 800395a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800395e:	eb12 0209 	adds.w	r2, r2, r9
 8003962:	eb43 73e9 	adc.w	r3, r3, r9, asr #31
            if (ret > 0)
 8003966:	2800      	cmp	r0, #0
                dec->start_offset = dec->offset = offset + frame_size;
 8003968:	e9ca 2300 	strd	r2, r3, [sl]
 800396c:	e9c8 2300 	strd	r2, r3, [r8]
            if (ret > 0)
 8003970:	dd89      	ble.n	8003886 <mp3dec_load_index+0xe2>
                padding *= info->channels;
 8003972:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 8003976:	f8db 3008 	ldr.w	r3, [fp, #8]
                dec->start_delay = dec->to_skip = delay*info->channels;
 800397a:	f642 4194 	movw	r1, #11412	; 0x2c94
 800397e:	f642 4298 	movw	r2, #11416	; 0x2c98
 8003982:	fb00 f003 	mul.w	r0, r0, r3
 8003986:	5060      	str	r0, [r4, r1]
 8003988:	50a0      	str	r0, [r4, r2]
 800398a:	787a      	ldrb	r2, [r7, #1]
 800398c:	f002 0106 	and.w	r1, r2, #6
 8003990:	2906      	cmp	r1, #6
                padding *= info->channels;
 8003992:	fb05 f503 	mul.w	r5, r5, r3
 8003996:	d03e      	beq.n	8003a16 <mp3dec_load_index+0x272>
 8003998:	f002 020e 	and.w	r2, r2, #14
 800399c:	2a02      	cmp	r2, #2
 800399e:	bf14      	ite	ne
 80039a0:	f44f 6290 	movne.w	r2, #1152	; 0x480
 80039a4:	f44f 7210 	moveq.w	r2, #576	; 0x240
                dec->samples = hdr_frame_samples(frame)*info->channels*(uint64_t)frames;
 80039a8:	9905      	ldr	r1, [sp, #20]
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	fba3 2301 	umull	r2, r3, r3, r1
                if (dec->samples >= (uint64_t)dec->start_delay)
 80039b2:	17c1      	asrs	r1, r0, #31
 80039b4:	428b      	cmp	r3, r1
 80039b6:	bf08      	it	eq
 80039b8:	4282      	cmpeq	r2, r0
                    dec->samples -= dec->start_delay;
 80039ba:	f504 58d1 	add.w	r8, r4, #6688	; 0x1a20
                if (dec->samples >= (uint64_t)dec->start_delay)
 80039be:	d222      	bcs.n	8003a06 <mp3dec_load_index+0x262>
                dec->samples = hdr_frame_samples(frame)*info->channels*(uint64_t)frames;
 80039c0:	f108 0810 	add.w	r8, r8, #16
 80039c4:	e9c8 2300 	strd	r2, r3, [r8]
                if (padding > 0 && dec->samples >= (uint64_t)padding)
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	dd09      	ble.n	80039e0 <mp3dec_load_index+0x23c>
 80039cc:	17e9      	asrs	r1, r5, #31
 80039ce:	428b      	cmp	r3, r1
 80039d0:	bf08      	it	eq
 80039d2:	42aa      	cmpeq	r2, r5
 80039d4:	d304      	bcc.n	80039e0 <mp3dec_load_index+0x23c>
                    dec->samples -= padding;
 80039d6:	1b52      	subs	r2, r2, r5
 80039d8:	eb63 0301 	sbc.w	r3, r3, r1
 80039dc:	e9c8 2300 	strd	r2, r3, [r8]
                dec->detected_samples = dec->samples;
 80039e0:	f504 51d1 	add.w	r1, r4, #6688	; 0x1a20
                dec->vbr_tag_found = 1;
 80039e4:	f504 5432 	add.w	r4, r4, #11392	; 0x2c80
 80039e8:	2001      	movs	r0, #1
                dec->detected_samples = dec->samples;
 80039ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
                return MP3D_E_USER;
 80039ee:	f06f 0503 	mvn.w	r5, #3
                dec->vbr_tag_found = 1;
 80039f2:	6020      	str	r0, [r4, #0]
                return MP3D_E_USER;
 80039f4:	e747      	b.n	8003886 <mp3dec_load_index+0xe2>
            dec->index.capacity *= 2;
 80039f6:	005a      	lsls	r2, r3, #1
 80039f8:	f8cc 2000 	str.w	r2, [ip]
 80039fc:	0159      	lsls	r1, r3, #5
 80039fe:	e6fb      	b.n	80037f8 <mp3dec_load_index+0x54>
        return MP3D_E_USER;
 8003a00:	f06f 0503 	mvn.w	r5, #3
 8003a04:	e73f      	b.n	8003886 <mp3dec_load_index+0xe2>
                    dec->samples -= dec->start_delay;
 8003a06:	1a12      	subs	r2, r2, r0
 8003a08:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0c:	e9c8 2304 	strd	r2, r3, [r8, #16]
 8003a10:	f108 0810 	add.w	r8, r8, #16
 8003a14:	e7d8      	b.n	80039c8 <mp3dec_load_index+0x224>
 8003a16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003a1a:	e7c5      	b.n	80039a8 <mp3dec_load_index+0x204>
            return MP3D_E_MEMORY;
 8003a1c:	f06f 0501 	mvn.w	r5, #1
 8003a20:	e731      	b.n	8003886 <mp3dec_load_index+0xe2>
 8003a22:	bf00      	nop

08003a24 <prvMp3PlayerDecode.constprop.8>:
static void prvMp3PlayerDecode(uint32_t *pulBytesRead, int xInputBufPos){
 8003a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!ulAudioRemSize){                                                                                               /*finish decoding last buffer*/
 8003a28:	4c2c      	ldr	r4, [pc, #176]	; (8003adc <prvMp3PlayerDecode.constprop.8+0xb8>)
 8003a2a:	6822      	ldr	r2, [r4, #0]
static void prvMp3PlayerDecode(uint32_t *pulBytesRead, int xInputBufPos){
 8003a2c:	b083      	sub	sp, #12
	if (!ulAudioRemSize){                                                                                               /*finish decoding last buffer*/
 8003a2e:	bb3a      	cbnz	r2, 8003a80 <prvMp3PlayerDecode.constprop.8+0x5c>
		if(xFrameInfo.frame_bytes){                                                                                         /*if there are still more frames left*/
 8003a30:	4d2b      	ldr	r5, [pc, #172]	; (8003ae0 <prvMp3PlayerDecode.constprop.8+0xbc>)
 8003a32:	682a      	ldr	r2, [r5, #0]
 8003a34:	b94a      	cbnz	r2, 8003a4a <prvMp3PlayerDecode.constprop.8+0x26>
			pxCurrent = pxCurrent->pxNext;                                                                                      /*update LL to point to next track*/
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <prvMp3PlayerDecode.constprop.8+0xc0>)
			ucNewSongFlag = 1;                                                                                                  /*update mp3 decoding flag*/
 8003a38:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <prvMp3PlayerDecode.constprop.8+0xc4>)
			pxCurrent = pxCurrent->pxNext;                                                                                      /*update LL to point to next track*/
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	6840      	ldr	r0, [r0, #4]
 8003a3e:	6018      	str	r0, [r3, #0]
			ucNewSongFlag = 1;                                                                                                  /*update mp3 decoding flag*/
 8003a40:	2101      	movs	r1, #1
 8003a42:	7011      	strb	r1, [r2, #0]
}
 8003a44:	b003      	add	sp, #12
 8003a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003a4a:	4e28      	ldr	r6, [pc, #160]	; (8003aec <prvMp3PlayerDecode.constprop.8+0xc8>)
			ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a4c:	4928      	ldr	r1, [pc, #160]	; (8003af0 <prvMp3PlayerDecode.constprop.8+0xcc>)
			n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003a4e:	6834      	ldr	r4, [r6, #0]
			ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <prvMp3PlayerDecode.constprop.8+0xd0>)
 8003a52:	9500      	str	r5, [sp, #0]
			n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003a54:	4414      	add	r4, r2
			ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a56:	4421      	add	r1, r4
 8003a58:	f5c4 5200 	rsb	r2, r4, #8192	; 0x2000
			n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003a5c:	6034      	str	r4, [r6, #0]
			ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a5e:	4c26      	ldr	r4, [pc, #152]	; (8003af8 <prvMp3PlayerDecode.constprop.8+0xd4>)
 8003a60:	4403      	add	r3, r0
 8003a62:	4826      	ldr	r0, [pc, #152]	; (8003afc <prvMp3PlayerDecode.constprop.8+0xd8>)
 8003a64:	f7fe fbbe 	bl	80021e4 <mp3dec_decode_frame>
 8003a68:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003a6c:	1815      	adds	r5, r2, r0
 8003a6e:	eb43 76e0 	adc.w	r6, r3, r0, asr #31
 8003a72:	4631      	mov	r1, r6
 8003a74:	4628      	mov	r0, r5
 8003a76:	e9c4 0100 	strd	r0, r1, [r4]
}
 8003a7a:	b003      	add	sp, #12
 8003a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a80:	4d1b      	ldr	r5, [pc, #108]	; (8003af0 <prvMp3PlayerDecode.constprop.8+0xcc>)
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <prvMp3PlayerDecode.constprop.8+0xd0>)
 8003a84:	4e16      	ldr	r6, [pc, #88]	; (8003ae0 <prvMp3PlayerDecode.constprop.8+0xbc>)
 8003a86:	9600      	str	r6, [sp, #0]
 8003a88:	4403      	add	r3, r0
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a90:	481a      	ldr	r0, [pc, #104]	; (8003afc <prvMp3PlayerDecode.constprop.8+0xd8>)
		f_read(&xFileRead, &cInputData[MP3_BUF - xFrameInfo.frame_bytes], xFrameInfo.frame_bytes, (void *) pulBytesRead);   /*read more data into end of input buffer*/
 8003a92:	4f1b      	ldr	r7, [pc, #108]	; (8003b00 <prvMp3PlayerDecode.constprop.8+0xdc>)
		ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a94:	f7fe fba6 	bl	80021e4 <mp3dec_decode_frame>
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <prvMp3PlayerDecode.constprop.8+0xd4>)
		memmove(&cInputData[0], &cInputData[xFrameInfo.frame_bytes], (MP3_BUF - xFrameInfo.frame_bytes));                   /*move input buffer to to correct position*/
 8003a9a:	6836      	ldr	r6, [r6, #0]
		ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003aa0:	eb18 0100 	adds.w	r1, r8, r0
 8003aa4:	eb49 72e0 	adc.w	r2, r9, r0, asr #31
		memmove(&cInputData[0], &cInputData[xFrameInfo.frame_bytes], (MP3_BUF - xFrameInfo.frame_bytes));                   /*move input buffer to to correct position*/
 8003aa8:	f5c6 5800 	rsb	r8, r6, #8192	; 0x2000
		ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	e9c3 0100 	strd	r0, r1, [r3]
		memmove(&cInputData[0], &cInputData[xFrameInfo.frame_bytes], (MP3_BUF - xFrameInfo.frame_bytes));                   /*move input buffer to to correct position*/
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	19a9      	adds	r1, r5, r6
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f00b fbb5 	bl	800f228 <memmove>
		f_read(&xFileRead, &cInputData[MP3_BUF - xFrameInfo.frame_bytes], xFrameInfo.frame_bytes, (void *) pulBytesRead);   /*read more data into end of input buffer*/
 8003abe:	4632      	mov	r2, r6
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	eb05 0108 	add.w	r1, r5, r8
 8003ac6:	480f      	ldr	r0, [pc, #60]	; (8003b04 <prvMp3PlayerDecode.constprop.8+0xe0>)
 8003ac8:	f008 fe48 	bl	800c75c <f_read>
		ulAudioRemSize = ulAudioRemSize - *pulBytesRead;                                                                    /*update ulAudioRemSize variable*/
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	6023      	str	r3, [r4, #0]
}
 8003ad4:	b003      	add	sp, #12
 8003ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ada:	bf00      	nop
 8003adc:	2000478c 	.word	0x2000478c
 8003ae0:	20005810 	.word	0x20005810
 8003ae4:	20000368 	.word	0x20000368
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	20002384 	.word	0x20002384
 8003af0:	20000384 	.word	0x20000384
 8003af4:	20002388 	.word	0x20002388
 8003af8:	200047a0 	.word	0x200047a0
 8003afc:	20005828 	.word	0x20005828
 8003b00:	20004790 	.word	0x20004790
 8003b04:	200047e0 	.word	0x200047e0

08003b08 <mp3dec_iterate_cb>:
{
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	b099      	sub	sp, #100	; 0x64
    if (!io || !buf || (size_t)-1 == buf_size || buf_size < MINIMP3_BUF_SIZE || !callback)
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	f000 8114 	beq.w	8003d3c <mp3dec_iterate_cb+0x234>
 8003b14:	2900      	cmp	r1, #0
 8003b16:	f000 8111 	beq.w	8003d3c <mp3dec_iterate_cb+0x234>
 8003b1a:	4c8a      	ldr	r4, [pc, #552]	; (8003d44 <mp3dec_iterate_cb+0x23c>)
 8003b1c:	f5a2 5500 	sub.w	r5, r2, #8192	; 0x2000
 8003b20:	42a5      	cmp	r5, r4
 8003b22:	f200 810b 	bhi.w	8003d3c <mp3dec_iterate_cb+0x234>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8108 	beq.w	8003d3c <mp3dec_iterate_cb+0x234>
 8003b2c:	4689      	mov	r9, r1
 8003b2e:	900d      	str	r0, [sp, #52]	; 0x34
 8003b30:	9309      	str	r3, [sp, #36]	; 0x24
 8003b32:	920c      	str	r2, [sp, #48]	; 0x30
    size_t filled = io->read(buf, MINIMP3_ID3_DETECT_SIZE, io->read_data), consumed = 0;
 8003b34:	6803      	ldr	r3, [r0, #0]
 8003b36:	6842      	ldr	r2, [r0, #4]
 8003b38:	210a      	movs	r1, #10
 8003b3a:	4648      	mov	r0, r9
 8003b3c:	4798      	blx	r3
    memset(&frame_info, 0, sizeof(frame_info));
 8003b3e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8003b42:	2300      	movs	r3, #0
    if (filled > MINIMP3_ID3_DETECT_SIZE)
 8003b44:	280a      	cmp	r0, #10
    memset(&frame_info, 0, sizeof(frame_info));
 8003b46:	f8cb 3004 	str.w	r3, [fp, #4]
    size_t filled = io->read(buf, MINIMP3_ID3_DETECT_SIZE, io->read_data), consumed = 0;
 8003b4a:	900f      	str	r0, [sp, #60]	; 0x3c
    memset(&frame_info, 0, sizeof(frame_info));
 8003b4c:	9312      	str	r3, [sp, #72]	; 0x48
 8003b4e:	e9cb 3302 	strd	r3, r3, [fp, #8]
 8003b52:	e9cb 3304 	strd	r3, r3, [fp, #16]
    if (filled > MINIMP3_ID3_DETECT_SIZE)
 8003b56:	f200 80d6 	bhi.w	8003d06 <mp3dec_iterate_cb+0x1fe>
    if (MINIMP3_ID3_DETECT_SIZE != filled)
 8003b5a:	d004      	beq.n	8003b66 <mp3dec_iterate_cb+0x5e>
        return 0;
 8003b5c:	469a      	mov	sl, r3
}
 8003b5e:	4650      	mov	r0, sl
 8003b60:	b019      	add	sp, #100	; 0x64
 8003b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t id3v2size = mp3dec_skip_id3v2(buf, filled);
 8003b66:	4601      	mov	r1, r0
 8003b68:	4648      	mov	r0, r9
 8003b6a:	f7fe fa21 	bl	8001fb0 <mp3dec_skip_id3v2>
    if (id3v2size)
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	f040 80b5 	bne.w	8003cde <mp3dec_iterate_cb+0x1d6>
        size_t readed = io->read(buf + MINIMP3_ID3_DETECT_SIZE, buf_size - MINIMP3_ID3_DETECT_SIZE, io->read_data);
 8003b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003b78:	f1a3 040a 	sub.w	r4, r3, #10
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	6852      	ldr	r2, [r2, #4]
 8003b82:	f109 000a 	add.w	r0, r9, #10
 8003b86:	4798      	blx	r3
        if (readed > (buf_size - MINIMP3_ID3_DETECT_SIZE))
 8003b88:	4284      	cmp	r4, r0
 8003b8a:	f0c0 80bc 	bcc.w	8003d06 <mp3dec_iterate_cb+0x1fe>
        filled += readed;
 8003b8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    uint64_t readed = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	2400      	movs	r4, #0
 8003b94:	e9cd 3406 	strd	r3, r4, [sp, #24]
        filled += readed;
 8003b98:	4428      	add	r0, r5
 8003b9a:	900f      	str	r0, [sp, #60]	; 0x3c
    if (filled < MINIMP3_BUF_SIZE)
 8003b9c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003ba0:	f0c0 80c6 	bcc.w	8003d30 <mp3dec_iterate_cb+0x228>
            consumed += i;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ba8:	4605      	mov	r5, r0
 8003baa:	4698      	mov	r8, r3
 8003bac:	464c      	mov	r4, r9
 8003bae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        int i = mp3d_find_frame(buf + consumed, filled - consumed, &free_format_bytes, &frame_size);
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	ab11      	add	r3, sp, #68	; 0x44
 8003bb8:	aa10      	add	r2, sp, #64	; 0x40
        int free_format_bytes = 0, frame_size = 0, ret;
 8003bba:	2500      	movs	r5, #0
 8003bbc:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
        int i = mp3d_find_frame(buf + consumed, filled - consumed, &free_format_bytes, &frame_size);
 8003bc0:	f7fe fa2a 	bl	8002018 <mp3d_find_frame>
        if (i && !frame_size)
 8003bc4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	f000 809f 	beq.w	8003d0c <mp3dec_iterate_cb+0x204>
 8003bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003bd0:	eb00 0408 	add.w	r4, r0, r8
 8003bd4:	2f00      	cmp	r7, #0
 8003bd6:	f000 809c 	beq.w	8003d12 <mp3dec_iterate_cb+0x20a>
 8003bda:	444c      	add	r4, r9
        frame_info.channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8003bdc:	78e3      	ldrb	r3, [r4, #3]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003bde:	7862      	ldrb	r2, [r4, #1]
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003be0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003be2:	9004      	str	r0, [sp, #16]
        frame_info.channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8003be4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003be8:	2bc0      	cmp	r3, #192	; 0xc0
        frame_info.layer = 4 - HDR_GET_LAYER(hdr);
 8003bea:	f3c2 0e41 	ubfx	lr, r2, #1, #2
 8003bee:	f002 0308 	and.w	r3, r2, #8
        frame_info.channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8003bf2:	bf14      	ite	ne
 8003bf4:	f04f 0a02 	movne.w	sl, #2
 8003bf8:	f04f 0a01 	moveq.w	sl, #1
 8003bfc:	2b00      	cmp	r3, #0
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003bfe:	f10e 33ff 	add.w	r3, lr, #4294967295
 8003c02:	bf14      	ite	ne
 8003c04:	252d      	movne	r5, #45	; 0x2d
 8003c06:	2500      	moveq	r5, #0
 8003c08:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c0c:	78a0      	ldrb	r0, [r4, #2]
 8003c0e:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003c12:	eb03 0c05 	add.w	ip, r3, r5
 8003c16:	4b4c      	ldr	r3, [pc, #304]	; (8003d48 <mp3dec_iterate_cb+0x240>)
        frame_info.frame_bytes = frame_size;
 8003c18:	9712      	str	r7, [sp, #72]	; 0x48
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c1a:	f3c0 0581 	ubfx	r5, r0, #2, #2
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003c1e:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <mp3dec_iterate_cb+0x244>)
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003c24:	f810 c00c 	ldrb.w	ip, [r0, ip]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c28:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
        readed += i;
 8003c2c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	f082 0010 	eor.w	r0, r2, #16
 8003c3a:	eb1a 0a06 	adds.w	sl, sl, r6
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003c3e:	eba1 0108 	sub.w	r1, r1, r8
 8003c42:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8003c46:	fa25 f503 	lsr.w	r5, r5, r3
 8003c4a:	9100      	str	r1, [sp, #0]
        readed += i;
 8003c4c:	eb4b 7be6 	adc.w	fp, fp, r6, asr #31
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003c50:	463a      	mov	r2, r7
 8003c52:	4621      	mov	r1, r4
        frame_info.layer = 4 - HDR_GET_LAYER(hdr);
 8003c54:	f1ce 0704 	rsb	r7, lr, #4
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003c58:	ea4f 044c 	mov.w	r4, ip, lsl #1
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c5c:	40c5      	lsrs	r5, r0
        frame_info.bitrate_kbps = hdr_bitrate_kbps(hdr);
 8003c5e:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c64:	9822      	ldr	r0, [sp, #136]	; 0x88
        frame_info.hz = hdr_sample_rate_hz(hdr);
 8003c66:	9515      	str	r5, [sp, #84]	; 0x54
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003c68:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003c6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003c6e:	47a0      	blx	r4
 8003c70:	4607      	mov	r7, r0
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d151      	bne.n	8003d1a <mp3dec_iterate_cb+0x212>
        readed += frame_size;
 8003c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003c7a:	eb1a 0403 	adds.w	r4, sl, r3
 8003c7e:	eb4b 75e3 	adc.w	r5, fp, r3, asr #31
        consumed += i + frame_size;
 8003c82:	441e      	add	r6, r3
        if (!eof && filled - consumed < MINIMP3_BUF_SIZE)
 8003c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        consumed += i + frame_size;
 8003c86:	44b0      	add	r8, r6
        readed += frame_size;
 8003c88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003c8c:	eba1 0508 	sub.w	r5, r1, r8
 8003c90:	eb09 0408 	add.w	r4, r9, r8
        if (!eof && filled - consumed < MINIMP3_BUF_SIZE)
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d18c      	bne.n	8003bb2 <mp3dec_iterate_cb+0xaa>
 8003c98:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8003c9c:	d289      	bcs.n	8003bb2 <mp3dec_iterate_cb+0xaa>
            memmove(buf, buf + consumed, filled - consumed);
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	4648      	mov	r0, r9
 8003ca4:	f00b fac0 	bl	800f228 <memmove>
            size_t readed = io->read(buf + filled, buf_size - filled, io->read_data);
 8003ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003caa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003cac:	6813      	ldr	r3, [r2, #0]
            filled -= consumed;
 8003cae:	950f      	str	r5, [sp, #60]	; 0x3c
            size_t readed = io->read(buf + filled, buf_size - filled, io->read_data);
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	1b61      	subs	r1, r4, r5
 8003cb4:	eb09 0005 	add.w	r0, r9, r5
 8003cb8:	4798      	blx	r3
            if (readed > (buf_size - filled))
 8003cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cbc:	1ae2      	subs	r2, r4, r3
 8003cbe:	4282      	cmp	r2, r0
 8003cc0:	d321      	bcc.n	8003d06 <mp3dec_iterate_cb+0x1fe>
            if (readed != (buf_size - filled))
 8003cc2:	d02f      	beq.n	8003d24 <mp3dec_iterate_cb+0x21c>
            filled += readed;
 8003cc4:	a918      	add	r1, sp, #96	; 0x60
 8003cc6:	4403      	add	r3, r0
 8003cc8:	f841 3d24 	str.w	r3, [r1, #-36]!
                mp3dec_skip_id3v1(buf, &filled);
 8003ccc:	4648      	mov	r0, r9
 8003cce:	f7fe f883 	bl	8001dd8 <mp3dec_skip_id3v1>
 8003cd2:	2301      	movs	r3, #1
            consumed = 0;
 8003cd4:	46b8      	mov	r8, r7
                mp3dec_skip_id3v1(buf, &filled);
 8003cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8003cd8:	464c      	mov	r4, r9
 8003cda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003cdc:	e769      	b.n	8003bb2 <mp3dec_iterate_cb+0xaa>
        if (io->seek(id3v2size, io->seek_data))
 8003cde:	2400      	movs	r4, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	68e2      	ldr	r2, [r4, #12]
 8003cee:	4798      	blx	r3
 8003cf0:	b948      	cbnz	r0, 8003d06 <mp3dec_iterate_cb+0x1fe>
        filled = io->read(buf, buf_size, io->read_data);
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	6862      	ldr	r2, [r4, #4]
 8003cf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003cf8:	4648      	mov	r0, r9
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4798      	blx	r3
        if (filled > buf_size)
 8003cfe:	42a0      	cmp	r0, r4
        filled = io->read(buf, buf_size, io->read_data);
 8003d00:	900f      	str	r0, [sp, #60]	; 0x3c
        if (filled > buf_size)
 8003d02:	f67f af4b 	bls.w	8003b9c <mp3dec_iterate_cb+0x94>
                return MP3D_E_IOERROR;
 8003d06:	f06f 0a02 	mvn.w	sl, #2
 8003d0a:	e728      	b.n	8003b5e <mp3dec_iterate_cb+0x56>
        if (!frame_size)
 8003d0c:	b12f      	cbz	r7, 8003d1a <mp3dec_iterate_cb+0x212>
 8003d0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d10:	e764      	b.n	8003bdc <mp3dec_iterate_cb+0xd4>
            consumed += i;
 8003d12:	46a0      	mov	r8, r4
 8003d14:	1b0d      	subs	r5, r1, r4
 8003d16:	444c      	add	r4, r9
 8003d18:	e74b      	b.n	8003bb2 <mp3dec_iterate_cb+0xaa>
 8003d1a:	46ba      	mov	sl, r7
}
 8003d1c:	4650      	mov	r0, sl
 8003d1e:	b019      	add	sp, #100	; 0x64
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            filled += readed;
 8003d24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d26:	950f      	str	r5, [sp, #60]	; 0x3c
            consumed = 0;
 8003d28:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003d2c:	464c      	mov	r4, r9
 8003d2e:	e740      	b.n	8003bb2 <mp3dec_iterate_cb+0xaa>
        mp3dec_skip_id3v1(buf, &filled);
 8003d30:	4648      	mov	r0, r9
 8003d32:	a90f      	add	r1, sp, #60	; 0x3c
 8003d34:	f7fe f850 	bl	8001dd8 <mp3dec_skip_id3v1>
 8003d38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d3a:	e733      	b.n	8003ba4 <mp3dec_iterate_cb+0x9c>
        return MP3D_E_PARAM;
 8003d3c:	f04f 3aff 	mov.w	sl, #4294967295
 8003d40:	e70d      	b.n	8003b5e <mp3dec_iterate_cb+0x56>
 8003d42:	bf00      	nop
 8003d44:	ffffdffe 	.word	0xffffdffe
 8003d48:	0801085c 	.word	0x0801085c
 8003d4c:	0800fcdc 	.word	0x0800fcdc

08003d50 <mp3dec_ex_open_cb>:
    return samples_requested - samples;
}

int mp3dec_ex_open_cb(mp3dec_ex_t *dec, mp3dec_io_t *io, int flags)
{
    if (!dec || !io || (flags & (~MP3D_FLAGS_MASK)))
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d068      	beq.n	8003e26 <mp3dec_ex_open_cb+0xd6>
 8003d54:	2900      	cmp	r1, #0
 8003d56:	d066      	beq.n	8003e26 <mp3dec_ex_open_cb+0xd6>
{
 8003d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (!dec || !io || (flags & (~MP3D_FLAGS_MASK)))
 8003d5c:	f032 0703 	bics.w	r7, r2, #3
{
 8003d60:	b083      	sub	sp, #12
    if (!dec || !io || (flags & (~MP3D_FLAGS_MASK)))
 8003d62:	d15d      	bne.n	8003e20 <mp3dec_ex_open_cb+0xd0>
 8003d64:	4604      	mov	r4, r0
 8003d66:	4616      	mov	r6, r2
 8003d68:	460d      	mov	r5, r1
        return MP3D_E_PARAM;
    memset(dec, 0, sizeof(*dec));
 8003d6a:	f642 42a0 	movw	r2, #11424	; 0x2ca0
 8003d6e:	4639      	mov	r1, r7
#ifdef MINIMP3_HAVE_RING
    int ret;
    if (ret = mp3dec_open_ring(&dec->file, MINIMP3_IO_SIZE))
        return ret;
#else
    dec->file.size = MINIMP3_IO_SIZE;
 8003d70:	f641 2910 	movw	r9, #6672	; 0x1a10
    memset(dec, 0, sizeof(*dec));
 8003d74:	f00b fa71 	bl	800f25a <memset>
    dec->file.size = MINIMP3_IO_SIZE;
 8003d78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d7c:	f844 0009 	str.w	r0, [r4, r9]
    dec->file.buffer = (const uint8_t*)malloc(dec->file.size);
 8003d80:	f00b fa28 	bl	800f1d4 <malloc>
 8003d84:	f641 280c 	movw	r8, #6668	; 0x1a0c
 8003d88:	f844 0008 	str.w	r0, [r4, r8]
    if (!dec->file.buffer)
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d04d      	beq.n	8003e2c <mp3dec_ex_open_cb+0xdc>
    dec->header[0] = 0;
 8003d90:	f641 0308 	movw	r3, #6152	; 0x1808
        return MP3D_E_MEMORY;
#endif
    dec->flags = flags;
 8003d94:	f642 407c 	movw	r0, #11388	; 0x2c7c
 8003d98:	54e7      	strb	r7, [r4, r3]
    dec->io = io;
 8003d9a:	f641 2114 	movw	r1, #6676	; 0x1a14
    mp3dec_init(&dec->mp3d);
    if (io->seek(0, io->seek_data))
 8003d9e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    dec->flags = flags;
 8003da2:	5026      	str	r6, [r4, r0]
    dec->io = io;
 8003da4:	5065      	str	r5, [r4, r1]
    if (io->seek(0, io->seek_data))
 8003da6:	2000      	movs	r0, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	4798      	blx	r3
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d134      	bne.n	8003e1a <mp3dec_ex_open_cb+0xca>
        return MP3D_E_IOERROR;
    int ret = mp3dec_iterate_cb(io, (uint8_t *)dec->file.buffer, dec->file.size, mp3dec_load_index, dec);
 8003db0:	f854 2009 	ldr.w	r2, [r4, r9]
 8003db4:	f854 1008 	ldr.w	r1, [r4, r8]
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <mp3dec_ex_open_cb+0xe4>)
 8003dba:	9400      	str	r4, [sp, #0]
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7ff fea3 	bl	8003b08 <mp3dec_iterate_cb>
    if (ret && MP3D_E_USER != ret)
 8003dc2:	bb38      	cbnz	r0, 8003e14 <mp3dec_ex_open_cb+0xc4>
        return ret;
    if (dec->io->seek(dec->start_offset, dec->io->seek_data))
 8003dc4:	f641 2214 	movw	r2, #6676	; 0x1a14
 8003dc8:	f504 53d2 	add.w	r3, r4, #6720	; 0x1a40
 8003dcc:	58a2      	ldr	r2, [r4, r2]
 8003dce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003dd2:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
 8003dd6:	47a8      	blx	r5
 8003dd8:	b9f8      	cbnz	r0, 8003e1a <mp3dec_ex_open_cb+0xca>
 8003dda:	f641 0208 	movw	r2, #6152	; 0x1808
        return MP3D_E_IOERROR;
    mp3dec_init(&dec->mp3d);
    dec->buffer_samples = 0;
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003dde:	f504 5332 	add.w	r3, r4, #11392	; 0x2c80
 8003de2:	54a0      	strb	r0, [r4, r2]
    dec->buffer_samples = 0;
 8003de4:	f642 428c 	movw	r2, #11404	; 0x2c8c
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003de8:	681b      	ldr	r3, [r3, #0]
    dec->buffer_samples = 0;
 8003dea:	50a0      	str	r0, [r4, r2]
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003dec:	b163      	cbz	r3, 8003e08 <mp3dec_ex_open_cb+0xb8>
 8003dee:	4605      	mov	r5, r0
    dec->flags &= (~MP3D_DO_NOT_SCAN);
 8003df0:	f642 427c 	movw	r2, #11388	; 0x2c7c
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003df4:	f642 4184 	movw	r1, #11396	; 0x2c84
    dec->flags &= (~MP3D_DO_NOT_SCAN);
 8003df8:	58a3      	ldr	r3, [r4, r2]
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003dfa:	5065      	str	r5, [r4, r1]
    dec->flags &= (~MP3D_DO_NOT_SCAN);
 8003dfc:	f023 0302 	bic.w	r3, r3, #2
 8003e00:	50a3      	str	r3, [r4, r2]
    return 0;
}
 8003e02:	b003      	add	sp, #12
 8003e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e08:	f016 0f02 	tst.w	r6, #2
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2501      	moveq	r5, #1
 8003e10:	2500      	movne	r5, #0
 8003e12:	e7ed      	b.n	8003df0 <mp3dec_ex_open_cb+0xa0>
    if (ret && MP3D_E_USER != ret)
 8003e14:	1d03      	adds	r3, r0, #4
 8003e16:	d1f4      	bne.n	8003e02 <mp3dec_ex_open_cb+0xb2>
 8003e18:	e7d4      	b.n	8003dc4 <mp3dec_ex_open_cb+0x74>
        return MP3D_E_IOERROR;
 8003e1a:	f06f 0002 	mvn.w	r0, #2
 8003e1e:	e7f0      	b.n	8003e02 <mp3dec_ex_open_cb+0xb2>
        return MP3D_E_PARAM;
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	e7ed      	b.n	8003e02 <mp3dec_ex_open_cb+0xb2>
 8003e26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e2a:	4770      	bx	lr
        return MP3D_E_MEMORY;
 8003e2c:	f06f 0001 	mvn.w	r0, #1
 8003e30:	e7e7      	b.n	8003e02 <mp3dec_ex_open_cb+0xb2>
 8003e32:	bf00      	nop
 8003e34:	080037a5 	.word	0x080037a5

08003e38 <mp3dec_ex_close>:
}
#endif
#else /* MINIMP3_NO_STDIO */
void mp3dec_ex_close(mp3dec_ex_t *dec)
{
	if (dec->io && dec->file.buffer)
 8003e38:	f641 2314 	movw	r3, #6676	; 0x1a14
{
 8003e3c:	b510      	push	{r4, lr}
	if (dec->io && dec->file.buffer)
 8003e3e:	58c3      	ldr	r3, [r0, r3]
{
 8003e40:	4604      	mov	r4, r0
	if (dec->io && dec->file.buffer)
 8003e42:	b12b      	cbz	r3, 8003e50 <mp3dec_ex_close+0x18>
 8003e44:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8003e48:	58c0      	ldr	r0, [r0, r3]
 8003e4a:	b108      	cbz	r0, 8003e50 <mp3dec_ex_close+0x18>
		free((void*)dec->file.buffer);
 8003e4c:	f00b f9ca 	bl	800f1e4 <free>
    if (dec->index.frames)
 8003e50:	f641 2318 	movw	r3, #6680	; 0x1a18
 8003e54:	58e0      	ldr	r0, [r4, r3]
 8003e56:	b108      	cbz	r0, 8003e5c <mp3dec_ex_close+0x24>
        free(dec->index.frames);
 8003e58:	f00b f9c4 	bl	800f1e4 <free>
    memset(dec, 0, sizeof(*dec));
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f642 42a0 	movw	r2, #11424	; 0x2ca0
 8003e62:	2100      	movs	r1, #0
}
 8003e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset(dec, 0, sizeof(*dec));
 8003e68:	f00b b9f7 	b.w	800f25a <memset>

08003e6c <vMp3PlayerInit>:
void vMp3PlayerInit(){
 8003e6c:	b510      	push	{r4, lr}
	vUpdateLCDSetCurrentTime(0);                                                                                            /*initialize current mp3 time equal to 0*/
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f000 fb02 	bl	8004478 <vUpdateLCDSetCurrentTime>
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <vMp3PlayerInit+0x70>)
 8003e76:	f641 0308 	movw	r3, #6152	; 0x1808
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	54d1      	strb	r1, [r2, r3]
	if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, ulUpdateLCDGetSampleRate()) != 0){                                        /* Initialize MP3 player (Codec, DMA, I2C) */
 8003e7e:	f000 fb3b 	bl	80044f8 <ulUpdateLCDGetSampleRate>
 8003e82:	2146      	movs	r1, #70	; 0x46
 8003e84:	4602      	mov	r2, r0
 8003e86:	2004      	movs	r0, #4
 8003e88:	f000 ff80 	bl	8004d8c <BSP_AUDIO_OUT_Init>
 8003e8c:	bb18      	cbnz	r0, 8003ed6 <vMp3PlayerInit+0x6a>
	f_read(&xFileRead, &cInputData[0], MP3_BUF, (void *) pulBytesRead);                                                     /*read mp3 data into input buffer*/
 8003e8e:	4c14      	ldr	r4, [pc, #80]	; (8003ee0 <vMp3PlayerInit+0x74>)
	f_lseek(&xFileRead, 0);                                                                                                 /*seek to beginning of file*/
 8003e90:	4814      	ldr	r0, [pc, #80]	; (8003ee4 <vMp3PlayerInit+0x78>)
 8003e92:	2100      	movs	r1, #0
 8003e94:	f008 fe38 	bl	800cb08 <f_lseek>
	f_read(&xFileRead, &cInputData[0], MP3_BUF, (void *) pulBytesRead);                                                     /*read mp3 data into input buffer*/
 8003e98:	4623      	mov	r3, r4
 8003e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e9e:	4912      	ldr	r1, [pc, #72]	; (8003ee8 <vMp3PlayerInit+0x7c>)
 8003ea0:	4810      	ldr	r0, [pc, #64]	; (8003ee4 <vMp3PlayerInit+0x78>)
 8003ea2:	f008 fc5b 	bl	800c75c <f_read>
	ulAudioRemSize = ulMP3DataLength - *pulBytesRead;                                                                       /*calculate ulAudioRemSize*/
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <vMp3PlayerInit+0x80>)
 8003ea8:	6821      	ldr	r1, [r4, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <vMp3PlayerInit+0x84>)
 8003eae:	1a5b      	subs	r3, r3, r1
	prvMp3PlayerDecode(&ulBytesRead, 0);                                                                                    /*decode mp3 data, store result in first half of Audio Buffer*/
 8003eb0:	2000      	movs	r0, #0
	ulAudioRemSize = ulMP3DataLength - *pulBytesRead;                                                                       /*calculate ulAudioRemSize*/
 8003eb2:	6013      	str	r3, [r2, #0]
	prvMp3PlayerDecode(&ulBytesRead, 0);                                                                                    /*decode mp3 data, store result in first half of Audio Buffer*/
 8003eb4:	f7ff fdb6 	bl	8003a24 <prvMp3PlayerDecode.constprop.8>
	prvMp3PlayerDecode(&ulBytesRead, AUDIO_BUFFER_SIZE/2);                                                                  /*decode mp3 data, store result in second half of Audio Buffer*/
 8003eb8:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8003ebc:	f7ff fdb2 	bl	8003a24 <prvMp3PlayerDecode.constprop.8>
	if (BSP_AUDIO_OUT_Play((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE) != 0){                                          /*start playing MP3*/
 8003ec0:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8003ec4:	480b      	ldr	r0, [pc, #44]	; (8003ef4 <vMp3PlayerInit+0x88>)
 8003ec6:	f000 fe1f 	bl	8004b08 <BSP_AUDIO_OUT_Play>
 8003eca:	b900      	cbnz	r0, 8003ece <vMp3PlayerInit+0x62>
}
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 8003ed2:	f7fc bcaf 	b.w	8000834 <Error_Handler>
		Error_Handler();                                                                                                        /*error if mp3 player initialization fails*/
 8003ed6:	f7fc fcad 	bl	8000834 <Error_Handler>
 8003eda:	e7d8      	b.n	8003e8e <vMp3PlayerInit+0x22>
 8003edc:	20005828 	.word	0x20005828
 8003ee0:	20004790 	.word	0x20004790
 8003ee4:	200047e0 	.word	0x200047e0
 8003ee8:	20000384 	.word	0x20000384
 8003eec:	20004794 	.word	0x20004794
 8003ef0:	2000478c 	.word	0x2000478c
 8003ef4:	20002388 	.word	0x20002388

08003ef8 <vMp3PlayerDecodeFrames>:
void vMp3PlayerDecodeFrames(){
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1){                                                                  /*if Pause Button is pressed or playback is paused*/
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <vMp3PlayerDecodeFrames+0xcc>)
 8003efe:	4d32      	ldr	r5, [pc, #200]	; (8003fc8 <vMp3PlayerDecodeFrames+0xd0>)
 8003f00:	781c      	ldrb	r4, [r3, #0]
 8003f02:	782b      	ldrb	r3, [r5, #0]
 8003f04:	2c01      	cmp	r4, #1
 8003f06:	d045      	beq.n	8003f94 <vMp3PlayerDecodeFrames+0x9c>
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d03d      	beq.n	8003f88 <vMp3PlayerDecodeFrames+0x90>
 8003f0c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8003fe0 <vMp3PlayerDecodeFrames+0xe8>
 8003f10:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003fe4 <vMp3PlayerDecodeFrames+0xec>
 8003f14:	4d2d      	ldr	r5, [pc, #180]	; (8003fcc <vMp3PlayerDecodeFrames+0xd4>)
 8003f16:	4c2e      	ldr	r4, [pc, #184]	; (8003fd0 <vMp3PlayerDecodeFrames+0xd8>)
		ulBytesRead = 0;                                                                                                        /*set bytes read back to zero*/
 8003f18:	f04f 0800 	mov.w	r8, #0
 8003f1c:	e007      	b.n	8003f2e <vMp3PlayerDecodeFrames+0x36>
		if(xBufferOffset == BUFFER_OFFSET_FULL){                                                                                /*check if the second half of the Audio Buffer has been transferred*/
 8003f1e:	7823      	ldrb	r3, [r4, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d025      	beq.n	8003f70 <vMp3PlayerDecodeFrames+0x78>
		BSP_AUDIO_OUT_SetVolume(ulUpdateLCDGetVolume());                                                                        /*set volume appropriately*/
 8003f24:	f000 fadc 	bl	80044e0 <ulUpdateLCDGetVolume>
 8003f28:	b2c0      	uxtb	r0, r0
 8003f2a:	f000 fe5d 	bl	8004be8 <BSP_AUDIO_OUT_SetVolume>
		vUpdateLCDSetCurrentTime(ullSamples / ulUpdateLCDGetSampleRate());                                                      /*update current time*/
 8003f2e:	e9d9 6700 	ldrd	r6, r7, [r9]
		ulBytesRead = 0;                                                                                                        /*set bytes read back to zero*/
 8003f32:	f8ca 8000 	str.w	r8, [sl]
		vUpdateLCDSetCurrentTime(ullSamples / ulUpdateLCDGetSampleRate());                                                      /*update current time*/
 8003f36:	f000 fadf 	bl	80044f8 <ulUpdateLCDGetSampleRate>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4639      	mov	r1, r7
 8003f40:	4630      	mov	r0, r6
 8003f42:	f7fc f9ad 	bl	80002a0 <__aeabi_uldivmod>
 8003f46:	f000 fa97 	bl	8004478 <vUpdateLCDSetCurrentTime>
		if(ulUpdateLCDGetCurrentTime() != ulOldTime){                                                                           /*if current time does not match old time*/
 8003f4a:	f000 fa9b 	bl	8004484 <ulUpdateLCDGetCurrentTime>
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	4298      	cmp	r0, r3
 8003f52:	d002      	beq.n	8003f5a <vMp3PlayerDecodeFrames+0x62>
			ulOldTime = ulUpdateLCDGetCurrentTime();                                                                                /*set old time equal to current time*/
 8003f54:	f000 fa96 	bl	8004484 <ulUpdateLCDGetCurrentTime>
 8003f58:	6028      	str	r0, [r5, #0]
		if(xBufferOffset == BUFFER_OFFSET_HALF){                                                                               /*check if the first half of the Audio Buffer has been transferred*/
 8003f5a:	7823      	ldrb	r3, [r4, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d1de      	bne.n	8003f1e <vMp3PlayerDecodeFrames+0x26>
			prvMp3PlayerDecode(&ulBytesRead, 0);                                                                                    /*decode next mp3 data to replace it in the Audio buffer*/
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7ff fd5f 	bl	8003a24 <prvMp3PlayerDecode.constprop.8>
			xBufferOffset = BUFFER_OFFSET_NONE;                                                                                     /*update buffer offset*/
 8003f66:	f884 8000 	strb.w	r8, [r4]
		if(xBufferOffset == BUFFER_OFFSET_FULL){                                                                                /*check if the second half of the Audio Buffer has been transferred*/
 8003f6a:	7823      	ldrb	r3, [r4, #0]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d1d9      	bne.n	8003f24 <vMp3PlayerDecodeFrames+0x2c>
			prvMp3PlayerDecode(&ulBytesRead, AUDIO_BUFFER_SIZE/2);                                                                  /*decode next mp3 data to replace it in the Audio buffer*/
 8003f70:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8003f74:	f7ff fd56 	bl	8003a24 <prvMp3PlayerDecode.constprop.8>
	if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8003f78:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <vMp3PlayerDecodeFrames+0xdc>)
 8003f7a:	781d      	ldrb	r5, [r3, #0]
			xBufferOffset = BUFFER_OFFSET_NONE;                                                                                     /*update buffer offset*/
 8003f7c:	2100      	movs	r1, #0
	if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8003f7e:	2d01      	cmp	r5, #1
			xBufferOffset = BUFFER_OFFSET_NONE;                                                                                     /*update buffer offset*/
 8003f80:	7021      	strb	r1, [r4, #0]
	if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8003f82:	d00e      	beq.n	8003fa2 <vMp3PlayerDecodeFrames+0xaa>
}
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}else if(ucPauseStateFlag == 0){                                                                                        /*if button is pressed to resume*/
 8003f88:	2c00      	cmp	r4, #0
 8003f8a:	d1fb      	bne.n	8003f84 <vMp3PlayerDecodeFrames+0x8c>
			BSP_AUDIO_OUT_Resume();                                                                                                 /*Resume play-back*/
 8003f8c:	f000 fdf6 	bl	8004b7c <BSP_AUDIO_OUT_Resume>
			ucOldPauseStateFlag = 0;                                                                                                /*de-assert ucOldPauseStateFlag*/
 8003f90:	702c      	strb	r4, [r5, #0]
 8003f92:	e7bb      	b.n	8003f0c <vMp3PlayerDecodeFrames+0x14>
		if(ucOldPauseStateFlag == 0){                                                                                           /*if its the first case*/
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f5      	bne.n	8003f84 <vMp3PlayerDecodeFrames+0x8c>
			BSP_AUDIO_OUT_Pause();                                                                                                  /*pause play-back*/
 8003f98:	f000 fddc 	bl	8004b54 <BSP_AUDIO_OUT_Pause>
			ucOldPauseStateFlag = 1;                                                                                                /*set flag ucOldPauseStateFlag*/
 8003f9c:	702c      	strb	r4, [r5, #0]
}
 8003f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memset(&ucAudioBuffer[0], 0, AUDIO_BUFFER_SIZE);                                                                            /*fixed bug where audio stutters as track changes*/
 8003fa2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8003fa6:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <vMp3PlayerDecodeFrames+0xe0>)
 8003fa8:	f00b f957 	bl	800f25a <memset>
	BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);                                                                                      /*stop audio play-back*/
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 fdf9 	bl	8004ba4 <BSP_AUDIO_OUT_Stop>
	f_close(&xFileRead);                                                                                                    /*close file*/
 8003fb2:	480a      	ldr	r0, [pc, #40]	; (8003fdc <vMp3PlayerDecodeFrames+0xe4>)
 8003fb4:	f008 fd74 	bl	800caa0 <f_close>
	ullSamples = 0;
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e9c9 2300 	strd	r2, r3, [r9]
}
 8003fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc4:	20000371 	.word	0x20000371
 8003fc8:	20004788 	.word	0x20004788
 8003fcc:	20004798 	.word	0x20004798
 8003fd0:	200047a8 	.word	0x200047a8
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	20002388 	.word	0x20002388
 8003fdc:	200047e0 	.word	0x200047e0
 8003fe0:	20004790 	.word	0x20004790
 8003fe4:	200047a0 	.word	0x200047a0

08003fe8 <vMp3PlayerFindInfo>:
/**
  * @brief  finds the track length and sample rate of the mp3
  * @param  None
  * @retval None
  */
void vMp3PlayerFindInfo(){
 8003fe8:	b530      	push	{r4, r5, lr}
	mp3dec_io_t xIo;                                                                                                            /* "" "" "" */
	xIo.read = prvMp3PlayerMiniIoRead;                                                                                          /* "" "" "" */
	xIo.seek = prvMp3PlayerMiniIoSeek;                                                                                          /* "" "" "" */
	xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */

	vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8003fea:	4c2d      	ldr	r4, [pc, #180]	; (80040a0 <vMp3PlayerFindInfo+0xb8>)
	xIo.seek = prvMp3PlayerMiniIoSeek;                                                                                          /* "" "" "" */
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <vMp3PlayerFindInfo+0xbc>)
	vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8003fee:	6821      	ldr	r1, [r4, #0]
	xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */
 8003ff0:	4d2d      	ldr	r5, [pc, #180]	; (80040a8 <vMp3PlayerFindInfo+0xc0>)
	vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8003ff2:	6808      	ldr	r0, [r1, #0]
	xIo.read = prvMp3PlayerMiniIoRead;                                                                                          /* "" "" "" */
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <vMp3PlayerFindInfo+0xc4>)
void vMp3PlayerFindInfo(){
 8003ff6:	f5ad 5d32 	sub.w	sp, sp, #11392	; 0x2c80
 8003ffa:	b08d      	sub	sp, #52	; 0x34
	xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */
 8003ffc:	e9cd 3502 	strd	r3, r5, [sp, #8]
	xIo.read = prvMp3PlayerMiniIoRead;                                                                                          /* "" "" "" */
 8004000:	9200      	str	r2, [sp, #0]
	xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */
 8004002:	9501      	str	r5, [sp, #4]
	vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8004004:	f000 fa7e 	bl	8004504 <vUpdateLCDSetMp3Track>

	if(f_opendir(&xDirectory, "0:/") == FR_OK){                                                                                 /*Get the read out protection status*/
 8004008:	4929      	ldr	r1, [pc, #164]	; (80040b0 <vMp3PlayerFindInfo+0xc8>)
 800400a:	482a      	ldr	r0, [pc, #168]	; (80040b4 <vMp3PlayerFindInfo+0xcc>)
 800400c:	f008 ff20 	bl	800ce50 <f_opendir>
 8004010:	bb60      	cbnz	r0, 800406c <vMp3PlayerFindInfo+0x84>
		if(f_open(&xFileRead, pxCurrent->pcMp3Name , FA_READ) != FR_OK){                                                            /*Open the MP3 file to be played*/
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	2201      	movs	r2, #1
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	4628      	mov	r0, r5
 800401a:	f008 f9dd 	bl	800c3d8 <f_open>
 800401e:	bb28      	cbnz	r0, 800406c <vMp3PlayerFindInfo+0x84>
		}
	}else{
		Error_Handler();                                                                                                            /*error if directory can not be opened*/
	}

	ulMP3DataLength = f_size(&xFileRead);                                                                                       /*file length information*/
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <vMp3PlayerFindInfo+0xd0>)
 8004022:	68ea      	ldr	r2, [r5, #12]
 8004024:	601a      	str	r2, [r3, #0]

	if (mp3dec_ex_open_cb(&xDec, &xIo, MP3D_SEEK_TO_SAMPLE)){                                                                   /*find VBR tag*/
 8004026:	ac04      	add	r4, sp, #16
 8004028:	4669      	mov	r1, sp
 800402a:	4620      	mov	r0, r4
 800402c:	2201      	movs	r2, #1
 800402e:	f7ff fe8f 	bl	8003d50 <mp3dec_ex_open_cb>
 8004032:	b9f0      	cbnz	r0, 8004072 <vMp3PlayerFindInfo+0x8a>
		vUpdateLCDSetSampleRate(44100);                                                                                             /*Default behaviour if tag cannot be found*/
		vUpdateLCDSetTotalTime(0);
		return;
	}

	vUpdateLCDSetSampleRate(xDec.info.hz);                                                                                      /*sample rate information*/
 8004034:	f641 2564 	movw	r5, #6756	; 0x1a64
 8004038:	5960      	ldr	r0, [r4, r5]
 800403a:	f000 fa57 	bl	80044ec <vUpdateLCDSetSampleRate>

	if(xDec.info.channels == 2){                                                                                                /*calculate mp3 track length*/
 800403e:	f50d 53d3 	add.w	r3, sp, #6752	; 0x1a60
 8004042:	3310      	adds	r3, #16
		vUpdateLCDSetTotalTime(xDec.samples / (xDec.info.hz * 2));                                                              /* "" "" "" */
 8004044:	5962      	ldr	r2, [r4, r5]
	if(xDec.info.channels == 2){                                                                                                /*calculate mp3 track length*/
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d01d      	beq.n	8004088 <vMp3PlayerFindInfo+0xa0>
	}else{                                                                                                                      /* "" "" "" */
		vUpdateLCDSetTotalTime(xDec.samples / (xDec.info.hz));                                                                  /* "" "" "" */
 800404c:	f504 53d1 	add.w	r3, r4, #6688	; 0x1a20
 8004050:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004054:	17d3      	asrs	r3, r2, #31
 8004056:	f7fc f923 	bl	80002a0 <__aeabi_uldivmod>
 800405a:	f000 fa19 	bl	8004490 <vUpdateLCDSetTotalTime>
	}
	mp3dec_ex_close(&xDec);                                                                                                     /*free memory allocated by minimp3 library*/
 800405e:	4620      	mov	r0, r4
 8004060:	f7ff feea 	bl	8003e38 <mp3dec_ex_close>
}
 8004064:	f50d 5d32 	add.w	sp, sp, #11392	; 0x2c80
 8004068:	b00d      	add	sp, #52	; 0x34
 800406a:	bd30      	pop	{r4, r5, pc}
			Error_Handler();                                                                                                        /*error if file does not exist*/
 800406c:	f7fc fbe2 	bl	8000834 <Error_Handler>
 8004070:	e7d6      	b.n	8004020 <vMp3PlayerFindInfo+0x38>
		vUpdateLCDSetSampleRate(44100);                                                                                             /*Default behaviour if tag cannot be found*/
 8004072:	f64a 4044 	movw	r0, #44100	; 0xac44
 8004076:	f000 fa39 	bl	80044ec <vUpdateLCDSetSampleRate>
		vUpdateLCDSetTotalTime(0);
 800407a:	2000      	movs	r0, #0
 800407c:	f000 fa08 	bl	8004490 <vUpdateLCDSetTotalTime>
}
 8004080:	f50d 5d32 	add.w	sp, sp, #11392	; 0x2c80
 8004084:	b00d      	add	sp, #52	; 0x34
 8004086:	bd30      	pop	{r4, r5, pc}
		vUpdateLCDSetTotalTime(xDec.samples / (xDec.info.hz * 2));                                                              /* "" "" "" */
 8004088:	f504 51d1 	add.w	r1, r4, #6688	; 0x1a20
 800408c:	0052      	lsls	r2, r2, #1
 800408e:	3110      	adds	r1, #16
 8004090:	17d3      	asrs	r3, r2, #31
 8004092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004096:	f7fc f903 	bl	80002a0 <__aeabi_uldivmod>
 800409a:	f000 f9f9 	bl	8004490 <vUpdateLCDSetTotalTime>
 800409e:	e7de      	b.n	800405e <vMp3PlayerFindInfo+0x76>
 80040a0:	20000368 	.word	0x20000368
 80040a4:	08001f8d 	.word	0x08001f8d
 80040a8:	200047e0 	.word	0x200047e0
 80040ac:	08001f99 	.word	0x08001f99
 80040b0:	0800fb2c 	.word	0x0800fb2c
 80040b4:	200047ac 	.word	0x200047ac
 80040b8:	20004794 	.word	0x20004794

080040bc <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void){
	xBufferOffset = BUFFER_OFFSET_HALF;                                                                                         /*set the buffer offset flag*/
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
}
 80040c2:	4770      	bx	lr
 80040c4:	200047a8 	.word	0x200047a8

080040c8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void){
	xBufferOffset = BUFFER_OFFSET_FULL;                                                                                         /*set the buffer offset flag*/
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
	 BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE / 2);                                           /*fill buffer with next audio information*/
 80040ca:	4804      	ldr	r0, [pc, #16]	; (80040dc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
	xBufferOffset = BUFFER_OFFSET_FULL;                                                                                         /*set the buffer offset flag*/
 80040cc:	2202      	movs	r2, #2
	 BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE / 2);                                           /*fill buffer with next audio information*/
 80040ce:	f44f 5190 	mov.w	r1, #4608	; 0x1200
	xBufferOffset = BUFFER_OFFSET_FULL;                                                                                         /*set the buffer offset flag*/
 80040d2:	701a      	strb	r2, [r3, #0]
	 BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE / 2);                                           /*fill buffer with next audio information*/
 80040d4:	f000 bd36 	b.w	8004b44 <BSP_AUDIO_OUT_ChangeBuffer>
 80040d8:	200047a8 	.word	0x200047a8
 80040dc:	20002388 	.word	0x20002388

080040e0 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void){
 80040e0:	b508      	push	{r3, lr}
  while (1){                                                                                                                    /*Stop the program with an infinite loop*/
	  Error_Handler();                                                                                                          /*Go to error handler*/
 80040e2:	f7fc fba7 	bl	8000834 <Error_Handler>
 80040e6:	e7fc      	b.n	80040e2 <BSP_AUDIO_OUT_Error_CallBack+0x2>

080040e8 <pxSongLLNewElement>:
/**
  * @brief  create and allocate memory for new node in LL
  * @param  pcFileName : Name of LL node
  * @retval MP3 Node variable
  */
MP3 *pxSongLLNewElement(char* pcFileName){
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4605      	mov	r5, r0
	MP3 *pxNewPointer;
	pxNewPointer = (MP3 *) malloc(sizeof(MP3));
 80040ec:	200c      	movs	r0, #12
 80040ee:	f00b f871 	bl	800f1d4 <malloc>
 80040f2:	4604      	mov	r4, r0
	pxNewPointer->pcMp3Name = (char *) malloc(strlen(pcFileName) + 1);
 80040f4:	4628      	mov	r0, r5
 80040f6:	f7fc f875 	bl	80001e4 <strlen>
 80040fa:	1c46      	adds	r6, r0, #1
 80040fc:	4630      	mov	r0, r6
 80040fe:	f00b f869 	bl	800f1d4 <malloc>
	strcpy(pxNewPointer->pcMp3Name, pcFileName);
 8004102:	4632      	mov	r2, r6
 8004104:	4629      	mov	r1, r5
	pxNewPointer->pcMp3Name = (char *) malloc(strlen(pcFileName) + 1);
 8004106:	6020      	str	r0, [r4, #0]
	strcpy(pxNewPointer->pcMp3Name, pcFileName);
 8004108:	f00b f883 	bl	800f212 <memcpy>
	pxNewPointer->pxNext = NULL;
 800410c:	2300      	movs	r3, #0
	pxNewPointer->pxPrev = NULL;
 800410e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	return pxNewPointer;
}
 8004112:	4620      	mov	r0, r4
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	bf00      	nop

08004118 <vSongLLAddEnd>:
  * @param  pxNewPointer : pointer to new node
  * @retval None
  */
void vSongLLAddEnd(MP3 **ppxHead, MP3 *pxNewPointer){
	MP3 *pxPointer2;
	if((*ppxHead) == NULL){
 8004118:	6802      	ldr	r2, [r0, #0]
 800411a:	b90a      	cbnz	r2, 8004120 <vSongLLAddEnd+0x8>
 800411c:	e006      	b.n	800412c <vSongLLAddEnd+0x14>
 800411e:	461a      	mov	r2, r3
		*ppxHead = pxNewPointer;
	}else{
		for(pxPointer2 = *ppxHead; pxPointer2->pxNext !=NULL; pxPointer2 = pxPointer2->pxNext){
 8004120:	6853      	ldr	r3, [r2, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1fb      	bne.n	800411e <vSongLLAddEnd+0x6>
			;
		}

		pxPointer2->pxNext = pxNewPointer;
 8004126:	6051      	str	r1, [r2, #4]
		pxNewPointer->pxPrev = pxPointer2;
 8004128:	608a      	str	r2, [r1, #8]
	}
}
 800412a:	4770      	bx	lr
		*ppxHead = pxNewPointer;
 800412c:	6001      	str	r1, [r0, #0]
 800412e:	4770      	bx	lr

08004130 <vSongLLCircularizeList>:
  * @param  pxHead : pointer to head of LL
  * @retval None
  */
void vSongLLCircularizeList(MP3 *pxHead){
	MP3 *pxPointer2;
	if(pxHead == NULL)
 8004130:	b138      	cbz	r0, 8004142 <vSongLLCircularizeList+0x12>
 8004132:	4602      	mov	r2, r0
 8004134:	e000      	b.n	8004138 <vSongLLCircularizeList+0x8>
 8004136:	461a      	mov	r2, r3
		return;

	for(pxPointer2 = pxHead; pxPointer2->pxNext !=NULL; pxPointer2 = pxPointer2->pxNext){
 8004138:	6853      	ldr	r3, [r2, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1fb      	bne.n	8004136 <vSongLLCircularizeList+0x6>
		;
	}

	pxHead->pxPrev = pxPointer2;
 800413e:	6082      	str	r2, [r0, #8]
	pxPointer2->pxNext = pxHead;
 8004140:	6050      	str	r0, [r2, #4]
}
 8004142:	4770      	bx	lr

08004144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004144:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_MspInit+0x3c>)
 8004148:	2200      	movs	r2, #0
 800414a:	9200      	str	r2, [sp, #0]
 800414c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800414e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004152:	6459      	str	r1, [r3, #68]	; 0x44
 8004154:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004156:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800415a:	9100      	str	r1, [sp, #0]
 800415c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	9201      	str	r2, [sp, #4]
 8004160:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004162:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004166:	6419      	str	r1, [r3, #64]	; 0x40
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004172:	210f      	movs	r1, #15
 8004174:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004178:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800417a:	f001 bc1d 	b.w	80059b8 <HAL_NVIC_SetPriority>
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004184:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004186:	6801      	ldr	r1, [r0, #0]
 8004188:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <HAL_ADC_MspInit+0x5c>)
{
 800418a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800418e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004194:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004198:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800419a:	d001      	beq.n	80041a0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800419c:	b008      	add	sp, #32
 800419e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041a0:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	480e      	ldr	r0, [pc, #56]	; (80041e4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80041ae:	6451      	str	r1, [r2, #68]	; 0x44
 80041b0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80041b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80041b6:	9101      	str	r1, [sp, #4]
 80041b8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6313      	str	r3, [r2, #48]	; 0x30
 80041c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041cc:	2208      	movs	r2, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ce:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d2:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d8:	f001 fe6a 	bl	8005eb0 <HAL_GPIO_Init>
}
 80041dc:	b008      	add	sp, #32
 80041de:	bd10      	pop	{r4, pc}
 80041e0:	40012000 	.word	0x40012000
 80041e4:	40020000 	.word	0x40020000

080041e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041e8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80041ea:	6802      	ldr	r2, [r0, #0]
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_I2C_MspInit+0x64>)
{
 80041ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80041f2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80041f8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80041fc:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004200:	b008      	add	sp, #32
 8004202:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004204:	4d12      	ldr	r5, [pc, #72]	; (8004250 <HAL_I2C_MspInit+0x68>)
 8004206:	9401      	str	r4, [sp, #4]
 8004208:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420a:	4812      	ldr	r0, [pc, #72]	; (8004254 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800420c:	f043 0302 	orr.w	r3, r3, #2
 8004210:	632b      	str	r3, [r5, #48]	; 0x30
 8004212:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800421a:	f44f 7210 	mov.w	r2, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800421e:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004220:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004222:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004224:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004226:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004228:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800422a:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800422c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800422e:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004230:	f001 fe3e 	bl	8005eb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004234:	9402      	str	r4, [sp, #8]
 8004236:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800423c:	642b      	str	r3, [r5, #64]	; 0x40
 800423e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	9302      	str	r3, [sp, #8]
 8004246:	9b02      	ldr	r3, [sp, #8]
}
 8004248:	b008      	add	sp, #32
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	40005400 	.word	0x40005400
 8004250:	40023800 	.word	0x40023800
 8004254:	40020400 	.word	0x40020400

08004258 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004258:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 800425a:	6802      	ldr	r2, [r0, #0]
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_I2C_MspDeInit+0x2c>)
 800425e:	429a      	cmp	r2, r3
 8004260:	d000      	beq.n	8004264 <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004262:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <HAL_I2C_MspDeInit+0x30>)
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8004266:	4809      	ldr	r0, [pc, #36]	; (800428c <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004268:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800426a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800426e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8004270:	2140      	movs	r1, #64	; 0x40
 8004272:	f001 ff21 	bl	80060b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8004276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800427a:	4804      	ldr	r0, [pc, #16]	; (800428c <HAL_I2C_MspDeInit+0x34>)
}
 800427c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8004280:	f001 bf1a 	b.w	80060b8 <HAL_GPIO_DeInit>
 8004284:	40005400 	.word	0x40005400
 8004288:	40023800 	.word	0x40023800
 800428c:	40020400 	.word	0x40020400

08004290 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004290:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2s->Instance==SPI3)
 8004292:	6802      	ldr	r2, [r0, #0]
 8004294:	4b27      	ldr	r3, [pc, #156]	; (8004334 <HAL_I2S_MspInit+0xa4>)
{
 8004296:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	2400      	movs	r4, #0
  if(hi2s->Instance==SPI3)
 800429a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80042a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80042a4:	9407      	str	r4, [sp, #28]
  if(hi2s->Instance==SPI3)
 80042a6:	d001      	beq.n	80042ac <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80042a8:	b008      	add	sp, #32
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042ac:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80042b0:	9400      	str	r4, [sp, #0]
 80042b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80042b4:	4820      	ldr	r0, [pc, #128]	; (8004338 <HAL_I2S_MspInit+0xa8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
 80042bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042be:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c6:	9401      	str	r4, [sp, #4]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	f002 0201 	and.w	r2, r2, #1
 80042d6:	9201      	str	r2, [sp, #4]
 80042d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042da:	9402      	str	r4, [sp, #8]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	f042 0204 	orr.w	r2, r2, #4
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80042ee:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042f0:	2606      	movs	r6, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80042f2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f4:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042f6:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f8:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80042fc:	f001 fdd8 	bl	8005eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004300:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004304:	a903      	add	r1, sp, #12
 8004306:	480d      	ldr	r0, [pc, #52]	; (800433c <HAL_I2S_MspInit+0xac>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004308:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800430c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004312:	f001 fdcd 	bl	8005eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004316:	f44f 6200 	mov.w	r2, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 800431a:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	a903      	add	r1, sp, #12
 800431e:	4807      	ldr	r0, [pc, #28]	; (800433c <HAL_I2S_MspInit+0xac>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004326:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8004328:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800432a:	f001 fdc1 	bl	8005eb0 <HAL_GPIO_Init>
}
 800432e:	b008      	add	sp, #32
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	bf00      	nop
 8004334:	40003c00 	.word	0x40003c00
 8004338:	40020000 	.word	0x40020000
 800433c:	40020800 	.word	0x40020800

08004340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004340:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004342:	4601      	mov	r1, r0
{
 8004344:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004346:	2200      	movs	r2, #0
 8004348:	2037      	movs	r0, #55	; 0x37
 800434a:	f001 fb35 	bl	80059b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800434e:	2037      	movs	r0, #55	; 0x37
 8004350:	f001 fb68 	bl	8005a24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004354:	2500      	movs	r5, #0
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <HAL_InitTick+0x70>)
 8004358:	9502      	str	r5, [sp, #8]
 800435a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800435c:	4c15      	ldr	r4, [pc, #84]	; (80043b4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 800435e:	f042 0220 	orr.w	r2, r2, #32
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 0320 	and.w	r3, r3, #32
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800436a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM7_CLK_ENABLE();
 800436c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800436e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004370:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004372:	f004 f8a3 	bl	80084bc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004376:	f004 f891 	bl	800849c <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800437a:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <HAL_InitTick+0x78>)
  htim7.Instance = TIM7;
 800437c:	490f      	ldr	r1, [pc, #60]	; (80043bc <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 800437e:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004380:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0c9b      	lsrs	r3, r3, #18
 8004388:	3b01      	subs	r3, #1
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800438a:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800438e:	4620      	mov	r0, r4
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004390:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim7.Instance = TIM7;
 8004394:	6021      	str	r1, [r4, #0]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004396:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004398:	f004 fad0 	bl	800893c <HAL_TIM_Base_Init>
 800439c:	b110      	cbz	r0, 80043a4 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 800439e:	2001      	movs	r0, #1
}
 80043a0:	b009      	add	sp, #36	; 0x24
 80043a2:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim7);
 80043a4:	4620      	mov	r0, r4
 80043a6:	f004 f995 	bl	80086d4 <HAL_TIM_Base_Start_IT>
}
 80043aa:	b009      	add	sp, #36	; 0x24
 80043ac:	bd30      	pop	{r4, r5, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	2000d6f8 	.word	0x2000d6f8
 80043b8:	431bde83 	.word	0x431bde83
 80043bc:	40001400 	.word	0x40001400

080043c0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop

080043c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80043c6:	2201      	movs	r2, #1
 80043c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043cc:	4801      	ldr	r0, [pc, #4]	; (80043d4 <HardFault_Handler+0x10>)
 80043ce:	f001 ff23 	bl	8006218 <HAL_GPIO_WritePin>
 80043d2:	e7fe      	b.n	80043d2 <HardFault_Handler+0xe>
 80043d4:	40020c00 	.word	0x40020c00

080043d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d8:	e7fe      	b.n	80043d8 <MemManage_Handler>
 80043da:	bf00      	nop

080043dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043dc:	e7fe      	b.n	80043dc <BusFault_Handler>
 80043de:	bf00      	nop

080043e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e0:	e7fe      	b.n	80043e0 <UsageFault_Handler>
 80043e2:	bf00      	nop

080043e4 <DebugMon_Handler>:
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop

080043e8 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80043e8:	4801      	ldr	r0, [pc, #4]	; (80043f0 <TIM7_IRQHandler+0x8>)
 80043ea:	f004 b98b 	b.w	8008704 <HAL_TIM_IRQHandler>
 80043ee:	bf00      	nop
 80043f0:	2000d6f8 	.word	0x2000d6f8

080043f4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80043f4:	4801      	ldr	r0, [pc, #4]	; (80043fc <OTG_FS_IRQHandler+0x8>)
 80043f6:	f002 b82d 	b.w	8006454 <HAL_HCD_IRQHandler>
 80043fa:	bf00      	nop
 80043fc:	2000fd08 	.word	0x2000fd08

08004400 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8004400:	4b01      	ldr	r3, [pc, #4]	; (8004408 <DMA1_Stream7_IRQHandler+0x8>)
 8004402:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004404:	f001 bc7e 	b.w	8005d04 <HAL_DMA_IRQHandler>
 8004408:	2000d7dc 	.word	0x2000d7dc

0800440c <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <DMA1_Stream3_IRQHandler+0x8>)
 800440e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004410:	f001 bc78 	b.w	8005d04 <HAL_DMA_IRQHandler>
 8004414:	2000d824 	.word	0x2000d824

08004418 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004418:	490c      	ldr	r1, [pc, #48]	; (800444c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800441a:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800441c:	680b      	ldr	r3, [r1, #0]
{
 800441e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004420:	4c0c      	ldr	r4, [pc, #48]	; (8004454 <_sbrk+0x3c>)
 8004422:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004424:	b12b      	cbz	r3, 8004432 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004426:	4418      	add	r0, r3
 8004428:	4290      	cmp	r0, r2
 800442a:	d807      	bhi.n	800443c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800442c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800442e:	4618      	mov	r0, r3
 8004430:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <_sbrk+0x40>)
 8004434:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004436:	4418      	add	r0, r3
 8004438:	4290      	cmp	r0, r2
 800443a:	d9f7      	bls.n	800442c <_sbrk+0x14>
    errno = ENOMEM;
 800443c:	f00a fea0 	bl	800f180 <__errno>
 8004440:	230c      	movs	r3, #12
 8004442:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd10      	pop	{r4, pc}
 800444c:	20007234 	.word	0x20007234
 8004450:	20020000 	.word	0x20020000
 8004454:	00008000 	.word	0x00008000
 8004458:	2000ffd0 	.word	0x2000ffd0

0800445c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <SystemInit+0x18>)
 800445e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004462:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004466:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800446a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800446e:	6099      	str	r1, [r3, #8]
#endif
}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <vUpdateLCDSetCurrentTime>:
  * @brief  Set current time LCD variable
  * @param  ulSetToCurrentTime: variable to set the current time on LCD.
  * @retval None
  */
void vUpdateLCDSetCurrentTime(uint32_t ulSetToCurrentTime){
	xDisplayInfo.ulCurrentTime = ulSetToCurrentTime;
 8004478:	4b01      	ldr	r3, [pc, #4]	; (8004480 <vUpdateLCDSetCurrentTime+0x8>)
 800447a:	6018      	str	r0, [r3, #0]
}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20007238 	.word	0x20007238

08004484 <ulUpdateLCDGetCurrentTime>:
/**
  * @brief  returns current time LCD variable
  * @retval ""
  */
uint32_t ulUpdateLCDGetCurrentTime(){
	return xDisplayInfo.ulCurrentTime;
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <ulUpdateLCDGetCurrentTime+0x8>)
}
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20007238 	.word	0x20007238

08004490 <vUpdateLCDSetTotalTime>:
/**
  * @brief  Set total time LCD variable, convert it from integer to "mm:ss" string
  * @param  ulSetToCurrentTime: variable to set the total time on LCD.
  * @retval None
  */
void vUpdateLCDSetTotalTime(uint32_t ulSetToTotalTime){
 8004490:	b430      	push	{r4, r5}

	xDisplayInfo.ulTotalTime = ulSetToTotalTime;
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <vUpdateLCDSetTotalTime+0x34>)
 8004494:	6060      	str	r0, [r4, #4]

	if(ulSetToTotalTime != 0){
 8004496:	b930      	cbnz	r0, 80044a6 <vUpdateLCDSetTotalTime+0x16>
		prvUpdateLCDConvertToMinutes(xDisplayInfo.ulTotalTime, xDisplayInfo.cTotalTime);
	}else{
		strncpy(xDisplayInfo.cTotalTime , "--:--", 12);
 8004498:	f104 001c 	add.w	r0, r4, #28
 800449c:	220c      	movs	r2, #12
 800449e:	490a      	ldr	r1, [pc, #40]	; (80044c8 <vUpdateLCDSetTotalTime+0x38>)
	}
}
 80044a0:	bc30      	pop	{r4, r5}
		strncpy(xDisplayInfo.cTotalTime , "--:--", 12);
 80044a2:	f00a bfc3 	b.w	800f42c <strncpy>
  * @param  time_string	:	time in mm:ss char format
  * @retval None
  */
static void prvUpdateLCDConvertToMinutes(uint32_t ulSeconds, char cTimeString[12]){
	uint32_t minutes = ulSeconds/60;                                                                                                /*minutes calculation*/
	ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <vUpdateLCDSetTotalTime+0x3c>)
	sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 80044a8:	4909      	ldr	r1, [pc, #36]	; (80044d0 <vUpdateLCDSetTotalTime+0x40>)
 80044aa:	4603      	mov	r3, r0
	ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 80044ac:	fba2 0203 	umull	r0, r2, r2, r3
 80044b0:	0952      	lsrs	r2, r2, #5
 80044b2:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
	sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 80044b6:	f104 001c 	add.w	r0, r4, #28
 80044ba:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
}
 80044be:	bc30      	pop	{r4, r5}
	sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 80044c0:	f00a bf94 	b.w	800f3ec <siprintf>
 80044c4:	20007238 	.word	0x20007238
 80044c8:	08011a50 	.word	0x08011a50
 80044cc:	88888889 	.word	0x88888889
 80044d0:	08011a44 	.word	0x08011a44

080044d4 <vUpdateLCDSetVolume>:
	xDisplayInfo.ulVolume = ulSetToVolume;
 80044d4:	4b01      	ldr	r3, [pc, #4]	; (80044dc <vUpdateLCDSetVolume+0x8>)
 80044d6:	6098      	str	r0, [r3, #8]
}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20007238 	.word	0x20007238

080044e0 <ulUpdateLCDGetVolume>:
	return xDisplayInfo.ulVolume;
 80044e0:	4b01      	ldr	r3, [pc, #4]	; (80044e8 <ulUpdateLCDGetVolume+0x8>)
}
 80044e2:	6898      	ldr	r0, [r3, #8]
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20007238 	.word	0x20007238

080044ec <vUpdateLCDSetSampleRate>:
	xDisplayInfo.ulSampleRate = ulSetToSampleRate;
 80044ec:	4b01      	ldr	r3, [pc, #4]	; (80044f4 <vUpdateLCDSetSampleRate+0x8>)
 80044ee:	60d8      	str	r0, [r3, #12]
}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20007238 	.word	0x20007238

080044f8 <ulUpdateLCDGetSampleRate>:
	return xDisplayInfo.ulSampleRate;
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <ulUpdateLCDGetSampleRate+0x8>)
}
 80044fa:	68d8      	ldr	r0, [r3, #12]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20007238 	.word	0x20007238

08004504 <vUpdateLCDSetMp3Track>:
	strncpy(xDisplayInfo.cMp3Track, pcMp3Track, 50);
 8004504:	4601      	mov	r1, r0
 8004506:	2232      	movs	r2, #50	; 0x32
 8004508:	4801      	ldr	r0, [pc, #4]	; (8004510 <vUpdateLCDSetMp3Track+0xc>)
 800450a:	f00a bf8f 	b.w	800f42c <strncpy>
 800450e:	bf00      	nop
 8004510:	20007266 	.word	0x20007266

08004514 <vUpdateLCDScreen>:
/**
  * @brief  update the LCM1602a with current information
  * @param  None
  * @retval None
  */
void vUpdateLCDScreen(){
 8004514:	b538      	push	{r3, r4, r5, lr}
	prvUpdateLCDConvertToMinutes(xDisplayInfo.ulCurrentTime, xDisplayInfo.cCurrentTime);                                            /*convert current time to character string*/
 8004516:	4c33      	ldr	r4, [pc, #204]	; (80045e4 <vUpdateLCDScreen+0xd0>)
	ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 8004518:	4a33      	ldr	r2, [pc, #204]	; (80045e8 <vUpdateLCDScreen+0xd4>)
	sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 800451a:	4934      	ldr	r1, [pc, #208]	; (80045ec <vUpdateLCDScreen+0xd8>)
	prvUpdateLCDConvertToMinutes(xDisplayInfo.ulCurrentTime, xDisplayInfo.cCurrentTime);                                            /*convert current time to character string*/
 800451c:	4620      	mov	r0, r4
 800451e:	f850 3b10 	ldr.w	r3, [r0], #16
	ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 8004522:	fba2 5203 	umull	r5, r2, r2, r3
 8004526:	0952      	lsrs	r2, r2, #5
 8004528:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
	sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 800452c:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 8004530:	f00a ff5c 	bl	800f3ec <siprintf>
	LCM1602a_Write_Data(0b00000010, 0, 0);                                                                                          /*Return to Home position on display*/
 8004534:	2200      	movs	r2, #0
 8004536:	4611      	mov	r1, r2
 8004538:	2002      	movs	r0, #2
 800453a:	f000 fec5 	bl	80052c8 <LCM1602a_Write_Data>
	LCM1602a_textwrap((char*) xDisplayInfo.cMp3Track, 1);
 800453e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8004542:	2101      	movs	r1, #1
 8004544:	f000 ff4a 	bl	80053dc <LCM1602a_textwrap>
	LCM1602a_Write_Data(0b11000000, 0, 0);                                                                                          /*next line on display*/
 8004548:	2200      	movs	r2, #0
 800454a:	4611      	mov	r1, r2
 800454c:	20c0      	movs	r0, #192	; 0xc0
 800454e:	f000 febb 	bl	80052c8 <LCM1602a_Write_Data>
	LCM1602a_Write_Message((char*) xDisplayInfo.cCurrentTime);                                                                      /*display time information*/
 8004552:	f104 0010 	add.w	r0, r4, #16
 8004556:	f000 fe8d 	bl	8005274 <LCM1602a_Write_Message>
	LCM1602a_Write_Message((char*) "/");                                                                                            /* "" "" "" */
 800455a:	4825      	ldr	r0, [pc, #148]	; (80045f0 <vUpdateLCDScreen+0xdc>)
 800455c:	f000 fe8a 	bl	8005274 <LCM1602a_Write_Message>
	LCM1602a_Write_Message((char*) xDisplayInfo.cTotalTime);                                                                        /* "" "" "" */
 8004560:	f104 001c 	add.w	r0, r4, #28
 8004564:	f000 fe86 	bl	8005274 <LCM1602a_Write_Message>
	LCM1602a_Write_Message((char*) " ");                                                                                            /*space character*/
 8004568:	4822      	ldr	r0, [pc, #136]	; (80045f4 <vUpdateLCDScreen+0xe0>)
 800456a:	f000 fe83 	bl	8005274 <LCM1602a_Write_Message>
	LCM1602a_Write_Data(SPEAKER, 1, 0);                                                                                             /*print speaker character*/
 800456e:	2200      	movs	r2, #0
 8004570:	4610      	mov	r0, r2
 8004572:	2101      	movs	r1, #1
 8004574:	f000 fea8 	bl	80052c8 <LCM1602a_Write_Data>
	if(xDisplayInfo.ulVolume < 25){                                                                                                 /*if volume less than 25*/
 8004578:	68a3      	ldr	r3, [r4, #8]
 800457a:	2b18      	cmp	r3, #24
 800457c:	d910      	bls.n	80045a0 <vUpdateLCDScreen+0x8c>
	}else if(xDisplayInfo.ulVolume < 50){																							/*else if volume less than 50*/
 800457e:	2b31      	cmp	r3, #49	; 0x31
 8004580:	d904      	bls.n	800458c <vUpdateLCDScreen+0x78>
	}else if(xDisplayInfo.ulVolume < 75){                                                                                           /*else if volume less than 75*/
 8004582:	2b4a      	cmp	r3, #74	; 0x4a
 8004584:	d916      	bls.n	80045b4 <vUpdateLCDScreen+0xa0>
	}else if(xDisplayInfo.ulVolume <= 100){                                                                                         /*else if volume less than / equal to 100*/
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d920      	bls.n	80045cc <vUpdateLCDScreen+0xb8>
	prvUpdateLCDPrintVolume();                                                                                                      /*current volume*/
}
 800458a:	bd38      	pop	{r3, r4, r5, pc}
		LCM1602a_Write_Data(VOLUME2, 1, 0);                                                                                             /* ##-- */
 800458c:	2002      	movs	r0, #2
 800458e:	2200      	movs	r2, #0
 8004590:	2101      	movs	r1, #1
 8004592:	f000 fe99 	bl	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Message((char*) " ");
 8004596:	4817      	ldr	r0, [pc, #92]	; (80045f4 <vUpdateLCDScreen+0xe0>)
}
 8004598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCM1602a_Write_Message((char*) " ");
 800459c:	f000 be6a 	b.w	8005274 <LCM1602a_Write_Message>
		LCM1602a_Write_Data(VOLUME1, 1, 0);                                                                                             /* #--- */
 80045a0:	2101      	movs	r1, #1
 80045a2:	4608      	mov	r0, r1
 80045a4:	2200      	movs	r2, #0
 80045a6:	f000 fe8f 	bl	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Message((char*) " ");
 80045aa:	4812      	ldr	r0, [pc, #72]	; (80045f4 <vUpdateLCDScreen+0xe0>)
}
 80045ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCM1602a_Write_Message((char*) " ");
 80045b0:	f000 be60 	b.w	8005274 <LCM1602a_Write_Message>
		LCM1602a_Write_Data(VOLUME2, 1, 0);                                                                                             /* ###- */
 80045b4:	2200      	movs	r2, #0
 80045b6:	2101      	movs	r1, #1
 80045b8:	2002      	movs	r0, #2
 80045ba:	f000 fe85 	bl	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Data(VOLUME3, 1, 0);
 80045be:	2200      	movs	r2, #0
 80045c0:	2101      	movs	r1, #1
 80045c2:	2003      	movs	r0, #3
}
 80045c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCM1602a_Write_Data(VOLUME3, 1, 0);
 80045c8:	f000 be7e 	b.w	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Data(VOLUME2, 1, 0);                                                                                             /* #### */
 80045cc:	2200      	movs	r2, #0
 80045ce:	2101      	movs	r1, #1
 80045d0:	2002      	movs	r0, #2
 80045d2:	f000 fe79 	bl	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Data(VOLUME4, 1, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2101      	movs	r1, #1
 80045da:	2004      	movs	r0, #4
}
 80045dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCM1602a_Write_Data(VOLUME4, 1, 0);
 80045e0:	f000 be72 	b.w	80052c8 <LCM1602a_Write_Data>
 80045e4:	20007238 	.word	0x20007238
 80045e8:	88888889 	.word	0x88888889
 80045ec:	08011a44 	.word	0x08011a44
 80045f0:	08011a3c 	.word	0x08011a3c
 80045f4:	08011a40 	.word	0x08011a40

080045f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80045f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045fe:	e003      	b.n	8004608 <LoopCopyDataInit>

08004600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004606:	3104      	adds	r1, #4

08004608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004608:	480b      	ldr	r0, [pc, #44]	; (8004638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800460c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800460e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004610:	d3f6      	bcc.n	8004600 <CopyDataInit>
  ldr  r2, =_sbss
 8004612:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004614:	e002      	b.n	800461c <LoopFillZerobss>

08004616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004618:	f842 3b04 	str.w	r3, [r2], #4

0800461c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800461e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004620:	d3f9      	bcc.n	8004616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004622:	f7ff ff1b 	bl	800445c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004626:	f00a fdb1 	bl	800f18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800462a:	f7fc f967 	bl	80008fc <main>
  bx  lr    
 800462e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004630:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004634:	08012000 	.word	0x08012000
  ldr  r0, =_sdata
 8004638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800463c:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 8004640:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 8004644:	2000ffd0 	.word	0x2000ffd0

08004648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004648:	e7fe      	b.n	8004648 <ADC_IRQHandler>
	...

0800464c <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 800464c:	2000      	movs	r0, #0
 800464e:	4770      	bx	lr

08004650 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 8004650:	2000      	movs	r0, #0
 8004652:	4770      	bx	lr

08004654 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004654:	2964      	cmp	r1, #100	; 0x64
{
 8004656:	b538      	push	{r3, r4, r5, lr}
 8004658:	b2c5      	uxtb	r5, r0
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800465a:	d814      	bhi.n	8004686 <cs43l22_SetVolume+0x32>
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <cs43l22_SetVolume+0x38>)
 800465e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8004662:	fba3 3101 	umull	r3, r1, r3, r1
 8004666:	0949      	lsrs	r1, r1, #5
 8004668:	f101 0419 	add.w	r4, r1, #25
 800466c:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800466e:	4622      	mov	r2, r4
 8004670:	4628      	mov	r0, r5
 8004672:	2120      	movs	r1, #32
 8004674:	f000 f9ee 	bl	8004a54 <AUDIO_IO_Write>
 8004678:	4628      	mov	r0, r5
 800467a:	4622      	mov	r2, r4
 800467c:	2121      	movs	r1, #33	; 0x21
 800467e:	f000 f9e9 	bl	8004a54 <AUDIO_IO_Write>
}
 8004682:	2000      	movs	r0, #0
 8004684:	bd38      	pop	{r3, r4, r5, pc}
 8004686:	2418      	movs	r4, #24
 8004688:	e7f1      	b.n	800466e <cs43l22_SetVolume+0x1a>
 800468a:	bf00      	nop
 800468c:	51eb851f 	.word	0x51eb851f

08004690 <cs43l22_Init>:
{
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8004692:	b2c4      	uxtb	r4, r0
{
 8004694:	460d      	mov	r5, r1
 8004696:	4606      	mov	r6, r0
 8004698:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 800469a:	f000 f9a7 	bl	80049ec <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 800469e:	2102      	movs	r1, #2
 80046a0:	4620      	mov	r0, r4
 80046a2:	2201      	movs	r2, #1
 80046a4:	f000 f9d6 	bl	8004a54 <AUDIO_IO_Write>
  switch (OutputDevice)
 80046a8:	1e69      	subs	r1, r5, #1
 80046aa:	2903      	cmp	r1, #3
 80046ac:	d803      	bhi.n	80046b6 <cs43l22_Init+0x26>
 80046ae:	e8df f001 	tbb	[pc, r1]
 80046b2:	4c64      	.short	0x4c64
 80046b4:	0248      	.short	0x0248
    OutputDev = 0x05;
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <cs43l22_Init+0xf4>)
 80046b8:	2205      	movs	r2, #5
 80046ba:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80046bc:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80046be:	2104      	movs	r1, #4
 80046c0:	4620      	mov	r0, r4
 80046c2:	f000 f9c7 	bl	8004a54 <AUDIO_IO_Write>
 80046c6:	2281      	movs	r2, #129	; 0x81
 80046c8:	2105      	movs	r1, #5
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 f9c2 	bl	8004a54 <AUDIO_IO_Write>
 80046d0:	2204      	movs	r2, #4
 80046d2:	2106      	movs	r1, #6
 80046d4:	4620      	mov	r0, r4
 80046d6:	f000 f9bd 	bl	8004a54 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80046da:	4639      	mov	r1, r7
 80046dc:	4630      	mov	r0, r6
 80046de:	f7ff ffb9 	bl	8004654 <cs43l22_SetVolume>
  AUDIO_IO_Write(Addr, Reg, Value);
 80046e2:	2206      	movs	r2, #6
 80046e4:	210f      	movs	r1, #15
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80046e6:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 f9b3 	bl	8004a54 <AUDIO_IO_Write>
 80046ee:	2200      	movs	r2, #0
 80046f0:	2124      	movs	r1, #36	; 0x24
 80046f2:	4620      	mov	r0, r4
 80046f4:	f000 f9ae 	bl	8004a54 <AUDIO_IO_Write>
 80046f8:	2200      	movs	r2, #0
 80046fa:	2125      	movs	r1, #37	; 0x25
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 f9a9 	bl	8004a54 <AUDIO_IO_Write>
 8004702:	4620      	mov	r0, r4
 8004704:	2200      	movs	r2, #0
 8004706:	210a      	movs	r1, #10
 8004708:	f000 f9a4 	bl	8004a54 <AUDIO_IO_Write>
 800470c:	4620      	mov	r0, r4
 800470e:	2204      	movs	r2, #4
 8004710:	210e      	movs	r1, #14
 8004712:	f000 f99f 	bl	8004a54 <AUDIO_IO_Write>
 8004716:	4620      	mov	r0, r4
 8004718:	2200      	movs	r2, #0
 800471a:	2127      	movs	r1, #39	; 0x27
 800471c:	f000 f99a 	bl	8004a54 <AUDIO_IO_Write>
 8004720:	4620      	mov	r0, r4
 8004722:	220f      	movs	r2, #15
 8004724:	211f      	movs	r1, #31
 8004726:	f000 f995 	bl	8004a54 <AUDIO_IO_Write>
 800472a:	4620      	mov	r0, r4
 800472c:	220a      	movs	r2, #10
 800472e:	211a      	movs	r1, #26
 8004730:	f000 f990 	bl	8004a54 <AUDIO_IO_Write>
 8004734:	4620      	mov	r0, r4
 8004736:	220a      	movs	r2, #10
 8004738:	211b      	movs	r1, #27
 800473a:	f000 f98b 	bl	8004a54 <AUDIO_IO_Write>
}
 800473e:	4628      	mov	r0, r5
 8004740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAA;
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <cs43l22_Init+0xf4>)
 8004744:	22aa      	movs	r2, #170	; 0xaa
 8004746:	701a      	strb	r2, [r3, #0]
    break;
 8004748:	e7b8      	b.n	80046bc <cs43l22_Init+0x2c>
    OutputDev = 0xAF;
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <cs43l22_Init+0xf4>)
 800474c:	22af      	movs	r2, #175	; 0xaf
 800474e:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8004750:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8004752:	2104      	movs	r1, #4
 8004754:	4620      	mov	r0, r4
 8004756:	f000 f97d 	bl	8004a54 <AUDIO_IO_Write>
 800475a:	2281      	movs	r2, #129	; 0x81
 800475c:	2105      	movs	r1, #5
 800475e:	4620      	mov	r0, r4
 8004760:	f000 f978 	bl	8004a54 <AUDIO_IO_Write>
 8004764:	2204      	movs	r2, #4
 8004766:	2106      	movs	r1, #6
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f973 	bl	8004a54 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800476e:	4639      	mov	r1, r7
 8004770:	4630      	mov	r0, r6
 8004772:	f7ff ff6f 	bl	8004654 <cs43l22_SetVolume>
 8004776:	4605      	mov	r5, r0
 8004778:	e7c3      	b.n	8004702 <cs43l22_Init+0x72>
    OutputDev = 0xFA;
 800477a:	4b02      	ldr	r3, [pc, #8]	; (8004784 <cs43l22_Init+0xf4>)
 800477c:	22fa      	movs	r2, #250	; 0xfa
 800477e:	701a      	strb	r2, [r3, #0]
    break;
 8004780:	e79c      	b.n	80046bc <cs43l22_Init+0x2c>
 8004782:	bf00      	nop
 8004784:	20007298 	.word	0x20007298

08004788 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8004788:	f000 b962 	b.w	8004a50 <AUDIO_IO_DeInit>

0800478c <cs43l22_ReadID>:
{
 800478c:	b510      	push	{r4, lr}
 800478e:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 8004790:	f000 f92c 	bl	80049ec <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8004794:	b2e0      	uxtb	r0, r4
 8004796:	2101      	movs	r1, #1
 8004798:	f000 f978 	bl	8004a8c <AUDIO_IO_Read>
}
 800479c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	bf00      	nop

080047a4 <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 80047a4:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80047a6:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80047a8:	4620      	mov	r0, r4
 80047aa:	22ff      	movs	r2, #255	; 0xff
 80047ac:	2104      	movs	r1, #4
 80047ae:	f000 f951 	bl	8004a54 <AUDIO_IO_Write>
 80047b2:	4620      	mov	r0, r4
 80047b4:	2201      	movs	r2, #1
 80047b6:	2122      	movs	r1, #34	; 0x22
 80047b8:	f000 f94c 	bl	8004a54 <AUDIO_IO_Write>
 80047bc:	4620      	mov	r0, r4
 80047be:	2201      	movs	r2, #1
 80047c0:	2123      	movs	r1, #35	; 0x23
}
 80047c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 80047c6:	f000 b945 	b.w	8004a54 <AUDIO_IO_Write>
 80047ca:	bf00      	nop

080047cc <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 80047cc:	2901      	cmp	r1, #1
{
 80047ce:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 80047d0:	d012      	beq.n	80047f8 <cs43l22_SetMute+0x2c>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80047d2:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80047d4:	4620      	mov	r0, r4
 80047d6:	2200      	movs	r2, #0
 80047d8:	2122      	movs	r1, #34	; 0x22
 80047da:	f000 f93b 	bl	8004a54 <AUDIO_IO_Write>
 80047de:	4620      	mov	r0, r4
 80047e0:	2200      	movs	r2, #0
 80047e2:	2123      	movs	r1, #35	; 0x23
 80047e4:	f000 f936 	bl	8004a54 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 80047ea:	4620      	mov	r0, r4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80047ec:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80047ee:	2104      	movs	r1, #4
 80047f0:	f000 f930 	bl	8004a54 <AUDIO_IO_Write>
}
 80047f4:	2000      	movs	r0, #0
 80047f6:	bd10      	pop	{r4, pc}
 80047f8:	f7ff ffd4 	bl	80047a4 <cs43l22_SetMute.part.0>
 80047fc:	2000      	movs	r0, #0
 80047fe:	bd10      	pop	{r4, pc}
 8004800:	20007298 	.word	0x20007298

08004804 <cs43l22_Resume>:
{
 8004804:	b570      	push	{r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 8004806:	2500      	movs	r5, #0
{
 8004808:	b082      	sub	sp, #8
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800480a:	4629      	mov	r1, r5
  volatile uint32_t index = 0x00;
 800480c:	9501      	str	r5, [sp, #4]
{
 800480e:	4604      	mov	r4, r0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004810:	f7ff ffdc 	bl	80047cc <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8004814:	9501      	str	r5, [sp, #4]
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	2bfe      	cmp	r3, #254	; 0xfe
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800481a:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 800481c:	d805      	bhi.n	800482a <cs43l22_Resume+0x26>
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	3301      	adds	r3, #1
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	9b01      	ldr	r3, [sp, #4]
 8004826:	2bfe      	cmp	r3, #254	; 0xfe
 8004828:	d9f9      	bls.n	800481e <cs43l22_Resume+0x1a>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <cs43l22_Resume+0x44>)
 800482c:	b2e4      	uxtb	r4, r4
 800482e:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8004830:	4620      	mov	r0, r4
 8004832:	2104      	movs	r1, #4
 8004834:	f000 f90e 	bl	8004a54 <AUDIO_IO_Write>
 8004838:	4620      	mov	r0, r4
 800483a:	229e      	movs	r2, #158	; 0x9e
 800483c:	2102      	movs	r1, #2
 800483e:	f000 f909 	bl	8004a54 <AUDIO_IO_Write>
}
 8004842:	4630      	mov	r0, r6
 8004844:	b002      	add	sp, #8
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	20007298 	.word	0x20007298

0800484c <cs43l22_Pause>:
{  
 800484c:	b510      	push	{r4, lr}
 800484e:	4604      	mov	r4, r0
 8004850:	f7ff ffa8 	bl	80047a4 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8004854:	b2e0      	uxtb	r0, r4
 8004856:	2201      	movs	r2, #1
 8004858:	2102      	movs	r1, #2
 800485a:	f000 f8fb 	bl	8004a54 <AUDIO_IO_Write>
}
 800485e:	2000      	movs	r0, #0
 8004860:	bd10      	pop	{r4, pc}
 8004862:	bf00      	nop

08004864 <cs43l22_Stop>:
{
 8004864:	b510      	push	{r4, lr}
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8004866:	b2c4      	uxtb	r4, r0
 8004868:	f7ff ff9c 	bl	80047a4 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 800486c:	4620      	mov	r0, r4
 800486e:	2204      	movs	r2, #4
 8004870:	210e      	movs	r1, #14
 8004872:	f000 f8ef 	bl	8004a54 <AUDIO_IO_Write>
 8004876:	4620      	mov	r0, r4
 8004878:	229f      	movs	r2, #159	; 0x9f
 800487a:	2102      	movs	r1, #2
 800487c:	f000 f8ea 	bl	8004a54 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 8004880:	4b02      	ldr	r3, [pc, #8]	; (800488c <cs43l22_Stop+0x28>)
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
}
 8004886:	2000      	movs	r0, #0
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	20000008 	.word	0x20000008

08004890 <cs43l22_Play>:
{
 8004890:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 8004892:	4c0e      	ldr	r4, [pc, #56]	; (80048cc <cs43l22_Play+0x3c>)
 8004894:	7823      	ldrb	r3, [r4, #0]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d002      	beq.n	80048a0 <cs43l22_Play+0x10>
  uint32_t counter = 0;
 800489a:	2500      	movs	r5, #0
}
 800489c:	4628      	mov	r0, r5
 800489e:	bd70      	pop	{r4, r5, r6, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80048a0:	b2c6      	uxtb	r6, r0
 80048a2:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80048a4:	2206      	movs	r2, #6
 80048a6:	4630      	mov	r0, r6
 80048a8:	210e      	movs	r1, #14
 80048aa:	f000 f8d3 	bl	8004a54 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80048ae:	4628      	mov	r0, r5
 80048b0:	2100      	movs	r1, #0
 80048b2:	f7ff ff8b 	bl	80047cc <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 80048b6:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80048b8:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80048ba:	2102      	movs	r1, #2
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f8c9 	bl	8004a54 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	7023      	strb	r3, [r4, #0]
}
 80048c6:	4628      	mov	r0, r5
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	bf00      	nop
 80048cc:	20000008 	.word	0x20000008

080048d0 <cs43l22_SetOutputMode>:
  switch (Output) 
 80048d0:	3901      	subs	r1, #1
{
 80048d2:	b508      	push	{r3, lr}
 80048d4:	b2c0      	uxtb	r0, r0
  switch (Output) 
 80048d6:	2903      	cmp	r1, #3
 80048d8:	d803      	bhi.n	80048e2 <cs43l22_SetOutputMode+0x12>
 80048da:	e8df f001 	tbb	[pc, r1]
 80048de:	141d      	.short	0x141d
 80048e0:	020b      	.short	0x020b
  AUDIO_IO_Write(Addr, Reg, Value);
 80048e2:	2205      	movs	r2, #5
 80048e4:	2104      	movs	r1, #4
 80048e6:	f000 f8b5 	bl	8004a54 <AUDIO_IO_Write>
      OutputDev = 0x05;
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <cs43l22_SetOutputMode+0x5c>)
 80048ec:	2205      	movs	r2, #5
 80048ee:	701a      	strb	r2, [r3, #0]
}
 80048f0:	2000      	movs	r0, #0
 80048f2:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 80048f4:	22aa      	movs	r2, #170	; 0xaa
 80048f6:	2104      	movs	r1, #4
 80048f8:	f000 f8ac 	bl	8004a54 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <cs43l22_SetOutputMode+0x5c>)
 80048fe:	22aa      	movs	r2, #170	; 0xaa
 8004900:	701a      	strb	r2, [r3, #0]
}
 8004902:	2000      	movs	r0, #0
 8004904:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8004906:	22af      	movs	r2, #175	; 0xaf
 8004908:	2104      	movs	r1, #4
 800490a:	f000 f8a3 	bl	8004a54 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <cs43l22_SetOutputMode+0x5c>)
 8004910:	22af      	movs	r2, #175	; 0xaf
 8004912:	701a      	strb	r2, [r3, #0]
}
 8004914:	2000      	movs	r0, #0
 8004916:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8004918:	22fa      	movs	r2, #250	; 0xfa
 800491a:	2104      	movs	r1, #4
 800491c:	f000 f89a 	bl	8004a54 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <cs43l22_SetOutputMode+0x5c>)
 8004922:	22fa      	movs	r2, #250	; 0xfa
 8004924:	701a      	strb	r2, [r3, #0]
}
 8004926:	2000      	movs	r0, #0
 8004928:	bd08      	pop	{r3, pc}
 800492a:	bf00      	nop
 800492c:	20007298 	.word	0x20007298

08004930 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8004930:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004932:	4d29      	ldr	r5, [pc, #164]	; (80049d8 <I2Cx_Init+0xa8>)
{
 8004934:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004936:	4628      	mov	r0, r5
 8004938:	f002 fe4a 	bl	80075d0 <HAL_I2C_GetState>
 800493c:	2800      	cmp	r0, #0
 800493e:	d148      	bne.n	80049d2 <I2Cx_Init+0xa2>
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004940:	4e26      	ldr	r6, [pc, #152]	; (80049dc <I2Cx_Init+0xac>)
 8004942:	9001      	str	r0, [sp, #4]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <I2Cx_Init+0xb0>)
 8004946:	602b      	str	r3, [r5, #0]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004948:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800494a:	60a8      	str	r0, [r5, #8]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	6333      	str	r3, [r6, #48]	; 0x30
 8004952:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <I2Cx_Init+0xb4>)
 8004956:	606a      	str	r2, [r5, #4]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004958:	f003 0302 	and.w	r3, r3, #2
    I2cHandle.Init.OwnAddress1 = 0x33;
 800495c:	2133      	movs	r1, #51	; 0x33
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800495e:	9301      	str	r3, [sp, #4]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004960:	f44f 4280 	mov.w	r2, #16384	; 0x4000

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8004964:	f44f 7310 	mov.w	r3, #576	; 0x240
    I2cHandle.Init.OwnAddress1 = 0x33;
 8004968:	60e9      	str	r1, [r5, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800496a:	2112      	movs	r1, #18
 800496c:	4604      	mov	r4, r0
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800496e:	612a      	str	r2, [r5, #16]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004970:	9801      	ldr	r0, [sp, #4]
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8004972:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004974:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004976:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004978:	9104      	str	r1, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 800497a:	481b      	ldr	r0, [pc, #108]	; (80049e8 <I2Cx_Init+0xb8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800497c:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 800497e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004980:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004982:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8004984:	f001 fa94 	bl	8005eb0 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004988:	9402      	str	r4, [sp, #8]
 800498a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800498c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004990:	6433      	str	r3, [r6, #64]	; 0x40
 8004992:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800499c:	6a33      	ldr	r3, [r6, #32]
 800499e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a2:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80049a4:	6a33      	ldr	r3, [r6, #32]
 80049a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049aa:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 80049ac:	4622      	mov	r2, r4
 80049ae:	4621      	mov	r1, r4
 80049b0:	201f      	movs	r0, #31
 80049b2:	f001 f801 	bl	80059b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80049b6:	201f      	movs	r0, #31
 80049b8:	f001 f834 	bl	8005a24 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80049bc:	4622      	mov	r2, r4
 80049be:	4621      	mov	r1, r4
 80049c0:	2020      	movs	r0, #32
 80049c2:	f000 fff9 	bl	80059b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80049c6:	2020      	movs	r0, #32
 80049c8:	f001 f82c 	bl	8005a24 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80049cc:	4628      	mov	r0, r5
 80049ce:	f002 fb77 	bl	80070c0 <HAL_I2C_Init>
}
 80049d2:	b008      	add	sp, #32
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	bf00      	nop
 80049d8:	2000729c 	.word	0x2000729c
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40005400 	.word	0x40005400
 80049e4:	000186a0 	.word	0x000186a0
 80049e8:	40020400 	.word	0x40020400

080049ec <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ee:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80049f0:	2600      	movs	r6, #0
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <AUDIO_IO_Init+0x5c>)
 80049f4:	9600      	str	r6, [sp, #0]
 80049f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 80049f8:	4c14      	ldr	r4, [pc, #80]	; (8004a4c <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80049fa:	f042 0208 	orr.w	r2, r2, #8
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004a02:	9603      	str	r6, [sp, #12]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004a0a:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004a0c:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8004a0e:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004a10:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a12:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004a14:	9304      	str	r3, [sp, #16]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004a16:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a18:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004a1c:	f001 fa48 	bl	8005eb0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8004a20:	f7ff ff86 	bl	8004930 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8004a24:	4632      	mov	r2, r6
 8004a26:	4629      	mov	r1, r5
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f001 fbf5 	bl	8006218 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8004a2e:	2005      	movs	r0, #5
 8004a30:	f000 fd72 	bl	8005518 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8004a34:	463a      	mov	r2, r7
 8004a36:	4629      	mov	r1, r5
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f001 fbed 	bl	8006218 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8004a3e:	2005      	movs	r0, #5
 8004a40:	f000 fd6a 	bl	8005518 <HAL_Delay>
}
 8004a44:	b007      	add	sp, #28
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40020c00 	.word	0x40020c00

08004a50 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop

08004a54 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004a54:	b510      	push	{r4, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8004a5a:	4c0a      	ldr	r4, [pc, #40]	; (8004a84 <AUDIO_IO_Write+0x30>)
 8004a5c:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8004a60:	6824      	ldr	r4, [r4, #0]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2301      	movs	r3, #1
 8004a66:	460a      	mov	r2, r1
 8004a68:	9402      	str	r4, [sp, #8]
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	4806      	ldr	r0, [pc, #24]	; (8004a88 <AUDIO_IO_Write+0x34>)
 8004a70:	f002 fc00 	bl	8007274 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8004a74:	b120      	cbz	r0, 8004a80 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8004a76:	4804      	ldr	r0, [pc, #16]	; (8004a88 <AUDIO_IO_Write+0x34>)
 8004a78:	f002 fbe2 	bl	8007240 <HAL_I2C_DeInit>
  I2Cx_Init();
 8004a7c:	f7ff ff58 	bl	8004930 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8004a80:	b006      	add	sp, #24
 8004a82:	bd10      	pop	{r4, pc}
 8004a84:	2000003c 	.word	0x2000003c
 8004a88:	2000729c 	.word	0x2000729c

08004a8c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	b086      	sub	sp, #24
  uint8_t value = 0;
 8004a90:	ab06      	add	r3, sp, #24
 8004a92:	2400      	movs	r4, #0
 8004a94:	f803 4d01 	strb.w	r4, [r3, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <AUDIO_IO_Read+0x38>)
 8004a9a:	6814      	ldr	r4, [r2, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	460a      	mov	r2, r1
 8004aa2:	9402      	str	r4, [sp, #8]
 8004aa4:	4601      	mov	r1, r0
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <AUDIO_IO_Read+0x3c>)
 8004aaa:	f002 fc79 	bl	80073a0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8004aae:	b120      	cbz	r0, 8004aba <AUDIO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 8004ab0:	4805      	ldr	r0, [pc, #20]	; (8004ac8 <AUDIO_IO_Read+0x3c>)
 8004ab2:	f002 fbc5 	bl	8007240 <HAL_I2C_DeInit>
  I2Cx_Init();
 8004ab6:	f7ff ff3b 	bl	8004930 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8004aba:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004abe:	b006      	add	sp, #24
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000003c 	.word	0x2000003c
 8004ac8:	2000729c 	.word	0x2000729c

08004acc <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <I2S3_Init+0x34>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8004ace:	69d1      	ldr	r1, [r2, #28]
{
 8004ad0:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8004ad4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 8004ad8:	601a      	str	r2, [r3, #0]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8004ada:	6158      	str	r0, [r3, #20]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8004adc:	61d1      	str	r1, [r2, #28]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8004ade:	4618      	mov	r0, r3
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8004ae0:	2200      	movs	r2, #0
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8004ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8004ae6:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8004aea:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8004aee:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8004af0:	6059      	str	r1, [r3, #4]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8004af2:	f002 fd99 	bl	8007628 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8004af6:	3000      	adds	r0, #0
 8004af8:	bf18      	it	ne
 8004afa:	2001      	movne	r0, #1
 8004afc:	bd08      	pop	{r3, pc}
 8004afe:	bf00      	nop
 8004b00:	40003c00 	.word	0x40003c00
 8004b04:	2000d7dc 	.word	0x2000d7dc

08004b08 <BSP_AUDIO_OUT_Play>:
{
 8004b08:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <BSP_AUDIO_OUT_Play+0x34>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
{
 8004b0e:	4605      	mov	r5, r0
 8004b10:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8004b12:	b28a      	uxth	r2, r1
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4601      	mov	r1, r0
 8004b18:	2094      	movs	r0, #148	; 0x94
 8004b1a:	4798      	blx	r3
 8004b1c:	b960      	cbnz	r0, 8004b38 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 8004b1e:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8004b22:	bf34      	ite	cc
 8004b24:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8004b28:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4804      	ldr	r0, [pc, #16]	; (8004b40 <BSP_AUDIO_OUT_Play+0x38>)
 8004b30:	f002 fe24 	bl	800777c <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8004b34:	2000      	movs	r0, #0
}
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8004b38:	2001      	movs	r0, #1
}
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20007350 	.word	0x20007350
 8004b40:	2000d7dc 	.word	0x2000d7dc

08004b44 <BSP_AUDIO_OUT_ChangeBuffer>:
	HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size);
 8004b44:	460a      	mov	r2, r1
 8004b46:	4601      	mov	r1, r0
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8004b4a:	f002 be17 	b.w	800777c <HAL_I2S_Transmit_DMA>
 8004b4e:	bf00      	nop
 8004b50:	2000d7dc 	.word	0x2000d7dc

08004b54 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <BSP_AUDIO_OUT_Pause+0x20>)
 8004b56:	681b      	ldr	r3, [r3, #0]
{    
 8004b58:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8004b5a:	2094      	movs	r0, #148	; 0x94
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	4798      	blx	r3
 8004b60:	b108      	cbz	r0, 8004b66 <BSP_AUDIO_OUT_Pause+0x12>
    return AUDIO_ERROR;
 8004b62:	2001      	movs	r0, #1
}
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	4604      	mov	r4, r0
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8004b68:	4803      	ldr	r0, [pc, #12]	; (8004b78 <BSP_AUDIO_OUT_Pause+0x24>)
 8004b6a:	f002 fe69 	bl	8007840 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8004b6e:	4620      	mov	r0, r4
}
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	20007350 	.word	0x20007350
 8004b78:	2000d7dc 	.word	0x2000d7dc

08004b7c <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <BSP_AUDIO_OUT_Resume+0x20>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
{    
 8004b80:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8004b82:	2094      	movs	r0, #148	; 0x94
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	4798      	blx	r3
 8004b88:	b108      	cbz	r0, 8004b8e <BSP_AUDIO_OUT_Resume+0x12>
    return AUDIO_ERROR;
 8004b8a:	2001      	movs	r0, #1
}
 8004b8c:	bd10      	pop	{r4, pc}
 8004b8e:	4604      	mov	r4, r0
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8004b90:	4803      	ldr	r0, [pc, #12]	; (8004ba0 <BSP_AUDIO_OUT_Resume+0x24>)
 8004b92:	f002 fe9f 	bl	80078d4 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 8004b96:	4620      	mov	r0, r4
}
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20007350 	.word	0x20007350
 8004ba0:	2000d7dc 	.word	0x2000d7dc

08004ba4 <BSP_AUDIO_OUT_Stop>:
{
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8004ba8:	480c      	ldr	r0, [pc, #48]	; (8004bdc <BSP_AUDIO_OUT_Stop+0x38>)
 8004baa:	f002 fee7 	bl	800797c <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <BSP_AUDIO_OUT_Stop+0x3c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2094      	movs	r0, #148	; 0x94
 8004bb8:	4798      	blx	r3
 8004bba:	b918      	cbnz	r0, 8004bc4 <BSP_AUDIO_OUT_Stop+0x20>
    if(Option == CODEC_PDWN_HW)
 8004bbc:	2d01      	cmp	r5, #1
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	d002      	beq.n	8004bc8 <BSP_AUDIO_OUT_Stop+0x24>
}
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8004bc4:	2001      	movs	r0, #1
}
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_Delay(1);
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 fca5 	bl	8005518 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8004bce:	4622      	mov	r2, r4
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	4804      	ldr	r0, [pc, #16]	; (8004be4 <BSP_AUDIO_OUT_Stop+0x40>)
 8004bd4:	f001 fb20 	bl	8006218 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8004bd8:	4620      	mov	r0, r4
}
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	2000d7dc 	.word	0x2000d7dc
 8004be0:	20007350 	.word	0x20007350
 8004be4:	40020c00 	.word	0x40020c00

08004be8 <BSP_AUDIO_OUT_SetVolume>:
{
 8004be8:	b508      	push	{r3, lr}
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <BSP_AUDIO_OUT_SetVolume+0x18>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4601      	mov	r1, r0
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	2094      	movs	r0, #148	; 0x94
 8004bf4:	4798      	blx	r3
}
 8004bf6:	3000      	adds	r0, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	2001      	movne	r0, #1
 8004bfc:	bd08      	pop	{r3, pc}
 8004bfe:	bf00      	nop
 8004c00:	20007350 	.word	0x20007350

08004c04 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8004c04:	b530      	push	{r4, r5, lr}
 8004c06:	2300      	movs	r3, #0
 8004c08:	b085      	sub	sp, #20
 8004c0a:	4d16      	ldr	r5, [pc, #88]	; (8004c64 <BSP_AUDIO_OUT_ClockConfig+0x60>)
 8004c0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  uint8_t index = 0, freqindex = 0xFF;
 8004c10:	24ff      	movs	r4, #255	; 0xff
 8004c12:	e001      	b.n	8004c18 <BSP_AUDIO_OUT_ClockConfig+0x14>
 8004c14:	f855 2b04 	ldr.w	r2, [r5], #4
 8004c18:	b2d8      	uxtb	r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	428a      	cmp	r2, r1
 8004c1e:	bf08      	it	eq
 8004c20:	4604      	moveq	r4, r0
  for(index = 0; index < 8; index++)
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d1f6      	bne.n	8004c14 <BSP_AUDIO_OUT_ClockConfig+0x10>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8004c26:	4668      	mov	r0, sp
 8004c28:	f003 fd0a 	bl	8008640 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 8004c2c:	0763      	lsls	r3, r4, #29
 8004c2e:	d00a      	beq.n	8004c46 <BSP_AUDIO_OUT_ClockConfig+0x42>
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8004c30:	2101      	movs	r1, #1
 8004c32:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004c36:	2303      	movs	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004c38:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8004c3a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004c3e:	f003 fc5f 	bl	8008500 <HAL_RCCEx_PeriphCLKConfig>
}
 8004c42:	b005      	add	sp, #20
 8004c44:	bd30      	pop	{r4, r5, pc}
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <BSP_AUDIO_OUT_ClockConfig+0x64>)
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8004c48:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <BSP_AUDIO_OUT_ClockConfig+0x68>)
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8004c4a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8004c4e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8004c52:	9301      	str	r3, [sp, #4]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004c54:	4668      	mov	r0, sp
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004c56:	2301      	movs	r3, #1
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8004c58:	9202      	str	r2, [sp, #8]
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004c5a:	9300      	str	r3, [sp, #0]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004c5c:	f003 fc50 	bl	8008500 <HAL_RCCEx_PeriphCLKConfig>
}
 8004c60:	b005      	add	sp, #20
 8004c62:	bd30      	pop	{r4, r5, pc}
 8004c64:	08011a5c 	.word	0x08011a5c
 8004c68:	08011a78 	.word	0x08011a78
 8004c6c:	08011a98 	.word	0x08011a98

08004c70 <BSP_AUDIO_OUT_MspInit>:
{
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8004c74:	4c3f      	ldr	r4, [pc, #252]	; (8004d74 <BSP_AUDIO_OUT_MspInit+0x104>)
 8004c76:	2500      	movs	r5, #0
 8004c78:	9500      	str	r5, [sp, #0]
 8004c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	6423      	str	r3, [r4, #64]	; 0x40
 8004c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8004c8c:	9501      	str	r5, [sp, #4]
 8004c8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	6323      	str	r3, [r4, #48]	; 0x30
 8004c96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8004ca0:	9502      	str	r5, [sp, #8]
 8004ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8004caa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8004cac:	9507      	str	r5, [sp, #28]
  I2S3_WS_CLK_ENABLE();
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8004cb4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8004cb8:	2302      	movs	r3, #2
{
 8004cba:	4606      	mov	r6, r0
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8004cbc:	a905      	add	r1, sp, #20
  I2S3_WS_CLK_ENABLE();
 8004cbe:	9802      	ldr	r0, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8004cc0:	9205      	str	r2, [sp, #20]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8004cc2:	482d      	ldr	r0, [pc, #180]	; (8004d78 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8004cc4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8004cc6:	2206      	movs	r2, #6
 8004cc8:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8004cca:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8004ccc:	f001 f8f0 	bl	8005eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8004cd0:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8004cd2:	a905      	add	r1, sp, #20
 8004cd4:	4829      	ldr	r0, [pc, #164]	; (8004d7c <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8004cd6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8004cd8:	f001 f8ea 	bl	8005eb0 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8004cdc:	9503      	str	r5, [sp, #12]
 8004cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8004ce0:	4825      	ldr	r0, [pc, #148]	; (8004d78 <BSP_AUDIO_OUT_MspInit+0x108>)
  I2S3_MCK_CLK_ENABLE();
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ce8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8004cf0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8004cf2:	2380      	movs	r3, #128	; 0x80
  I2S3_MCK_CLK_ENABLE();
 8004cf4:	9a03      	ldr	r2, [sp, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8004cf6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8004cf8:	f001 f8da 	bl	8005eb0 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8004cfc:	9504      	str	r5, [sp, #16]
 8004cfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8004d00:	6831      	ldr	r1, [r6, #0]
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <BSP_AUDIO_OUT_MspInit+0x110>)
  I2S3_DMAx_CLK_ENABLE(); 
 8004d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d08:	6323      	str	r3, [r4, #48]	; 0x30
 8004d0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d10:	9304      	str	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8004d12:	4291      	cmp	r1, r2
  I2S3_DMAx_CLK_ENABLE(); 
 8004d14:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8004d16:	d009      	beq.n	8004d2c <BSP_AUDIO_OUT_MspInit+0xbc>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	210e      	movs	r1, #14
 8004d1c:	202f      	movs	r0, #47	; 0x2f
 8004d1e:	f000 fe4b 	bl	80059b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8004d22:	202f      	movs	r0, #47	; 0x2f
 8004d24:	f000 fe7e 	bl	8005a24 <HAL_NVIC_EnableIRQ>
}
 8004d28:	b00a      	add	sp, #40	; 0x28
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8004d2c:	4c15      	ldr	r4, [pc, #84]	; (8004d84 <BSP_AUDIO_OUT_MspInit+0x114>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8004d2e:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004d30:	2140      	movs	r1, #64	; 0x40
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8004d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8004d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8004d3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8004d3e:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004d40:	60e5      	str	r5, [r4, #12]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8004d42:	61e5      	str	r5, [r4, #28]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004d44:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004d48:	60a1      	str	r1, [r4, #8]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8004d4a:	6122      	str	r2, [r4, #16]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004d4c:	2104      	movs	r1, #4
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004d4e:	2203      	movs	r2, #3
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8004d50:	6163      	str	r3, [r4, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8004d52:	61a0      	str	r0, [r4, #24]
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <BSP_AUDIO_OUT_MspInit+0x118>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8004d56:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004d58:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    HAL_DMA_DeInit(&hdma_i2sTx);
 8004d5c:	4620      	mov	r0, r4
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004d5e:	e9c4 5108 	strd	r5, r1, [r4, #32]
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004d62:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8004d64:	6023      	str	r3, [r4, #0]
    HAL_DMA_DeInit(&hdma_i2sTx);
 8004d66:	f000 ff05 	bl	8005b74 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 fe68 	bl	8005a40 <HAL_DMA_Init>
 8004d70:	e7d2      	b.n	8004d18 <BSP_AUDIO_OUT_MspInit+0xa8>
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020800 	.word	0x40020800
 8004d7c:	40020000 	.word	0x40020000
 8004d80:	40003c00 	.word	0x40003c00
 8004d84:	200072f0 	.word	0x200072f0
 8004d88:	400260b8 	.word	0x400260b8

08004d8c <BSP_AUDIO_OUT_Init>:
{    
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8004d90:	4c18      	ldr	r4, [pc, #96]	; (8004df4 <BSP_AUDIO_OUT_Init+0x68>)
{    
 8004d92:	4615      	mov	r5, r2
 8004d94:	4607      	mov	r7, r0
 8004d96:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f7ff ff31 	bl	8004c04 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <BSP_AUDIO_OUT_Init+0x6c>)
 8004da4:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8004da6:	4620      	mov	r0, r4
 8004da8:	f002 ff94 	bl	8007cd4 <HAL_I2S_GetState>
 8004dac:	b1e0      	cbz	r0, 8004de8 <BSP_AUDIO_OUT_Init+0x5c>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8004dae:	4628      	mov	r0, r5
 8004db0:	f7ff fe8c 	bl	8004acc <I2S3_Init>
 8004db4:	4604      	mov	r4, r0
 8004db6:	b938      	cbnz	r0, 8004dc8 <BSP_AUDIO_OUT_Init+0x3c>
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8004db8:	4e10      	ldr	r6, [pc, #64]	; (8004dfc <BSP_AUDIO_OUT_Init+0x70>)
 8004dba:	2094      	movs	r0, #148	; 0x94
 8004dbc:	68b3      	ldr	r3, [r6, #8]
 8004dbe:	4798      	blx	r3
 8004dc0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8004dc4:	28e0      	cmp	r0, #224	; 0xe0
 8004dc6:	d003      	beq.n	8004dd0 <BSP_AUDIO_OUT_Init+0x44>
    ret = AUDIO_ERROR;
 8004dc8:	2401      	movs	r4, #1
}
 8004dca:	4620      	mov	r0, r4
 8004dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pAudioDrv = &cs43l22_drv; 
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <BSP_AUDIO_OUT_Init+0x74>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8004dd2:	f8d6 9000 	ldr.w	r9, [r6]
      pAudioDrv = &cs43l22_drv; 
 8004dd6:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8004dd8:	4642      	mov	r2, r8
 8004dda:	462b      	mov	r3, r5
 8004ddc:	4639      	mov	r1, r7
 8004dde:	2094      	movs	r0, #148	; 0x94
 8004de0:	47c8      	blx	r9
}
 8004de2:	4620      	mov	r0, r4
 8004de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8004de8:	4601      	mov	r1, r0
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7ff ff40 	bl	8004c70 <BSP_AUDIO_OUT_MspInit>
 8004df0:	e7dd      	b.n	8004dae <BSP_AUDIO_OUT_Init+0x22>
 8004df2:	bf00      	nop
 8004df4:	2000d7dc 	.word	0x2000d7dc
 8004df8:	40003c00 	.word	0x40003c00
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	20007350 	.word	0x20007350

08004e04 <HAL_I2S_TxCpltCallback>:
{
 8004e04:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8004e06:	6802      	ldr	r2, [r0, #0]
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HAL_I2S_TxCpltCallback+0x14>)
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d000      	beq.n	8004e10 <HAL_I2S_TxCpltCallback+0xc>
}
 8004e0e:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8004e10:	f7ff f95a 	bl	80040c8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004e14:	bd08      	pop	{r3, pc}
 8004e16:	bf00      	nop
 8004e18:	40003c00 	.word	0x40003c00

08004e1c <HAL_I2S_TxHalfCpltCallback>:
{
 8004e1c:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8004e1e:	6802      	ldr	r2, [r0, #0]
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_I2S_TxHalfCpltCallback+0x14>)
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d000      	beq.n	8004e28 <HAL_I2S_TxHalfCpltCallback+0xc>
}
 8004e26:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8004e28:	f7ff f948 	bl	80040bc <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004e2c:	bd08      	pop	{r3, pc}
 8004e2e:	bf00      	nop
 8004e30:	40003c00 	.word	0x40003c00

08004e34 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop

08004e38 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e38:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004e3a:	f7ff fffb 	bl	8004e34 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004e3e:	bd08      	pop	{r3, pc}

08004e40 <BSP_AUDIO_IN_Error_Callback>:
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e44:	b500      	push	{lr}
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8004e46:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <HAL_I2S_ErrorCallback+0x30>)
 8004e48:	6803      	ldr	r3, [r0, #0]
 8004e4a:	4293      	cmp	r3, r2
{
 8004e4c:	b083      	sub	sp, #12
  if(hi2s->Instance == I2S3)
 8004e4e:	d00a      	beq.n	8004e66 <HAL_I2S_ErrorCallback+0x22>
  {
    BSP_AUDIO_OUT_Error_CallBack();
  }
  if(hi2s->Instance == I2S2)
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_I2S_ErrorCallback+0x34>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d002      	beq.n	8004e5c <HAL_I2S_ErrorCallback+0x18>
  {
    BSP_AUDIO_IN_Error_Callback();
  }
}
 8004e56:	b003      	add	sp, #12
 8004e58:	f85d fb04 	ldr.w	pc, [sp], #4
    BSP_AUDIO_IN_Error_Callback();
 8004e5c:	f7ff fff0 	bl	8004e40 <BSP_AUDIO_IN_Error_Callback>
}
 8004e60:	b003      	add	sp, #12
 8004e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e66:	9001      	str	r0, [sp, #4]
    BSP_AUDIO_OUT_Error_CallBack();
 8004e68:	f7ff f93a 	bl	80040e0 <BSP_AUDIO_OUT_Error_CallBack>
 8004e6c:	9801      	ldr	r0, [sp, #4]
 8004e6e:	6803      	ldr	r3, [r0, #0]
 8004e70:	e7ee      	b.n	8004e50 <HAL_I2S_ErrorCallback+0xc>
 8004e72:	bf00      	nop
 8004e74:	40003c00 	.word	0x40003c00
 8004e78:	40003800 	.word	0x40003800

08004e7c <LCM1602a_Hang_Busy_Flag>:
/**
  * @brief  Hangs until the Data 7 pin returns the LOW value (Busy Flag)
  * @param  None
  * @retval None
  */
static void LCM1602a_Hang_Busy_Flag(){
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	data_port->MODER &= ~(GPIO_PIN_TO_MODER(data_7_pin));                               /*set D7 to input*/
 8004e80:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8005060 <LCM1602a_Hang_Busy_Flag+0x1e4>
 8004e84:	4e72      	ldr	r6, [pc, #456]	; (8005050 <LCM1602a_Hang_Busy_Flag+0x1d4>)
 8004e86:	f8b8 2000 	ldrh.w	r2, [r8]
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	2a01      	cmp	r2, #1
 8004e8e:	680b      	ldr	r3, [r1, #0]
 8004e90:	d07f      	beq.n	8004f92 <LCM1602a_Hang_Busy_Flag+0x116>
 8004e92:	2a02      	cmp	r2, #2
 8004e94:	d033      	beq.n	8004efe <LCM1602a_Hang_Busy_Flag+0x82>
 8004e96:	2a04      	cmp	r2, #4
 8004e98:	f000 808e 	beq.w	8004fb8 <LCM1602a_Hang_Busy_Flag+0x13c>
 8004e9c:	2a08      	cmp	r2, #8
 8004e9e:	f000 8085 	beq.w	8004fac <LCM1602a_Hang_Busy_Flag+0x130>
 8004ea2:	2a10      	cmp	r2, #16
 8004ea4:	f000 8095 	beq.w	8004fd2 <LCM1602a_Hang_Busy_Flag+0x156>
 8004ea8:	2a20      	cmp	r2, #32
 8004eaa:	f000 809e 	beq.w	8004fea <LCM1602a_Hang_Busy_Flag+0x16e>
 8004eae:	2a40      	cmp	r2, #64	; 0x40
 8004eb0:	f000 80a1 	beq.w	8004ff6 <LCM1602a_Hang_Busy_Flag+0x17a>
 8004eb4:	2a80      	cmp	r2, #128	; 0x80
 8004eb6:	f000 808f 	beq.w	8004fd8 <LCM1602a_Hang_Busy_Flag+0x15c>
 8004eba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004ebe:	f000 80a0 	beq.w	8005002 <LCM1602a_Hang_Busy_Flag+0x186>
 8004ec2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004ec6:	f000 80a5 	beq.w	8005014 <LCM1602a_Hang_Busy_Flag+0x198>
 8004eca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004ece:	f000 80a7 	beq.w	8005020 <LCM1602a_Hang_Busy_Flag+0x1a4>
 8004ed2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004ed6:	f000 80a9 	beq.w	800502c <LCM1602a_Hang_Busy_Flag+0x1b0>
 8004eda:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004ede:	f000 80ae 	beq.w	800503e <LCM1602a_Hang_Busy_Flag+0x1c2>
 8004ee2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004ee6:	f000 80ad 	beq.w	8005044 <LCM1602a_Hang_Busy_Flag+0x1c8>
 8004eea:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004eee:	f000 80ac 	beq.w	800504a <LCM1602a_Hang_Busy_Flag+0x1ce>
 8004ef2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004ef6:	bf08      	it	eq
 8004ef8:	f023 4340 	biceq.w	r3, r3, #3221225472	; 0xc0000000
 8004efc:	e001      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004efe:	f023 030c 	bic.w	r3, r3, #12
 8004f02:	4d54      	ldr	r5, [pc, #336]	; (8005054 <LCM1602a_Hang_Busy_Flag+0x1d8>)
 8004f04:	4c54      	ldr	r4, [pc, #336]	; (8005058 <LCM1602a_Hang_Busy_Flag+0x1dc>)
 8004f06:	4f55      	ldr	r7, [pc, #340]	; (800505c <LCM1602a_Hang_Busy_Flag+0x1e0>)
 8004f08:	600b      	str	r3, [r1, #0]

	while(1){                                                                           /*hang till Busy flag is Low*/

		HAL_GPIO_WritePin(control_port, control_pins[1], GPIO_PIN_SET);                 /*set RW and E*/
 8004f0a:	8869      	ldrh	r1, [r5, #2]
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f001 f982 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /* " " " */
 8004f14:	88a9      	ldrh	r1, [r5, #4]
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f001 f97d 	bl	8006218 <HAL_GPIO_WritePin>

		if(HAL_GPIO_ReadPin(data_port, data_pins[7]) == 0){                             /*if Data 7 pin is 0*/
 8004f1e:	89f9      	ldrh	r1, [r7, #14]
 8004f20:	6830      	ldr	r0, [r6, #0]
 8004f22:	f001 f973 	bl	800620c <HAL_GPIO_ReadPin>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1ef      	bne.n	8004f0a <LCM1602a_Hang_Busy_Flag+0x8e>
			HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_RESET);               /*set E back to LOW and stop hanging*/
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	88a9      	ldrh	r1, [r5, #4]
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	f001 f972 	bl	8006218 <HAL_GPIO_WritePin>
			break;
		}
	}

	data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 8004f34:	f8b8 3000 	ldrh.w	r3, [r8]
 8004f38:	6831      	ldr	r1, [r6, #0]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	680a      	ldr	r2, [r1, #0]
 8004f3e:	d02b      	beq.n	8004f98 <LCM1602a_Hang_Busy_Flag+0x11c>
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d02e      	beq.n	8004fa2 <LCM1602a_Hang_Busy_Flag+0x126>
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d03a      	beq.n	8004fbe <LCM1602a_Hang_Busy_Flag+0x142>
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d03d      	beq.n	8004fc8 <LCM1602a_Hang_Busy_Flag+0x14c>
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d030      	beq.n	8004fb2 <LCM1602a_Hang_Busy_Flag+0x136>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d047      	beq.n	8004fe4 <LCM1602a_Hang_Busy_Flag+0x168>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d04b      	beq.n	8004ff0 <LCM1602a_Hang_Busy_Flag+0x174>
 8004f58:	2b80      	cmp	r3, #128	; 0x80
 8004f5a:	d04f      	beq.n	8004ffc <LCM1602a_Hang_Busy_Flag+0x180>
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f60:	d03d      	beq.n	8004fde <LCM1602a_Hang_Busy_Flag+0x162>
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	d04f      	beq.n	8005008 <LCM1602a_Hang_Busy_Flag+0x18c>
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6c:	d04f      	beq.n	800500e <LCM1602a_Hang_Busy_Flag+0x192>
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f72:	d052      	beq.n	800501a <LCM1602a_Hang_Busy_Flag+0x19e>
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d055      	beq.n	8005026 <LCM1602a_Hang_Busy_Flag+0x1aa>
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7e:	d058      	beq.n	8005032 <LCM1602a_Hang_Busy_Flag+0x1b6>
 8004f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f84:	d058      	beq.n	8005038 <LCM1602a_Hang_Busy_Flag+0x1bc>
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	bf08      	it	eq
 8004f8c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8004f90:	e004      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	e7b4      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	600a      	str	r2, [r1, #0]
}
 8004f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa2:	f042 0204 	orr.w	r2, r2, #4
	data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 8004fa6:	600a      	str	r2, [r1, #0]
}
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fb0:	e7a7      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb6:	e7f1      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8004fb8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004fbc:	e7a1      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004fbe:	f042 0210 	orr.w	r2, r2, #16
	data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 8004fc2:	600a      	str	r2, [r1, #0]
}
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 8004fcc:	600a      	str	r2, [r1, #0]
}
 8004fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd6:	e794      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004fd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004fdc:	e791      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004fde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004fe2:	e7db      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8004fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fe8:	e7d8      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8004fea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fee:	e788      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ff4:	e7d2      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8004ff6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ffa:	e782      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8004ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005000:	e7cc      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8005002:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005006:	e77c      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8005008:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800500c:	e7c6      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 800500e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005012:	e7c3      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8005014:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005018:	e773      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 800501a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800501e:	e7bd      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8005020:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005024:	e76d      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8005026:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800502a:	e7b7      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 800502c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005030:	e767      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8005032:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005036:	e7b1      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 8005038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800503c:	e7ae      	b.n	8004f9c <LCM1602a_Hang_Busy_Flag+0x120>
 800503e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005042:	e75e      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8005044:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005048:	e75b      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 800504a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800504e:	e758      	b.n	8004f02 <LCM1602a_Hang_Busy_Flag+0x86>
 8005050:	20007374 	.word	0x20007374
 8005054:	20007354 	.word	0x20007354
 8005058:	2000735c 	.word	0x2000735c
 800505c:	20007364 	.word	0x20007364
 8005060:	20007362 	.word	0x20007362

08005064 <LCM1602a_Write8_Data>:
static void LCM1602a_Write8_Data(uint8_t dataValues, uint8_t RS, uint8_t RW){
 8005064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005068:	4607      	mov	r7, r0
 800506a:	4689      	mov	r9, r1
 800506c:	4690      	mov	r8, r2
	LCM1602a_Hang_Busy_Flag();                                                          /*hang until busy flag is reset*/
 800506e:	f7ff ff05 	bl	8004e7c <LCM1602a_Hang_Busy_Flag>
 8005072:	4d16      	ldr	r5, [pc, #88]	; (80050cc <LCM1602a_Write8_Data+0x68>)
 8005074:	4e16      	ldr	r6, [pc, #88]	; (80050d0 <LCM1602a_Write8_Data+0x6c>)
	for(int i = 0; i < DATA_8; i++){                                                    /*write to data lines*/
 8005076:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(data_port, data_pins[i] , ((dataValues >> i) & 1));           /* " " " */
 8005078:	fa47 f204 	asr.w	r2, r7, r4
 800507c:	f002 0201 	and.w	r2, r2, #1
	for(int i = 0; i < DATA_8; i++){                                                    /*write to data lines*/
 8005080:	3401      	adds	r4, #1
		HAL_GPIO_WritePin(data_port, data_pins[i] , ((dataValues >> i) & 1));           /* " " " */
 8005082:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8005086:	6830      	ldr	r0, [r6, #0]
 8005088:	f001 f8c6 	bl	8006218 <HAL_GPIO_WritePin>
	for(int i = 0; i < DATA_8; i++){                                                    /*write to data lines*/
 800508c:	2c08      	cmp	r4, #8
 800508e:	d1f3      	bne.n	8005078 <LCM1602a_Write8_Data+0x14>
	HAL_GPIO_WritePin(control_port, control_pins[0], RS);                               /*write to control lines RS, RW*/
 8005090:	4d10      	ldr	r5, [pc, #64]	; (80050d4 <LCM1602a_Write8_Data+0x70>)
 8005092:	4e11      	ldr	r6, [pc, #68]	; (80050d8 <LCM1602a_Write8_Data+0x74>)
 8005094:	8829      	ldrh	r1, [r5, #0]
 8005096:	6830      	ldr	r0, [r6, #0]
 8005098:	464a      	mov	r2, r9
	HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                     /*set E to High*/
 800509a:	462c      	mov	r4, r5
	HAL_GPIO_WritePin(control_port, control_pins[0], RS);                               /*write to control lines RS, RW*/
 800509c:	f001 f8bc 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(control_port, control_pins[1], RW);                               /* " " " */
 80050a0:	8869      	ldrh	r1, [r5, #2]
 80050a2:	6830      	ldr	r0, [r6, #0]
 80050a4:	4642      	mov	r2, r8
 80050a6:	f001 f8b7 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                     /*set E to High*/
 80050aa:	f834 1f04 	ldrh.w	r1, [r4, #4]!
 80050ae:	6830      	ldr	r0, [r6, #0]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f001 f8b1 	bl	8006218 <HAL_GPIO_WritePin>
 80050b6:	3d02      	subs	r5, #2
		HAL_GPIO_WritePin(control_port, control_pins[i], GPIO_PIN_RESET);               /* " " " */
 80050b8:	f834 1902 	ldrh.w	r1, [r4], #-2
 80050bc:	6830      	ldr	r0, [r6, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	f001 f8aa 	bl	8006218 <HAL_GPIO_WritePin>
	for(int i = CONTROL_PIN_COUNT - 1; i >= 0; i--){                                    /*reset all control pins*/
 80050c4:	42ac      	cmp	r4, r5
 80050c6:	d1f7      	bne.n	80050b8 <LCM1602a_Write8_Data+0x54>
}
 80050c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050cc:	20007362 	.word	0x20007362
 80050d0:	20007374 	.word	0x20007374
 80050d4:	20007354 	.word	0x20007354
 80050d8:	2000735c 	.word	0x2000735c

080050dc <LCM1602a_Write4_Data>:
static void LCM1602a_Write4_Data(uint8_t dataValues, uint8_t RS, uint8_t RW){
 80050dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	b083      	sub	sp, #12
 80050e2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8005198 <LCM1602a_Write4_Data+0xbc>
 80050e6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800519c <LCM1602a_Write4_Data+0xc0>
 80050ea:	4f29      	ldr	r7, [pc, #164]	; (8005190 <LCM1602a_Write4_Data+0xb4>)
 80050ec:	4d29      	ldr	r5, [pc, #164]	; (8005194 <LCM1602a_Write4_Data+0xb8>)
 80050ee:	e9cd 1200 	strd	r1, r2, [sp]
 80050f2:	4606      	mov	r6, r0
 80050f4:	f1a9 0a02 	sub.w	sl, r9, #2
 80050f8:	2404      	movs	r4, #4
		LCM1602a_Hang_Busy_Flag();                                                      /*hang until busy flag is reset*/
 80050fa:	f7ff febf 	bl	8004e7c <LCM1602a_Hang_Busy_Flag>
		HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0 + 4*i)) & 1));    /*write to data lines*/
 80050fe:	fa46 f204 	asr.w	r2, r6, r4
 8005102:	f002 0201 	and.w	r2, r2, #1
 8005106:	f8b8 1000 	ldrh.w	r1, [r8]
 800510a:	6838      	ldr	r0, [r7, #0]
 800510c:	f8df b090 	ldr.w	fp, [pc, #144]	; 80051a0 <LCM1602a_Write4_Data+0xc4>
 8005110:	f001 f882 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pins[1], ((dataValues >> (1 + 4*i)) & 1));    /* " " " */
 8005114:	1c62      	adds	r2, r4, #1
 8005116:	fa46 f202 	asr.w	r2, r6, r2
 800511a:	f002 0201 	and.w	r2, r2, #1
 800511e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8005122:	6838      	ldr	r0, [r7, #0]
 8005124:	f001 f878 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pins[2], ((dataValues >> (2 + 4*i)) & 1));    /* " " " */
 8005128:	1ca2      	adds	r2, r4, #2
 800512a:	fa46 f202 	asr.w	r2, r6, r2
 800512e:	f002 0201 	and.w	r2, r2, #1
 8005132:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	f001 f86e 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pins[3], ((dataValues >> (3 + 4*i)) & 1));    /* " " " */
 800513c:	1ce2      	adds	r2, r4, #3
 800513e:	fa46 f202 	asr.w	r2, r6, r2
 8005142:	f002 0201 	and.w	r2, r2, #1
 8005146:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800514a:	6838      	ldr	r0, [r7, #0]
 800514c:	f001 f864 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 8005150:	9a00      	ldr	r2, [sp, #0]
 8005152:	f8b9 1000 	ldrh.w	r1, [r9]
 8005156:	6828      	ldr	r0, [r5, #0]
 8005158:	f001 f85e 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(control_port, control_pins[1], RW);                           /* " " " */
 800515c:	9a01      	ldr	r2, [sp, #4]
 800515e:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8005162:	6828      	ldr	r0, [r5, #0]
 8005164:	f001 f858 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /*set E to High*/
 8005168:	2201      	movs	r2, #1
 800516a:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800516e:	6828      	ldr	r0, [r5, #0]
 8005170:	f001 f852 	bl	8006218 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(control_port, control_pins[j], GPIO_PIN_RESET);           /* " " " */
 8005174:	f83b 1902 	ldrh.w	r1, [fp], #-2
 8005178:	6828      	ldr	r0, [r5, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	f001 f84c 	bl	8006218 <HAL_GPIO_WritePin>
		for(int j = CONTROL_PIN_COUNT - 1; j >= 0; j--){                                /*reset all control pins*/
 8005180:	45da      	cmp	sl, fp
 8005182:	d1f7      	bne.n	8005174 <LCM1602a_Write4_Data+0x98>
 8005184:	3c04      	subs	r4, #4
	for(int i = 1; i >= 0; i--){
 8005186:	1d23      	adds	r3, r4, #4
 8005188:	d1b7      	bne.n	80050fa <LCM1602a_Write4_Data+0x1e>
}
 800518a:	b003      	add	sp, #12
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	20007374 	.word	0x20007374
 8005194:	2000735c 	.word	0x2000735c
 8005198:	20007354 	.word	0x20007354
 800519c:	20007364 	.word	0x20007364
 80051a0:	20007358 	.word	0x20007358

080051a4 <LCM1602a_Write4_Data_Single.constprop.0>:
static void LCM1602a_Write4_Data_Single(uint8_t dataValues, uint8_t RS, uint8_t RW){
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0)) & 1));          /*write to data lines*/
 80051a6:	4c1a      	ldr	r4, [pc, #104]	; (8005210 <LCM1602a_Write4_Data_Single.constprop.0+0x6c>)
 80051a8:	4f1a      	ldr	r7, [pc, #104]	; (8005214 <LCM1602a_Write4_Data_Single.constprop.0+0x70>)
	HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 80051aa:	4d1b      	ldr	r5, [pc, #108]	; (8005218 <LCM1602a_Write4_Data_Single.constprop.0+0x74>)
	HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0)) & 1));          /*write to data lines*/
 80051ac:	8839      	ldrh	r1, [r7, #0]
	HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 80051ae:	4e1b      	ldr	r6, [pc, #108]	; (800521c <LCM1602a_Write4_Data_Single.constprop.0+0x78>)
	HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0)) & 1));          /*write to data lines*/
 80051b0:	f000 0201 	and.w	r2, r0, #1
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	f001 f82f 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port, data_pins[1], ((dataValues >> (1)) & 1));          /* " " " */
 80051ba:	6820      	ldr	r0, [r4, #0]
 80051bc:	8879      	ldrh	r1, [r7, #2]
 80051be:	2201      	movs	r2, #1
 80051c0:	f001 f82a 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port, data_pins[2], ((dataValues >> (2)) & 1));          /* " " " */
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	88b9      	ldrh	r1, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f001 f825 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port, data_pins[3], ((dataValues >> (3)) & 1));          /* " " " */
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	88f9      	ldrh	r1, [r7, #6]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f001 f820 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /*set E to High*/
 80051d8:	462c      	mov	r4, r5
	HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 80051da:	8829      	ldrh	r1, [r5, #0]
 80051dc:	6830      	ldr	r0, [r6, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	f001 f81a 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(control_port, control_pins[1], RW);                           /* " " " */
 80051e4:	8869      	ldrh	r1, [r5, #2]
 80051e6:	6830      	ldr	r0, [r6, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f001 f815 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /*set E to High*/
 80051ee:	f834 1f04 	ldrh.w	r1, [r4, #4]!
 80051f2:	6830      	ldr	r0, [r6, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f001 f80f 	bl	8006218 <HAL_GPIO_WritePin>
 80051fa:	3d02      	subs	r5, #2
		HAL_GPIO_WritePin(control_port, control_pins[j], GPIO_PIN_RESET);           /* " " " */
 80051fc:	f834 1902 	ldrh.w	r1, [r4], #-2
 8005200:	6830      	ldr	r0, [r6, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	f001 f808 	bl	8006218 <HAL_GPIO_WritePin>
	for(int j = CONTROL_PIN_COUNT - 1; j >= 0; j--){                                /*reset all control pins*/
 8005208:	42ac      	cmp	r4, r5
 800520a:	d1f7      	bne.n	80051fc <LCM1602a_Write4_Data_Single.constprop.0+0x58>
}
 800520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520e:	bf00      	nop
 8005210:	20007374 	.word	0x20007374
 8005214:	20007364 	.word	0x20007364
 8005218:	20007354 	.word	0x20007354
 800521c:	2000735c 	.word	0x2000735c

08005220 <LCM1602a_Set_DATA8>:
void LCM1602a_Set_DATA8(GPIO_TypeDef *d_Port, uint16_t d_Pins[8], GPIO_TypeDef *c_Port, uint16_t c_Pins[3]){
 8005220:	b4f0      	push	{r4, r5, r6, r7}
	data_7_pin = d_Pins[7];                                                             /*set D7 pin*/
 8005222:	4d0e      	ldr	r5, [pc, #56]	; (800525c <LCM1602a_Set_DATA8+0x3c>)
 8005224:	89cf      	ldrh	r7, [r1, #14]
	transmission_mode = DATA_8;                                                         /*set transmission mode*/
 8005226:	4c0e      	ldr	r4, [pc, #56]	; (8005260 <LCM1602a_Set_DATA8+0x40>)
	data_7_pin = d_Pins[7];                                                             /*set D7 pin*/
 8005228:	802f      	strh	r7, [r5, #0]
	data_port = d_Port;                                                                 /*set data port*/
 800522a:	4e0e      	ldr	r6, [pc, #56]	; (8005264 <LCM1602a_Set_DATA8+0x44>)
	control_port = c_Port;                                                              /*set control port*/
 800522c:	4d0e      	ldr	r5, [pc, #56]	; (8005268 <LCM1602a_Set_DATA8+0x48>)
	data_port = d_Port;                                                                 /*set data port*/
 800522e:	6030      	str	r0, [r6, #0]
	transmission_mode = DATA_8;                                                         /*set transmission mode*/
 8005230:	2708      	movs	r7, #8
 8005232:	7027      	strb	r7, [r4, #0]
 8005234:	4c0d      	ldr	r4, [pc, #52]	; (800526c <LCM1602a_Set_DATA8+0x4c>)
	control_port = c_Port;                                                              /*set control port*/
 8005236:	602a      	str	r2, [r5, #0]
 8005238:	1e88      	subs	r0, r1, #2
 800523a:	310e      	adds	r1, #14
		data_pins[i] = d_Pins[i];                                                       /* " " " */
 800523c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8005240:	f824 2f02 	strh.w	r2, [r4, #2]!
	for(int i = 0; i < DATA_8; i++){                                                    /*set data pins*/
 8005244:	4288      	cmp	r0, r1
 8005246:	d1f9      	bne.n	800523c <LCM1602a_Set_DATA8+0x1c>
		control_pins[i] = c_Pins[i];                                                    /* " " " */
 8005248:	4a09      	ldr	r2, [pc, #36]	; (8005270 <LCM1602a_Set_DATA8+0x50>)
 800524a:	8819      	ldrh	r1, [r3, #0]
 800524c:	8011      	strh	r1, [r2, #0]
 800524e:	8859      	ldrh	r1, [r3, #2]
 8005250:	8051      	strh	r1, [r2, #2]
 8005252:	889b      	ldrh	r3, [r3, #4]
 8005254:	8093      	strh	r3, [r2, #4]
}
 8005256:	bcf0      	pop	{r4, r5, r6, r7}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20007362 	.word	0x20007362
 8005260:	20007379 	.word	0x20007379
 8005264:	20007374 	.word	0x20007374
 8005268:	2000735c 	.word	0x2000735c
 800526c:	20007362 	.word	0x20007362
 8005270:	20007354 	.word	0x20007354

08005274 <LCM1602a_Write_Message>:
void LCM1602a_Write_Message(char *Message){
 8005274:	b538      	push	{r3, r4, r5, lr}
	if (transmission_mode == DATA_8){                                                   /*if 8 Data Lines*/
 8005276:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <LCM1602a_Write_Message+0x50>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b08      	cmp	r3, #8
void LCM1602a_Write_Message(char *Message){
 800527c:	4604      	mov	r4, r0
	if (transmission_mode == DATA_8){                                                   /*if 8 Data Lines*/
 800527e:	d011      	beq.n	80052a4 <LCM1602a_Write_Message+0x30>
	}else if(transmission_mode == DATA_4){                                              /*if 4 Data Lines*/
 8005280:	2b04      	cmp	r3, #4
 8005282:	d000      	beq.n	8005286 <LCM1602a_Write_Message+0x12>
}
 8005284:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t Len = (uint16_t)strlen(Message);                                           /*find length of the message*/
 8005286:	f7fa ffad 	bl	80001e4 <strlen>
 800528a:	b280      	uxth	r0, r0
	for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 800528c:	2800      	cmp	r0, #0
 800528e:	d0f9      	beq.n	8005284 <LCM1602a_Write_Message+0x10>
 8005290:	1825      	adds	r5, r4, r0
		LCM1602a_Write4_Data((int)*Message, 1, 0);                                      /* " " " */
 8005292:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005296:	2200      	movs	r2, #0
 8005298:	2101      	movs	r1, #1
 800529a:	f7ff ff1f 	bl	80050dc <LCM1602a_Write4_Data>
	for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 800529e:	42a5      	cmp	r5, r4
 80052a0:	d1f7      	bne.n	8005292 <LCM1602a_Write_Message+0x1e>
}
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t Len = (uint16_t)strlen(Message);                                           /*find length of the message*/
 80052a4:	f7fa ff9e 	bl	80001e4 <strlen>
 80052a8:	b280      	uxth	r0, r0
	for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d0ea      	beq.n	8005284 <LCM1602a_Write_Message+0x10>
 80052ae:	1825      	adds	r5, r4, r0
		LCM1602a_Write8_Data((int)*Message, 1, 0);                                      /* " " " */
 80052b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80052b4:	2200      	movs	r2, #0
 80052b6:	2101      	movs	r1, #1
 80052b8:	f7ff fed4 	bl	8005064 <LCM1602a_Write8_Data>
	for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 80052bc:	42a5      	cmp	r5, r4
 80052be:	d1f7      	bne.n	80052b0 <LCM1602a_Write_Message+0x3c>
}
 80052c0:	bd38      	pop	{r3, r4, r5, pc}
 80052c2:	bf00      	nop
 80052c4:	20007379 	.word	0x20007379

080052c8 <LCM1602a_Write_Data>:
	if (transmission_mode == DATA_8){                                                   /*if 8 Data Lines*/
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <LCM1602a_Write_Data+0x18>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d004      	beq.n	80052da <LCM1602a_Write_Data+0x12>
	}else if(transmission_mode == DATA_4){                                              /*if 4 Data Lines*/
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d000      	beq.n	80052d6 <LCM1602a_Write_Data+0xe>
}
 80052d4:	4770      	bx	lr
		LCM1602a_Write4_Data(dataValues, RS, RW);                                           /*use corresponding write function*/
 80052d6:	f7ff bf01 	b.w	80050dc <LCM1602a_Write4_Data>
		LCM1602a_Write8_Data(dataValues, RS, RW);                                           /*use corresponding write function*/
 80052da:	f7ff bec3 	b.w	8005064 <LCM1602a_Write8_Data>
 80052de:	bf00      	nop
 80052e0:	20007379 	.word	0x20007379

080052e4 <create_char>:
	LCM1602a_Write_Data(0x40 | (location << 3), 0, 0);                                  /**/
 80052e4:	00c0      	lsls	r0, r0, #3
 80052e6:	2200      	movs	r2, #0
 80052e8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
static void create_char(uint8_t location, uint8_t charmap[]){
 80052ec:	b538      	push	{r3, r4, r5, lr}
	LCM1602a_Write_Data(0x40 | (location << 3), 0, 0);                                  /**/
 80052ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
static void create_char(uint8_t location, uint8_t charmap[]){
 80052f2:	460d      	mov	r5, r1
	LCM1602a_Write_Data(0x40 | (location << 3), 0, 0);                                  /**/
 80052f4:	4611      	mov	r1, r2
 80052f6:	f7ff ffe7 	bl	80052c8 <LCM1602a_Write_Data>
 80052fa:	1e6c      	subs	r4, r5, #1
 80052fc:	3507      	adds	r5, #7
		LCM1602a_Write_Data(charmap[i], 1, 0);                                          /* " " " */
 80052fe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005302:	2200      	movs	r2, #0
 8005304:	2101      	movs	r1, #1
 8005306:	f7ff ffdf 	bl	80052c8 <LCM1602a_Write_Data>
	for(int i = 0; i < 8; i++){                                                         /*write char into RAM*/
 800530a:	42ac      	cmp	r4, r5
 800530c:	d1f7      	bne.n	80052fe <create_char+0x1a>
}
 800530e:	bd38      	pop	{r3, r4, r5, pc}

08005310 <LCM1602a_init>:
void LCM1602a_init(uint8_t disp_line){
 8005310:	b510      	push	{r4, lr}
	if(transmission_mode == DATA_8){
 8005312:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <LCM1602a_init+0xb4>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b08      	cmp	r3, #8
 8005318:	d002      	beq.n	8005320 <LCM1602a_init+0x10>
	}else if(transmission_mode == DATA_4){
 800531a:	2b04      	cmp	r3, #4
 800531c:	d02a      	beq.n	8005374 <LCM1602a_init+0x64>
}
 800531e:	bd10      	pop	{r4, pc}
 8005320:	4604      	mov	r4, r0
		create_char(0, Speaker);                                                        /*store custom characters into LCD RAM*/
 8005322:	4929      	ldr	r1, [pc, #164]	; (80053c8 <LCM1602a_init+0xb8>)
 8005324:	2000      	movs	r0, #0
 8005326:	f7ff ffdd 	bl	80052e4 <create_char>
		create_char(1, Volume_1);                                                       /* " " " */
 800532a:	4928      	ldr	r1, [pc, #160]	; (80053cc <LCM1602a_init+0xbc>)
 800532c:	2001      	movs	r0, #1
 800532e:	f7ff ffd9 	bl	80052e4 <create_char>
		create_char(2, Volume_2);                                                       /* " " " */
 8005332:	4927      	ldr	r1, [pc, #156]	; (80053d0 <LCM1602a_init+0xc0>)
 8005334:	2002      	movs	r0, #2
 8005336:	f7ff ffd5 	bl	80052e4 <create_char>
		create_char(3, Volume_3);                                                       /* " " " */
 800533a:	4926      	ldr	r1, [pc, #152]	; (80053d4 <LCM1602a_init+0xc4>)
 800533c:	2003      	movs	r0, #3
 800533e:	f7ff ffd1 	bl	80052e4 <create_char>
		create_char(4, Volume_4);                                                       /* " " " */
 8005342:	4925      	ldr	r1, [pc, #148]	; (80053d8 <LCM1602a_init+0xc8>)
 8005344:	2004      	movs	r0, #4
 8005346:	f7ff ffcd 	bl	80052e4 <create_char>
		if(disp_line == TWO_LINE_DISPLAY){
 800534a:	2c02      	cmp	r4, #2
 800534c:	d030      	beq.n	80053b0 <LCM1602a_init+0xa0>
		}else if(disp_line == ONE_LINE_DISPLAY){
 800534e:	2c01      	cmp	r4, #1
 8005350:	d034      	beq.n	80053bc <LCM1602a_init+0xac>
		LCM1602a_Write_Data(0b00001100, 0, 0);                                          /*Display on With Cursor off*/
 8005352:	2200      	movs	r2, #0
 8005354:	4611      	mov	r1, r2
 8005356:	200c      	movs	r0, #12
 8005358:	f7ff ffb6 	bl	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Data(0b00000110, 0, 0);                                          /*increment on*/
 800535c:	2200      	movs	r2, #0
 800535e:	4611      	mov	r1, r2
 8005360:	2006      	movs	r0, #6
 8005362:	f7ff ffb1 	bl	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write_Data(0b00000001, 0, 0);                                          /*clear the display*/
 8005366:	2200      	movs	r2, #0
 8005368:	4611      	mov	r1, r2
 800536a:	2001      	movs	r0, #1
}
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LCM1602a_Write_Data(0b00000001, 0, 0);                                          /*clear the display*/
 8005370:	f7ff bfaa 	b.w	80052c8 <LCM1602a_Write_Data>
		LCM1602a_Write4_Data_Single(0b0011, 0, 0); HAL_Delay(5);
 8005374:	2003      	movs	r0, #3
 8005376:	f7ff ff15 	bl	80051a4 <LCM1602a_Write4_Data_Single.constprop.0>
 800537a:	2005      	movs	r0, #5
 800537c:	f000 f8cc 	bl	8005518 <HAL_Delay>
		LCM1602a_Write4_Data_Single(0b0011, 0, 0); HAL_Delay(5);
 8005380:	2003      	movs	r0, #3
 8005382:	f7ff ff0f 	bl	80051a4 <LCM1602a_Write4_Data_Single.constprop.0>
 8005386:	2005      	movs	r0, #5
 8005388:	f000 f8c6 	bl	8005518 <HAL_Delay>
		LCM1602a_Write4_Data_Single(0b0011, 0, 0); HAL_Delay(5);
 800538c:	2003      	movs	r0, #3
 800538e:	f7ff ff09 	bl	80051a4 <LCM1602a_Write4_Data_Single.constprop.0>
 8005392:	2005      	movs	r0, #5
 8005394:	f000 f8c0 	bl	8005518 <HAL_Delay>
		LCM1602a_Write4_Data_Single(0b0010, 0, 0); HAL_Delay(5);
 8005398:	2002      	movs	r0, #2
 800539a:	f7ff ff03 	bl	80051a4 <LCM1602a_Write4_Data_Single.constprop.0>
 800539e:	2005      	movs	r0, #5
 80053a0:	f000 f8ba 	bl	8005518 <HAL_Delay>
		LCM1602a_Write_Data(0b00101000, 0, 0);                                          /*Initialize the display mode 1 Line*/
 80053a4:	2200      	movs	r2, #0
 80053a6:	4611      	mov	r1, r2
 80053a8:	2028      	movs	r0, #40	; 0x28
			LCM1602a_Write_Data(0b00110000, 0, 0);                                      /*Initialize the display mode 1 Line*/
 80053aa:	f7ff ff8d 	bl	80052c8 <LCM1602a_Write_Data>
 80053ae:	e7d0      	b.n	8005352 <LCM1602a_init+0x42>
			LCM1602a_Write_Data(0b00111000, 0, 0);                                      /*Initialize the display mode 2 Line*/
 80053b0:	2200      	movs	r2, #0
 80053b2:	4611      	mov	r1, r2
 80053b4:	2038      	movs	r0, #56	; 0x38
 80053b6:	f7ff ff87 	bl	80052c8 <LCM1602a_Write_Data>
 80053ba:	e7ca      	b.n	8005352 <LCM1602a_init+0x42>
			LCM1602a_Write_Data(0b00110000, 0, 0);                                      /*Initialize the display mode 1 Line*/
 80053bc:	2200      	movs	r2, #0
 80053be:	4611      	mov	r1, r2
 80053c0:	2030      	movs	r0, #48	; 0x30
 80053c2:	e7f2      	b.n	80053aa <LCM1602a_init+0x9a>
 80053c4:	20007379 	.word	0x20007379
 80053c8:	20000040 	.word	0x20000040
 80053cc:	20000048 	.word	0x20000048
 80053d0:	20000050 	.word	0x20000050
 80053d4:	20000058 	.word	0x20000058
 80053d8:	20000060 	.word	0x20000060

080053dc <LCM1602a_textwrap>:
void LCM1602a_textwrap(char* in_text, uint8_t delay){
 80053dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053e0:	b095      	sub	sp, #84	; 0x54
	sprintf(text, "%s%s%s", "        ", in_text ,"        ");
 80053e2:	4a33      	ldr	r2, [pc, #204]	; (80054b0 <LCM1602a_textwrap+0xd4>)
	if (delay_factor != delay){
 80053e4:	4e33      	ldr	r6, [pc, #204]	; (80054b4 <LCM1602a_textwrap+0xd8>)
	sprintf(text, "%s%s%s", "        ", in_text ,"        ");
 80053e6:	9200      	str	r2, [sp, #0]
 80053e8:	ac02      	add	r4, sp, #8
 80053ea:	4603      	mov	r3, r0
void LCM1602a_textwrap(char* in_text, uint8_t delay){
 80053ec:	460d      	mov	r5, r1
	sprintf(text, "%s%s%s", "        ", in_text ,"        ");
 80053ee:	4620      	mov	r0, r4
 80053f0:	4931      	ldr	r1, [pc, #196]	; (80054b8 <LCM1602a_textwrap+0xdc>)
 80053f2:	f009 fffb 	bl	800f3ec <siprintf>
	if (delay_factor != delay){
 80053f6:	7833      	ldrb	r3, [r6, #0]
 80053f8:	42ab      	cmp	r3, r5
 80053fa:	d004      	beq.n	8005406 <LCM1602a_textwrap+0x2a>
		delay_factor++;
 80053fc:	3301      	adds	r3, #1
 80053fe:	7033      	strb	r3, [r6, #0]
}
 8005400:	b015      	add	sp, #84	; 0x54
 8005402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int text_len = strlen(text);                                                        /*find length of text*/
 8005406:	4620      	mov	r0, r4
 8005408:	f7fa feec 	bl	80001e4 <strlen>
	if (cursor_pos == (text_len - 1) ){                                                 /*reset cursor for wrapping*/
 800540c:	4d2b      	ldr	r5, [pc, #172]	; (80054bc <LCM1602a_textwrap+0xe0>)
 800540e:	882b      	ldrh	r3, [r5, #0]
 8005410:	1e47      	subs	r7, r0, #1
 8005412:	42bb      	cmp	r3, r7
	LCM1602a_Write_Data(0b00000010, 0, 0);                                              /*return display home*/
 8005414:	f04f 0200 	mov.w	r2, #0
		cursor_pos = 0;                                                                 /* " " " */
 8005418:	bf08      	it	eq
 800541a:	2300      	moveq	r3, #0
	int text_len = strlen(text);                                                        /*find length of text*/
 800541c:	4680      	mov	r8, r0
	LCM1602a_Write_Data(0b00000010, 0, 0);                                              /*return display home*/
 800541e:	4611      	mov	r1, r2
 8005420:	f04f 0002 	mov.w	r0, #2
		cursor_pos = 0;                                                                 /* " " " */
 8005424:	bf08      	it	eq
 8005426:	802b      	strheq	r3, [r5, #0]
	LCM1602a_Write_Data(0b00000010, 0, 0);                                              /*return display home*/
 8005428:	f7ff ff4e 	bl	80052c8 <LCM1602a_Write_Data>
	if(cursor_pos < text_len - 16){                                                     /*first 16 characters*/
 800542c:	882b      	ldrh	r3, [r5, #0]
 800542e:	f1a8 0210 	sub.w	r2, r8, #16
 8005432:	4293      	cmp	r3, r2
 8005434:	db2a      	blt.n	800548c <LCM1602a_textwrap+0xb0>
		for (int char_pos = cursor_pos; char_pos < (text_len - 1) ; char_pos++){        /*characters of current string*/
 8005436:	429f      	cmp	r7, r3
 8005438:	dd0d      	ble.n	8005456 <LCM1602a_textwrap+0x7a>
 800543a:	18e7      	adds	r7, r4, r3
 800543c:	f10d 0307 	add.w	r3, sp, #7
 8005440:	eb03 0908 	add.w	r9, r3, r8
			LCM1602a_Write_Data((int)text[char_pos], 1, 0);                             /* " " " */
 8005444:	f817 0b01 	ldrb.w	r0, [r7], #1
 8005448:	2200      	movs	r2, #0
 800544a:	2101      	movs	r1, #1
 800544c:	f7ff ff3c 	bl	80052c8 <LCM1602a_Write_Data>
		for (int char_pos = cursor_pos; char_pos < (text_len - 1) ; char_pos++){        /*characters of current string*/
 8005450:	454f      	cmp	r7, r9
 8005452:	d1f7      	bne.n	8005444 <LCM1602a_textwrap+0x68>
 8005454:	882b      	ldrh	r3, [r5, #0]
		for (int char_pos = 0; char_pos <= 16 - (text_len - cursor_pos); char_pos++){   /*remaining characters*/
 8005456:	eba3 0208 	sub.w	r2, r3, r8
 800545a:	f112 0f10 	cmn.w	r2, #16
 800545e:	d40e      	bmi.n	800547e <LCM1602a_textwrap+0xa2>
 8005460:	4627      	mov	r7, r4
			LCM1602a_Write_Data((int)text[char_pos], 1, 0);                             /* " " " */
 8005462:	2200      	movs	r2, #0
 8005464:	2101      	movs	r1, #1
 8005466:	f817 0b01 	ldrb.w	r0, [r7], #1
 800546a:	f7ff ff2d 	bl	80052c8 <LCM1602a_Write_Data>
		for (int char_pos = 0; char_pos <= 16 - (text_len - cursor_pos); char_pos++){   /*remaining characters*/
 800546e:	882b      	ldrh	r3, [r5, #0]
 8005470:	eba8 0203 	sub.w	r2, r8, r3
 8005474:	f1c2 0210 	rsb	r2, r2, #16
 8005478:	1b39      	subs	r1, r7, r4
 800547a:	428a      	cmp	r2, r1
 800547c:	daf1      	bge.n	8005462 <LCM1602a_textwrap+0x86>
	cursor_pos++;
 800547e:	3301      	adds	r3, #1
	delay_factor = 0;
 8005480:	2200      	movs	r2, #0
	cursor_pos++;
 8005482:	802b      	strh	r3, [r5, #0]
	delay_factor = 0;
 8005484:	7032      	strb	r2, [r6, #0]
}
 8005486:	b015      	add	sp, #84	; 0x54
 8005488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800548c:	18e7      	adds	r7, r4, r3
			LCM1602a_Write_Data((int)text[char_pos], 1, 0);                             /* " " " */
 800548e:	2200      	movs	r2, #0
 8005490:	2101      	movs	r1, #1
 8005492:	f817 0b01 	ldrb.w	r0, [r7], #1
 8005496:	f7ff ff17 	bl	80052c8 <LCM1602a_Write_Data>
		for (int char_pos = cursor_pos; char_pos < cursor_pos + 16 ; char_pos++){       /* " " " */
 800549a:	882b      	ldrh	r3, [r5, #0]
 800549c:	1b3a      	subs	r2, r7, r4
 800549e:	f103 010f 	add.w	r1, r3, #15
 80054a2:	4291      	cmp	r1, r2
 80054a4:	daf3      	bge.n	800548e <LCM1602a_textwrap+0xb2>
	cursor_pos++;
 80054a6:	3301      	adds	r3, #1
	delay_factor = 0;
 80054a8:	2200      	movs	r2, #0
	cursor_pos++;
 80054aa:	802b      	strh	r3, [r5, #0]
	delay_factor = 0;
 80054ac:	7032      	strb	r2, [r6, #0]
 80054ae:	e7ea      	b.n	8005486 <LCM1602a_textwrap+0xaa>
 80054b0:	08011ab8 	.word	0x08011ab8
 80054b4:	20007378 	.word	0x20007378
 80054b8:	08011ac4 	.word	0x08011ac4
 80054bc:	20007360 	.word	0x20007360

080054c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_Init+0x30>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054dc:	2003      	movs	r0, #3
 80054de:	f000 fa59 	bl	8005994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7fe ff2c 	bl	8004340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054e8:	f7fe fe2c 	bl	8004144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80054ec:	2000      	movs	r0, #0
 80054ee:	bd08      	pop	{r3, pc}
 80054f0:	40023c00 	.word	0x40023c00

080054f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80054f4:	4a03      	ldr	r2, [pc, #12]	; (8005504 <HAL_IncTick+0x10>)
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_IncTick+0x14>)
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	440b      	add	r3, r1
 80054fe:	6013      	str	r3, [r2, #0]
}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	2000d86c 	.word	0x2000d86c
 8005508:	20000068 	.word	0x20000068

0800550c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800550c:	4b01      	ldr	r3, [pc, #4]	; (8005514 <HAL_GetTick+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000d86c 	.word	0x2000d86c

08005518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800551c:	f7ff fff6 	bl	800550c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005520:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005522:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005524:	d002      	beq.n	800552c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <HAL_Delay+0x20>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800552c:	f7ff ffee 	bl	800550c <HAL_GetTick>
 8005530:	1b40      	subs	r0, r0, r5
 8005532:	42a0      	cmp	r0, r4
 8005534:	d3fa      	bcc.n	800552c <HAL_Delay+0x14>
  {
  }
}
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20000068 	.word	0x20000068

0800553c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800553c:	2800      	cmp	r0, #0
 800553e:	f000 8091 	beq.w	8005664 <HAL_ADC_Init+0x128>
{
 8005542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005544:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005546:	4604      	mov	r4, r0
 8005548:	2d00      	cmp	r5, #0
 800554a:	f000 8081 	beq.w	8005650 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800554e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005550:	06db      	lsls	r3, r3, #27
 8005552:	d504      	bpl.n	800555e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005554:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8005556:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005558:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800555c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800555e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005560:	494d      	ldr	r1, [pc, #308]	; (8005698 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005562:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005564:	4d4d      	ldr	r5, [pc, #308]	; (800569c <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 8005566:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800556a:	f022 0202 	bic.w	r2, r2, #2
 800556e:	f042 0202 	orr.w	r2, r2, #2
 8005572:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005574:	684a      	ldr	r2, [r1, #4]
 8005576:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800557a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800557c:	684a      	ldr	r2, [r1, #4]
 800557e:	6860      	ldr	r0, [r4, #4]
 8005580:	4302      	orrs	r2, r0
 8005582:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005584:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005586:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005588:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800558a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800558c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005590:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800559a:	6858      	ldr	r0, [r3, #4]
 800559c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80055a0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055a2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055a6:	4339      	orrs	r1, r7
 80055a8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055aa:	6899      	ldr	r1, [r3, #8]
 80055ac:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80055b0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055b2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055b4:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055b6:	ea42 0206 	orr.w	r2, r2, r6
 80055ba:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055bc:	d054      	beq.n	8005668 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055be:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055c0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055c2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80055c6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	4310      	orrs	r0, r2
 80055cc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ce:	6899      	ldr	r1, [r3, #8]
 80055d0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80055d4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	432a      	orrs	r2, r5
 80055da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055dc:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055de:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80055e0:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055e4:	f021 0102 	bic.w	r1, r1, #2
 80055e8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80055f0:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055f2:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d140      	bne.n	800567a <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055fc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005600:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005602:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005606:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005608:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800560c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800560e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005610:	3d01      	subs	r5, #1
 8005612:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8005616:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005618:	6898      	ldr	r0, [r3, #8]
 800561a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800561e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8005626:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800562e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005630:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005632:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005634:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005638:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800563a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800563c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005648:	2300      	movs	r3, #0
 800564a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8005650:	f7fe fd98 	bl	8004184 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005654:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005656:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8005658:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800565c:	06db      	lsls	r3, r3, #27
 800565e:	f53f af79 	bmi.w	8005554 <HAL_ADC_Init+0x18>
 8005662:	e77c      	b.n	800555e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8005664:	2001      	movs	r0, #1
}
 8005666:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800566e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	e7b0      	b.n	80055dc <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800567a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800567e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005680:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005688:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	3901      	subs	r1, #1
 800568e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	e7b3      	b.n	80055fe <HAL_ADC_Init+0xc2>
 8005696:	bf00      	nop
 8005698:	40012300 	.word	0x40012300
 800569c:	0f000001 	.word	0x0f000001

080056a0 <HAL_ADC_Start>:
{
 80056a0:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 80056a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80056a6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80056a8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80056aa:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80056ac:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80056ae:	d05c      	beq.n	800576a <HAL_ADC_Start+0xca>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056b0:	6802      	ldr	r2, [r0, #0]
 80056b2:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80056b4:	2101      	movs	r1, #1
 80056b6:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056ba:	07d9      	lsls	r1, r3, #31
 80056bc:	d414      	bmi.n	80056e8 <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056be:	4b32      	ldr	r3, [pc, #200]	; (8005788 <HAL_ADC_Start+0xe8>)
 80056c0:	4c32      	ldr	r4, [pc, #200]	; (800578c <HAL_ADC_Start+0xec>)
 80056c2:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80056c4:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056c6:	fba4 4303 	umull	r4, r3, r4, r3
 80056ca:	0c9b      	lsrs	r3, r3, #18
 80056cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 80056d0:	f041 0101 	orr.w	r1, r1, #1
 80056d4:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056d6:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80056d8:	9b01      	ldr	r3, [sp, #4]
 80056da:	b12b      	cbz	r3, 80056e8 <HAL_ADC_Start+0x48>
      counter--;
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	3b01      	subs	r3, #1
 80056e0:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f9      	bne.n	80056dc <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056e8:	6893      	ldr	r3, [r2, #8]
 80056ea:	07db      	lsls	r3, r3, #31
 80056ec:	d52c      	bpl.n	8005748 <HAL_ADC_Start+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 80056ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fc:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056fe:	6853      	ldr	r3, [r2, #4]
 8005700:	055c      	lsls	r4, r3, #21
 8005702:	d505      	bpl.n	8005710 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005704:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800570a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800570e:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005710:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005712:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005716:	bf1c      	itt	ne
 8005718:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800571a:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800571e:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005720:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8005724:	2400      	movs	r4, #0
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_ADC_Start+0xf0>)
    __HAL_UNLOCK(hadc);
 8005728:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800572c:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	06c9      	lsls	r1, r1, #27
 8005732:	d10e      	bne.n	8005752 <HAL_ADC_Start+0xb2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005734:	4917      	ldr	r1, [pc, #92]	; (8005794 <HAL_ADC_Start+0xf4>)
 8005736:	428a      	cmp	r2, r1
 8005738:	d00e      	beq.n	8005758 <HAL_ADC_Start+0xb8>
 800573a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800573e:	428a      	cmp	r2, r1
 8005740:	d01e      	beq.n	8005780 <HAL_ADC_Start+0xe0>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005742:	4915      	ldr	r1, [pc, #84]	; (8005798 <HAL_ADC_Start+0xf8>)
 8005744:	428a      	cmp	r2, r1
 8005746:	d015      	beq.n	8005774 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 8005748:	2000      	movs	r0, #0
}
 800574a:	b003      	add	sp, #12
 800574c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005750:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_ADC_Start+0xf4>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d1f7      	bne.n	8005748 <HAL_ADC_Start+0xa8>
 8005758:	6890      	ldr	r0, [r2, #8]
 800575a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800575e:	d1f3      	bne.n	8005748 <HAL_ADC_Start+0xa8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005760:	6893      	ldr	r3, [r2, #8]
 8005762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005766:	6093      	str	r3, [r2, #8]
 8005768:	e7ef      	b.n	800574a <HAL_ADC_Start+0xaa>
  __HAL_LOCK(hadc);
 800576a:	2002      	movs	r0, #2
}
 800576c:	b003      	add	sp, #12
 800576e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005772:	4770      	bx	lr
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2b0f      	cmp	r3, #15
 800577c:	d9ec      	bls.n	8005758 <HAL_ADC_Start+0xb8>
 800577e:	e7e3      	b.n	8005748 <HAL_ADC_Start+0xa8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	06db      	lsls	r3, r3, #27
 8005784:	d0e8      	beq.n	8005758 <HAL_ADC_Start+0xb8>
 8005786:	e7df      	b.n	8005748 <HAL_ADC_Start+0xa8>
 8005788:	20000004 	.word	0x20000004
 800578c:	431bde83 	.word	0x431bde83
 8005790:	40012300 	.word	0x40012300
 8005794:	40012000 	.word	0x40012000
 8005798:	40012200 	.word	0x40012200

0800579c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800579c:	6803      	ldr	r3, [r0, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	0552      	lsls	r2, r2, #21
 80057a2:	d502      	bpl.n	80057aa <HAL_ADC_PollForConversion+0xe>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80057a4:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80057a6:	05db      	lsls	r3, r3, #23
 80057a8:	d43e      	bmi.n	8005828 <HAL_ADC_PollForConversion+0x8c>
{
 80057aa:	b570      	push	{r4, r5, r6, lr}
 80057ac:	460c      	mov	r4, r1
 80057ae:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 80057b0:	f7ff feac 	bl	800550c <HAL_GetTick>
 80057b4:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057b6:	682a      	ldr	r2, [r5, #0]
 80057b8:	e001      	b.n	80057be <HAL_ADC_PollForConversion+0x22>
    if(Timeout != HAL_MAX_DELAY)
 80057ba:	1c60      	adds	r0, r4, #1
 80057bc:	d125      	bne.n	800580a <HAL_ADC_PollForConversion+0x6e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	0799      	lsls	r1, r3, #30
 80057c2:	d5fa      	bpl.n	80057ba <HAL_ADC_PollForConversion+0x1e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80057c4:	f06f 0312 	mvn.w	r3, #18
 80057c8:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80057cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057d0:	642b      	str	r3, [r5, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057d2:	6893      	ldr	r3, [r2, #8]
 80057d4:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80057d8:	d115      	bne.n	8005806 <HAL_ADC_PollForConversion+0x6a>
 80057da:	7e2b      	ldrb	r3, [r5, #24]
 80057dc:	b99b      	cbnz	r3, 8005806 <HAL_ADC_PollForConversion+0x6a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80057de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057e0:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80057e4:	d002      	beq.n	80057ec <HAL_ADC_PollForConversion+0x50>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80057e6:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80057e8:	055b      	lsls	r3, r3, #21
 80057ea:	d40c      	bmi.n	8005806 <HAL_ADC_PollForConversion+0x6a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80057ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f2:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057f4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80057f6:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80057fa:	d104      	bne.n	8005806 <HAL_ADC_PollForConversion+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057fc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005804:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005806:	2000      	movs	r0, #0
}
 8005808:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800580a:	b124      	cbz	r4, 8005816 <HAL_ADC_PollForConversion+0x7a>
 800580c:	f7ff fe7e 	bl	800550c <HAL_GetTick>
 8005810:	1b80      	subs	r0, r0, r6
 8005812:	42a0      	cmp	r0, r4
 8005814:	d9cf      	bls.n	80057b6 <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005816:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8005818:	2200      	movs	r2, #0
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8005820:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005824:	2003      	movs	r0, #3
 8005826:	e7ed      	b.n	8005804 <HAL_ADC_PollForConversion+0x68>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005828:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800582a:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800582c:	f043 0320 	orr.w	r3, r3, #32
 8005830:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8005832:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8005836:	2001      	movs	r0, #1
}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800583c:	6803      	ldr	r3, [r0, #0]
 800583e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <HAL_ADC_ConfigChannel>:
{
 8005844:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8005846:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800584a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800584c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800584e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005850:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005852:	f000 8095 	beq.w	8005980 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005856:	680d      	ldr	r5, [r1, #0]
 8005858:	688a      	ldr	r2, [r1, #8]
 800585a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800585c:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800585e:	2d09      	cmp	r5, #9
 8005860:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 8005862:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005866:	d829      	bhi.n	80058bc <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005868:	691c      	ldr	r4, [r3, #16]
 800586a:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800586e:	f04f 0c07 	mov.w	ip, #7
 8005872:	fa0c fc06 	lsl.w	ip, ip, r6
 8005876:	ea24 040c 	bic.w	r4, r4, ip
 800587a:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800587c:	691c      	ldr	r4, [r3, #16]
 800587e:	fa02 f606 	lsl.w	r6, r2, r6
 8005882:	4326      	orrs	r6, r4
 8005884:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 8005886:	684e      	ldr	r6, [r1, #4]
 8005888:	2e06      	cmp	r6, #6
 800588a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800588e:	d82a      	bhi.n	80058e6 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005892:	3a05      	subs	r2, #5
 8005894:	241f      	movs	r4, #31
 8005896:	4094      	lsls	r4, r2
 8005898:	ea21 0104 	bic.w	r1, r1, r4
 800589c:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800589e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058a0:	fa07 f202 	lsl.w	r2, r7, r2
 80058a4:	430a      	orrs	r2, r1
 80058a6:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058a8:	4a37      	ldr	r2, [pc, #220]	; (8005988 <HAL_ADC_ConfigChannel+0x144>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02d      	beq.n	800590a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 80058ae:	2300      	movs	r3, #0
 80058b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80058b4:	4618      	mov	r0, r3
}
 80058b6:	b002      	add	sp, #8
 80058b8:	bcf0      	pop	{r4, r5, r6, r7}
 80058ba:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058bc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80058c0:	68dc      	ldr	r4, [r3, #12]
 80058c2:	3e1e      	subs	r6, #30
 80058c4:	f04f 0c07 	mov.w	ip, #7
 80058c8:	fa0c fc06 	lsl.w	ip, ip, r6
 80058cc:	ea24 040c 	bic.w	r4, r4, ip
 80058d0:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058d2:	68dc      	ldr	r4, [r3, #12]
 80058d4:	fa02 f606 	lsl.w	r6, r2, r6
 80058d8:	4326      	orrs	r6, r4
 80058da:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 80058dc:	684e      	ldr	r6, [r1, #4]
 80058de:	2e06      	cmp	r6, #6
 80058e0:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80058e4:	d9d4      	bls.n	8005890 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80058e6:	2e0c      	cmp	r6, #12
 80058e8:	d835      	bhi.n	8005956 <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80058ea:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 80058ee:	211f      	movs	r1, #31
 80058f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f2:	40a1      	lsls	r1, r4
 80058f4:	ea22 0201 	bic.w	r2, r2, r1
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80058fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058fc:	fa07 f204 	lsl.w	r2, r7, r4
 8005900:	430a      	orrs	r2, r1
 8005902:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005904:	4a20      	ldr	r2, [pc, #128]	; (8005988 <HAL_ADC_ConfigChannel+0x144>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d1d1      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x6a>
 800590a:	2d12      	cmp	r5, #18
 800590c:	d031      	beq.n	8005972 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800590e:	f1a5 0310 	sub.w	r3, r5, #16
 8005912:	2b01      	cmp	r3, #1
 8005914:	d8cb      	bhi.n	80058ae <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_ADC_ConfigChannel+0x148>)
 8005918:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800591a:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800591c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005920:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005922:	d1c4      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <HAL_ADC_ConfigChannel+0x14c>)
 8005926:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800592a:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	0c9b      	lsrs	r3, r3, #18
 800593a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005942:	9b01      	ldr	r3, [sp, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0b2      	beq.n	80058ae <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f9      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x104>
 8005954:	e7ab      	b.n	80058ae <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005956:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800595a:	241f      	movs	r4, #31
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	408c      	lsls	r4, r1
 8005960:	ea22 0204 	bic.w	r2, r2, r4
 8005964:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005966:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005968:	fa07 f201 	lsl.w	r2, r7, r1
 800596c:	4322      	orrs	r2, r4
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005970:	e79a      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005972:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800597a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800597e:	e796      	b.n	80058ae <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8005980:	2002      	movs	r0, #2
}
 8005982:	b002      	add	sp, #8
 8005984:	bcf0      	pop	{r4, r5, r6, r7}
 8005986:	4770      	bx	lr
 8005988:	40012000 	.word	0x40012000
 800598c:	40012300 	.word	0x40012300
 8005990:	20000004 	.word	0x20000004

08005994 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005994:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005996:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005998:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800599c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800599e:	0200      	lsls	r0, r0, #8
 80059a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059a4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80059a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80059ac:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80059ae:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	e000ed00 	.word	0xe000ed00

080059b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b8:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <HAL_NVIC_SetPriority+0x64>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059c0:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c2:	f1c3 0507 	rsb	r5, r3, #7
 80059c6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059c8:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059cc:	bf28      	it	cs
 80059ce:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059d0:	2c06      	cmp	r4, #6
 80059d2:	d919      	bls.n	8005a08 <HAL_NVIC_SetPriority+0x50>
 80059d4:	3b03      	subs	r3, #3
 80059d6:	f04f 34ff 	mov.w	r4, #4294967295
 80059da:	409c      	lsls	r4, r3
 80059dc:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	40aa      	lsls	r2, r5
 80059e6:	ea21 0102 	bic.w	r1, r1, r2
 80059ea:	fa01 f203 	lsl.w	r2, r1, r3
 80059ee:	4322      	orrs	r2, r4
 80059f0:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80059f2:	2800      	cmp	r0, #0
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	db0a      	blt.n	8005a0e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80059fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005a00:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005a04:	bc30      	pop	{r4, r5}
 8005a06:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a08:	2400      	movs	r4, #0
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	e7e8      	b.n	80059e0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_NVIC_SetPriority+0x68>)
 8005a10:	f000 000f 	and.w	r0, r0, #15
 8005a14:	4403      	add	r3, r0
 8005a16:	761a      	strb	r2, [r3, #24]
 8005a18:	bc30      	pop	{r4, r5}
 8005a1a:	4770      	bx	lr
 8005a1c:	e000ed00 	.word	0xe000ed00
 8005a20:	e000ecfc 	.word	0xe000ecfc

08005a24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005a24:	2800      	cmp	r0, #0
 8005a26:	db07      	blt.n	8005a38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a28:	f000 011f 	and.w	r1, r0, #31
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	0940      	lsrs	r0, r0, #5
 8005a30:	4a02      	ldr	r2, [pc, #8]	; (8005a3c <HAL_NVIC_EnableIRQ+0x18>)
 8005a32:	408b      	lsls	r3, r1
 8005a34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000e100 	.word	0xe000e100

08005a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8005a44:	f7ff fd62 	bl	800550c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a48:	2c00      	cmp	r4, #0
 8005a4a:	d054      	beq.n	8005af6 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a4c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a4e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005a54:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8005a56:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8005a58:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8005a5c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005a60:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8005a62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a64:	e005      	b.n	8005a72 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a66:	f7ff fd51 	bl	800550c <HAL_GetTick>
 8005a6a:	1b40      	subs	r0, r0, r5
 8005a6c:	2805      	cmp	r0, #5
 8005a6e:	d83b      	bhi.n	8005ae8 <HAL_DMA_Init+0xa8>
 8005a70:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	07d1      	lsls	r1, r2, #31
 8005a76:	d4f6      	bmi.n	8005a66 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a78:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7c:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a80:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a82:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8005a84:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a86:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a88:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a90:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a92:	4835      	ldr	r0, [pc, #212]	; (8005b68 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a94:	4332      	orrs	r2, r6
 8005a96:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a98:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a9c:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a9e:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aa0:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aa4:	d029      	beq.n	8005afa <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005aa8:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005aaa:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005aae:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	482e      	ldr	r0, [pc, #184]	; (8005b6c <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8005ab4:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ab6:	3a10      	subs	r2, #16
 8005ab8:	fba0 1202 	umull	r1, r2, r0, r2
 8005abc:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005abe:	492c      	ldr	r1, [pc, #176]	; (8005b70 <HAL_DMA_Init+0x130>)
 8005ac0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ac4:	5c89      	ldrb	r1, [r1, r2]
 8005ac6:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005ac8:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8005acc:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ace:	bf88      	it	hi
 8005ad0:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad2:	223f      	movs	r2, #63	; 0x3f
 8005ad4:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ad8:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ada:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8005adc:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ade:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae0:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aea:	2220      	movs	r2, #32
 8005aec:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aee:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005af0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
}
 8005af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005afa:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 8005afe:	4301      	orrs	r1, r0
 8005b00:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8005b02:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8005b04:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005b06:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8005b08:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b0c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8005b10:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0cc      	beq.n	8005ab0 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b16:	b17e      	cbz	r6, 8005b38 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b18:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8005b1c:	d016      	beq.n	8005b4c <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b1e:	2d02      	cmp	r5, #2
 8005b20:	d903      	bls.n	8005b2a <HAL_DMA_Init+0xea>
 8005b22:	2d03      	cmp	r5, #3
 8005b24:	d1c4      	bne.n	8005ab0 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b26:	01c2      	lsls	r2, r0, #7
 8005b28:	d5c2      	bpl.n	8005ab0 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8005b2a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b2c:	2240      	movs	r2, #64	; 0x40
 8005b2e:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8005b30:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8005b32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8005b38:	2d01      	cmp	r5, #1
 8005b3a:	d003      	beq.n	8005b44 <HAL_DMA_Init+0x104>
 8005b3c:	d3f3      	bcc.n	8005b26 <HAL_DMA_Init+0xe6>
 8005b3e:	2d02      	cmp	r5, #2
 8005b40:	d1b6      	bne.n	8005ab0 <HAL_DMA_Init+0x70>
 8005b42:	e7f0      	b.n	8005b26 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b44:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8005b48:	d1b2      	bne.n	8005ab0 <HAL_DMA_Init+0x70>
 8005b4a:	e7ee      	b.n	8005b2a <HAL_DMA_Init+0xea>
    switch (tmp)
 8005b4c:	2d03      	cmp	r5, #3
 8005b4e:	d8af      	bhi.n	8005ab0 <HAL_DMA_Init+0x70>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_DMA_Init+0x118>)
 8005b52:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b2b 	.word	0x08005b2b
 8005b5c:	08005b27 	.word	0x08005b27
 8005b60:	08005b2b 	.word	0x08005b2b
 8005b64:	08005b45 	.word	0x08005b45
 8005b68:	f010803f 	.word	0xf010803f
 8005b6c:	aaaaaaab 	.word	0xaaaaaaab
 8005b70:	08011acc 	.word	0x08011acc

08005b74 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d037      	beq.n	8005be8 <HAL_DMA_DeInit+0x74>
 8005b78:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005b7a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8005b7e:	b2c0      	uxtb	r0, r0
 8005b80:	2802      	cmp	r0, #2
 8005b82:	d033      	beq.n	8005bec <HAL_DMA_DeInit+0x78>
  __HAL_DMA_DISABLE(hdma);
 8005b84:	681a      	ldr	r2, [r3, #0]
{
 8005b86:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b88:	b2d1      	uxtb	r1, r2
 8005b8a:	4d19      	ldr	r5, [pc, #100]	; (8005bf0 <HAL_DMA_DeInit+0x7c>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b8c:	4c19      	ldr	r4, [pc, #100]	; (8005bf4 <HAL_DMA_DeInit+0x80>)
  __HAL_DMA_DISABLE(hdma);
 8005b8e:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b90:	3910      	subs	r1, #16
 8005b92:	fba5 5101 	umull	r5, r1, r5, r1
 8005b96:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8005b98:	f020 0001 	bic.w	r0, r0, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b9c:	5c65      	ldrb	r5, [r4, r1]
  __HAL_DMA_DISABLE(hdma);
 8005b9e:	6010      	str	r0, [r2, #0]
 8005ba0:	f422 747f 	bic.w	r4, r2, #1020	; 0x3fc
 8005ba4:	f024 0403 	bic.w	r4, r4, #3
  if (stream_number > 3U)
 8005ba8:	2903      	cmp	r1, #3
  hdma->Instance->CR   = 0U;
 8005baa:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bae:	bf88      	it	hi
 8005bb0:	3404      	addhi	r4, #4
  hdma->Instance->FCR  = 0x00000021U;
 8005bb2:	2621      	movs	r6, #33	; 0x21
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb4:	213f      	movs	r1, #63	; 0x3f
  hdma->Instance->CR   = 0U;
 8005bb6:	6010      	str	r0, [r2, #0]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb8:	40a9      	lsls	r1, r5
  hdma->Instance->NDTR = 0U;
 8005bba:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8005bbc:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8005bbe:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8005bc0:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8005bc2:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 8005bc4:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bc6:	65dd      	str	r5, [r3, #92]	; 0x5c
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bc8:	659c      	str	r4, [r3, #88]	; 0x58
  hdma->XferHalfCpltCallback = NULL;
 8005bca:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8005bce:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8005bd2:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005bd6:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd8:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8005be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8005be4:	bc70      	pop	{r4, r5, r6}
 8005be6:	4770      	bx	lr
    return HAL_ERROR;
 8005be8:	2001      	movs	r0, #1
 8005bea:	4770      	bx	lr
}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	aaaaaaab 	.word	0xaaaaaaab
 8005bf4:	08011acc 	.word	0x08011acc

08005bf8 <HAL_DMA_Start_IT>:
{
 8005bf8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8005bfa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005bfe:	2c01      	cmp	r4, #1
 8005c00:	d035      	beq.n	8005c6e <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c02:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c06:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005c08:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c0a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8005c0c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c10:	d127      	bne.n	8005c62 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c12:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c14:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c16:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c18:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c1c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c1e:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c20:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c22:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c26:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c28:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005c2a:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8005c2c:	bf0a      	itet	eq
 8005c2e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005c30:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005c32:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c34:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8005c36:	bf18      	it	ne
 8005c38:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c3a:	233f      	movs	r3, #63	; 0x3f
 8005c3c:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8005c3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c40:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f043 0316 	orr.w	r3, r3, #22
 8005c48:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005c4a:	b11a      	cbz	r2, 8005c54 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	2000      	movs	r0, #0
}
 8005c5e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c60:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8005c62:	2300      	movs	r3, #0
 8005c64:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8005c68:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8005c6a:	2002      	movs	r0, #2
}
 8005c6c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005c6e:	2002      	movs	r0, #2
}
 8005c70:	bcf0      	pop	{r4, r5, r6, r7}
 8005c72:	4770      	bx	lr

08005c74 <HAL_DMA_Abort>:
{
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c78:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005c7a:	f7ff fc47 	bl	800550c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c7e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d006      	beq.n	8005c94 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c86:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005c88:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c8a:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005c8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005c90:	2001      	movs	r0, #1
}
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c94:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c96:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	f022 0216 	bic.w	r2, r2, #22
 8005c9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005caa:	b331      	cbz	r1, 8005cfa <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f022 0208 	bic.w	r2, r2, #8
 8005cb2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cbc:	e005      	b.n	8005cca <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cbe:	f7ff fc25 	bl	800550c <HAL_GetTick>
 8005cc2:	1b40      	subs	r0, r0, r5
 8005cc4:	2805      	cmp	r0, #5
 8005cc6:	d80f      	bhi.n	8005ce8 <HAL_DMA_Abort+0x74>
 8005cc8:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f013 0301 	ands.w	r3, r3, #1
 8005cd0:	d1f5      	bne.n	8005cbe <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cd2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005cd4:	223f      	movs	r2, #63	; 0x3f
 8005cd6:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8005cd8:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cda:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 8005cdc:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 8005cde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005ce2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ce8:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8005cea:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cec:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cee:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005cf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cf4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005cf8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cfa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d1d5      	bne.n	8005cac <HAL_DMA_Abort+0x38>
 8005d00:	e7d8      	b.n	8005cb4 <HAL_DMA_Abort+0x40>
 8005d02:	bf00      	nop

08005d04 <HAL_DMA_IRQHandler>:
{
 8005d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d06:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8005d08:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d0a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8005d0c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d0e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8005d10:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d12:	4965      	ldr	r1, [pc, #404]	; (8005ea8 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d14:	2208      	movs	r2, #8
 8005d16:	409a      	lsls	r2, r3
 8005d18:	422a      	tst	r2, r5
{
 8005d1a:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d1c:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d1e:	d003      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d20:	6801      	ldr	r1, [r0, #0]
 8005d22:	6808      	ldr	r0, [r1, #0]
 8005d24:	0740      	lsls	r0, r0, #29
 8005d26:	d459      	bmi.n	8005ddc <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	422a      	tst	r2, r5
 8005d2e:	d003      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d30:	6821      	ldr	r1, [r4, #0]
 8005d32:	6949      	ldr	r1, [r1, #20]
 8005d34:	0608      	lsls	r0, r1, #24
 8005d36:	d474      	bmi.n	8005e22 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d38:	2204      	movs	r2, #4
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	422a      	tst	r2, r5
 8005d3e:	d003      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d40:	6821      	ldr	r1, [r4, #0]
 8005d42:	6809      	ldr	r1, [r1, #0]
 8005d44:	0789      	lsls	r1, r1, #30
 8005d46:	d466      	bmi.n	8005e16 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d48:	2210      	movs	r2, #16
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	422a      	tst	r2, r5
 8005d4e:	d003      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d50:	6821      	ldr	r1, [r4, #0]
 8005d52:	6808      	ldr	r0, [r1, #0]
 8005d54:	0700      	lsls	r0, r0, #28
 8005d56:	d44b      	bmi.n	8005df0 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d58:	2220      	movs	r2, #32
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	422a      	tst	r2, r5
 8005d5e:	d014      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d60:	6821      	ldr	r1, [r4, #0]
 8005d62:	6808      	ldr	r0, [r1, #0]
 8005d64:	06c0      	lsls	r0, r0, #27
 8005d66:	d510      	bpl.n	8005d8a <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d68:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d6a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005d6e:	2a05      	cmp	r2, #5
 8005d70:	d063      	beq.n	8005e3a <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d72:	680b      	ldr	r3, [r1, #0]
 8005d74:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d78:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d7a:	d07e      	beq.n	8005e7a <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d7c:	0319      	lsls	r1, r3, #12
 8005d7e:	f140 8089 	bpl.w	8005e94 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8005d82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d84:	b10b      	cbz	r3, 8005d8a <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8005d86:	4620      	mov	r0, r4
 8005d88:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d8c:	b323      	cbz	r3, 8005dd8 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	d51a      	bpl.n	8005dca <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d94:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8005d96:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005d9c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d9e:	4943      	ldr	r1, [pc, #268]	; (8005eac <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8005da0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005da4:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8005da8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005daa:	0ab6      	lsrs	r6, r6, #10
 8005dac:	e002      	b.n	8005db4 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	07db      	lsls	r3, r3, #31
 8005db2:	d504      	bpl.n	8005dbe <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8005db4:	9b01      	ldr	r3, [sp, #4]
 8005db6:	3301      	adds	r3, #1
 8005db8:	42b3      	cmp	r3, r6
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	d9f7      	bls.n	8005dae <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8005dbe:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005dc0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8005dc2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005dc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005dcc:	b123      	cbz	r3, 8005dd8 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8005dce:	4620      	mov	r0, r4
}
 8005dd0:	b003      	add	sp, #12
 8005dd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8005dd6:	4718      	bx	r3
}
 8005dd8:	b003      	add	sp, #12
 8005dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ddc:	6808      	ldr	r0, [r1, #0]
 8005dde:	f020 0004 	bic.w	r0, r0, #4
 8005de2:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005de4:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005de6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	6562      	str	r2, [r4, #84]	; 0x54
 8005dee:	e79b      	b.n	8005d28 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005df0:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005df2:	680a      	ldr	r2, [r1, #0]
 8005df4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005df8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dfa:	d118      	bne.n	8005e2e <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dfc:	05d2      	lsls	r2, r2, #23
 8005dfe:	d403      	bmi.n	8005e08 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e00:	680a      	ldr	r2, [r1, #0]
 8005e02:	f022 0208 	bic.w	r2, r2, #8
 8005e06:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005e08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	d0a4      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4790      	blx	r2
 8005e12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e14:	e7a0      	b.n	8005d58 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e16:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e1a:	f042 0204 	orr.w	r2, r2, #4
 8005e1e:	6562      	str	r2, [r4, #84]	; 0x54
 8005e20:	e792      	b.n	8005d48 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e22:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e26:	f042 0202 	orr.w	r2, r2, #2
 8005e2a:	6562      	str	r2, [r4, #84]	; 0x54
 8005e2c:	e784      	b.n	8005d38 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e2e:	0311      	lsls	r1, r2, #12
 8005e30:	d5ea      	bpl.n	8005e08 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	d1ea      	bne.n	8005e0e <HAL_DMA_IRQHandler+0x10a>
 8005e38:	e78e      	b.n	8005d58 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e3a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e3c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e3e:	f022 0216 	bic.w	r2, r2, #22
 8005e42:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e44:	694a      	ldr	r2, [r1, #20]
 8005e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e4a:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e4c:	b338      	cbz	r0, 8005e9e <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e4e:	680a      	ldr	r2, [r1, #0]
 8005e50:	f022 0208 	bic.w	r2, r2, #8
 8005e54:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e56:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8005e58:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8005e5e:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005e60:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e62:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005e64:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005e68:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d0b3      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8005e70:	4620      	mov	r0, r4
}
 8005e72:	b003      	add	sp, #12
 8005e74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8005e78:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e7a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005e7e:	d180      	bne.n	8005d82 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e80:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e82:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e84:	f022 0210 	bic.w	r2, r2, #16
 8005e88:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8005e8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005e8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8005e92:	e776      	b.n	8005d82 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8005e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f47f af75 	bne.w	8005d86 <HAL_DMA_IRQHandler+0x82>
 8005e9c:	e775      	b.n	8005d8a <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	d1d4      	bne.n	8005e4e <HAL_DMA_IRQHandler+0x14a>
 8005ea4:	e7d7      	b.n	8005e56 <HAL_DMA_IRQHandler+0x152>
 8005ea6:	bf00      	nop
 8005ea8:	20000004 	.word	0x20000004
 8005eac:	1b4e81b5 	.word	0x1b4e81b5

08005eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eb4:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eb8:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 80060b0 <HAL_GPIO_Init+0x200>
{
 8005ebc:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ebe:	2400      	movs	r4, #0
 8005ec0:	e003      	b.n	8005eca <HAL_GPIO_Init+0x1a>
 8005ec2:	3401      	adds	r4, #1
 8005ec4:	2c10      	cmp	r4, #16
 8005ec6:	f000 808c 	beq.w	8005fe2 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ece:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d1f5      	bne.n	8005ec2 <HAL_GPIO_Init+0x12>
 8005ed6:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005eda:	f026 0910 	bic.w	r9, r6, #16
 8005ede:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	f109 37ff 	add.w	r7, r9, #4294967295
 8005ee8:	fa03 f30c 	lsl.w	r3, r3, ip
 8005eec:	2f01      	cmp	r7, #1
 8005eee:	ea6f 0303 	mvn.w	r3, r3
 8005ef2:	fa05 f50c 	lsl.w	r5, r5, ip
 8005ef6:	d977      	bls.n	8005fe8 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8005ef8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005efa:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005efc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8005efe:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8005f00:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f02:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f06:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f08:	fa05 f30c 	lsl.w	r3, r5, ip
 8005f0c:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8005f0e:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f10:	00f3      	lsls	r3, r6, #3
 8005f12:	d5d6      	bpl.n	8005ec2 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f14:	4d5f      	ldr	r5, [pc, #380]	; (8006094 <HAL_GPIO_Init+0x1e4>)
 8005f16:	2300      	movs	r3, #0
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f20:	646b      	str	r3, [r5, #68]	; 0x44
 8005f22:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8005f24:	f024 0303 	bic.w	r3, r4, #3
 8005f28:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8005f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f30:	9501      	str	r5, [sp, #4]
 8005f32:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f36:	f004 0503 	and.w	r5, r4, #3
 8005f3a:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f3e:	4d56      	ldr	r5, [pc, #344]	; (8006098 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f40:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005f42:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f46:	270f      	movs	r7, #15
 8005f48:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f4c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f4e:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f52:	d01f      	beq.n	8005f94 <HAL_GPIO_Init+0xe4>
 8005f54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f58:	42a8      	cmp	r0, r5
 8005f5a:	d076      	beq.n	800604a <HAL_GPIO_Init+0x19a>
 8005f5c:	4d4f      	ldr	r5, [pc, #316]	; (800609c <HAL_GPIO_Init+0x1ec>)
 8005f5e:	42a8      	cmp	r0, r5
 8005f60:	d079      	beq.n	8006056 <HAL_GPIO_Init+0x1a6>
 8005f62:	4d4f      	ldr	r5, [pc, #316]	; (80060a0 <HAL_GPIO_Init+0x1f0>)
 8005f64:	42a8      	cmp	r0, r5
 8005f66:	d07c      	beq.n	8006062 <HAL_GPIO_Init+0x1b2>
 8005f68:	4d4e      	ldr	r5, [pc, #312]	; (80060a4 <HAL_GPIO_Init+0x1f4>)
 8005f6a:	42a8      	cmp	r0, r5
 8005f6c:	d07f      	beq.n	800606e <HAL_GPIO_Init+0x1be>
 8005f6e:	4d4e      	ldr	r5, [pc, #312]	; (80060a8 <HAL_GPIO_Init+0x1f8>)
 8005f70:	42a8      	cmp	r0, r5
 8005f72:	f000 8082 	beq.w	800607a <HAL_GPIO_Init+0x1ca>
 8005f76:	4d4d      	ldr	r5, [pc, #308]	; (80060ac <HAL_GPIO_Init+0x1fc>)
 8005f78:	42a8      	cmp	r0, r5
 8005f7a:	f000 8084 	beq.w	8006086 <HAL_GPIO_Init+0x1d6>
 8005f7e:	f8df c134 	ldr.w	ip, [pc, #308]	; 80060b4 <HAL_GPIO_Init+0x204>
 8005f82:	4560      	cmp	r0, ip
 8005f84:	bf0c      	ite	eq
 8005f86:	f04f 0c07 	moveq.w	ip, #7
 8005f8a:	f04f 0c08 	movne.w	ip, #8
 8005f8e:	fa0c f509 	lsl.w	r5, ip, r9
 8005f92:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f94:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8005f96:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8005f9a:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f9c:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8005f9e:	bf54      	ite	pl
 8005fa0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8005fa2:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8005fa4:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8005fa8:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fac:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8005fae:	bf54      	ite	pl
 8005fb0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8005fb2:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8005fb4:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fb8:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fbc:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8005fbe:	bf54      	ite	pl
 8005fc0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8005fc2:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8005fc4:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8005fc8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fcc:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fce:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8005fd2:	bf54      	ite	pl
 8005fd4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8005fd6:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fd8:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8005fda:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fde:	f47f af74 	bne.w	8005eca <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8005fe2:	b003      	add	sp, #12
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8005fe8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fea:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fee:	68cf      	ldr	r7, [r1, #12]
 8005ff0:	fa07 f70c 	lsl.w	r7, r7, ip
 8005ff4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005ff8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005ffa:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ffe:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006002:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006006:	40a7      	lsls	r7, r4
 8006008:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800600c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800600e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006010:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006012:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006014:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8006018:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800601a:	f47f af71 	bne.w	8005f00 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800601e:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8006022:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006026:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800602a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800602e:	00bf      	lsls	r7, r7, #2
 8006030:	f04f 0b0f 	mov.w	fp, #15
 8006034:	fa0b fb07 	lsl.w	fp, fp, r7
 8006038:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800603c:	690d      	ldr	r5, [r1, #16]
 800603e:	40bd      	lsls	r5, r7
 8006040:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8006044:	f8c9 5020 	str.w	r5, [r9, #32]
 8006048:	e75a      	b.n	8005f00 <HAL_GPIO_Init+0x50>
 800604a:	f04f 0c01 	mov.w	ip, #1
 800604e:	fa0c f509 	lsl.w	r5, ip, r9
 8006052:	432f      	orrs	r7, r5
 8006054:	e79e      	b.n	8005f94 <HAL_GPIO_Init+0xe4>
 8006056:	f04f 0c02 	mov.w	ip, #2
 800605a:	fa0c f509 	lsl.w	r5, ip, r9
 800605e:	432f      	orrs	r7, r5
 8006060:	e798      	b.n	8005f94 <HAL_GPIO_Init+0xe4>
 8006062:	f04f 0c03 	mov.w	ip, #3
 8006066:	fa0c f509 	lsl.w	r5, ip, r9
 800606a:	432f      	orrs	r7, r5
 800606c:	e792      	b.n	8005f94 <HAL_GPIO_Init+0xe4>
 800606e:	f04f 0c04 	mov.w	ip, #4
 8006072:	fa0c f509 	lsl.w	r5, ip, r9
 8006076:	432f      	orrs	r7, r5
 8006078:	e78c      	b.n	8005f94 <HAL_GPIO_Init+0xe4>
 800607a:	f04f 0c05 	mov.w	ip, #5
 800607e:	fa0c f509 	lsl.w	r5, ip, r9
 8006082:	432f      	orrs	r7, r5
 8006084:	e786      	b.n	8005f94 <HAL_GPIO_Init+0xe4>
 8006086:	f04f 0c06 	mov.w	ip, #6
 800608a:	fa0c f509 	lsl.w	r5, ip, r9
 800608e:	432f      	orrs	r7, r5
 8006090:	e780      	b.n	8005f94 <HAL_GPIO_Init+0xe4>
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020800 	.word	0x40020800
 80060a0:	40020c00 	.word	0x40020c00
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40021400 	.word	0x40021400
 80060ac:	40021800 	.word	0x40021800
 80060b0:	40013c00 	.word	0x40013c00
 80060b4:	40021c00 	.word	0x40021c00

080060b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060bc:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80060be:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80061fc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80060c2:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8006200 <HAL_GPIO_DeInit+0x148>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80060c6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8006204 <HAL_GPIO_DeInit+0x14c>
 80060ca:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8006208 <HAL_GPIO_DeInit+0x150>
 80060ce:	e002      	b.n	80060d6 <HAL_GPIO_DeInit+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060d0:	3301      	adds	r3, #1
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d06e      	beq.n	80061b4 <HAL_GPIO_DeInit+0xfc>
    ioposition = 0x01U << position;
 80060d6:	2401      	movs	r4, #1
 80060d8:	fa04 f503 	lsl.w	r5, r4, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80060dc:	ea05 0601 	and.w	r6, r5, r1
    if(iocurrent == ioposition)
 80060e0:	42b5      	cmp	r5, r6
 80060e2:	d1f5      	bne.n	80060d0 <HAL_GPIO_DeInit+0x18>
 80060e4:	f023 0703 	bic.w	r7, r3, #3
 80060e8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80060ec:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80060f0:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80060f4:	f8d7 b008 	ldr.w	fp, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80060f8:	0092      	lsls	r2, r2, #2
 80060fa:	f04f 0c0f 	mov.w	ip, #15
 80060fe:	fa0c fc02 	lsl.w	ip, ip, r2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006102:	4540      	cmp	r0, r8
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006104:	ea0c 0b0b 	and.w	fp, ip, fp
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006108:	d016      	beq.n	8006138 <HAL_GPIO_DeInit+0x80>
 800610a:	4548      	cmp	r0, r9
 800610c:	d011      	beq.n	8006132 <HAL_GPIO_DeInit+0x7a>
 800610e:	4550      	cmp	r0, sl
 8006110:	d052      	beq.n	80061b8 <HAL_GPIO_DeInit+0x100>
 8006112:	4c35      	ldr	r4, [pc, #212]	; (80061e8 <HAL_GPIO_DeInit+0x130>)
 8006114:	42a0      	cmp	r0, r4
 8006116:	d053      	beq.n	80061c0 <HAL_GPIO_DeInit+0x108>
 8006118:	4c34      	ldr	r4, [pc, #208]	; (80061ec <HAL_GPIO_DeInit+0x134>)
 800611a:	42a0      	cmp	r0, r4
 800611c:	d054      	beq.n	80061c8 <HAL_GPIO_DeInit+0x110>
 800611e:	4c34      	ldr	r4, [pc, #208]	; (80061f0 <HAL_GPIO_DeInit+0x138>)
 8006120:	42a0      	cmp	r0, r4
 8006122:	d055      	beq.n	80061d0 <HAL_GPIO_DeInit+0x118>
 8006124:	4c33      	ldr	r4, [pc, #204]	; (80061f4 <HAL_GPIO_DeInit+0x13c>)
 8006126:	42a0      	cmp	r0, r4
 8006128:	d056      	beq.n	80061d8 <HAL_GPIO_DeInit+0x120>
 800612a:	4c33      	ldr	r4, [pc, #204]	; (80061f8 <HAL_GPIO_DeInit+0x140>)
 800612c:	42a0      	cmp	r0, r4
 800612e:	d057      	beq.n	80061e0 <HAL_GPIO_DeInit+0x128>
 8006130:	2408      	movs	r4, #8
 8006132:	fa04 f202 	lsl.w	r2, r4, r2
 8006136:	e000      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 8006138:	2200      	movs	r2, #0
 800613a:	4593      	cmp	fp, r2
 800613c:	d118      	bne.n	8006170 <HAL_GPIO_DeInit+0xb8>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800613e:	f8de 2000 	ldr.w	r2, [lr]
 8006142:	43f6      	mvns	r6, r6
 8006144:	4032      	ands	r2, r6
 8006146:	f8ce 2000 	str.w	r2, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800614a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800614e:	4032      	ands	r2, r6
 8006150:	f8ce 2004 	str.w	r2, [lr, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006154:	f8de 2008 	ldr.w	r2, [lr, #8]
 8006158:	4032      	ands	r2, r6
 800615a:	f8ce 2008 	str.w	r2, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800615e:	f8de 200c 	ldr.w	r2, [lr, #12]
 8006162:	4016      	ands	r6, r2
 8006164:	f8ce 600c 	str.w	r6, [lr, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	ea22 020c 	bic.w	r2, r2, ip
 800616e:	60ba      	str	r2, [r7, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006170:	005c      	lsls	r4, r3, #1
 8006172:	2203      	movs	r2, #3
 8006174:	40a2      	lsls	r2, r4
 8006176:	6804      	ldr	r4, [r0, #0]
 8006178:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800617a:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800617c:	4014      	ands	r4, r2
 800617e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006182:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006184:	f003 0407 	and.w	r4, r3, #7
 8006188:	6a37      	ldr	r7, [r6, #32]
 800618a:	00a4      	lsls	r4, r4, #2
 800618c:	f04f 0c0f 	mov.w	ip, #15
 8006190:	fa0c f404 	lsl.w	r4, ip, r4
 8006194:	ea27 0404 	bic.w	r4, r7, r4
 8006198:	6234      	str	r4, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800619a:	68c4      	ldr	r4, [r0, #12]
 800619c:	4014      	ands	r4, r2
 800619e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061a0:	6844      	ldr	r4, [r0, #4]
 80061a2:	ea24 0505 	bic.w	r5, r4, r5
 80061a6:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061a8:	6884      	ldr	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061aa:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061ac:	4022      	ands	r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061ae:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061b0:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b2:	d190      	bne.n	80060d6 <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	2402      	movs	r4, #2
 80061ba:	fa04 f202 	lsl.w	r2, r4, r2
 80061be:	e7bc      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 80061c0:	2403      	movs	r4, #3
 80061c2:	fa04 f202 	lsl.w	r2, r4, r2
 80061c6:	e7b8      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 80061c8:	2404      	movs	r4, #4
 80061ca:	fa04 f202 	lsl.w	r2, r4, r2
 80061ce:	e7b4      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 80061d0:	2405      	movs	r4, #5
 80061d2:	fa04 f202 	lsl.w	r2, r4, r2
 80061d6:	e7b0      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 80061d8:	2406      	movs	r4, #6
 80061da:	fa04 f202 	lsl.w	r2, r4, r2
 80061de:	e7ac      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 80061e0:	2407      	movs	r4, #7
 80061e2:	fa04 f202 	lsl.w	r2, r4, r2
 80061e6:	e7a8      	b.n	800613a <HAL_GPIO_DeInit+0x82>
 80061e8:	40020c00 	.word	0x40020c00
 80061ec:	40021000 	.word	0x40021000
 80061f0:	40021400 	.word	0x40021400
 80061f4:	40021800 	.word	0x40021800
 80061f8:	40021c00 	.word	0x40021c00
 80061fc:	40020000 	.word	0x40020000
 8006200:	40013c00 	.word	0x40013c00
 8006204:	40020400 	.word	0x40020400
 8006208:	40020800 	.word	0x40020800

0800620c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800620c:	6903      	ldr	r3, [r0, #16]
 800620e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006210:	bf14      	ite	ne
 8006212:	2001      	movne	r0, #1
 8006214:	2000      	moveq	r0, #0
 8006216:	4770      	bx	lr

08006218 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006218:	b902      	cbnz	r2, 800621c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800621a:	0409      	lsls	r1, r1, #16
 800621c:	6181      	str	r1, [r0, #24]
  }
}
 800621e:	4770      	bx	lr

08006220 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006220:	6943      	ldr	r3, [r0, #20]
 8006222:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006226:	bf08      	it	eq
 8006228:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800622a:	6181      	str	r1, [r0, #24]
  }
}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006234:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 8006238:	b084      	sub	sp, #16
  __HAL_LOCK(hhcd);
 800623a:	2c01      	cmp	r4, #1
{
 800623c:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8006240:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8006244:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8006248:	d02b      	beq.n	80062a2 <HAL_HCD_HC_Init+0x72>
 800624a:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 800624c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8006250:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006254:	f04f 0800 	mov.w	r8, #0
  __HAL_LOCK(hhcd);
 8006258:	2001      	movs	r0, #1
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800625a:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 800625e:	f885 02b8 	strb.w	r0, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006262:	f002 067f 	and.w	r6, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006266:	bf08      	it	eq
 8006268:	4640      	moveq	r0, r8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800626a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  hhcd->hc[ch_num].dev_addr = dev_address;
 800626e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8006272:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8006276:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800627a:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
    hhcd->hc[ch_num].ep_is_in = 1U;
 800627e:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 8006282:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 8006286:	6828      	ldr	r0, [r5, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006288:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  status =  USB_HC_Init(hhcd->Instance,
 800628c:	e9cd e901 	strd	lr, r9, [sp, #4]
 8006290:	f8cd c000 	str.w	ip, [sp]
 8006294:	f002 fd0c 	bl	8008cb0 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006298:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 800629c:	b004      	add	sp, #16
 800629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 80062a2:	2002      	movs	r0, #2
}
 80062a4:	b004      	add	sp, #16
 80062a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062aa:	bf00      	nop

080062ac <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80062ac:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d00b      	beq.n	80062cc <HAL_HCD_HC_Halt+0x20>
{
 80062b4:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80062b6:	2301      	movs	r3, #1
 80062b8:	4604      	mov	r4, r0
 80062ba:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	f002 fe76 	bl	8008fb0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80062c4:	2000      	movs	r0, #0
 80062c6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 80062ca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80062cc:	2002      	movs	r0, #2
}
 80062ce:	4770      	bx	lr

080062d0 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d04a      	beq.n	800636a <HAL_HCD_Init+0x9a>
{
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80062d8:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80062dc:	6804      	ldr	r4, [r0, #0]
{
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	4607      	mov	r7, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80062e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d039      	beq.n	800635e <HAL_HCD_Init+0x8e>
 80062ea:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 80062ec:	2303      	movs	r3, #3
 80062ee:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80062f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80062f4:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80062f6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 80062fa:	bf08      	it	eq
 80062fc:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80062fe:	f002 fba3 	bl	8008a48 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006302:	f854 6b10 	ldr.w	r6, [r4], #16
 8006306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006308:	466d      	mov	r5, sp
 800630a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800630c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800630e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006310:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006314:	e885 0003 	stmia.w	r5, {r0, r1}
 8006318:	f107 0804 	add.w	r8, r7, #4
 800631c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8006320:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006322:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006324:	f002 fb44 	bl	80089b0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006328:	2101      	movs	r1, #1
 800632a:	6838      	ldr	r0, [r7, #0]
 800632c:	f002 fb94 	bl	8008a58 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006330:	f856 cb10 	ldr.w	ip, [r6], #16
 8006334:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006336:	466d      	mov	r5, sp
 8006338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800633a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800633c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800633e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006342:	e885 0003 	stmia.w	r5, {r0, r1}
 8006346:	4660      	mov	r0, ip
 8006348:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800634c:	f002 fc18 	bl	8008b80 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8006350:	2301      	movs	r3, #1
  return HAL_OK;
 8006352:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8006354:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8006358:	b00a      	add	sp, #40	; 0x28
 800635a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 800635e:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8006362:	f008 fdc1 	bl	800eee8 <HAL_HCD_MspInit>
 8006366:	6838      	ldr	r0, [r7, #0]
 8006368:	e7c0      	b.n	80062ec <HAL_HCD_Init+0x1c>
    return HAL_ERROR;
 800636a:	2001      	movs	r0, #1
}
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006370:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8006372:	008c      	lsls	r4, r1, #2
 8006374:	1865      	adds	r5, r4, r1
 8006376:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 800637a:	f89d c014 	ldrb.w	ip, [sp, #20]
 800637e:	9f06      	ldr	r7, [sp, #24]
 8006380:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8006384:	f89d e020 	ldrb.w	lr, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006388:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800638c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 8006390:	f1bc 0f00 	cmp.w	ip, #0
 8006394:	d122      	bne.n	80063dc <HAL_HCD_HC_SubmitRequest+0x6c>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006396:	f04f 0c03 	mov.w	ip, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800639a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 800639c:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80063a0:	f885 c042 	strb.w	ip, [r5, #66]	; 0x42
  switch (ep_type)
 80063a4:	d024      	beq.n	80063f0 <HAL_HCD_HC_SubmitRequest+0x80>
 80063a6:	4563      	cmp	r3, ip
 80063a8:	d022      	beq.n	80063f0 <HAL_HCD_HC_SubmitRequest+0x80>
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d02b      	beq.n	8006406 <HAL_HCD_HC_SubmitRequest+0x96>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80063ae:	1863      	adds	r3, r4, r1
 80063b0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063b4:	2228      	movs	r2, #40	; 0x28
  hhcd->hc[ch_num].ch_num = ch_num;
 80063b6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80063ba:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063bc:	fb02 0101 	mla	r1, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 80063c0:	e9c3 7611 	strd	r7, r6, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063c4:	7c02      	ldrb	r2, [r0, #16]
 80063c6:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80063c8:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80063cc:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80063ce:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063d2:	3138      	adds	r1, #56	; 0x38
}
 80063d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063d8:	f002 bd0a 	b.w	8008df0 <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063dc:	f04f 0e02 	mov.w	lr, #2
 80063e0:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  switch (ep_type)
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d8e2      	bhi.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
 80063e8:	e8df f003 	tbb	[pc, r3]
 80063ec:	02020d1c 	.word	0x02020d1c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80063f0:	1863      	adds	r3, r4, r1
 80063f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 80063f6:	b96a      	cbnz	r2, 8006414 <HAL_HCD_HC_SubmitRequest+0xa4>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80063f8:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 80063fc:	b13d      	cbz	r5, 800640e <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006404:	e7d3      	b.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006406:	1863      	adds	r3, r4, r1
 8006408:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8006412:	e7cc      	b.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006414:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006418:	2a00      	cmp	r2, #0
 800641a:	d0f8      	beq.n	800640e <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006422:	e7c4      	b.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006424:	f1bc 0f01 	cmp.w	ip, #1
 8006428:	d1c1      	bne.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1bf      	bne.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
          hhcd->hc[ch_num].toggle_out = 1U;
 800642e:	1863      	adds	r3, r4, r1
 8006430:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (length == 0U)
 8006434:	b946      	cbnz	r6, 8006448 <HAL_HCD_HC_SubmitRequest+0xd8>
          hhcd->hc[ch_num].toggle_out = 1U;
 8006436:	f883 c051 	strb.w	ip, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800643a:	1863      	adds	r3, r4, r1
 800643c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006446:	e7b2      	b.n	80063ae <HAL_HCD_HC_SubmitRequest+0x3e>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006448:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 800644c:	2d00      	cmp	r5, #0
 800644e:	d0de      	beq.n	800640e <HAL_HCD_HC_SubmitRequest+0x9e>
 8006450:	e7f3      	b.n	800643a <HAL_HCD_HC_SubmitRequest+0xca>
 8006452:	bf00      	nop

08006454 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006458:	6805      	ldr	r5, [r0, #0]
{
 800645a:	b085      	sub	sp, #20
 800645c:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800645e:	4628      	mov	r0, r5
 8006460:	f002 fb28 	bl	8008ab4 <USB_GetMode>
 8006464:	2801      	cmp	r0, #1
 8006466:	d002      	beq.n	800646e <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 8006468:	b005      	add	sp, #20
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	f002 fb1c 	bl	8008aac <USB_ReadInterrupts>
 8006474:	2800      	cmp	r0, #0
 8006476:	d0f7      	beq.n	8006468 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	f002 fb17 	bl	8008aac <USB_ReadInterrupts>
 800647e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006482:	6820      	ldr	r0, [r4, #0]
 8006484:	bf1c      	itt	ne
 8006486:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800648a:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800648c:	f002 fb0e 	bl	8008aac <USB_ReadInterrupts>
 8006490:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	bf1c      	itt	ne
 8006498:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
 800649c:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800649e:	f002 fb05 	bl	8008aac <USB_ReadInterrupts>
 80064a2:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	bf1c      	itt	ne
 80064aa:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80064ae:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80064b0:	f002 fafc 	bl	8008aac <USB_ReadInterrupts>
 80064b4:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80064b8:	6820      	ldr	r0, [r4, #0]
 80064ba:	bf1c      	itt	ne
 80064bc:	2302      	movne	r3, #2
 80064be:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80064c0:	f002 faf4 	bl	8008aac <USB_ReadInterrupts>
 80064c4:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80064c8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80064ca:	d150      	bne.n	800656e <HAL_HCD_IRQHandler+0x11a>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80064cc:	f002 faee 	bl	8008aac <USB_ReadInterrupts>
 80064d0:	01c2      	lsls	r2, r0, #7
 80064d2:	f100 80ea 	bmi.w	80066aa <HAL_HCD_IRQHandler+0x256>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	f002 fae8 	bl	8008aac <USB_ReadInterrupts>
 80064dc:	0703      	lsls	r3, r0, #28
 80064de:	f100 80dd 	bmi.w	800669c <HAL_HCD_IRQHandler+0x248>
 80064e2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80064e4:	f002 fae2 	bl	8008aac <USB_ReadInterrupts>
 80064e8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80064ec:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80064ee:	d14e      	bne.n	800658e <HAL_HCD_IRQHandler+0x13a>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80064f0:	f002 fadc 	bl	8008aac <USB_ReadInterrupts>
 80064f4:	06c3      	lsls	r3, r0, #27
 80064f6:	d5b7      	bpl.n	8006468 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064f8:	6825      	ldr	r5, [r4, #0]
 80064fa:	69ab      	ldr	r3, [r5, #24]
 80064fc:	f023 0310 	bic.w	r3, r3, #16
 8006500:	61ab      	str	r3, [r5, #24]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006502:	6a2e      	ldr	r6, [r5, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006504:	f3c6 4243 	ubfx	r2, r6, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;

  switch (pktsts)
 8006508:	2a02      	cmp	r2, #2
 800650a:	d12b      	bne.n	8006564 <HAL_HCD_IRQHandler+0x110>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800650c:	f3c6 180a 	ubfx	r8, r6, #4, #11
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006510:	f1b8 0f00 	cmp.w	r8, #0
 8006514:	d026      	beq.n	8006564 <HAL_HCD_IRQHandler+0x110>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006516:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800651a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800651e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8006522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006524:	b1f1      	cbz	r1, 8006564 <HAL_HCD_IRQHandler+0x110>
      {
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006526:	4642      	mov	r2, r8
 8006528:	4628      	mov	r0, r5
 800652a:	f002 faad 	bl	8008a88 <USB_ReadPacket>

        /*manage multiple Xfer */
        hhcd->hc[ch_num].xfer_buff += pktcnt;
        hhcd->hc[ch_num].xfer_count  += pktcnt;

        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800652e:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8006532:	0173      	lsls	r3, r6, #5
 8006534:	18e9      	adds	r1, r5, r3
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006536:	6c78      	ldr	r0, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006538:	690e      	ldr	r6, [r1, #16]
 800653a:	4ac1      	ldr	r2, [pc, #772]	; (8006840 <HAL_HCD_IRQHandler+0x3ec>)
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800653c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800653e:	4440      	add	r0, r8
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006540:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006542:	4032      	ands	r2, r6
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006544:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006546:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006548:	b15a      	cbz	r2, 8006562 <HAL_HCD_IRQHandler+0x10e>
        {
          /* re-activate the channel when more packets are expected */
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800654a:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800654c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006550:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006554:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006556:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800655a:	f083 0301 	eor.w	r3, r3, #1
 800655e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006562:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006564:	69ab      	ldr	r3, [r5, #24]
 8006566:	f043 0310 	orr.w	r3, r3, #16
 800656a:	61ab      	str	r3, [r5, #24]
 800656c:	e77c      	b.n	8006468 <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800656e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006572:	6143      	str	r3, [r0, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006574:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8006578:	07d9      	lsls	r1, r3, #31
 800657a:	d4a7      	bmi.n	80064cc <HAL_HCD_IRQHandler+0x78>
        HAL_HCD_Disconnect_Callback(hhcd);
 800657c:	4620      	mov	r0, r4
 800657e:	f008 fd05 	bl	800ef8c <HAL_HCD_Disconnect_Callback>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006582:	2101      	movs	r1, #1
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	f002 fa99 	bl	8008abc <USB_InitFSLSPClkSel>
 800658a:	6820      	ldr	r0, [r4, #0]
 800658c:	e79e      	b.n	80064cc <HAL_HCD_IRQHandler+0x78>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800658e:	f002 fd09 	bl	8008fa4 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006592:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006594:	4680      	mov	r8, r0
 8006596:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006598:	2900      	cmp	r1, #0
 800659a:	f000 80c0 	beq.w	800671e <HAL_HCD_IRQHandler+0x2ca>
 800659e:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 80065a2:	2600      	movs	r6, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065a4:	f04f 0904 	mov.w	r9, #4
 80065a8:	e03e      	b.n	8006628 <HAL_HCD_IRQHandler+0x1d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80065aa:	0759      	lsls	r1, r3, #29
 80065ac:	f140 80bb 	bpl.w	8006726 <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80065b0:	f8c7 9008 	str.w	r9, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f043 0302 	orr.w	r3, r3, #2
 80065ba:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	059b      	lsls	r3, r3, #22
 80065c0:	f100 80f6 	bmi.w	80067b0 <HAL_HCD_IRQHandler+0x35c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	07d8      	lsls	r0, r3, #31
 80065c8:	f140 80bf 	bpl.w	800674a <HAL_HCD_IRQHandler+0x2f6>
    if (hhcd->Init.dma_enable != 0U)
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 8145 	bne.w	800685e <HAL_HCD_IRQHandler+0x40a>
 80065d4:	ea4f 038a 	mov.w	r3, sl, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 80065d8:	eb03 010a 	add.w	r1, r3, sl
 80065dc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065e0:	f04f 0c00 	mov.w	ip, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80065e4:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065e6:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 80065ea:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80065ee:	60b8      	str	r0, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80065f0:	f891 c03f 	ldrb.w	ip, [r1, #63]	; 0x3f
 80065f4:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 80065f8:	f000 8124 	beq.w	8006844 <HAL_HCD_IRQHandler+0x3f0>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80065fc:	f1bc 0f03 	cmp.w	ip, #3
 8006600:	f000 825f 	beq.w	8006ac2 <HAL_HCD_IRQHandler+0x66e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006604:	f1bc 0f01 	cmp.w	ip, #1
 8006608:	f000 826b 	beq.w	8006ae2 <HAL_HCD_IRQHandler+0x68e>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800660c:	4453      	add	r3, sl
 800660e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006612:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006616:	f082 0201 	eor.w	r2, r2, #1
 800661a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800661e:	6820      	ldr	r0, [r4, #0]
 8006620:	68a1      	ldr	r1, [r4, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006622:	3601      	adds	r6, #1
 8006624:	42b1      	cmp	r1, r6
 8006626:	d97a      	bls.n	800671e <HAL_HCD_IRQHandler+0x2ca>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006628:	f006 030f 	and.w	r3, r6, #15
 800662c:	fa28 f303 	lsr.w	r3, r8, r3
 8006630:	07df      	lsls	r7, r3, #31
 8006632:	d5f6      	bpl.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
 8006634:	0173      	lsls	r3, r6, #5
 8006636:	fa5f fa86 	uxtb.w	sl, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800663a:	595b      	ldr	r3, [r3, r5]
 800663c:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
 8006640:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8006644:	eb02 070b 	add.w	r7, r2, fp
 8006648:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800664c:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800664e:	d1ac      	bne.n	80065aa <HAL_HCD_IRQHandler+0x156>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006650:	f013 0304 	ands.w	r3, r3, #4
 8006654:	d172      	bne.n	800673c <HAL_HCD_IRQHandler+0x2e8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006656:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800665a:	f01c 0c20 	ands.w	ip, ip, #32
 800665e:	f000 80b5 	beq.w	80067cc <HAL_HCD_IRQHandler+0x378>
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006662:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006666:	f04f 0c20 	mov.w	ip, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 800666a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800666e:	f8c7 c008 	str.w	ip, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006672:	f892 c03d 	ldrb.w	ip, [r2, #61]	; 0x3d
 8006676:	f1bc 0f01 	cmp.w	ip, #1
 800667a:	d1d2      	bne.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].do_ping = 0U;
 800667c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006680:	68fb      	ldr	r3, [r7, #12]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006682:	f04f 0c02 	mov.w	ip, #2
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006686:	ea43 030c 	orr.w	r3, r3, ip
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800668a:	4651      	mov	r1, sl
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800668c:	f882 c05c 	strb.w	ip, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006690:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006692:	f002 fc8d 	bl	8008fb0 <USB_HC_Halt>
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	68a1      	ldr	r1, [r4, #8]
 800669a:	e7c2      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
      HAL_HCD_SOF_Callback(hhcd);
 800669c:	4620      	mov	r0, r4
 800669e:	f008 fc6d 	bl	800ef7c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	2308      	movs	r3, #8
 80066a6:	6143      	str	r3, [r0, #20]
 80066a8:	e71c      	b.n	80064e4 <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80066ac:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80066b0:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80066b2:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80066b6:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066be:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	079b      	lsls	r3, r3, #30
 80066c4:	d507      	bpl.n	80066d6 <HAL_HCD_IRQHandler+0x282>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	07df      	lsls	r7, r3, #31
 80066ca:	f100 8135 	bmi.w	8006938 <HAL_HCD_IRQHandler+0x4e4>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	0718      	lsls	r0, r3, #28
 80066da:	d515      	bpl.n	8006708 <HAL_HCD_IRQHandler+0x2b4>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	f043 0308 	orr.w	r3, r3, #8
 80066e2:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	0759      	lsls	r1, r3, #29
 80066e8:	f140 812a 	bpl.w	8006940 <HAL_HCD_IRQHandler+0x4ec>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80066ec:	69a1      	ldr	r1, [r4, #24]
 80066ee:	2902      	cmp	r1, #2
 80066f0:	f000 812d 	beq.w	800694e <HAL_HCD_IRQHandler+0x4fa>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80066f4:	68e3      	ldr	r3, [r4, #12]
 80066f6:	2b01      	cmp	r3, #1
        {
          USBx_HOST->HFIR = 60000U;
 80066f8:	bf04      	itt	eq
 80066fa:	f64e 2260 	movweq	r2, #60000	; 0xea60
 80066fe:	f8c6 2404 	streq.w	r2, [r6, #1028]	; 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006702:	4620      	mov	r0, r4
 8006704:	f008 fc4a 	bl	800ef9c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	069a      	lsls	r2, r3, #26
 800670c:	d503      	bpl.n	8006716 <HAL_HCD_IRQHandler+0x2c2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	f043 0320 	orr.w	r3, r3, #32
 8006714:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
 800671c:	e6db      	b.n	80064d6 <HAL_HCD_IRQHandler+0x82>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800671e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006722:	6143      	str	r3, [r0, #20]
 8006724:	e6e4      	b.n	80064f0 <HAL_HCD_IRQHandler+0x9c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	05db      	lsls	r3, r3, #23
 800672a:	f100 80f0 	bmi.w	800690e <HAL_HCD_IRQHandler+0x4ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	0699      	lsls	r1, r3, #26
 8006732:	f140 80ce 	bpl.w	80068d2 <HAL_HCD_IRQHandler+0x47e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006736:	2320      	movs	r3, #32
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	e73f      	b.n	80065bc <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800673c:	f8c7 9008 	str.w	r9, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f043 0302 	orr.w	r3, r3, #2
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e76b      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	0799      	lsls	r1, r3, #30
 800674e:	f140 8094 	bpl.w	800687a <HAL_HCD_IRQHandler+0x426>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006752:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8006756:	eb03 000a 	add.w	r0, r3, sl
 800675a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800675e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006762:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006766:	f02c 0c02 	bic.w	ip, ip, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800676a:	2901      	cmp	r1, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800676c:	f8c7 c00c 	str.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006770:	f000 80ea 	beq.w	8006948 <HAL_HCD_IRQHandler+0x4f4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006774:	2905      	cmp	r1, #5
 8006776:	f000 80e7 	beq.w	8006948 <HAL_HCD_IRQHandler+0x4f4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800677a:	2906      	cmp	r1, #6
 800677c:	f000 816e 	beq.w	8006a5c <HAL_HCD_IRQHandler+0x608>
 8006780:	2908      	cmp	r1, #8
 8006782:	f000 816b 	beq.w	8006a5c <HAL_HCD_IRQHandler+0x608>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006786:	2903      	cmp	r1, #3
 8006788:	f000 81df 	beq.w	8006b4a <HAL_HCD_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 800678c:	2328      	movs	r3, #40	; 0x28
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800678e:	2907      	cmp	r1, #7
      hhcd->hc[ch_num].ErrCnt++;
 8006790:	fb03 430a 	mla	r3, r3, sl, r4
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006794:	f000 81fa 	beq.w	8006b8c <HAL_HCD_IRQHandler+0x738>
 8006798:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800679c:	2302      	movs	r3, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800679e:	460a      	mov	r2, r1
 80067a0:	4620      	mov	r0, r4
 80067a2:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80067a4:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067a6:	f008 fbf5 	bl	800ef94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	68a1      	ldr	r1, [r4, #8]
 80067ae:	e738      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b0:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067b2:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b4:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067b8:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067ba:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067bc:	f002 fbf8 	bl	8008fb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80067c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	6820      	ldr	r0, [r4, #0]
 80067c8:	68a1      	ldr	r1, [r4, #8]
 80067ca:	e72a      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	065b      	lsls	r3, r3, #25
 80067d0:	f100 80c8 	bmi.w	8006964 <HAL_HCD_IRQHandler+0x510>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80067da:	f040 810f 	bne.w	80069fc <HAL_HCD_IRQHandler+0x5a8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80067de:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80067e2:	f01c 0f01 	tst.w	ip, #1
 80067e6:	f040 8158 	bne.w	8006a9a <HAL_HCD_IRQHandler+0x646>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f013 0308 	ands.w	r3, r3, #8
 80067f0:	f040 8187 	bne.w	8006b02 <HAL_HCD_IRQHandler+0x6ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80067f4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80067f8:	f01c 0f10 	tst.w	ip, #16
 80067fc:	f000 80c9 	beq.w	8006992 <HAL_HCD_IRQHandler+0x53e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006800:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8006804:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hhcd->hc[ch_num].state = HC_NAK;
 8006808:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 800680a:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 800680c:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8006810:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006814:	b943      	cbnz	r3, 8006828 <HAL_HCD_IRQHandler+0x3d4>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006816:	2328      	movs	r3, #40	; 0x28
 8006818:	fb03 430a 	mla	r3, r3, sl, r4
 800681c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006820:	b912      	cbnz	r2, 8006828 <HAL_HCD_IRQHandler+0x3d4>
        hhcd->hc[ch_num].do_ping = 1U;
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800682e:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006830:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006832:	f002 fbbd 	bl	8008fb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006836:	2310      	movs	r3, #16
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	68a1      	ldr	r1, [r4, #8]
 800683e:	e6f0      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
 8006840:	1ff80000 	.word	0x1ff80000
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006844:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006846:	6820      	ldr	r0, [r4, #0]
 8006848:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800684a:	f042 0202 	orr.w	r2, r2, #2
 800684e:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006850:	4651      	mov	r1, sl
 8006852:	f002 fbad 	bl	8008fb0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006856:	2210      	movs	r2, #16
 8006858:	60ba      	str	r2, [r7, #8]
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	e6d6      	b.n	800660c <HAL_HCD_IRQHandler+0x1b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800685e:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8006862:	eb03 010a 	add.w	r1, r3, sl
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006866:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006868:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800686c:	f3c0 0c12 	ubfx	ip, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006870:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8006872:	eba0 000c 	sub.w	r0, r0, ip
 8006876:	64c8      	str	r0, [r1, #76]	; 0x4c
 8006878:	e6ae      	b.n	80065d8 <HAL_HCD_IRQHandler+0x184>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006882:	f040 80d3 	bne.w	8006a2c <HAL_HCD_IRQHandler+0x5d8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	06d2      	lsls	r2, r2, #27
 800688a:	f140 80b5 	bpl.w	80069f8 <HAL_HCD_IRQHandler+0x5a4>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800688e:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8006892:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006896:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 800689a:	2a03      	cmp	r2, #3
 800689c:	f000 8148 	beq.w	8006b30 <HAL_HCD_IRQHandler+0x6dc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80068a0:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 80068a4:	d111      	bne.n	80068ca <HAL_HCD_IRQHandler+0x476>
      if (hhcd->Init.dma_enable == 0U)
 80068a6:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068a8:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80068aa:	b973      	cbnz	r3, 80068ca <HAL_HCD_IRQHandler+0x476>
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ac:	68fb      	ldr	r3, [r7, #12]
        hhcd->hc[ch_num].state = HC_NAK;
 80068ae:	2228      	movs	r2, #40	; 0x28
 80068b0:	fb02 420a 	mla	r2, r2, sl, r4
 80068b4:	f04f 0c03 	mov.w	ip, #3
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068b8:	f043 0302 	orr.w	r3, r3, #2
        hhcd->hc[ch_num].state = HC_NAK;
 80068bc:	f882 c05d 	strb.w	ip, [r2, #93]	; 0x5d
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068c0:	4651      	mov	r1, sl
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068c2:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068c4:	f002 fb74 	bl	8008fb0 <USB_HC_Halt>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068cc:	2310      	movs	r3, #16
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	e6a7      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	071b      	lsls	r3, r3, #28
 80068d6:	f100 8093 	bmi.w	8006a00 <HAL_HCD_IRQHandler+0x5ac>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0559      	lsls	r1, r3, #21
 80068de:	f57f ae6d 	bpl.w	80065bc <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	f043 0302 	orr.w	r3, r3, #2
 80068ea:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ec:	4651      	mov	r1, sl
 80068ee:	f002 fb5f 	bl	8008fb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80068f2:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068f6:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80068f8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068fc:	60b9      	str	r1, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80068fe:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006900:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006904:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006908:	9a01      	ldr	r2, [sp, #4]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	e656      	b.n	80065bc <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800690e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006912:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006918:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 800691c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006920:	f043 0302 	orr.w	r3, r3, #2
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006924:	f04f 0c07 	mov.w	ip, #7
 8006928:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692c:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800692e:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006930:	f002 fb3e 	bl	8008fb0 <USB_HC_Halt>
 8006934:	9a01      	ldr	r2, [sp, #4]
 8006936:	e641      	b.n	80065bc <HAL_HCD_IRQHandler+0x168>
      HAL_HCD_Connect_Callback(hhcd);
 8006938:	4620      	mov	r0, r4
 800693a:	f008 fb23 	bl	800ef84 <HAL_HCD_Connect_Callback>
 800693e:	e6c6      	b.n	80066ce <HAL_HCD_IRQHandler+0x27a>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006940:	4620      	mov	r0, r4
 8006942:	f008 fb2f 	bl	800efa4 <HAL_HCD_PortDisabled_Callback>
 8006946:	e6df      	b.n	8006708 <HAL_HCD_IRQHandler+0x2b4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006948:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 800694c:	e726      	b.n	800679c <HAL_HCD_IRQHandler+0x348>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800694e:	9b02      	ldr	r3, [sp, #8]
 8006950:	6820      	ldr	r0, [r4, #0]
 8006952:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800695a:	bf18      	it	ne
 800695c:	2101      	movne	r1, #1
 800695e:	f002 f8ad 	bl	8008abc <USB_InitFSLSPClkSel>
 8006962:	e6ce      	b.n	8006702 <HAL_HCD_IRQHandler+0x2ae>
    hhcd->hc[ch_num].state = HC_NYET;
 8006964:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8006968:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].do_ping = 1U;
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006972:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_NYET;
 8006974:	f883 905d 	strb.w	r9, [r3, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006978:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800697c:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006980:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006982:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006984:	f002 fb14 	bl	8008fb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006988:	2340      	movs	r3, #64	; 0x40
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	68a1      	ldr	r1, [r4, #8]
 8006990:	e647      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	061b      	lsls	r3, r3, #24
 8006996:	f100 80e7 	bmi.w	8006b68 <HAL_HCD_IRQHandler+0x714>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	055b      	lsls	r3, r3, #21
 800699e:	f100 80fc 	bmi.w	8006b9a <HAL_HCD_IRQHandler+0x746>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	079b      	lsls	r3, r3, #30
 80069a6:	f57f ae3c 	bpl.w	8006622 <HAL_HCD_IRQHandler+0x1ce>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069aa:	2128      	movs	r1, #40	; 0x28
 80069ac:	fb01 410a 	mla	r1, r1, sl, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80069b0:	68f8      	ldr	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069b2:	f891 305d 	ldrb.w	r3, [r1, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80069b6:	f020 0002 	bic.w	r0, r0, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069ba:	2b01      	cmp	r3, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80069bc:	60f8      	str	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069be:	f000 8105 	beq.w	8006bcc <HAL_HCD_IRQHandler+0x778>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	f000 80fe 	beq.w	8006bc4 <HAL_HCD_IRQHandler+0x770>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	f000 80fb 	beq.w	8006bc4 <HAL_HCD_IRQHandler+0x770>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	f000 8120 	beq.w	8006c14 <HAL_HCD_IRQHandler+0x7c0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069d4:	2b06      	cmp	r3, #6
 80069d6:	f000 8108 	beq.w	8006bea <HAL_HCD_IRQHandler+0x796>
 80069da:	2b08      	cmp	r3, #8
 80069dc:	f000 8105 	beq.w	8006bea <HAL_HCD_IRQHandler+0x796>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80069e0:	2328      	movs	r3, #40	; 0x28
 80069e2:	fb03 430a 	mla	r3, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80069e6:	2102      	movs	r1, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80069e8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80069ec:	60b9      	str	r1, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80069ee:	4620      	mov	r0, r4
 80069f0:	4651      	mov	r1, sl
 80069f2:	f008 facf 	bl	800ef94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80069f6:	6820      	ldr	r0, [r4, #0]
 80069f8:	68a1      	ldr	r1, [r4, #8]
 80069fa:	e612      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	e6d9      	b.n	80067b4 <HAL_HCD_IRQHandler+0x360>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a00:	68f9      	ldr	r1, [r7, #12]
 8006a02:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_STALL;
 8006a04:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8006a08:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a0c:	f041 0102 	orr.w	r1, r1, #2
    hhcd->hc[ch_num].state = HC_STALL;
 8006a10:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a14:	60f9      	str	r1, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006a16:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a1a:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a1c:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a1e:	60b9      	str	r1, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a20:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a22:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a24:	f002 fac4 	bl	8008fb0 <USB_HC_Halt>
 8006a28:	9a01      	ldr	r2, [sp, #4]
 8006a2a:	e5c7      	b.n	80065bc <HAL_HCD_IRQHandler+0x168>
    hhcd->hc[ch_num].ErrCnt++;
 8006a2c:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8006a30:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a34:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006a36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a38:	f041 0c02 	orr.w	ip, r1, #2
    hhcd->hc[ch_num].ErrCnt++;
 8006a3c:	3201      	adds	r2, #1
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006a3e:	f04f 0e06 	mov.w	lr, #6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a42:	f8c7 c00c 	str.w	ip, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a46:	4651      	mov	r1, sl
    hhcd->hc[ch_num].ErrCnt++;
 8006a48:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006a4a:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a4e:	f002 faaf 	bl	8008fb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	6820      	ldr	r0, [r4, #0]
 8006a58:	68a1      	ldr	r1, [r4, #8]
 8006a5a:	e5e2      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].ErrCnt++;
 8006a5c:	eb03 000a 	add.w	r0, r3, sl
 8006a60:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006a64:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8006a66:	3101      	adds	r1, #1
 8006a68:	6581      	str	r1, [r0, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006a6a:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a6c:	f04f 0128 	mov.w	r1, #40	; 0x28
 8006a70:	fb01 410a 	mla	r1, r1, sl, r4
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006a74:	d958      	bls.n	8006b28 <HAL_HCD_IRQHandler+0x6d4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a76:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a78:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a7c:	6588      	str	r0, [r1, #88]	; 0x58
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a7e:	f852 000b 	ldr.w	r0, [r2, fp]
 8006a82:	4453      	add	r3, sl
 8006a84:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a88:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a8c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006a90:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a94:	f842 000b 	str.w	r0, [r2, fp]
 8006a98:	e680      	b.n	800679c <HAL_HCD_IRQHandler+0x348>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a9a:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a9c:	eb0a 0b8a 	add.w	fp, sl, sl, lsl #2
 8006aa0:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aa4:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006aa8:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aac:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aae:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ab0:	f002 fa7e 	bl	8008fb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	60bb      	str	r3, [r7, #8]
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006abc:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
 8006ac0:	e5af      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ac2:	f852 700b 	ldr.w	r7, [r2, fp]
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006acc:	f842 700b 	str.w	r7, [r2, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006ad0:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f008 fa5b 	bl	800ef94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	e594      	b.n	800660c <HAL_HCD_IRQHandler+0x1b8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ae2:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006ae6:	f881 c05c 	strb.w	ip, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006aea:	f080 0001 	eor.w	r0, r0, #1
 8006aee:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006af2:	4662      	mov	r2, ip
 8006af4:	4651      	mov	r1, sl
 8006af6:	4620      	mov	r0, r4
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	f008 fa4b 	bl	800ef94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	e584      	b.n	800660c <HAL_HCD_IRQHandler+0x1b8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006b02:	2308      	movs	r3, #8
 8006b04:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b0c:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b0e:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006b10:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b14:	f002 fa4c 	bl	8008fb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006b18:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
 8006b1c:	2205      	movs	r2, #5
 8006b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006b22:	6820      	ldr	r0, [r4, #0]
 8006b24:	68a1      	ldr	r1, [r4, #8]
 8006b26:	e57c      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b28:	2002      	movs	r0, #2
 8006b2a:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
 8006b2e:	e7a6      	b.n	8006a7e <HAL_HCD_IRQHandler+0x62a>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b30:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006b32:	2128      	movs	r1, #40	; 0x28
 8006b34:	fb01 410a 	mla	r1, r1, sl, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b38:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006b3c:	658b      	str	r3, [r1, #88]	; 0x58
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b3e:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b40:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b42:	f002 fa35 	bl	8008fb0 <USB_HC_Halt>
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	e6bf      	b.n	80068ca <HAL_HCD_IRQHandler+0x476>
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b4a:	f852 300b 	ldr.w	r3, [r2, fp]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b4e:	2028      	movs	r0, #40	; 0x28
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b54:	fb00 400a 	mla	r0, r0, sl, r4
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b5c:	2102      	movs	r1, #2
 8006b5e:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b62:	f842 300b 	str.w	r3, [r2, fp]
 8006b66:	e619      	b.n	800679c <HAL_HCD_IRQHandler+0x348>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b6e:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b70:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b72:	f002 fa1d 	bl	8008fb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b76:	2328      	movs	r3, #40	; 0x28
 8006b78:	fb03 4a0a 	mla	sl, r3, sl, r4
 8006b7c:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006b7e:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b80:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	e54a      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].ErrCnt++;
 8006b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b8e:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].ErrCnt++;
 8006b92:	3201      	adds	r2, #1
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b94:	2104      	movs	r1, #4
      hhcd->hc[ch_num].ErrCnt++;
 8006b96:	659a      	str	r2, [r3, #88]	; 0x58
 8006b98:	e600      	b.n	800679c <HAL_HCD_IRQHandler+0x348>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ba0:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ba2:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ba4:	f002 fa04 	bl	8008fb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ba8:	2328      	movs	r3, #40	; 0x28
 8006baa:	fb03 4a0a 	mla	sl, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bae:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006bb4:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006bba:	60ba      	str	r2, [r7, #8]
 8006bbc:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006bbe:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 8006bc2:	e52e      	b.n	8006622 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 8006bca:	e709      	b.n	80069e0 <HAL_HCD_IRQHandler+0x58c>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006bcc:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006bd0:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006bd4:	1e93      	subs	r3, r2, #2
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	f63f af02 	bhi.w	80069e0 <HAL_HCD_IRQHandler+0x58c>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006bdc:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
 8006be8:	e6fa      	b.n	80069e0 <HAL_HCD_IRQHandler+0x58c>
      hhcd->hc[ch_num].ErrCnt++;
 8006bea:	2328      	movs	r3, #40	; 0x28
 8006bec:	fb03 430a 	mla	r3, r3, sl, r4
 8006bf0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006bf2:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006bf4:	2903      	cmp	r1, #3
      hhcd->hc[ch_num].ErrCnt++;
 8006bf6:	6599      	str	r1, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006bf8:	d90f      	bls.n	8006c1a <HAL_HCD_IRQHandler+0x7c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006bfa:	2100      	movs	r1, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006bfc:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c00:	6599      	str	r1, [r3, #88]	; 0x58
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c02:	f852 300b 	ldr.w	r3, [r2, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c0e:	f842 300b 	str.w	r3, [r2, fp]
 8006c12:	e6e5      	b.n	80069e0 <HAL_HCD_IRQHandler+0x58c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006c14:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 8006c18:	e6e2      	b.n	80069e0 <HAL_HCD_IRQHandler+0x58c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c1a:	2102      	movs	r1, #2
 8006c1c:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
 8006c20:	e7ef      	b.n	8006c02 <HAL_HCD_IRQHandler+0x7ae>
 8006c22:	bf00      	nop

08006c24 <HAL_HCD_Start>:
{
 8006c24:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8006c26:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d00e      	beq.n	8006c4c <HAL_HCD_Start+0x28>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	2501      	movs	r5, #1
 8006c32:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	f001 fefe 	bl	8008a38 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	6820      	ldr	r0, [r4, #0]
 8006c40:	f001 ff7a 	bl	8008b38 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006c44:	2000      	movs	r0, #0
 8006c46:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8006c4c:	2002      	movs	r0, #2
}
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}

08006c50 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006c50:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d00b      	beq.n	8006c70 <HAL_HCD_Stop+0x20>
{
 8006c58:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006c62:	6800      	ldr	r0, [r0, #0]
 8006c64:	f002 fa02 	bl	800906c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006c68:	2000      	movs	r0, #0
 8006c6a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006c6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006c70:	2002      	movs	r0, #2
}
 8006c72:	4770      	bx	lr

08006c74 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8006c74:	6800      	ldr	r0, [r0, #0]
 8006c76:	f001 bf3f 	b.w	8008af8 <USB_ResetPort>
 8006c7a:	bf00      	nop

08006c7c <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006c7c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006c80:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006c84:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop

08006c8c <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006c8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006c90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006c94:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8006c96:	4770      	bx	lr

08006c98 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006c98:	6800      	ldr	r0, [r0, #0]
 8006c9a:	f002 b803 	b.w	8008ca4 <USB_GetCurrentFrame>
 8006c9e:	bf00      	nop

08006ca0 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8006ca0:	6800      	ldr	r0, [r0, #0]
 8006ca2:	f001 bff3 	b.w	8008c8c <USB_GetHostSpeed>
 8006ca6:	bf00      	nop

08006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	4607      	mov	r7, r0
 8006cae:	4616      	mov	r6, r2
 8006cb0:	4698      	mov	r8, r3
 8006cb2:	b28d      	uxth	r5, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb4:	683c      	ldr	r4, [r7, #0]
 8006cb6:	e004      	b.n	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cb8:	6961      	ldr	r1, [r4, #20]
 8006cba:	054a      	lsls	r2, r1, #21
 8006cbc:	d407      	bmi.n	8006cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x26>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cbe:	1c73      	adds	r3, r6, #1
 8006cc0:	d11c      	bne.n	8006cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cc2:	6960      	ldr	r0, [r4, #20]
 8006cc4:	ea35 0000 	bics.w	r0, r5, r0
 8006cc8:	d1f6      	bne.n	8006cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cce:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd2:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cda:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cde:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce0:	633a      	str	r2, [r7, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ce2:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce6:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006cec:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cf0:	f043 0304 	orr.w	r3, r3, #4
 8006cf4:	643b      	str	r3, [r7, #64]	; 0x40
      return HAL_ERROR;
 8006cf6:	2001      	movs	r0, #1
}
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfc:	f7fe fc06 	bl	800550c <HAL_GetTick>
 8006d00:	eba0 0008 	sub.w	r0, r0, r8
 8006d04:	42b0      	cmp	r0, r6
 8006d06:	d801      	bhi.n	8006d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8006d08:	2e00      	cmp	r6, #0
 8006d0a:	d1d3      	bne.n	8006cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d0c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d0e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d10:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d12:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d16:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006d1c:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d20:	f043 0320 	orr.w	r3, r3, #32
 8006d24:	643b      	str	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 8006d26:	2001      	movs	r0, #1
 8006d28:	e7cf      	b.n	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x22>
 8006d2a:	bf00      	nop

08006d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d34:	6830      	ldr	r0, [r6, #0]
 8006d36:	e004      	b.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x16>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d38:	6944      	ldr	r4, [r0, #20]
 8006d3a:	0562      	lsls	r2, r4, #21
 8006d3c:	d407      	bmi.n	8006d4e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8006d3e:	1c6b      	adds	r3, r5, #1
 8006d40:	d116      	bne.n	8006d70 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d42:	6943      	ldr	r3, [r0, #20]
 8006d44:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006d48:	d0f6      	beq.n	8006d38 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  return HAL_OK;
 8006d4a:	2000      	movs	r0, #0
}
 8006d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d4e:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d52:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d54:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d56:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d58:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d5c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d60:	6c32      	ldr	r2, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d62:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d66:	f042 0204 	orr.w	r2, r2, #4
 8006d6a:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 8006d6c:	2001      	movs	r0, #1
}
 8006d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d70:	f7fe fbcc 	bl	800550c <HAL_GetTick>
 8006d74:	1bc0      	subs	r0, r0, r7
 8006d76:	42a8      	cmp	r0, r5
 8006d78:	d801      	bhi.n	8006d7e <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8006d7a:	2d00      	cmp	r5, #0
 8006d7c:	d1da      	bne.n	8006d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d7e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d80:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d82:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d84:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d88:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d8c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006d8e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	f043 0320 	orr.w	r3, r3, #32
 8006d96:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006d98:	2001      	movs	r0, #1
}
 8006d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006da4:	e008      	b.n	8006db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006da6:	6951      	ldr	r1, [r2, #20]
 8006da8:	06c9      	lsls	r1, r1, #27
 8006daa:	d41b      	bmi.n	8006de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dac:	f7fe fbae 	bl	800550c <HAL_GetTick>
 8006db0:	1b80      	subs	r0, r0, r6
 8006db2:	42a0      	cmp	r0, r4
 8006db4:	d807      	bhi.n	8006dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8006db6:	b134      	cbz	r4, 8006dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006db8:	682a      	ldr	r2, [r5, #0]
 8006dba:	6953      	ldr	r3, [r2, #20]
 8006dbc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006dc0:	d0f1      	beq.n	8006da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
  return HAL_OK;
 8006dc2:	2000      	movs	r0, #0
}
 8006dc4:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006dc6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006dc8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006dca:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006dcc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dd0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dd4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006dd6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dda:	f043 0320 	orr.w	r3, r3, #32
 8006dde:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006de0:	2001      	movs	r0, #1
}
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006de4:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8006de8:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dea:	6150      	str	r0, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dec:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dee:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006df6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006df8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dfc:	642a      	str	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006dfe:	2001      	movs	r0, #1
}
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	bf00      	nop

08006e04 <I2C_WaitOnFlagUntilTimeout>:
{
 8006e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e08:	4681      	mov	r9, r0
 8006e0a:	4690      	mov	r8, r2
 8006e0c:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e0e:	0c0f      	lsrs	r7, r1, #16
 8006e10:	b28c      	uxth	r4, r1
 8006e12:	f8d9 5000 	ldr.w	r5, [r9]
 8006e16:	e009      	b.n	8006e2c <I2C_WaitOnFlagUntilTimeout+0x28>
 8006e18:	69a9      	ldr	r1, [r5, #24]
 8006e1a:	ea34 0301 	bics.w	r3, r4, r1
 8006e1e:	bf0c      	ite	eq
 8006e20:	2001      	moveq	r0, #1
 8006e22:	2000      	movne	r0, #0
 8006e24:	4580      	cmp	r8, r0
 8006e26:	d10b      	bne.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8006e28:	1c73      	adds	r3, r6, #1
 8006e2a:	d10c      	bne.n	8006e46 <I2C_WaitOnFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e2c:	2f01      	cmp	r7, #1
 8006e2e:	d1f3      	bne.n	8006e18 <I2C_WaitOnFlagUntilTimeout+0x14>
 8006e30:	696b      	ldr	r3, [r5, #20]
 8006e32:	ea34 0303 	bics.w	r3, r4, r3
 8006e36:	bf0c      	ite	eq
 8006e38:	2001      	moveq	r0, #1
 8006e3a:	2000      	movne	r0, #0
 8006e3c:	4580      	cmp	r8, r0
 8006e3e:	d0f3      	beq.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006e40:	2000      	movs	r0, #0
}
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fe fb61 	bl	800550c <HAL_GetTick>
 8006e4a:	9b08      	ldr	r3, [sp, #32]
 8006e4c:	1ac0      	subs	r0, r0, r3
 8006e4e:	42b0      	cmp	r0, r6
 8006e50:	d801      	bhi.n	8006e56 <I2C_WaitOnFlagUntilTimeout+0x52>
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	d1dd      	bne.n	8006e12 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e56:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e58:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e5a:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e5e:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e62:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e6a:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e6e:	f043 0320 	orr.w	r3, r3, #32
 8006e72:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e76:	2001      	movs	r0, #1
 8006e78:	e7e3      	b.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x3e>
 8006e7a:	bf00      	nop

08006e7c <I2C_RequestMemoryWrite>:
{
 8006e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e80:	6806      	ldr	r6, [r0, #0]
{
 8006e82:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e84:	6835      	ldr	r5, [r6, #0]
{
 8006e86:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e88:	f445 7580 	orr.w	r5, r5, #256	; 0x100
{
 8006e8c:	4688      	mov	r8, r1
 8006e8e:	4691      	mov	r9, r2
 8006e90:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e92:	6035      	str	r5, [r6, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e96:	9700      	str	r7, [sp, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8006e9e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea0:	f7ff ffb0 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006ea4:	b170      	cbz	r0, 8006ec4 <I2C_RequestMemoryWrite+0x48>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	05db      	lsls	r3, r3, #23
 8006eac:	d403      	bmi.n	8006eb6 <I2C_RequestMemoryWrite+0x3a>
    return HAL_TIMEOUT;
 8006eae:	2003      	movs	r0, #3
}
 8006eb0:	b004      	add	sp, #16
 8006eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8006eba:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ebc:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006ebe:	b004      	add	sp, #16
 8006ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ec4:	6822      	ldr	r2, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ec6:	491d      	ldr	r1, [pc, #116]	; (8006f3c <I2C_RequestMemoryWrite+0xc0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ec8:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8006ecc:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ece:	4620      	mov	r0, r4
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ed4:	f7ff fee8 	bl	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ed8:	b118      	cbz	r0, 8006ee2 <I2C_RequestMemoryWrite+0x66>
      return HAL_ERROR;
 8006eda:	2001      	movs	r0, #1
}
 8006edc:	b004      	add	sp, #16
 8006ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	9003      	str	r0, [sp, #12]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	9203      	str	r2, [sp, #12]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eee:	463a      	mov	r2, r7
 8006ef0:	990c      	ldr	r1, [sp, #48]	; 0x30
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f7ff ff19 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006efa:	b988      	cbnz	r0, 8006f20 <I2C_RequestMemoryWrite+0xa4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006efc:	f1ba 0f01 	cmp.w	sl, #1
 8006f00:	6821      	ldr	r1, [r4, #0]
 8006f02:	d016      	beq.n	8006f32 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f04:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8006f08:	610b      	str	r3, [r1, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f0a:	463a      	mov	r2, r7
 8006f0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff ff0c 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006f14:	b920      	cbnz	r0, 8006f20 <I2C_RequestMemoryWrite+0xa4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	fa5f f389 	uxtb.w	r3, r9
 8006f1c:	6113      	str	r3, [r2, #16]
 8006f1e:	e7c7      	b.n	8006eb0 <I2C_RequestMemoryWrite+0x34>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d1d9      	bne.n	8006eda <I2C_RequestMemoryWrite+0x5e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	6813      	ldr	r3, [r2, #0]
 8006f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e7d3      	b.n	8006eda <I2C_RequestMemoryWrite+0x5e>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f32:	fa5f f389 	uxtb.w	r3, r9
 8006f36:	610b      	str	r3, [r1, #16]
 8006f38:	e7ba      	b.n	8006eb0 <I2C_RequestMemoryWrite+0x34>
 8006f3a:	bf00      	nop
 8006f3c:	00010002 	.word	0x00010002

08006f40 <I2C_RequestMemoryRead>:
{
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f44:	6804      	ldr	r4, [r0, #0]
 8006f46:	6826      	ldr	r6, [r4, #0]
 8006f48:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 8006f4c:	6026      	str	r6, [r4, #0]
{
 8006f4e:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f50:	6826      	ldr	r6, [r4, #0]
{
 8006f52:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f54:	f446 7680 	orr.w	r6, r6, #256	; 0x100
{
 8006f58:	4688      	mov	r8, r1
 8006f5a:	4691      	mov	r9, r2
 8006f5c:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f5e:	6026      	str	r6, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f62:	9700      	str	r7, [sp, #0]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8006f6a:	4605      	mov	r5, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f6c:	f7ff ff4a 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006f70:	b158      	cbz	r0, 8006f8a <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	05db      	lsls	r3, r3, #23
 8006f78:	d403      	bmi.n	8006f82 <I2C_RequestMemoryRead+0x42>
    return HAL_TIMEOUT;
 8006f7a:	2003      	movs	r0, #3
}
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f86:	642b      	str	r3, [r5, #64]	; 0x40
 8006f88:	e7f7      	b.n	8006f7a <I2C_RequestMemoryRead+0x3a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8a:	682b      	ldr	r3, [r5, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f8c:	492f      	ldr	r1, [pc, #188]	; (800704c <I2C_RequestMemoryRead+0x10c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8e:	fa5f f888 	uxtb.w	r8, r8
 8006f92:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8006f96:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f98:	4628      	mov	r0, r5
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f9e:	f7ff fe83 	bl	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fa2:	b118      	cbz	r0, 8006fac <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8006fa4:	2001      	movs	r0, #1
}
 8006fa6:	b004      	add	sp, #16
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	9003      	str	r0, [sp, #12]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	9203      	str	r2, [sp, #12]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb8:	463a      	mov	r2, r7
 8006fba:	990c      	ldr	r1, [sp, #48]	; 0x30
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fbc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f7ff feb4 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc4:	bb48      	cbnz	r0, 800701a <I2C_RequestMemoryRead+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fc6:	f1ba 0f01 	cmp.w	sl, #1
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	d12e      	bne.n	800702c <I2C_RequestMemoryRead+0xec>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fce:	fa5f f289 	uxtb.w	r2, r9
 8006fd2:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fd4:	463a      	mov	r2, r7
 8006fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7ff fea7 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fde:	b9e0      	cbnz	r0, 800701a <I2C_RequestMemoryRead+0xda>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe0:	6829      	ldr	r1, [r5, #0]
 8006fe2:	680b      	ldr	r3, [r1, #0]
 8006fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe8:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fea:	4602      	mov	r2, r0
 8006fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fee:	9700      	str	r7, [sp, #0]
 8006ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f7ff ff05 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d1b9      	bne.n	8006f72 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ffe:	6828      	ldr	r0, [r5, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007000:	4912      	ldr	r1, [pc, #72]	; (800704c <I2C_RequestMemoryRead+0x10c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007002:	f048 0201 	orr.w	r2, r8, #1
 8007006:	6102      	str	r2, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007008:	463b      	mov	r3, r7
 800700a:	4628      	mov	r0, r5
 800700c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800700e:	f7ff fe4b 	bl	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8007012:	3000      	adds	r0, #0
 8007014:	bf18      	it	ne
 8007016:	2001      	movne	r0, #1
 8007018:	e7b0      	b.n	8006f7c <I2C_RequestMemoryRead+0x3c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800701c:	2b04      	cmp	r3, #4
 800701e:	d1c1      	bne.n	8006fa4 <I2C_RequestMemoryRead+0x64>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007020:	682a      	ldr	r2, [r5, #0]
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	e7bb      	b.n	8006fa4 <I2C_RequestMemoryRead+0x64>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800702c:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8007030:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007032:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007034:	463a      	mov	r2, r7
 8007036:	4628      	mov	r0, r5
 8007038:	f7ff fe78 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 800703c:	2800      	cmp	r0, #0
 800703e:	d1ec      	bne.n	800701a <I2C_RequestMemoryRead+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007040:	682a      	ldr	r2, [r5, #0]
 8007042:	fa5f f389 	uxtb.w	r3, r9
 8007046:	6113      	str	r3, [r2, #16]
 8007048:	e7c4      	b.n	8006fd4 <I2C_RequestMemoryRead+0x94>
 800704a:	bf00      	nop
 800704c:	00010002 	.word	0x00010002

08007050 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	4606      	mov	r6, r0
 8007054:	460d      	mov	r5, r1
 8007056:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007058:	6830      	ldr	r0, [r6, #0]
 800705a:	e004      	b.n	8007066 <I2C_WaitOnBTFFlagUntilTimeout+0x16>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800705c:	6944      	ldr	r4, [r0, #20]
 800705e:	0562      	lsls	r2, r4, #21
 8007060:	d407      	bmi.n	8007072 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8007062:	1c6b      	adds	r3, r5, #1
 8007064:	d116      	bne.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007066:	6943      	ldr	r3, [r0, #20]
 8007068:	f013 0304 	ands.w	r3, r3, #4
 800706c:	d0f6      	beq.n	800705c <I2C_WaitOnBTFFlagUntilTimeout+0xc>
  return HAL_OK;
 800706e:	2000      	movs	r0, #0
}
 8007070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007072:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8007076:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007078:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800707a:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800707c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007080:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007084:	6c32      	ldr	r2, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8007086:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800708a:	f042 0204 	orr.w	r2, r2, #4
 800708e:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 8007090:	2001      	movs	r0, #1
}
 8007092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007094:	f7fe fa3a 	bl	800550c <HAL_GetTick>
 8007098:	1bc0      	subs	r0, r0, r7
 800709a:	42a8      	cmp	r0, r5
 800709c:	d801      	bhi.n	80070a2 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 800709e:	2d00      	cmp	r5, #0
 80070a0:	d1da      	bne.n	8007058 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80070a2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80070a4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80070a6:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80070a8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070ac:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070b0:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80070b2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070b6:	f043 0320 	orr.w	r3, r3, #32
 80070ba:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80070bc:	2001      	movs	r0, #1
}
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f000 809f 	beq.w	8007204 <HAL_I2C_Init+0x144>
{
 80070c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80070cc:	4604      	mov	r4, r0
 80070ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 808f 	beq.w	80071f6 <HAL_I2C_Init+0x136>
  __HAL_I2C_DISABLE(hi2c);
 80070d8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80070da:	2224      	movs	r2, #36	; 0x24
 80070dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070f6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070f8:	f001 f9d0 	bl	800849c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070fc:	6861      	ldr	r1, [r4, #4]
 80070fe:	4b4b      	ldr	r3, [pc, #300]	; (800722c <HAL_I2C_Init+0x16c>)
 8007100:	4299      	cmp	r1, r3
 8007102:	d84b      	bhi.n	800719c <HAL_I2C_Init+0xdc>
 8007104:	4b4a      	ldr	r3, [pc, #296]	; (8007230 <HAL_I2C_Init+0x170>)
 8007106:	4298      	cmp	r0, r3
 8007108:	d97a      	bls.n	8007200 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800710a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800710c:	4b49      	ldr	r3, [pc, #292]	; (8007234 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800710e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8007110:	fba3 6300 	umull	r6, r3, r3, r0
 8007114:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007116:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800711a:	431d      	orrs	r5, r3
 800711c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800711e:	6a15      	ldr	r5, [r2, #32]
 8007120:	3301      	adds	r3, #1
 8007122:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8007126:	432b      	orrs	r3, r5
 8007128:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800712a:	69d5      	ldr	r5, [r2, #28]
 800712c:	0049      	lsls	r1, r1, #1
 800712e:	1e43      	subs	r3, r0, #1
 8007130:	fbb3 f3f1 	udiv	r3, r3, r1
 8007134:	3301      	adds	r3, #1
 8007136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800713a:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800713e:	2b04      	cmp	r3, #4
 8007140:	bf38      	it	cc
 8007142:	2304      	movcc	r3, #4
 8007144:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007148:	432b      	orrs	r3, r5
 800714a:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800714c:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8007150:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007152:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007154:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8007158:	432b      	orrs	r3, r5
 800715a:	4303      	orrs	r3, r0
 800715c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800715e:	6890      	ldr	r0, [r2, #8]
 8007160:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007162:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007164:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8007168:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800716c:	4329      	orrs	r1, r5
 800716e:	4301      	orrs	r1, r0
 8007170:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007172:	68d1      	ldr	r1, [r2, #12]
 8007174:	69a0      	ldr	r0, [r4, #24]
 8007176:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800717a:	4303      	orrs	r3, r0
 800717c:	430b      	orrs	r3, r1
 800717e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007180:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007182:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8007184:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8007188:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800718a:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 800718c:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800718e:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007190:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007194:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007196:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800719c:	4b26      	ldr	r3, [pc, #152]	; (8007238 <HAL_I2C_Init+0x178>)
 800719e:	4298      	cmp	r0, r3
 80071a0:	d92e      	bls.n	8007200 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071a2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80071a4:	4b23      	ldr	r3, [pc, #140]	; (8007234 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071a6:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071a8:	4f24      	ldr	r7, [pc, #144]	; (800723c <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80071aa:	fba3 5300 	umull	r5, r3, r3, r0
 80071ae:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071b0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80071b4:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071ba:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071bc:	fb03 f305 	mul.w	r3, r3, r5
 80071c0:	fba7 5303 	umull	r5, r3, r7, r3
 80071c4:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80071c6:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071c8:	099b      	lsrs	r3, r3, #6
 80071ca:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80071ce:	3301      	adds	r3, #1
 80071d0:	432b      	orrs	r3, r5
 80071d2:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80071d4:	69d5      	ldr	r5, [r2, #28]
 80071d6:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80071da:	3801      	subs	r0, #1
 80071dc:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80071e0:	b996      	cbnz	r6, 8007208 <HAL_I2C_Init+0x148>
 80071e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80071e6:	fbb0 f0f1 	udiv	r0, r0, r1
 80071ea:	3001      	adds	r0, #1
 80071ec:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80071f0:	b9c0      	cbnz	r0, 8007224 <HAL_I2C_Init+0x164>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e7a8      	b.n	8007148 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 80071f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80071fa:	f7fc fff5 	bl	80041e8 <HAL_I2C_MspInit>
 80071fe:	e76b      	b.n	80070d8 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8007200:	2001      	movs	r0, #1
}
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007204:	2001      	movs	r0, #1
}
 8007206:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007208:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800720c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007210:	fbb0 f0f1 	udiv	r0, r0, r1
 8007214:	3001      	adds	r0, #1
 8007216:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800721a:	2800      	cmp	r0, #0
 800721c:	d0e9      	beq.n	80071f2 <HAL_I2C_Init+0x132>
 800721e:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8007222:	e791      	b.n	8007148 <HAL_I2C_Init+0x88>
 8007224:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8007228:	e78e      	b.n	8007148 <HAL_I2C_Init+0x88>
 800722a:	bf00      	nop
 800722c:	000186a0 	.word	0x000186a0
 8007230:	001e847f 	.word	0x001e847f
 8007234:	431bde83 	.word	0x431bde83
 8007238:	003d08ff 	.word	0x003d08ff
 800723c:	10624dd3 	.word	0x10624dd3

08007240 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8007240:	b1b0      	cbz	r0, 8007270 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8007242:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007244:	2324      	movs	r3, #36	; 0x24
{
 8007246:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007248:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800724c:	6813      	ldr	r3, [r2, #0]
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	4604      	mov	r4, r0
 8007254:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007256:	f7fc ffff 	bl	8004258 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800725a:	2300      	movs	r3, #0
 800725c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 800725e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007262:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007266:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 8007268:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800726a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800726e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007270:	2001      	movs	r0, #1
}
 8007272:	4770      	bx	lr

08007274 <HAL_I2C_Mem_Write>:
{
 8007274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	b083      	sub	sp, #12
 800727c:	4698      	mov	r8, r3
 800727e:	460e      	mov	r6, r1
 8007280:	4617      	mov	r7, r2
 8007282:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  uint32_t tickstart = HAL_GetTick();
 8007286:	f7fe f941 	bl	800550c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800728a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800728e:	2b20      	cmp	r3, #32
 8007290:	d003      	beq.n	800729a <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8007292:	2002      	movs	r0, #2
}
 8007294:	b003      	add	sp, #12
 8007296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800729a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800729c:	9000      	str	r0, [sp, #0]
 800729e:	2319      	movs	r3, #25
 80072a0:	2201      	movs	r2, #1
 80072a2:	493d      	ldr	r1, [pc, #244]	; (8007398 <HAL_I2C_Mem_Write+0x124>)
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff fdad 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d1f1      	bne.n	8007292 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80072ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d0ed      	beq.n	8007292 <HAL_I2C_Mem_Write+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80072ba:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072bc:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 80072be:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072c2:	d402      	bmi.n	80072ca <HAL_I2C_Mem_Write+0x56>
      __HAL_I2C_ENABLE(hi2c);
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ca:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072cc:	4833      	ldr	r0, [pc, #204]	; (800739c <HAL_I2C_Mem_Write+0x128>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072d2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072d4:	2321      	movs	r3, #33	; 0x21
 80072d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072da:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072dc:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80072e4:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072e8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80072ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ee:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072f0:	4631      	mov	r1, r6
 80072f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072f4:	9501      	str	r5, [sp, #4]
 80072f6:	9600      	str	r6, [sp, #0]
 80072f8:	4643      	mov	r3, r8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072fa:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072fc:	463a      	mov	r2, r7
    hi2c->XferSize    = hi2c->XferCount;
 80072fe:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007302:	4620      	mov	r0, r4
 8007304:	f7ff fdba 	bl	8006e7c <I2C_RequestMemoryWrite>
 8007308:	bb18      	cbnz	r0, 8007352 <HAL_I2C_Mem_Write+0xde>
 800730a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800730e:	462a      	mov	r2, r5
 8007310:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8007312:	b1ab      	cbz	r3, 8007340 <HAL_I2C_Mem_Write+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007314:	f7ff fd0a 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007318:	b9c0      	cbnz	r0, 800734c <HAL_I2C_Mem_Write+0xd8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800731a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800731c:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 800731e:	8d27      	ldrh	r7, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007320:	4631      	mov	r1, r6
      hi2c->XferSize--;
 8007322:	1e7b      	subs	r3, r7, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007324:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007328:	6102      	str	r2, [r0, #16]
      hi2c->XferCount--;
 800732a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800732c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800732e:	3a01      	subs	r2, #1
 8007330:	b292      	uxth	r2, r2
 8007332:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007334:	6942      	ldr	r2, [r0, #20]
      hi2c->XferSize--;
 8007336:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007338:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800733a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800733c:	d5e6      	bpl.n	800730c <HAL_I2C_Mem_Write+0x98>
 800733e:	b963      	cbnz	r3, 800735a <HAL_I2C_Mem_Write+0xe6>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007340:	462a      	mov	r2, r5
 8007342:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007344:	4620      	mov	r0, r4
 8007346:	f7ff fe83 	bl	8007050 <I2C_WaitOnBTFFlagUntilTimeout>
 800734a:	b190      	cbz	r0, 8007372 <HAL_I2C_Mem_Write+0xfe>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800734c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800734e:	2b04      	cmp	r3, #4
 8007350:	d01c      	beq.n	800738c <HAL_I2C_Mem_Write+0x118>
      return HAL_ERROR;
 8007352:	2001      	movs	r0, #1
}
 8007354:	b003      	add	sp, #12
 8007356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800735a:	7873      	ldrb	r3, [r6, #1]
 800735c:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800735e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8007360:	1ebb      	subs	r3, r7, #2
        hi2c->XferCount--;
 8007362:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8007364:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8007366:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8007368:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800736a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800736c:	6266      	str	r6, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800736e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007370:	e7cc      	b.n	800730c <HAL_I2C_Mem_Write+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007372:	6822      	ldr	r2, [r4, #0]
 8007374:	6813      	ldr	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007376:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800737c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800737e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8007382:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800738a:	e783      	b.n	8007294 <HAL_I2C_Mem_Write+0x20>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	6813      	ldr	r3, [r2, #0]
 8007390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e7dc      	b.n	8007352 <HAL_I2C_Mem_Write+0xde>
 8007398:	00100002 	.word	0x00100002
 800739c:	ffff0000 	.word	0xffff0000

080073a0 <HAL_I2C_Mem_Read>:
{
 80073a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073a4:	4604      	mov	r4, r0
 80073a6:	b087      	sub	sp, #28
 80073a8:	4698      	mov	r8, r3
 80073aa:	460e      	mov	r6, r1
 80073ac:	4617      	mov	r7, r2
 80073ae:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  uint32_t tickstart = HAL_GetTick();
 80073b2:	f7fe f8ab 	bl	800550c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d004      	beq.n	80073c8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80073be:	2602      	movs	r6, #2
}
 80073c0:	4630      	mov	r0, r6
 80073c2:	b007      	add	sp, #28
 80073c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073c8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073ca:	9000      	str	r0, [sp, #0]
 80073cc:	2319      	movs	r3, #25
 80073ce:	2201      	movs	r2, #1
 80073d0:	497c      	ldr	r1, [pc, #496]	; (80075c4 <HAL_I2C_Mem_Read+0x224>)
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7ff fd16 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d1f0      	bne.n	80073be <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80073dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d0ec      	beq.n	80073be <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80073e8:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073ea:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 80073ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073f0:	d402      	bmi.n	80073f8 <HAL_I2C_Mem_Read+0x58>
      __HAL_I2C_ENABLE(hi2c);
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073f8:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073fa:	4873      	ldr	r0, [pc, #460]	; (80075c8 <HAL_I2C_Mem_Read+0x228>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007400:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007402:	2322      	movs	r3, #34	; 0x22
 8007404:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007408:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800740a:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800740c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007410:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8007412:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007416:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800741a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800741c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800741e:	4631      	mov	r1, r6
 8007420:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007422:	9600      	str	r6, [sp, #0]
 8007424:	9501      	str	r5, [sp, #4]
 8007426:	4643      	mov	r3, r8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007428:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800742a:	463a      	mov	r2, r7
    hi2c->XferSize    = hi2c->XferCount;
 800742c:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007430:	4620      	mov	r0, r4
 8007432:	f7ff fd85 	bl	8006f40 <I2C_RequestMemoryRead>
 8007436:	4606      	mov	r6, r0
 8007438:	b9a8      	cbnz	r0, 8007466 <HAL_I2C_Mem_Read+0xc6>
    if (hi2c->XferSize == 0U)
 800743a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	b9bb      	cbnz	r3, 8007470 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007440:	9002      	str	r0, [sp, #8]
 8007442:	6953      	ldr	r3, [r2, #20]
 8007444:	9302      	str	r3, [sp, #8]
 8007446:	6993      	ldr	r3, [r2, #24]
 8007448:	9302      	str	r3, [sp, #8]
 800744a:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744c:	6813      	ldr	r3, [r2, #0]
 800744e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007452:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007454:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007456:	2220      	movs	r2, #32
 8007458:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800745c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007460:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8007464:	e7ac      	b.n	80073c0 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8007466:	2601      	movs	r6, #1
}
 8007468:	4630      	mov	r0, r6
 800746a:	b007      	add	sp, #28
 800746c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (hi2c->XferSize == 1U)
 8007470:	2b01      	cmp	r3, #1
 8007472:	d07b      	beq.n	800756c <HAL_I2C_Mem_Read+0x1cc>
    else if (hi2c->XferSize == 2U)
 8007474:	2b02      	cmp	r3, #2
 8007476:	f000 8095 	beq.w	80075a4 <HAL_I2C_Mem_Read+0x204>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747a:	9005      	str	r0, [sp, #20]
 800747c:	6951      	ldr	r1, [r2, #20]
 800747e:	9105      	str	r1, [sp, #20]
 8007480:	6992      	ldr	r2, [r2, #24]
 8007482:	9205      	str	r2, [sp, #20]
 8007484:	9a05      	ldr	r2, [sp, #20]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007486:	4f51      	ldr	r7, [pc, #324]	; (80075cc <HAL_I2C_Mem_Read+0x22c>)
      if (hi2c->XferSize <= 3U)
 8007488:	2b03      	cmp	r3, #3
 800748a:	d850      	bhi.n	800752e <HAL_I2C_Mem_Read+0x18e>
        if (hi2c->XferSize == 1U)
 800748c:	2b01      	cmp	r3, #1
 800748e:	d07c      	beq.n	800758a <HAL_I2C_Mem_Read+0x1ea>
        else if (hi2c->XferSize == 2U)
 8007490:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007492:	9500      	str	r5, [sp, #0]
 8007494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007496:	f04f 0200 	mov.w	r2, #0
 800749a:	4639      	mov	r1, r7
 800749c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800749e:	d01c      	beq.n	80074da <HAL_I2C_Mem_Read+0x13a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074a0:	f7ff fcb0 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d1de      	bne.n	8007466 <HAL_I2C_Mem_Read+0xc6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80074b2:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 80074b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80074ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80074bc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074be:	9500      	str	r5, [sp, #0]
          hi2c->XferCount--;
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80074c4:	f102 0c01 	add.w	ip, r2, #1
          hi2c->XferSize--;
 80074c8:	3901      	subs	r1, #1
          hi2c->XferCount--;
 80074ca:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
          hi2c->XferSize--;
 80074ce:	8521      	strh	r1, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074d0:	4602      	mov	r2, r0
          hi2c->pBuffPtr++;
 80074d2:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074d6:	4639      	mov	r1, r7
 80074d8:	4620      	mov	r0, r4
 80074da:	f7ff fc93 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d1c1      	bne.n	8007466 <HAL_I2C_Mem_Read+0xc6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e2:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ec:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80074f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80074f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80074f6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074f8:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007500:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 8007502:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8007506:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 8007508:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800750c:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800750e:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 8007510:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007512:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007514:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007516:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8007518:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800751a:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 800751c:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 800751e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8007520:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007522:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007524:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8007526:	2b00      	cmp	r3, #0
 8007528:	d094      	beq.n	8007454 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800752a:	2b03      	cmp	r3, #3
 800752c:	d9ae      	bls.n	800748c <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752e:	462a      	mov	r2, r5
 8007530:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff fc32 	bl	8006d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007538:	2800      	cmp	r0, #0
 800753a:	d194      	bne.n	8007466 <HAL_I2C_Mem_Read+0xc6>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007540:	6912      	ldr	r2, [r2, #16]
 8007542:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8007544:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007546:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8007548:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800754a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800754c:	3a01      	subs	r2, #1
 800754e:	b292      	uxth	r2, r2
 8007550:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007552:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8007554:	3b01      	subs	r3, #1
 8007556:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8007558:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800755c:	0752      	lsls	r2, r2, #29
        hi2c->XferSize--;
 800755e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8007560:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007564:	d5df      	bpl.n	8007526 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	6903      	ldr	r3, [r0, #16]
 8007568:	704b      	strb	r3, [r1, #1]
 800756a:	e7d1      	b.n	8007510 <HAL_I2C_Mem_Read+0x170>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756c:	6811      	ldr	r1, [r2, #0]
 800756e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007572:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007574:	9003      	str	r0, [sp, #12]
 8007576:	6951      	ldr	r1, [r2, #20]
 8007578:	9103      	str	r1, [sp, #12]
 800757a:	6991      	ldr	r1, [r2, #24]
 800757c:	9103      	str	r1, [sp, #12]
 800757e:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007580:	6811      	ldr	r1, [r2, #0]
 8007582:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007586:	6011      	str	r1, [r2, #0]
 8007588:	e77d      	b.n	8007486 <HAL_I2C_Mem_Read+0xe6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800758a:	462a      	mov	r2, r5
 800758c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800758e:	4620      	mov	r0, r4
 8007590:	f7ff fc04 	bl	8006d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007594:	2800      	cmp	r0, #0
 8007596:	f47f af66 	bne.w	8007466 <HAL_I2C_Mem_Read+0xc6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	e7b5      	b.n	8007510 <HAL_I2C_Mem_Read+0x170>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a4:	6811      	ldr	r1, [r2, #0]
 80075a6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80075aa:	6011      	str	r1, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80075b2:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b4:	9004      	str	r0, [sp, #16]
 80075b6:	6951      	ldr	r1, [r2, #20]
 80075b8:	9104      	str	r1, [sp, #16]
 80075ba:	6992      	ldr	r2, [r2, #24]
 80075bc:	9204      	str	r2, [sp, #16]
 80075be:	9a04      	ldr	r2, [sp, #16]
 80075c0:	e761      	b.n	8007486 <HAL_I2C_Mem_Read+0xe6>
 80075c2:	bf00      	nop
 80075c4:	00100002 	.word	0x00100002
 80075c8:	ffff0000 	.word	0xffff0000
 80075cc:	00010004 	.word	0x00010004

080075d0 <HAL_I2C_GetState>:
  return hi2c->State;
 80075d0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop

080075d8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075dc:	4680      	mov	r8, r0
 80075de:	460e      	mov	r6, r1
 80075e0:	4615      	mov	r5, r2
 80075e2:	461f      	mov	r7, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80075e4:	f7fd ff92 	bl	800550c <HAL_GetTick>
 80075e8:	4681      	mov	r9, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80075ea:	f8d8 4000 	ldr.w	r4, [r8]
 80075ee:	e001      	b.n	80075f4 <I2S_WaitFlagStateUntilTimeout+0x1c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075f0:	1c7b      	adds	r3, r7, #1
 80075f2:	d10a      	bne.n	800760a <I2S_WaitFlagStateUntilTimeout+0x32>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80075f4:	68a0      	ldr	r0, [r4, #8]
 80075f6:	ea36 0300 	bics.w	r3, r6, r0
 80075fa:	bf0c      	ite	eq
 80075fc:	2001      	moveq	r0, #1
 80075fe:	2000      	movne	r0, #0
 8007600:	42a8      	cmp	r0, r5
 8007602:	d1f5      	bne.n	80075f0 <I2S_WaitFlagStateUntilTimeout+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007604:	2000      	movs	r0, #0
}
 8007606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800760a:	f7fd ff7f 	bl	800550c <HAL_GetTick>
 800760e:	eba0 0009 	sub.w	r0, r0, r9
 8007612:	42b8      	cmp	r0, r7
 8007614:	d3e9      	bcc.n	80075ea <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8007616:	2201      	movs	r2, #1
        __HAL_UNLOCK(hi2s);
 8007618:	2300      	movs	r3, #0
        hi2s->State = HAL_I2S_STATE_READY;
 800761a:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        return HAL_TIMEOUT;
 800761e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hi2s);
 8007620:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_TIMEOUT;
 8007624:	e7ef      	b.n	8007606 <I2S_WaitFlagStateUntilTimeout+0x2e>
 8007626:	bf00      	nop

08007628 <HAL_I2S_Init>:
  if (hi2s == NULL)
 8007628:	2800      	cmp	r0, #0
 800762a:	f000 8085 	beq.w	8007738 <HAL_I2S_Init+0x110>
{
 800762e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007630:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007634:	4604      	mov	r4, r0
 8007636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800763a:	2b00      	cmp	r3, #0
 800763c:	d075      	beq.n	800772a <HAL_I2S_Init+0x102>
  hi2s->State = HAL_I2S_STATE_BUSY;
 800763e:	2202      	movs	r2, #2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007640:	6821      	ldr	r1, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8007642:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007646:	69c8      	ldr	r0, [r1, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007648:	6963      	ldr	r3, [r4, #20]
 800764a:	68e5      	ldr	r5, [r4, #12]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800764c:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8007650:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007654:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007656:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8007658:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800765a:	d027      	beq.n	80076ac <HAL_I2S_Init+0x84>
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800765c:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 800765e:	2d00      	cmp	r5, #0
 8007660:	bf0c      	ite	eq
 8007662:	2510      	moveq	r5, #16
 8007664:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007666:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007668:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800766a:	bf98      	it	ls
 800766c:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800766e:	f000 ffff 	bl	8008670 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007672:	6922      	ldr	r2, [r4, #16]
 8007674:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007678:	d060      	beq.n	800773c <HAL_I2S_Init+0x114>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800767a:	fbb0 f0f5 	udiv	r0, r0, r5
 800767e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007682:	0043      	lsls	r3, r0, #1
 8007684:	6960      	ldr	r0, [r4, #20]
 8007686:	fbb3 f3f0 	udiv	r3, r3, r0
 800768a:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 800768c:	4935      	ldr	r1, [pc, #212]	; (8007764 <HAL_I2S_Init+0x13c>)
 800768e:	fba1 1303 	umull	r1, r3, r1, r3
 8007692:	08db      	lsrs	r3, r3, #3
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007694:	0859      	lsrs	r1, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007696:	1e88      	subs	r0, r1, #2
 8007698:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800769a:	f003 0301 	and.w	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800769e:	d95a      	bls.n	8007756 <HAL_I2S_Init+0x12e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80076a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80076a2:	f043 0310 	orr.w	r3, r3, #16
 80076a6:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80076a8:	2001      	movs	r0, #1
}
 80076aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ac:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80076ae:	69a7      	ldr	r7, [r4, #24]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80076b0:	f8d4 e020 	ldr.w	lr, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80076b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8007778 <HAL_I2S_Init+0x150>
 80076b8:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80076bc:	4313      	orrs	r3, r2
 80076be:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80076c0:	ea46 0300 	orr.w	r3, r6, r0
 80076c4:	69ca      	ldr	r2, [r1, #28]
 80076c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076ca:	433b      	orrs	r3, r7
 80076cc:	432b      	orrs	r3, r5
 80076ce:	ea02 020c 	and.w	r2, r2, ip
 80076d2:	4313      	orrs	r3, r2
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80076d4:	f1be 0f01 	cmp.w	lr, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80076d8:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80076da:	d120      	bne.n	800771e <HAL_I2S_Init+0xf6>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80076dc:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_I2S_Init+0x140>)
 80076de:	4b23      	ldr	r3, [pc, #140]	; (800776c <HAL_I2S_Init+0x144>)
 80076e0:	4291      	cmp	r1, r2
 80076e2:	bf0c      	ite	eq
 80076e4:	4619      	moveq	r1, r3
 80076e6:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_I2S_Init+0x148>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80076ec:	69ca      	ldr	r2, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80076ee:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80076f0:	ea02 020c 	and.w	r2, r2, ip
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80076f4:	f04f 0c02 	mov.w	ip, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80076f8:	61ca      	str	r2, [r1, #28]
 80076fa:	ea40 0307 	orr.w	r3, r0, r7
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80076fe:	f8c1 c020 	str.w	ip, [r1, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007702:	69ca      	ldr	r2, [r1, #28]
 8007704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007708:	432b      	orrs	r3, r5
 800770a:	4313      	orrs	r3, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800770c:	f436 7000 	bics.w	r0, r6, #512	; 0x200
 8007710:	b29b      	uxth	r3, r3
 8007712:	bf14      	ite	ne
 8007714:	2200      	movne	r2, #0
 8007716:	f44f 7280 	moveq.w	r2, #256	; 0x100
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800771a:	4313      	orrs	r3, r2
 800771c:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800771e:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8007720:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007722:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007724:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8007728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <HAL_I2S_Init+0x14c>)
    hi2s->Lock = HAL_UNLOCKED;
 800772c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007730:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8007732:	f7fc fdad 	bl	8004290 <HAL_I2S_MspInit>
 8007736:	e782      	b.n	800763e <HAL_I2S_Init+0x16>
    return HAL_ERROR;
 8007738:	2001      	movs	r0, #1
}
 800773a:	4770      	bx	lr
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800773c:	68e3      	ldr	r3, [r4, #12]
 800773e:	6961      	ldr	r1, [r4, #20]
 8007740:	b173      	cbz	r3, 8007760 <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007742:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007744:	fbb0 f0f5 	udiv	r0, r0, r5
 8007748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800774c:	0043      	lsls	r3, r0, #1
 800774e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007752:	3305      	adds	r3, #5
 8007754:	e79a      	b.n	800768c <HAL_I2S_Init+0x64>
 8007756:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800775a:	68e5      	ldr	r5, [r4, #12]
 800775c:	6821      	ldr	r1, [r4, #0]
 800775e:	e7a6      	b.n	80076ae <HAL_I2S_Init+0x86>
 8007760:	00ed      	lsls	r5, r5, #3
 8007762:	e7ef      	b.n	8007744 <HAL_I2S_Init+0x11c>
 8007764:	cccccccd 	.word	0xcccccccd
 8007768:	40003800 	.word	0x40003800
 800776c:	40003400 	.word	0x40003400
 8007770:	08007ce1 	.word	0x08007ce1
 8007774:	08007ba5 	.word	0x08007ba5
 8007778:	fffff040 	.word	0xfffff040

0800777c <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0U))
 800777c:	2900      	cmp	r1, #0
 800777e:	d03e      	beq.n	80077fe <HAL_I2S_Transmit_DMA+0x82>
 8007780:	2a00      	cmp	r2, #0
 8007782:	d03c      	beq.n	80077fe <HAL_I2S_Transmit_DMA+0x82>
{
 8007784:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2s);
 8007786:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800778a:	2b01      	cmp	r3, #1
 800778c:	d04f      	beq.n	800782e <HAL_I2S_Transmit_DMA+0xb2>
 800778e:	2301      	movs	r3, #1
 8007790:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8007794:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007798:	2b01      	cmp	r3, #1
 800779a:	d132      	bne.n	8007802 <HAL_I2S_Transmit_DMA+0x86>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800779c:	2403      	movs	r4, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800779e:	2300      	movs	r3, #0
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80077a0:	6805      	ldr	r5, [r0, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80077a2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80077a6:	6443      	str	r3, [r0, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80077a8:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 80077aa:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80077ac:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d02b      	beq.n	800780c <HAL_I2S_Transmit_DMA+0x90>
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d029      	beq.n	800780c <HAL_I2S_Transmit_DMA+0x90>
    hi2s->TxXferSize = Size;
 80077b8:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80077ba:	8542      	strh	r2, [r0, #42]	; 0x2a
 80077bc:	4604      	mov	r4, r0
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80077be:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80077c0:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <HAL_I2S_Transmit_DMA+0xb8>)
                                 hi2s->TxXferSize))
 80077c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80077c4:	6402      	str	r2, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80077c6:	4a1c      	ldr	r2, [pc, #112]	; (8007838 <HAL_I2S_Transmit_DMA+0xbc>)
 80077c8:	63c2      	str	r2, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80077ca:	4a1c      	ldr	r2, [pc, #112]	; (800783c <HAL_I2S_Transmit_DMA+0xc0>)
 80077cc:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80077ce:	f105 020c 	add.w	r2, r5, #12
 80077d2:	f7fe fa11 	bl	8005bf8 <HAL_DMA_Start_IT>
 80077d6:	b9f0      	cbnz	r0, 8007816 <HAL_I2S_Transmit_DMA+0x9a>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	0551      	lsls	r1, r2, #21
 80077de:	d403      	bmi.n	80077e8 <HAL_I2S_Transmit_DMA+0x6c>
    __HAL_I2S_ENABLE(hi2s);
 80077e0:	69da      	ldr	r2, [r3, #28]
 80077e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077e6:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	0792      	lsls	r2, r2, #30
 80077ec:	d403      	bmi.n	80077f6 <HAL_I2S_Transmit_DMA+0x7a>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	f042 0202 	orr.w	r2, r2, #2
 80077f4:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 80077f6:	2300      	movs	r3, #0
 80077f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80077fc:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 80077fe:	2001      	movs	r0, #1
}
 8007800:	4770      	bx	lr
    __HAL_UNLOCK(hi2s);
 8007802:	2300      	movs	r3, #0
 8007804:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 8007808:	2002      	movs	r0, #2
}
 800780a:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = (Size << 1U);
 800780c:	0053      	lsls	r3, r2, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007812:	8543      	strh	r3, [r0, #42]	; 0x2a
 8007814:	e7d2      	b.n	80077bc <HAL_I2S_Transmit_DMA+0x40>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007816:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007818:	2201      	movs	r2, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800781a:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 800781e:	2100      	movs	r1, #0
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007820:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8007822:	4610      	mov	r0, r2
    hi2s->State = HAL_I2S_STATE_READY;
 8007824:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8007828:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
}
 800782c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 800782e:	2002      	movs	r0, #2
}
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	08007b79 	.word	0x08007b79
 8007838:	08007b85 	.word	0x08007b85
 800783c:	08007cad 	.word	0x08007cad

08007840 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8007840:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007844:	2b01      	cmp	r3, #1
 8007846:	d027      	beq.n	8007898 <HAL_I2S_DMAPause+0x58>
 8007848:	2301      	movs	r3, #1
 800784a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800784e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007852:	2b03      	cmp	r3, #3
 8007854:	d00c      	beq.n	8007870 <HAL_I2S_DMAPause+0x30>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007856:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800785a:	2b04      	cmp	r3, #4
 800785c:	d012      	beq.n	8007884 <HAL_I2S_DMAPause+0x44>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800785e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007862:	2b05      	cmp	r3, #5
 8007864:	d01a      	beq.n	800789c <HAL_I2S_DMAPause+0x5c>
  __HAL_UNLOCK(hi2s);
 8007866:	2300      	movs	r3, #0
 8007868:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 800786c:	4618      	mov	r0, r3
}
 800786e:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007870:	6802      	ldr	r2, [r0, #0]
 8007872:	6853      	ldr	r3, [r2, #4]
 8007874:	f023 0302 	bic.w	r3, r3, #2
 8007878:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 800787a:	2300      	movs	r3, #0
 800787c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8007880:	4618      	mov	r0, r3
}
 8007882:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007884:	6802      	ldr	r2, [r0, #0]
 8007886:	6853      	ldr	r3, [r2, #4]
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 800788e:	2300      	movs	r3, #0
 8007890:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8007894:	4618      	mov	r0, r3
}
 8007896:	4770      	bx	lr
  __HAL_LOCK(hi2s);
 8007898:	2002      	movs	r0, #2
 800789a:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800789c:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <HAL_I2S_DMAPause+0x8c>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078a0:	6851      	ldr	r1, [r2, #4]
{
 80078a2:	b410      	push	{r4}
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078a4:	4c0a      	ldr	r4, [pc, #40]	; (80078d0 <HAL_I2S_DMAPause+0x90>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078a6:	f021 0103 	bic.w	r1, r1, #3
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078aa:	42a2      	cmp	r2, r4
 80078ac:	bf18      	it	ne
 80078ae:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078b2:	6051      	str	r1, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078b4:	685a      	ldr	r2, [r3, #4]
}
 80078b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078ba:	f022 0203 	bic.w	r2, r2, #3
 80078be:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 80078c0:	2300      	movs	r3, #0
 80078c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 80078c6:	4618      	mov	r0, r3
}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40003400 	.word	0x40003400
 80078d0:	40003800 	.word	0x40003800

080078d4 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 80078d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d025      	beq.n	8007928 <HAL_I2S_DMAResume+0x54>
 80078dc:	2301      	movs	r3, #1
 80078de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80078e2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80078e6:	6803      	ldr	r3, [r0, #0]
 80078e8:	2a03      	cmp	r2, #3
 80078ea:	d013      	beq.n	8007914 <HAL_I2S_DMAResume+0x40>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80078ec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80078f0:	2a04      	cmp	r2, #4
 80078f2:	d014      	beq.n	800791e <HAL_I2S_DMAResume+0x4a>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80078f4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80078f8:	2a05      	cmp	r2, #5
 80078fa:	d017      	beq.n	800792c <HAL_I2S_DMAResume+0x58>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	0552      	lsls	r2, r2, #21
 8007900:	d403      	bmi.n	800790a <HAL_I2S_DMAResume+0x36>
    __HAL_I2S_ENABLE(hi2s);
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007908:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 800790a:	2300      	movs	r3, #0
 800790c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8007910:	4618      	mov	r0, r3
}
 8007912:	4770      	bx	lr
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	f042 0202 	orr.w	r2, r2, #2
 800791a:	605a      	str	r2, [r3, #4]
 800791c:	e7ee      	b.n	80078fc <HAL_I2S_DMAResume+0x28>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	f042 0201 	orr.w	r2, r2, #1
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	e7e9      	b.n	80078fc <HAL_I2S_DMAResume+0x28>
  __HAL_LOCK(hi2s);
 8007928:	2002      	movs	r0, #2
 800792a:	4770      	bx	lr
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800792c:	6859      	ldr	r1, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800792e:	4a11      	ldr	r2, [pc, #68]	; (8007974 <HAL_I2S_DMAResume+0xa0>)
{
 8007930:	b410      	push	{r4}
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007932:	4c11      	ldr	r4, [pc, #68]	; (8007978 <HAL_I2S_DMAResume+0xa4>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007934:	f041 0103 	orr.w	r1, r1, #3
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007938:	42a3      	cmp	r3, r4
 800793a:	bf18      	it	ne
 800793c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007940:	6059      	str	r1, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007942:	6851      	ldr	r1, [r2, #4]
 8007944:	f041 0103 	orr.w	r1, r1, #3
 8007948:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 800794a:	69d1      	ldr	r1, [r2, #28]
 800794c:	054c      	lsls	r4, r1, #21
 800794e:	d403      	bmi.n	8007958 <HAL_I2S_DMAResume+0x84>
      __HAL_I2SEXT_ENABLE(hi2s);
 8007950:	69d1      	ldr	r1, [r2, #28]
 8007952:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8007956:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	0551      	lsls	r1, r2, #21
 800795c:	d403      	bmi.n	8007966 <HAL_I2S_DMAResume+0x92>
    __HAL_I2S_ENABLE(hi2s);
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007964:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8007966:	2300      	movs	r3, #0
 8007968:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 800796c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007970:	4618      	mov	r0, r3
}
 8007972:	4770      	bx	lr
 8007974:	40003400 	.word	0x40003400
 8007978:	40003800 	.word	0x40003800

0800797c <HAL_I2S_DMAStop>:
{
 800797c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007980:	6843      	ldr	r3, [r0, #4]
 8007982:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 8007986:	b085      	sub	sp, #20
 8007988:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800798a:	d004      	beq.n	8007996 <HAL_I2S_DMAStop+0x1a>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800798c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007990:	d066      	beq.n	8007a60 <HAL_I2S_DMAStop+0xe4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007992:	2500      	movs	r5, #0
 8007994:	e035      	b.n	8007a02 <HAL_I2S_DMAStop+0x86>
    if (hi2s->hdmatx != NULL)
 8007996:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007998:	b120      	cbz	r0, 80079a4 <HAL_I2S_DMAStop+0x28>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800799a:	f7fe f96b 	bl	8005c74 <HAL_DMA_Abort>
 800799e:	2800      	cmp	r0, #0
 80079a0:	f040 8082 	bne.w	8007aa8 <HAL_I2S_DMAStop+0x12c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079a4:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80079a6:	2364      	movs	r3, #100	; 0x64
 80079a8:	2201      	movs	r2, #1
 80079aa:	2102      	movs	r1, #2
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff fe13 	bl	80075d8 <I2S_WaitFlagStateUntilTimeout>
 80079b2:	b130      	cbz	r0, 80079c2 <HAL_I2S_DMAStop+0x46>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80079b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80079b6:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80079b8:	4313      	orrs	r3, r2
 80079ba:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode   = HAL_ERROR;
 80079bc:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 80079be:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80079c2:	2364      	movs	r3, #100	; 0x64
 80079c4:	2200      	movs	r2, #0
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7ff fe05 	bl	80075d8 <I2S_WaitFlagStateUntilTimeout>
 80079ce:	b130      	cbz	r0, 80079de <HAL_I2S_DMAStop+0x62>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80079d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80079d2:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80079d4:	4313      	orrs	r3, r2
 80079d6:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode   = HAL_ERROR;
 80079d8:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 80079da:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	69da      	ldr	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80079e2:	2100      	movs	r1, #0
    __HAL_I2S_DISABLE(hi2s);
 80079e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e8:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80079ea:	9100      	str	r1, [sp, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	9200      	str	r2, [sp, #0]
 80079f0:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	f022 0202 	bic.w	r2, r2, #2
 80079f8:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80079fa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80079fe:	2a05      	cmp	r2, #5
 8007a00:	d006      	beq.n	8007a10 <HAL_I2S_DMAStop+0x94>
  hi2s->State = HAL_I2S_STATE_READY;
 8007a02:	2301      	movs	r3, #1
}
 8007a04:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8007a06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8007a0a:	b005      	add	sp, #20
 8007a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (hi2s->hdmarx != NULL)
 8007a10:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007a12:	b120      	cbz	r0, 8007a1e <HAL_I2S_DMAStop+0xa2>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007a14:	f7fe f92e 	bl	8005c74 <HAL_DMA_Abort>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d14d      	bne.n	8007ab8 <HAL_I2S_DMAStop+0x13c>
 8007a1c:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE(hi2s);
 8007a1e:	4854      	ldr	r0, [pc, #336]	; (8007b70 <HAL_I2S_DMAStop+0x1f4>)
 8007a20:	4a54      	ldr	r2, [pc, #336]	; (8007b74 <HAL_I2S_DMAStop+0x1f8>)
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8007a22:	6861      	ldr	r1, [r4, #4]
      __HAL_I2SEXT_DISABLE(hi2s);
 8007a24:	4283      	cmp	r3, r0
 8007a26:	bf0c      	ite	eq
 8007a28:	4613      	moveq	r3, r2
 8007a2a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007a2e:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE(hi2s);
 8007a30:	69da      	ldr	r2, [r3, #28]
 8007a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a36:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007a38:	9001      	str	r0, [sp, #4]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	9201      	str	r2, [sp, #4]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	9201      	str	r2, [sp, #4]
 8007a42:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8007a4c:	bb51      	cbnz	r1, 8007aa4 <HAL_I2S_DMAStop+0x128>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007a4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007a50:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a56:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode = HAL_ERROR;
 8007a58:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 8007a5a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8007a5e:	e7d0      	b.n	8007a02 <HAL_I2S_DMAStop+0x86>
    if (hi2s->hdmarx != NULL)
 8007a60:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007a62:	b338      	cbz	r0, 8007ab4 <HAL_I2S_DMAStop+0x138>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007a64:	f7fe f906 	bl	8005c74 <HAL_DMA_Abort>
 8007a68:	b320      	cbz	r0, 8007ab4 <HAL_I2S_DMAStop+0x138>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a6c:	f043 0308 	orr.w	r3, r3, #8
 8007a70:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007a72:	2501      	movs	r5, #1
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007a74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a78:	2b05      	cmp	r3, #5
 8007a7a:	d024      	beq.n	8007ac6 <HAL_I2S_DMAStop+0x14a>
 8007a7c:	6823      	ldr	r3, [r4, #0]
    __HAL_I2S_DISABLE(hi2s);
 8007a7e:	69da      	ldr	r2, [r3, #28]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007a80:	6861      	ldr	r1, [r4, #4]
    __HAL_I2S_DISABLE(hi2s);
 8007a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007a86:	2000      	movs	r0, #0
    __HAL_I2S_DISABLE(hi2s);
 8007a88:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007a8a:	9003      	str	r0, [sp, #12]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	9203      	str	r2, [sp, #12]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	9203      	str	r2, [sp, #12]
 8007a94:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a96:	685a      	ldr	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007a98:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
 8007aa0:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007aa2:	d0d4      	beq.n	8007a4e <HAL_I2S_DMAStop+0xd2>
      READ_REG((hi2s->Instance)->DR);
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	e7ac      	b.n	8007a02 <HAL_I2S_DMAStop+0x86>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007aaa:	f043 0308 	orr.w	r3, r3, #8
 8007aae:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007ab0:	2501      	movs	r5, #1
 8007ab2:	e778      	b.n	80079a6 <HAL_I2S_DMAStop+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	e7dd      	b.n	8007a74 <HAL_I2S_DMAStop+0xf8>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007ab8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	f042 0208 	orr.w	r2, r2, #8
 8007ac0:	6462      	str	r2, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007ac2:	2501      	movs	r5, #1
 8007ac4:	e7ab      	b.n	8007a1e <HAL_I2S_DMAStop+0xa2>
      if (hi2s->hdmatx != NULL)
 8007ac6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007ac8:	b138      	cbz	r0, 8007ada <HAL_I2S_DMAStop+0x15e>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007aca:	f7fe f8d3 	bl	8005c74 <HAL_DMA_Abort>
 8007ace:	b120      	cbz	r0, 8007ada <HAL_I2S_DMAStop+0x15e>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007ad0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007ad2:	f043 0308 	orr.w	r3, r3, #8
 8007ad6:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007ad8:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8007ada:	f7fd fd17 	bl	800550c <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007ade:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007b70 <HAL_I2S_DMAStop+0x1f4>
 8007ae2:	4f24      	ldr	r7, [pc, #144]	; (8007b74 <HAL_I2S_DMAStop+0x1f8>)
      tickstart = HAL_GetTick();
 8007ae4:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8007ae6:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007aea:	e004      	b.n	8007af6 <HAL_I2S_DMAStop+0x17a>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007aec:	f7fd fd0e 	bl	800550c <HAL_GetTick>
 8007af0:	1b80      	subs	r0, r0, r6
 8007af2:	2864      	cmp	r0, #100	; 0x64
 8007af4:	d82a      	bhi.n	8007b4c <HAL_I2S_DMAStop+0x1d0>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	4543      	cmp	r3, r8
 8007afa:	bf0c      	ite	eq
 8007afc:	463a      	moveq	r2, r7
 8007afe:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8007b02:	6892      	ldr	r2, [r2, #8]
 8007b04:	0792      	lsls	r2, r2, #30
 8007b06:	d5f1      	bpl.n	8007aec <HAL_I2S_DMAStop+0x170>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007b08:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007b70 <HAL_I2S_DMAStop+0x1f4>
 8007b0c:	4f19      	ldr	r7, [pc, #100]	; (8007b74 <HAL_I2S_DMAStop+0x1f8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8007b0e:	f04f 0901 	mov.w	r9, #1
 8007b12:	e005      	b.n	8007b20 <HAL_I2S_DMAStop+0x1a4>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007b14:	f7fd fcfa 	bl	800550c <HAL_GetTick>
 8007b18:	1b80      	subs	r0, r0, r6
 8007b1a:	2864      	cmp	r0, #100	; 0x64
 8007b1c:	d81e      	bhi.n	8007b5c <HAL_I2S_DMAStop+0x1e0>
 8007b1e:	6823      	ldr	r3, [r4, #0]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007b20:	4543      	cmp	r3, r8
 8007b22:	bf0c      	ite	eq
 8007b24:	4639      	moveq	r1, r7
 8007b26:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8007b2a:	688a      	ldr	r2, [r1, #8]
 8007b2c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8007b30:	d1f0      	bne.n	8007b14 <HAL_I2S_DMAStop+0x198>
      __HAL_I2SEXT_DISABLE(hi2s);
 8007b32:	69c8      	ldr	r0, [r1, #28]
 8007b34:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8007b38:	61c8      	str	r0, [r1, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007b3a:	9202      	str	r2, [sp, #8]
 8007b3c:	688a      	ldr	r2, [r1, #8]
 8007b3e:	9202      	str	r2, [sp, #8]
 8007b40:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007b42:	684a      	ldr	r2, [r1, #4]
 8007b44:	f022 0202 	bic.w	r2, r2, #2
 8007b48:	604a      	str	r2, [r1, #4]
 8007b4a:	e798      	b.n	8007a7e <HAL_I2S_DMAStop+0x102>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007b4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8007b54:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8007b56:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 8007b5a:	e7cc      	b.n	8007af6 <HAL_I2S_DMAStop+0x17a>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007b5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	6462      	str	r2, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8007b66:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8007b68:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 8007b6c:	e7d8      	b.n	8007b20 <HAL_I2S_DMAStop+0x1a4>
 8007b6e:	bf00      	nop
 8007b70:	40003800 	.word	0x40003800
 8007b74:	40003400 	.word	0x40003400

08007b78 <I2S_DMATxHalfCplt>:
{
 8007b78:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007b7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007b7c:	f7fd f94e 	bl	8004e1c <HAL_I2S_TxHalfCpltCallback>
}
 8007b80:	bd08      	pop	{r3, pc}
 8007b82:	bf00      	nop

08007b84 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b84:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b86:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007b88:	b510      	push	{r4, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b8a:	b943      	cbnz	r3, 8007b9e <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b8c:	6801      	ldr	r1, [r0, #0]
 8007b8e:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007b90:	2401      	movs	r4, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b92:	f022 0202 	bic.w	r2, r2, #2
 8007b96:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8007b98:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007b9a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8007b9e:	f7fd f931 	bl	8004e04 <HAL_I2S_TxCpltCallback>
}
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <I2S_IRQHandler>:
{
 8007ba4:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007ba6:	6803      	ldr	r3, [r0, #0]
{
 8007ba8:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007bae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007bb2:	2a04      	cmp	r2, #4
{
 8007bb4:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007bb6:	d034      	beq.n	8007c22 <I2S_IRQHandler+0x7e>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007bb8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d001      	beq.n	8007bc4 <I2S_IRQHandler+0x20>
}
 8007bc0:	b004      	add	sp, #16
 8007bc2:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	079b      	lsls	r3, r3, #30
 8007bc8:	d510      	bpl.n	8007bec <I2S_IRQHandler+0x48>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	0610      	lsls	r0, r2, #24
 8007bd0:	d50c      	bpl.n	8007bec <I2S_IRQHandler+0x48>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007bd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bd4:	f831 2b02 	ldrh.w	r2, [r1], #2
 8007bd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007bda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8007bdc:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8007bde:	3a01      	subs	r2, #1
 8007be0:	b292      	uxth	r2, r2
 8007be2:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8007be4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007be6:	b292      	uxth	r2, r2
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	d049      	beq.n	8007c80 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007bec:	9b01      	ldr	r3, [sp, #4]
 8007bee:	0719      	lsls	r1, r3, #28
 8007bf0:	d5e6      	bpl.n	8007bc0 <I2S_IRQHandler+0x1c>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	0692      	lsls	r2, r2, #26
 8007bf8:	d5e2      	bpl.n	8007bc0 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bfa:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007bfc:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c02:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c04:	9103      	str	r1, [sp, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8007c0a:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c0c:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8007c0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c14:	f043 0304 	orr.w	r3, r3, #4
 8007c18:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7fd f912 	bl	8004e44 <HAL_I2S_ErrorCallback>
}
 8007c20:	e7ce      	b.n	8007bc0 <I2S_IRQHandler+0x1c>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	07d1      	lsls	r1, r2, #31
 8007c26:	d50e      	bpl.n	8007c46 <I2S_IRQHandler+0xa2>
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	0652      	lsls	r2, r2, #25
 8007c2c:	d50b      	bpl.n	8007c46 <I2S_IRQHandler+0xa2>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007c2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8007c36:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8007c38:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007c3a:	3a01      	subs	r2, #1
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8007c40:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007c42:	b292      	uxth	r2, r2
 8007c44:	b33a      	cbz	r2, 8007c96 <I2S_IRQHandler+0xf2>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	0659      	lsls	r1, r3, #25
 8007c4a:	d5b5      	bpl.n	8007bb8 <I2S_IRQHandler+0x14>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	0692      	lsls	r2, r2, #26
 8007c52:	d5b1      	bpl.n	8007bb8 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c54:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007c56:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c5c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007c5e:	9102      	str	r1, [sp, #8]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	9202      	str	r2, [sp, #8]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8007c68:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007c6a:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8007c6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c72:	f043 0302 	orr.w	r3, r3, #2
 8007c76:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f7fd f8e3 	bl	8004e44 <HAL_I2S_ErrorCallback>
 8007c7e:	e79b      	b.n	8007bb8 <I2S_IRQHandler+0x14>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c80:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007c82:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c88:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8007c8a:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8007c8c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8007c90:	f7fd f8b8 	bl	8004e04 <HAL_I2S_TxCpltCallback>
 8007c94:	e7aa      	b.n	8007bec <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c96:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007c98:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c9e:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007ca0:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8007ca4:	f7fd f8c8 	bl	8004e38 <HAL_I2S_RxCpltCallback>
 8007ca8:	e7cd      	b.n	8007c46 <I2S_IRQHandler+0xa2>
 8007caa:	bf00      	nop

08007cac <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007cae:	6801      	ldr	r1, [r0, #0]
 8007cb0:	684b      	ldr	r3, [r1, #4]
{
 8007cb2:	b510      	push	{r4, lr}
  hi2s->TxXferCount = 0U;
 8007cb4:	2200      	movs	r2, #0
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
  hi2s->State = HAL_I2S_STATE_READY;
 8007cba:	2401      	movs	r4, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007cbc:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8007cbe:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8007cc0:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8007cc2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007cc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8007cce:	f7fd f8b9 	bl	8004e44 <HAL_I2S_ErrorCallback>
}
 8007cd2:	bd10      	pop	{r4, pc}

08007cd4 <HAL_I2S_GetState>:
  return hi2s->State;
 8007cd4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop

08007cdc <HAL_I2SEx_TxRxCpltCallback>:
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop

08007ce0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007ce0:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007ce2:	4a93      	ldr	r2, [pc, #588]	; (8007f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007ce4:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007ce6:	4b93      	ldr	r3, [pc, #588]	; (8007f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007ce8:	68a9      	ldr	r1, [r5, #8]
{
 8007cea:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007cec:	4295      	cmp	r5, r2
 8007cee:	bf18      	it	ne
 8007cf0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007cf4:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007cf6:	6899      	ldr	r1, [r3, #8]
 8007cf8:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007cfa:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007cfc:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007cfe:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007d04:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8007d08:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007d0a:	d075      	beq.n	8007df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007d0c:	9a01      	ldr	r2, [sp, #4]
 8007d0e:	0791      	lsls	r1, r2, #30
 8007d10:	d51a      	bpl.n	8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8007d12:	9a03      	ldr	r2, [sp, #12]
 8007d14:	0612      	lsls	r2, r2, #24
 8007d16:	d517      	bpl.n	8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007d18:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007d1a:	1c91      	adds	r1, r2, #2
 8007d1c:	8812      	ldrh	r2, [r2, #0]
 8007d1e:	6241      	str	r1, [r0, #36]	; 0x24
 8007d20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007d22:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007d24:	3a01      	subs	r2, #1
 8007d26:	b292      	uxth	r2, r2
 8007d28:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007d2a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007d2c:	b292      	uxth	r2, r2
 8007d2e:	b95a      	cbnz	r2, 8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d36:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007d38:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	b923      	cbnz	r3, 8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d44:	f7ff ffca 	bl	8007cdc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007d48:	9b00      	ldr	r3, [sp, #0]
 8007d4a:	07db      	lsls	r3, r3, #31
 8007d4c:	d51c      	bpl.n	8007d88 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8007d4e:	9b02      	ldr	r3, [sp, #8]
 8007d50:	065d      	lsls	r5, r3, #25
 8007d52:	d519      	bpl.n	8007d88 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007d54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	1c98      	adds	r0, r3, #2
 8007d5a:	68d1      	ldr	r1, [r2, #12]
 8007d5c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007d5e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8007d60:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007d68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	b963      	cbnz	r3, 8007d88 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d6e:	6853      	ldr	r3, [r2, #4]
 8007d70:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007d74:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8007d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	b92b      	cbnz	r3, 8007d88 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7ff ffaa 	bl	8007cdc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d88:	9b00      	ldr	r3, [sp, #0]
 8007d8a:	0658      	lsls	r0, r3, #25
 8007d8c:	d51b      	bpl.n	8007dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	0699      	lsls	r1, r3, #26
 8007d92:	d518      	bpl.n	8007dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d94:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d96:	4866      	ldr	r0, [pc, #408]	; (8007f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d98:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d9a:	4b66      	ldr	r3, [pc, #408]	; (8007f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d9c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007da0:	4282      	cmp	r2, r0
 8007da2:	bf18      	it	ne
 8007da4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007da8:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007daa:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007dac:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007db2:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007db4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007db8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007dba:	f043 0302 	orr.w	r3, r3, #2
 8007dbe:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7fd f83f 	bl	8004e44 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	071a      	lsls	r2, r3, #28
 8007dca:	d56e      	bpl.n	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	069b      	lsls	r3, r3, #26
 8007dd0:	d56b      	bpl.n	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	4956      	ldr	r1, [pc, #344]	; (8007f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8007dd6:	4b57      	ldr	r3, [pc, #348]	; (8007f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	bf18      	it	ne
 8007ddc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8007de0:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007de2:	6859      	ldr	r1, [r3, #4]
 8007de4:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8007de8:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007dea:	6853      	ldr	r3, [r2, #4]
 8007dec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007df0:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007df2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8007df6:	e04e      	b.n	8007e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	079a      	lsls	r2, r3, #30
 8007dfc:	d502      	bpl.n	8007e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8007dfe:	9b02      	ldr	r3, [sp, #8]
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	d477      	bmi.n	8007ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x214>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	07d8      	lsls	r0, r3, #31
 8007e08:	d502      	bpl.n	8007e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	0659      	lsls	r1, r3, #25
 8007e0e:	d44e      	bmi.n	8007eae <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	065a      	lsls	r2, r3, #25
 8007e14:	d522      	bpl.n	8007e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	069b      	lsls	r3, r3, #26
 8007e1a:	d51f      	bpl.n	8007e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	4944      	ldr	r1, [pc, #272]	; (8007f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8007e20:	4a44      	ldr	r2, [pc, #272]	; (8007f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8007e22:	428b      	cmp	r3, r1
 8007e24:	bf18      	it	ne
 8007e26:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007e2a:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e2c:	6851      	ldr	r1, [r2, #4]
 8007e2e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8007e32:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e3a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007e3c:	9004      	str	r0, [sp, #16]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	9204      	str	r2, [sp, #16]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e46:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007e48:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7fc fff4 	bl	8004e44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	071d      	lsls	r5, r3, #28
 8007e60:	d523      	bpl.n	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8007e62:	9b02      	ldr	r3, [sp, #8]
 8007e64:	0698      	lsls	r0, r3, #26
 8007e66:	d520      	bpl.n	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e68:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e6a:	4831      	ldr	r0, [pc, #196]	; (8007f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e6c:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e6e:	4a31      	ldr	r2, [pc, #196]	; (8007f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e70:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e74:	4283      	cmp	r3, r0
 8007e76:	bf18      	it	ne
 8007e78:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e7c:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e7e:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007e80:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e82:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8007e86:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007e88:	9005      	str	r0, [sp, #20]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e8e:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007e90:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007e98:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e9a:	f043 0304 	orr.w	r3, r3, #4
 8007e9e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007ea0:	b007      	add	sp, #28
 8007ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8007ea6:	f7fc bfcd 	b.w	8004e44 <HAL_I2S_ErrorCallback>
}
 8007eaa:	b007      	add	sp, #28
 8007eac:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	491f      	ldr	r1, [pc, #124]	; (8007f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8007eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007eb6:	4288      	cmp	r0, r1
 8007eb8:	bf18      	it	ne
 8007eba:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8007ebe:	1c98      	adds	r0, r3, #2
 8007ec0:	68d1      	ldr	r1, [r2, #12]
 8007ec2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007ec4:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8007ec6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007ece:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d19c      	bne.n	8007e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ed6:	6853      	ldr	r3, [r2, #4]
 8007ed8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007edc:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8007ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d194      	bne.n	8007e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7ff fef5 	bl	8007cdc <HAL_I2SEx_TxRxCpltCallback>
 8007ef2:	e78d      	b.n	8007e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ef6:	1c9a      	adds	r2, r3, #2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	6242      	str	r2, [r0, #36]	; 0x24
 8007efc:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 8007efe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8007f06:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f47f af7a 	bne.w	8007e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007f10:	686b      	ldr	r3, [r5, #4]
 8007f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f16:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 8007f18:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f47f af71 	bne.w	8007e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f28:	f7ff fed8 	bl	8007cdc <HAL_I2SEx_TxRxCpltCallback>
 8007f2c:	e76a      	b.n	8007e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8007f2e:	bf00      	nop
 8007f30:	40003800 	.word	0x40003800
 8007f34:	40003400 	.word	0x40003400

08007f38 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f000 8132 	beq.w	80081a2 <HAL_RCC_OscConfig+0x26a>
{
 8007f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f42:	6803      	ldr	r3, [r0, #0]
 8007f44:	07dd      	lsls	r5, r3, #31
{
 8007f46:	b082      	sub	sp, #8
 8007f48:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f4a:	d52f      	bpl.n	8007fac <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f4c:	49ac      	ldr	r1, [pc, #688]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8007f4e:	688a      	ldr	r2, [r1, #8]
 8007f50:	f002 020c 	and.w	r2, r2, #12
 8007f54:	2a04      	cmp	r2, #4
 8007f56:	f000 80ea 	beq.w	800812e <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f5a:	688a      	ldr	r2, [r1, #8]
 8007f5c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f60:	2a08      	cmp	r2, #8
 8007f62:	f000 80e0 	beq.w	8008126 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6c:	f000 80e9 	beq.w	8008142 <HAL_RCC_OscConfig+0x20a>
 8007f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f74:	f000 8178 	beq.w	8008268 <HAL_RCC_OscConfig+0x330>
 8007f78:	4da1      	ldr	r5, [pc, #644]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8007f7a:	682a      	ldr	r2, [r5, #0]
 8007f7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f80:	602a      	str	r2, [r5, #0]
 8007f82:	682a      	ldr	r2, [r5, #0]
 8007f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f88:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 80de 	bne.w	800814c <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f90:	f7fd fabc 	bl	800550c <HAL_GetTick>
 8007f94:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f96:	e005      	b.n	8007fa4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f98:	f7fd fab8 	bl	800550c <HAL_GetTick>
 8007f9c:	1b80      	subs	r0, r0, r6
 8007f9e:	2864      	cmp	r0, #100	; 0x64
 8007fa0:	f200 80f2 	bhi.w	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	039b      	lsls	r3, r3, #14
 8007fa8:	d4f6      	bmi.n	8007f98 <HAL_RCC_OscConfig+0x60>
 8007faa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fac:	079f      	lsls	r7, r3, #30
 8007fae:	d475      	bmi.n	800809c <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fb0:	071a      	lsls	r2, r3, #28
 8007fb2:	d515      	bpl.n	8007fe0 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fb4:	6963      	ldr	r3, [r4, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 80a5 	beq.w	8008106 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fbc:	4b91      	ldr	r3, [pc, #580]	; (8008204 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fbe:	4d90      	ldr	r5, [pc, #576]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007fc4:	f7fd faa2 	bl	800550c <HAL_GetTick>
 8007fc8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fca:	e005      	b.n	8007fd8 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fcc:	f7fd fa9e 	bl	800550c <HAL_GetTick>
 8007fd0:	1b80      	subs	r0, r0, r6
 8007fd2:	2802      	cmp	r0, #2
 8007fd4:	f200 80d8 	bhi.w	8008188 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007fda:	079b      	lsls	r3, r3, #30
 8007fdc:	d5f6      	bpl.n	8007fcc <HAL_RCC_OscConfig+0x94>
 8007fde:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fe0:	0758      	lsls	r0, r3, #29
 8007fe2:	d53b      	bpl.n	800805c <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fe4:	4a86      	ldr	r2, [pc, #536]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8007fe6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007fe8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8007fec:	f040 80db 	bne.w	80081a6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8007ffa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008004:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008006:	4d80      	ldr	r5, [pc, #512]	; (8008208 <HAL_RCC_OscConfig+0x2d0>)
 8008008:	682a      	ldr	r2, [r5, #0]
 800800a:	05d1      	lsls	r1, r2, #23
 800800c:	f140 80ac 	bpl.w	8008168 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008010:	68a3      	ldr	r3, [r4, #8]
 8008012:	2b01      	cmp	r3, #1
 8008014:	f000 80c9 	beq.w	80081aa <HAL_RCC_OscConfig+0x272>
 8008018:	2b05      	cmp	r3, #5
 800801a:	f000 812f 	beq.w	800827c <HAL_RCC_OscConfig+0x344>
 800801e:	4d78      	ldr	r5, [pc, #480]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8008020:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	672a      	str	r2, [r5, #112]	; 0x70
 8008028:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800802a:	f022 0204 	bic.w	r2, r2, #4
 800802e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008030:	2b00      	cmp	r3, #0
 8008032:	f040 80bf 	bne.w	80081b4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008036:	f7fd fa69 	bl	800550c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800803a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800803e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008040:	e006      	b.n	8008050 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008042:	f7fd fa63 	bl	800550c <HAL_GetTick>
 8008046:	eba0 0008 	sub.w	r0, r0, r8
 800804a:	42b8      	cmp	r0, r7
 800804c:	f200 809c 	bhi.w	8008188 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008050:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008052:	0798      	lsls	r0, r3, #30
 8008054:	d4f5      	bmi.n	8008042 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008056:	2e00      	cmp	r6, #0
 8008058:	f040 80dc 	bne.w	8008214 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800805c:	69a0      	ldr	r0, [r4, #24]
 800805e:	b1c8      	cbz	r0, 8008094 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008060:	4d67      	ldr	r5, [pc, #412]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8008062:	68aa      	ldr	r2, [r5, #8]
 8008064:	f002 020c 	and.w	r2, r2, #12
 8008068:	2a08      	cmp	r2, #8
 800806a:	f000 80d9 	beq.w	8008220 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800806e:	4a67      	ldr	r2, [pc, #412]	; (800820c <HAL_RCC_OscConfig+0x2d4>)
 8008070:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008072:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008074:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008076:	f000 810b 	beq.w	8008290 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800807a:	f7fd fa47 	bl	800550c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8008080:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008082:	e004      	b.n	800808e <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008084:	f7fd fa42 	bl	800550c <HAL_GetTick>
 8008088:	1b40      	subs	r0, r0, r5
 800808a:	2802      	cmp	r0, #2
 800808c:	d87c      	bhi.n	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	019b      	lsls	r3, r3, #6
 8008092:	d4f7      	bmi.n	8008084 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008094:	2000      	movs	r0, #0
}
 8008096:	b002      	add	sp, #8
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800809c:	4a58      	ldr	r2, [pc, #352]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 800809e:	6891      	ldr	r1, [r2, #8]
 80080a0:	f011 0f0c 	tst.w	r1, #12
 80080a4:	d024      	beq.n	80080f0 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080a6:	6891      	ldr	r1, [r2, #8]
 80080a8:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ac:	2908      	cmp	r1, #8
 80080ae:	d01c      	beq.n	80080ea <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080b0:	68e3      	ldr	r3, [r4, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 8092 	beq.w	80081dc <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 80080b8:	4b55      	ldr	r3, [pc, #340]	; (8008210 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ba:	4d51      	ldr	r5, [pc, #324]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80080bc:	2201      	movs	r2, #1
 80080be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80080c0:	f7fd fa24 	bl	800550c <HAL_GetTick>
 80080c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c6:	e004      	b.n	80080d2 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c8:	f7fd fa20 	bl	800550c <HAL_GetTick>
 80080cc:	1b80      	subs	r0, r0, r6
 80080ce:	2802      	cmp	r0, #2
 80080d0:	d85a      	bhi.n	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	0798      	lsls	r0, r3, #30
 80080d6:	d5f7      	bpl.n	80080c8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	6922      	ldr	r2, [r4, #16]
 80080dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80080e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	e762      	b.n	8007fb0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ea:	6852      	ldr	r2, [r2, #4]
 80080ec:	0256      	lsls	r6, r2, #9
 80080ee:	d4df      	bmi.n	80080b0 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080f0:	4a43      	ldr	r2, [pc, #268]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	0795      	lsls	r5, r2, #30
 80080f6:	d54b      	bpl.n	8008190 <HAL_RCC_OscConfig+0x258>
 80080f8:	68e2      	ldr	r2, [r4, #12]
 80080fa:	2a01      	cmp	r2, #1
 80080fc:	d048      	beq.n	8008190 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 80080fe:	2001      	movs	r0, #1
}
 8008100:	b002      	add	sp, #8
 8008102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8008106:	4a3f      	ldr	r2, [pc, #252]	; (8008204 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008108:	4d3d      	ldr	r5, [pc, #244]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800810a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800810c:	f7fd f9fe 	bl	800550c <HAL_GetTick>
 8008110:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008112:	e004      	b.n	800811e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008114:	f7fd f9fa 	bl	800550c <HAL_GetTick>
 8008118:	1b80      	subs	r0, r0, r6
 800811a:	2802      	cmp	r0, #2
 800811c:	d834      	bhi.n	8008188 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800811e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008120:	079f      	lsls	r7, r3, #30
 8008122:	d4f7      	bmi.n	8008114 <HAL_RCC_OscConfig+0x1dc>
 8008124:	e75b      	b.n	8007fde <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008126:	684a      	ldr	r2, [r1, #4]
 8008128:	0250      	lsls	r0, r2, #9
 800812a:	f57f af1c 	bpl.w	8007f66 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800812e:	4a34      	ldr	r2, [pc, #208]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	0391      	lsls	r1, r2, #14
 8008134:	f57f af3a 	bpl.w	8007fac <HAL_RCC_OscConfig+0x74>
 8008138:	6862      	ldr	r2, [r4, #4]
 800813a:	2a00      	cmp	r2, #0
 800813c:	f47f af36 	bne.w	8007fac <HAL_RCC_OscConfig+0x74>
 8008140:	e7dd      	b.n	80080fe <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008142:	4a2f      	ldr	r2, [pc, #188]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8008144:	6813      	ldr	r3, [r2, #0]
 8008146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800814a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800814c:	f7fd f9de 	bl	800550c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008150:	4d2b      	ldr	r5, [pc, #172]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8008152:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008154:	e004      	b.n	8008160 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008156:	f7fd f9d9 	bl	800550c <HAL_GetTick>
 800815a:	1b80      	subs	r0, r0, r6
 800815c:	2864      	cmp	r0, #100	; 0x64
 800815e:	d813      	bhi.n	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	039a      	lsls	r2, r3, #14
 8008164:	d5f7      	bpl.n	8008156 <HAL_RCC_OscConfig+0x21e>
 8008166:	e720      	b.n	8007faa <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008168:	682a      	ldr	r2, [r5, #0]
 800816a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816e:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8008170:	f7fd f9cc 	bl	800550c <HAL_GetTick>
 8008174:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	05da      	lsls	r2, r3, #23
 800817a:	f53f af49 	bmi.w	8008010 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800817e:	f7fd f9c5 	bl	800550c <HAL_GetTick>
 8008182:	1bc0      	subs	r0, r0, r7
 8008184:	2802      	cmp	r0, #2
 8008186:	d9f6      	bls.n	8008176 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8008188:	2003      	movs	r0, #3
}
 800818a:	b002      	add	sp, #8
 800818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008190:	491b      	ldr	r1, [pc, #108]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 8008192:	6920      	ldr	r0, [r4, #16]
 8008194:	680a      	ldr	r2, [r1, #0]
 8008196:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800819a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800819e:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081a0:	e706      	b.n	8007fb0 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 80081a2:	2001      	movs	r0, #1
}
 80081a4:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80081a6:	2600      	movs	r6, #0
 80081a8:	e72d      	b.n	8008006 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081aa:	4a15      	ldr	r2, [pc, #84]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
 80081ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80081ae:	f043 0301 	orr.w	r3, r3, #1
 80081b2:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80081b4:	f7fd f9aa 	bl	800550c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b8:	4d11      	ldr	r5, [pc, #68]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80081ba:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081bc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081c0:	e005      	b.n	80081ce <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081c2:	f7fd f9a3 	bl	800550c <HAL_GetTick>
 80081c6:	eba0 0008 	sub.w	r0, r0, r8
 80081ca:	42b8      	cmp	r0, r7
 80081cc:	d8dc      	bhi.n	8008188 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80081d0:	079b      	lsls	r3, r3, #30
 80081d2:	d5f6      	bpl.n	80081c2 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	f43f af41 	beq.w	800805c <HAL_RCC_OscConfig+0x124>
 80081da:	e01b      	b.n	8008214 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 80081dc:	4a0c      	ldr	r2, [pc, #48]	; (8008210 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081de:	4d08      	ldr	r5, [pc, #32]	; (8008200 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80081e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80081e2:	f7fd f993 	bl	800550c <HAL_GetTick>
 80081e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081e8:	e004      	b.n	80081f4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ea:	f7fd f98f 	bl	800550c <HAL_GetTick>
 80081ee:	1b80      	subs	r0, r0, r6
 80081f0:	2802      	cmp	r0, #2
 80081f2:	d8c9      	bhi.n	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	0799      	lsls	r1, r3, #30
 80081f8:	d4f7      	bmi.n	80081ea <HAL_RCC_OscConfig+0x2b2>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	e6d8      	b.n	8007fb0 <HAL_RCC_OscConfig+0x78>
 80081fe:	bf00      	nop
 8008200:	40023800 	.word	0x40023800
 8008204:	42470e80 	.word	0x42470e80
 8008208:	40007000 	.word	0x40007000
 800820c:	42470060 	.word	0x42470060
 8008210:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8008214:	4a35      	ldr	r2, [pc, #212]	; (80082ec <HAL_RCC_OscConfig+0x3b4>)
 8008216:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800821c:	6413      	str	r3, [r2, #64]	; 0x40
 800821e:	e71d      	b.n	800805c <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008220:	2801      	cmp	r0, #1
 8008222:	f43f af6d 	beq.w	8008100 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8008226:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008228:	69e2      	ldr	r2, [r4, #28]
 800822a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800822e:	4291      	cmp	r1, r2
 8008230:	f47f af65 	bne.w	80080fe <HAL_RCC_OscConfig+0x1c6>
 8008234:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008236:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800823a:	4291      	cmp	r1, r2
 800823c:	f47f af5f 	bne.w	80080fe <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008240:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008244:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008246:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008248:	428a      	cmp	r2, r1
 800824a:	f47f af58 	bne.w	80080fe <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800824e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008250:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008254:	4291      	cmp	r1, r2
 8008256:	f47f af52 	bne.w	80080fe <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800825a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800825c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8008260:	1a18      	subs	r0, r3, r0
 8008262:	bf18      	it	ne
 8008264:	2001      	movne	r0, #1
 8008266:	e74b      	b.n	8008100 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008268:	4b20      	ldr	r3, [pc, #128]	; (80082ec <HAL_RCC_OscConfig+0x3b4>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e767      	b.n	800814c <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800827c:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <HAL_RCC_OscConfig+0x3b4>)
 800827e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008280:	f042 0204 	orr.w	r2, r2, #4
 8008284:	671a      	str	r2, [r3, #112]	; 0x70
 8008286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	671a      	str	r2, [r3, #112]	; 0x70
 800828e:	e791      	b.n	80081b4 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8008290:	f7fd f93c 	bl	800550c <HAL_GetTick>
 8008294:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008296:	e005      	b.n	80082a4 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008298:	f7fd f938 	bl	800550c <HAL_GetTick>
 800829c:	1b80      	subs	r0, r0, r6
 800829e:	2802      	cmp	r0, #2
 80082a0:	f63f af72 	bhi.w	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	0199      	lsls	r1, r3, #6
 80082a8:	d4f6      	bmi.n	8008298 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082aa:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80082ae:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80082b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082b4:	4c0d      	ldr	r4, [pc, #52]	; (80082ec <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082b6:	4333      	orrs	r3, r6
 80082b8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80082bc:	0852      	lsrs	r2, r2, #1
 80082be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80082c2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80082c4:	490a      	ldr	r1, [pc, #40]	; (80082f0 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80082ca:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80082ce:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80082d0:	f7fd f91c 	bl	800550c <HAL_GetTick>
 80082d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d6:	e005      	b.n	80082e4 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082d8:	f7fd f918 	bl	800550c <HAL_GetTick>
 80082dc:	1b40      	subs	r0, r0, r5
 80082de:	2802      	cmp	r0, #2
 80082e0:	f63f af52 	bhi.w	8008188 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	019a      	lsls	r2, r3, #6
 80082e8:	d5f6      	bpl.n	80082d8 <HAL_RCC_OscConfig+0x3a0>
 80082ea:	e6d3      	b.n	8008094 <HAL_RCC_OscConfig+0x15c>
 80082ec:	40023800 	.word	0x40023800
 80082f0:	42470060 	.word	0x42470060

080082f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082f4:	4917      	ldr	r1, [pc, #92]	; (8008354 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80082f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082f8:	688b      	ldr	r3, [r1, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d01b      	beq.n	800833a <HAL_RCC_GetSysClockFreq+0x46>
 8008302:	2b08      	cmp	r3, #8
 8008304:	d117      	bne.n	8008336 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008306:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008308:	684b      	ldr	r3, [r1, #4]
 800830a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800830e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008312:	d114      	bne.n	800833e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008314:	6849      	ldr	r1, [r1, #4]
 8008316:	4810      	ldr	r0, [pc, #64]	; (8008358 <HAL_RCC_GetSysClockFreq+0x64>)
 8008318:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800831c:	fba1 0100 	umull	r0, r1, r1, r0
 8008320:	f7f7 ffbe 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_RCC_GetSysClockFreq+0x60>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800832c:	3301      	adds	r3, #1
 800832e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8008330:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008334:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8008336:	4808      	ldr	r0, [pc, #32]	; (8008358 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8008338:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800833a:	4808      	ldr	r0, [pc, #32]	; (800835c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800833c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800833e:	684b      	ldr	r3, [r1, #4]
 8008340:	4806      	ldr	r0, [pc, #24]	; (800835c <HAL_RCC_GetSysClockFreq+0x68>)
 8008342:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8008346:	fba3 0100 	umull	r0, r1, r3, r0
 800834a:	2300      	movs	r3, #0
 800834c:	f7f7 ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8008350:	e7e8      	b.n	8008324 <HAL_RCC_GetSysClockFreq+0x30>
 8008352:	bf00      	nop
 8008354:	40023800 	.word	0x40023800
 8008358:	00f42400 	.word	0x00f42400
 800835c:	007a1200 	.word	0x007a1200

08008360 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008360:	b160      	cbz	r0, 800837c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008362:	4a49      	ldr	r2, [pc, #292]	; (8008488 <HAL_RCC_ClockConfig+0x128>)
 8008364:	6813      	ldr	r3, [r2, #0]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	428b      	cmp	r3, r1
 800836c:	d208      	bcs.n	8008380 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800836e:	b2cb      	uxtb	r3, r1
 8008370:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	f003 030f 	and.w	r3, r3, #15
 8008378:	428b      	cmp	r3, r1
 800837a:	d001      	beq.n	8008380 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 800837c:	2001      	movs	r0, #1
}
 800837e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008380:	6803      	ldr	r3, [r0, #0]
{
 8008382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008386:	079d      	lsls	r5, r3, #30
 8008388:	d514      	bpl.n	80083b4 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800838a:	075c      	lsls	r4, r3, #29
 800838c:	d504      	bpl.n	8008398 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800838e:	4c3f      	ldr	r4, [pc, #252]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 8008390:	68a2      	ldr	r2, [r4, #8]
 8008392:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8008396:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008398:	071a      	lsls	r2, r3, #28
 800839a:	d504      	bpl.n	80083a6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800839c:	4c3b      	ldr	r4, [pc, #236]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 800839e:	68a2      	ldr	r2, [r4, #8]
 80083a0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80083a4:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083a6:	4c39      	ldr	r4, [pc, #228]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 80083a8:	6885      	ldr	r5, [r0, #8]
 80083aa:	68a2      	ldr	r2, [r4, #8]
 80083ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80083b0:	432a      	orrs	r2, r5
 80083b2:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083b4:	07df      	lsls	r7, r3, #31
 80083b6:	4604      	mov	r4, r0
 80083b8:	460d      	mov	r5, r1
 80083ba:	d522      	bpl.n	8008402 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083bc:	6842      	ldr	r2, [r0, #4]
 80083be:	2a01      	cmp	r2, #1
 80083c0:	d057      	beq.n	8008472 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083c2:	1e93      	subs	r3, r2, #2
 80083c4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c6:	4b31      	ldr	r3, [pc, #196]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ca:	d959      	bls.n	8008480 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083cc:	0799      	lsls	r1, r3, #30
 80083ce:	d525      	bpl.n	800841c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083d0:	4e2e      	ldr	r6, [pc, #184]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 80083d2:	68b3      	ldr	r3, [r6, #8]
 80083d4:	f023 0303 	bic.w	r3, r3, #3
 80083d8:	4313      	orrs	r3, r2
 80083da:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80083dc:	f7fd f896 	bl	800550c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083e0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80083e4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e6:	e005      	b.n	80083f4 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083e8:	f7fd f890 	bl	800550c <HAL_GetTick>
 80083ec:	eba0 0008 	sub.w	r0, r0, r8
 80083f0:	42b8      	cmp	r0, r7
 80083f2:	d843      	bhi.n	800847c <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f4:	68b3      	ldr	r3, [r6, #8]
 80083f6:	6862      	ldr	r2, [r4, #4]
 80083f8:	f003 030c 	and.w	r3, r3, #12
 80083fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008400:	d1f2      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008402:	4a21      	ldr	r2, [pc, #132]	; (8008488 <HAL_RCC_ClockConfig+0x128>)
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	42ab      	cmp	r3, r5
 800840c:	d909      	bls.n	8008422 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800840e:	b2eb      	uxtb	r3, r5
 8008410:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	f003 030f 	and.w	r3, r3, #15
 8008418:	42ab      	cmp	r3, r5
 800841a:	d002      	beq.n	8008422 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800841c:	2001      	movs	r0, #1
}
 800841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	075a      	lsls	r2, r3, #29
 8008426:	d506      	bpl.n	8008436 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008428:	4918      	ldr	r1, [pc, #96]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 800842a:	68e0      	ldr	r0, [r4, #12]
 800842c:	688a      	ldr	r2, [r1, #8]
 800842e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8008432:	4302      	orrs	r2, r0
 8008434:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008436:	071b      	lsls	r3, r3, #28
 8008438:	d412      	bmi.n	8008460 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800843a:	f7ff ff5b 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 8008440:	4c13      	ldr	r4, [pc, #76]	; (8008490 <HAL_RCC_ClockConfig+0x130>)
 8008442:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8008444:	4913      	ldr	r1, [pc, #76]	; (8008494 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008446:	4a14      	ldr	r2, [pc, #80]	; (8008498 <HAL_RCC_ClockConfig+0x138>)
 8008448:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800844c:	5ce3      	ldrb	r3, [r4, r3]
 800844e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8008452:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008454:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8008456:	f7fb ff73 	bl	8004340 <HAL_InitTick>
  return HAL_OK;
 800845a:	2000      	movs	r0, #0
}
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 8008462:	6921      	ldr	r1, [r4, #16]
 8008464:	6893      	ldr	r3, [r2, #8]
 8008466:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800846a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800846e:	6093      	str	r3, [r2, #8]
 8008470:	e7e3      	b.n	800843a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <HAL_RCC_ClockConfig+0x12c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	039e      	lsls	r6, r3, #14
 8008478:	d4aa      	bmi.n	80083d0 <HAL_RCC_ClockConfig+0x70>
 800847a:	e7cf      	b.n	800841c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 800847c:	2003      	movs	r0, #3
 800847e:	e7ed      	b.n	800845c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008480:	0198      	lsls	r0, r3, #6
 8008482:	d4a5      	bmi.n	80083d0 <HAL_RCC_ClockConfig+0x70>
 8008484:	e7ca      	b.n	800841c <HAL_RCC_ClockConfig+0xbc>
 8008486:	bf00      	nop
 8008488:	40023c00 	.word	0x40023c00
 800848c:	40023800 	.word	0x40023800
 8008490:	08011a24 	.word	0x08011a24
 8008494:	2000006c 	.word	0x2000006c
 8008498:	20000004 	.word	0x20000004

0800849c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800849e:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80084a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80084a2:	4905      	ldr	r1, [pc, #20]	; (80084b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084a4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80084a8:	6808      	ldr	r0, [r1, #0]
 80084aa:	5cd3      	ldrb	r3, [r2, r3]
}
 80084ac:	40d8      	lsrs	r0, r3
 80084ae:	4770      	bx	lr
 80084b0:	40023800 	.word	0x40023800
 80084b4:	08011a34 	.word	0x08011a34
 80084b8:	20000004 	.word	0x20000004

080084bc <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084be:	220f      	movs	r2, #15
 80084c0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	f002 0203 	and.w	r2, r2, #3
 80084c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80084d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80084d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	08db      	lsrs	r3, r3, #3
{
 80084de:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80084e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084e4:	4c05      	ldr	r4, [pc, #20]	; (80084fc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80084e6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084e8:	6823      	ldr	r3, [r4, #0]
}
 80084ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	600b      	str	r3, [r1, #0]
}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40023800 	.word	0x40023800
 80084fc:	40023c00 	.word	0x40023c00

08008500 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008502:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008504:	6800      	ldr	r0, [r0, #0]
 8008506:	f010 0f05 	tst.w	r0, #5
{
 800850a:	b083      	sub	sp, #12
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800850c:	d15c      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800850e:	f010 0002 	ands.w	r0, r0, #2
 8008512:	d101      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x18>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8008514:	b003      	add	sp, #12
 8008516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8008518:	4b45      	ldr	r3, [pc, #276]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    PWR->CR |= PWR_CR_DBP;
 800851a:	4c46      	ldr	r4, [pc, #280]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800851c:	2200      	movs	r2, #0
 800851e:	9201      	str	r2, [sp, #4]
 8008520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008522:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008526:	641a      	str	r2, [r3, #64]	; 0x40
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008538:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800853a:	f7fc ffe7 	bl	800550c <HAL_GetTick>
 800853e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008540:	e004      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008542:	f7fc ffe3 	bl	800550c <HAL_GetTick>
 8008546:	1b80      	subs	r0, r0, r6
 8008548:	2802      	cmp	r0, #2
 800854a:	d83a      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	05d9      	lsls	r1, r3, #23
 8008550:	d5f7      	bpl.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x42>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008552:	4937      	ldr	r1, [pc, #220]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008554:	68eb      	ldr	r3, [r5, #12]
 8008556:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008558:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800855c:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8008560:	d010      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8008562:	4282      	cmp	r2, r0
 8008564:	d00e      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x84>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008566:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008568:	4a33      	ldr	r2, [pc, #204]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800856a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800856e:	2401      	movs	r4, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008570:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8008572:	6014      	str	r4, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008574:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 8008576:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008578:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800857a:	07da      	lsls	r2, r3, #31
 800857c:	d413      	bmi.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800857e:	68eb      	ldr	r3, [r5, #12]
 8008580:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008584:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8008588:	d047      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800858a:	4929      	ldr	r1, [pc, #164]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800858c:	688a      	ldr	r2, [r1, #8]
 800858e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008592:	608a      	str	r2, [r1, #8]
 8008594:	4a26      	ldr	r2, [pc, #152]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008596:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800859c:	430b      	orrs	r3, r1
  return HAL_OK;
 800859e:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085a0:	6713      	str	r3, [r2, #112]	; 0x70
}
 80085a2:	b003      	add	sp, #12
 80085a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085a6:	460c      	mov	r4, r1
        tickstart = HAL_GetTick();
 80085a8:	f7fc ffb0 	bl	800550c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ac:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80085b0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80085b4:	079b      	lsls	r3, r3, #30
 80085b6:	d4e2      	bmi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085b8:	f7fc ffa8 	bl	800550c <HAL_GetTick>
 80085bc:	1bc0      	subs	r0, r0, r7
 80085be:	42b0      	cmp	r0, r6
 80085c0:	d9f7      	bls.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        return HAL_TIMEOUT;
 80085c2:	2003      	movs	r0, #3
}
 80085c4:	b003      	add	sp, #12
 80085c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80085c8:	4b1c      	ldr	r3, [pc, #112]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085ca:	4c19      	ldr	r4, [pc, #100]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_DISABLE();
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80085d0:	f7fc ff9c 	bl	800550c <HAL_GetTick>
 80085d4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085d6:	e004      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80085d8:	f7fc ff98 	bl	800550c <HAL_GetTick>
 80085dc:	1b80      	subs	r0, r0, r6
 80085de:	2802      	cmp	r0, #2
 80085e0:	d8ef      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	011f      	lsls	r7, r3, #4
 80085e6:	d4f7      	bmi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085e8:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 80085ec:	4a13      	ldr	r2, [pc, #76]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085ee:	4e10      	ldr	r6, [pc, #64]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085f0:	071b      	lsls	r3, r3, #28
 80085f2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 80085f6:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80085fc:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80085fe:	f7fc ff85 	bl	800550c <HAL_GetTick>
 8008602:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008604:	e004      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008606:	f7fc ff81 	bl	800550c <HAL_GetTick>
 800860a:	1b00      	subs	r0, r0, r4
 800860c:	2802      	cmp	r0, #2
 800860e:	d8d8      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008610:	6833      	ldr	r3, [r6, #0]
 8008612:	0118      	lsls	r0, r3, #4
 8008614:	d5f7      	bpl.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008616:	6828      	ldr	r0, [r5, #0]
 8008618:	e779      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800861c:	6882      	ldr	r2, [r0, #8]
 800861e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8008622:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008626:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800862a:	430a      	orrs	r2, r1
 800862c:	6082      	str	r2, [r0, #8]
 800862e:	e7b1      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8008630:	40023800 	.word	0x40023800
 8008634:	40007000 	.word	0x40007000
 8008638:	42470e40 	.word	0x42470e40
 800863c:	42470068 	.word	0x42470068

08008640 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008640:	4a0a      	ldr	r2, [pc, #40]	; (800866c <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008642:	2303      	movs	r3, #3
 8008644:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008646:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800864a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800864e:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008650:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8008654:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8008658:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800865a:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800865c:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800865e:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008666:	4313      	orrs	r3, r2
 8008668:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800866a:	4770      	bx	lr
 800866c:	40023800 	.word	0x40023800

08008670 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8008670:	2801      	cmp	r0, #1
 8008672:	d109      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008674:	4a12      	ldr	r2, [pc, #72]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8008676:	6893      	ldr	r3, [r2, #8]
      switch (srcclk)
 8008678:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 800867c:	d006      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 800867e:	2b01      	cmp	r3, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008680:	4810      	ldr	r0, [pc, #64]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 8008682:	bf18      	it	ne
 8008684:	2000      	movne	r0, #0
 8008686:	4770      	bx	lr
 8008688:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800868a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800868c:	6853      	ldr	r3, [r2, #4]
 800868e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008692:	6853      	ldr	r3, [r2, #4]
 8008694:	bf14      	ite	ne
 8008696:	480c      	ldrne	r0, [pc, #48]	; (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008698:	480c      	ldreq	r0, [pc, #48]	; (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>)
 800869a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800869e:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80086a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80086a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80086ac:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80086b0:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80086b4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80086b8:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40023800 	.word	0x40023800
 80086c4:	00bb8000 	.word	0x00bb8000
 80086c8:	007a1200 	.word	0x007a1200
 80086cc:	00f42400 	.word	0x00f42400

080086d0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop

080086d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086d4:	6803      	ldr	r3, [r0, #0]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	f042 0201 	orr.w	r2, r2, #1
 80086dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e4:	2a06      	cmp	r2, #6
 80086e6:	d003      	beq.n	80086f0 <HAL_TIM_Base_Start_IT+0x1c>
  {
    __HAL_TIM_ENABLE(htim);
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	f042 0201 	orr.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80086f0:	2000      	movs	r0, #0
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIM_OC_DelayElapsedCallback>:
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop

080086f8 <HAL_TIM_IC_CaptureCallback>:
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop

080086fc <HAL_TIM_PWM_PulseFinishedCallback>:
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop

08008700 <HAL_TIM_TriggerCallback>:
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop

08008704 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008704:	6803      	ldr	r3, [r0, #0]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	0791      	lsls	r1, r2, #30
{
 800870a:	b510      	push	{r4, lr}
 800870c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800870e:	d502      	bpl.n	8008716 <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	0792      	lsls	r2, r2, #30
 8008714:	d45f      	bmi.n	80087d6 <HAL_TIM_IRQHandler+0xd2>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	0750      	lsls	r0, r2, #29
 800871a:	d502      	bpl.n	8008722 <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	0751      	lsls	r1, r2, #29
 8008720:	d446      	bmi.n	80087b0 <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	0712      	lsls	r2, r2, #28
 8008726:	d502      	bpl.n	800872e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	0710      	lsls	r0, r2, #28
 800872c:	d42e      	bmi.n	800878c <HAL_TIM_IRQHandler+0x88>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	06d2      	lsls	r2, r2, #27
 8008732:	d502      	bpl.n	800873a <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	06d0      	lsls	r0, r2, #27
 8008738:	d418      	bmi.n	800876c <HAL_TIM_IRQHandler+0x68>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	07d1      	lsls	r1, r2, #31
 800873e:	d502      	bpl.n	8008746 <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	07d2      	lsls	r2, r2, #31
 8008744:	d45d      	bmi.n	8008802 <HAL_TIM_IRQHandler+0xfe>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	0610      	lsls	r0, r2, #24
 800874a:	d502      	bpl.n	8008752 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	0611      	lsls	r1, r2, #24
 8008750:	d45f      	bmi.n	8008812 <HAL_TIM_IRQHandler+0x10e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	0652      	lsls	r2, r2, #25
 8008756:	d502      	bpl.n	800875e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	0650      	lsls	r0, r2, #25
 800875c:	d461      	bmi.n	8008822 <HAL_TIM_IRQHandler+0x11e>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	0691      	lsls	r1, r2, #26
 8008762:	d502      	bpl.n	800876a <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	0692      	lsls	r2, r2, #26
 8008768:	d443      	bmi.n	80087f2 <HAL_TIM_IRQHandler+0xee>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800876a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800876c:	f06f 0210 	mvn.w	r2, #16
 8008770:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008772:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008774:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008776:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800877a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800877c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800877e:	d064      	beq.n	800884a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008780:	f7ff ffba 	bl	80086f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008784:	2200      	movs	r2, #0
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	7722      	strb	r2, [r4, #28]
 800878a:	e7d6      	b.n	800873a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800878c:	f06f 0208 	mvn.w	r2, #8
 8008790:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008792:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008794:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008796:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008798:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800879a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800879c:	d152      	bne.n	8008844 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879e:	f7ff ffa9 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7ff ffaa 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a8:	2200      	movs	r2, #0
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	7722      	strb	r2, [r4, #28]
 80087ae:	e7be      	b.n	800872e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087b0:	f06f 0204 	mvn.w	r2, #4
 80087b4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087b6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ba:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087be:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80087c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087c2:	d13c      	bne.n	800883e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c4:	f7ff ff96 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	4620      	mov	r0, r4
 80087ca:	f7ff ff97 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	2200      	movs	r2, #0
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	7722      	strb	r2, [r4, #28]
 80087d4:	e7a5      	b.n	8008722 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087d6:	f06f 0202 	mvn.w	r2, #2
 80087da:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087dc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087de:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087e0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087e2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087e4:	d025      	beq.n	8008832 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	f7ff ff87 	bl	80086f8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ea:	2200      	movs	r2, #0
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	7722      	strb	r2, [r4, #28]
 80087f0:	e791      	b.n	8008716 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087f2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80087f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087f8:	611a      	str	r2, [r3, #16]
}
 80087fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80087fe:	f000 b8b9 	b.w	8008974 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008802:	f06f 0201 	mvn.w	r2, #1
 8008806:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008808:	4620      	mov	r0, r4
 800880a:	f7f8 f809 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	e799      	b.n	8008746 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008816:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008818:	4620      	mov	r0, r4
 800881a:	f000 f8ad 	bl	8008978 <HAL_TIMEx_BreakCallback>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	e797      	b.n	8008752 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008822:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008826:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008828:	4620      	mov	r0, r4
 800882a:	f7ff ff69 	bl	8008700 <HAL_TIM_TriggerCallback>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	e795      	b.n	800875e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008832:	f7ff ff5f 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff ff60 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
 800883c:	e7d5      	b.n	80087ea <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800883e:	f7ff ff5b 	bl	80086f8 <HAL_TIM_IC_CaptureCallback>
 8008842:	e7c4      	b.n	80087ce <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8008844:	f7ff ff58 	bl	80086f8 <HAL_TIM_IC_CaptureCallback>
 8008848:	e7ae      	b.n	80087a8 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800884a:	f7ff ff53 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800884e:	4620      	mov	r0, r4
 8008850:	f7ff ff54 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
 8008854:	e796      	b.n	8008784 <HAL_TIM_IRQHandler+0x80>
 8008856:	bf00      	nop

08008858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008858:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800885a:	4e36      	ldr	r6, [pc, #216]	; (8008934 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 800885c:	6803      	ldr	r3, [r0, #0]
 800885e:	694d      	ldr	r5, [r1, #20]
 8008860:	688c      	ldr	r4, [r1, #8]
 8008862:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008864:	42b0      	cmp	r0, r6
 8008866:	d055      	beq.n	8008914 <TIM_Base_SetConfig+0xbc>
 8008868:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800886c:	d029      	beq.n	80088c2 <TIM_Base_SetConfig+0x6a>
 800886e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8008872:	42b0      	cmp	r0, r6
 8008874:	d037      	beq.n	80088e6 <TIM_Base_SetConfig+0x8e>
 8008876:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800887a:	42b0      	cmp	r0, r6
 800887c:	d033      	beq.n	80088e6 <TIM_Base_SetConfig+0x8e>
 800887e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008882:	42b0      	cmp	r0, r6
 8008884:	d02f      	beq.n	80088e6 <TIM_Base_SetConfig+0x8e>
 8008886:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800888a:	42b0      	cmp	r0, r6
 800888c:	d02b      	beq.n	80088e6 <TIM_Base_SetConfig+0x8e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8008892:	42b0      	cmp	r0, r6
 8008894:	d013      	beq.n	80088be <TIM_Base_SetConfig+0x66>
 8008896:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800889a:	42b0      	cmp	r0, r6
 800889c:	d00f      	beq.n	80088be <TIM_Base_SetConfig+0x66>
 800889e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088a2:	42b0      	cmp	r0, r6
 80088a4:	d00b      	beq.n	80088be <TIM_Base_SetConfig+0x66>
 80088a6:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80088aa:	42b0      	cmp	r0, r6
 80088ac:	d007      	beq.n	80088be <TIM_Base_SetConfig+0x66>
 80088ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088b2:	42b0      	cmp	r0, r6
 80088b4:	d003      	beq.n	80088be <TIM_Base_SetConfig+0x66>
 80088b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088ba:	42b0      	cmp	r0, r6
 80088bc:	d109      	bne.n	80088d2 <TIM_Base_SetConfig+0x7a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088be:	68c9      	ldr	r1, [r1, #12]
 80088c0:	e004      	b.n	80088cc <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 80088c2:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088c4:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088ca:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80088cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d0:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088d6:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 80088d8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088da:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088dc:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088de:	2301      	movs	r3, #1
 80088e0:	6143      	str	r3, [r0, #20]
}
 80088e2:	bcf0      	pop	{r4, r5, r6, r7}
 80088e4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80088e6:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e8:	4f13      	ldr	r7, [pc, #76]	; (8008938 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088ee:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f0:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80088f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088fc:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088fe:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8008900:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008902:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008904:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008906:	d1ea      	bne.n	80088de <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8008908:	690b      	ldr	r3, [r1, #16]
 800890a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800890c:	2301      	movs	r3, #1
 800890e:	6143      	str	r3, [r0, #20]
}
 8008910:	bcf0      	pop	{r4, r5, r6, r7}
 8008912:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008914:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008916:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800891c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800891e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008922:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008928:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800892a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800892c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800892e:	6282      	str	r2, [r0, #40]	; 0x28
 8008930:	e7ea      	b.n	8008908 <TIM_Base_SetConfig+0xb0>
 8008932:	bf00      	nop
 8008934:	40010000 	.word	0x40010000
 8008938:	40010400 	.word	0x40010400

0800893c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800893c:	b1b8      	cbz	r0, 800896e <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 800893e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8008942:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008944:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008948:	4604      	mov	r4, r0
 800894a:	b15b      	cbz	r3, 8008964 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 800894c:	2302      	movs	r3, #2
 800894e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008952:	6820      	ldr	r0, [r4, #0]
 8008954:	1d21      	adds	r1, r4, #4
 8008956:	f7ff ff7f 	bl	8008858 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800895a:	2301      	movs	r3, #1
 800895c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008960:	2000      	movs	r0, #0
}
 8008962:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008964:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008968:	f7ff feb2 	bl	80086d0 <HAL_TIM_Base_MspInit>
 800896c:	e7ee      	b.n	800894c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800896e:	2001      	movs	r0, #1
}
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <HAL_TIMEx_CommutCallback>:
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <HAL_TIMEx_BreakCallback>:
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <USB_CoreReset+0x30>)
 800897e:	e001      	b.n	8008984 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008980:	3b01      	subs	r3, #1
 8008982:	d010      	beq.n	80089a6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008984:	6902      	ldr	r2, [r0, #16]
 8008986:	2a00      	cmp	r2, #0
 8008988:	dafa      	bge.n	8008980 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800898a:	6903      	ldr	r3, [r0, #16]
 800898c:	4a07      	ldr	r2, [pc, #28]	; (80089ac <USB_CoreReset+0x30>)
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	6103      	str	r3, [r0, #16]
 8008994:	e001      	b.n	800899a <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8008996:	3a01      	subs	r2, #1
 8008998:	d005      	beq.n	80089a6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800899a:	6903      	ldr	r3, [r0, #16]
 800899c:	f013 0301 	ands.w	r3, r3, #1
 80089a0:	d1f9      	bne.n	8008996 <USB_CoreReset+0x1a>

  return HAL_OK;
 80089a2:	4618      	mov	r0, r3
}
 80089a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80089a6:	2003      	movs	r0, #3
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	00030d40 	.word	0x00030d40

080089b0 <USB_CoreInit>:
{
 80089b0:	b084      	sub	sp, #16
 80089b2:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 80089b6:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089b8:	2d01      	cmp	r5, #1
{
 80089ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80089be:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089c0:	d122      	bne.n	8008a08 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 80089c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ca:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089cc:	68c3      	ldr	r3, [r0, #12]
 80089ce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d6:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089d8:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80089da:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80089e0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80089e2:	d023      	beq.n	8008a2c <USB_CoreInit+0x7c>
    ret = USB_CoreReset(USBx);
 80089e4:	4608      	mov	r0, r1
 80089e6:	f7ff ffc9 	bl	800897c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d107      	bne.n	8008a00 <USB_CoreInit+0x50>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089f0:	688b      	ldr	r3, [r1, #8]
 80089f2:	f043 0306 	orr.w	r3, r3, #6
 80089f6:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089f8:	688b      	ldr	r3, [r1, #8]
 80089fa:	f043 0320 	orr.w	r3, r3, #32
 80089fe:	608b      	str	r3, [r1, #8]
}
 8008a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a04:	b004      	add	sp, #16
 8008a06:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a08:	68c3      	ldr	r3, [r0, #12]
 8008a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8008a10:	f7ff ffb4 	bl	800897c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8008a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a16:	b923      	cbnz	r3, 8008a22 <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a18:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a1e:	638b      	str	r3, [r1, #56]	; 0x38
 8008a20:	e7e3      	b.n	80089ea <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a22:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a28:	638b      	str	r3, [r1, #56]	; 0x38
 8008a2a:	e7de      	b.n	80089ea <USB_CoreInit+0x3a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a2c:	68c3      	ldr	r3, [r0, #12]
 8008a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a32:	60c3      	str	r3, [r0, #12]
 8008a34:	e7d6      	b.n	80089e4 <USB_CoreInit+0x34>
 8008a36:	bf00      	nop

08008a38 <USB_EnableGlobalInt>:
{
 8008a38:	4602      	mov	r2, r0
}
 8008a3a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a3c:	6893      	ldr	r3, [r2, #8]
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	6093      	str	r3, [r2, #8]
}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop

08008a48 <USB_DisableGlobalInt>:
{
 8008a48:	4602      	mov	r2, r0
}
 8008a4a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a4c:	6893      	ldr	r3, [r2, #8]
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	6093      	str	r3, [r2, #8]
}
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop

08008a58 <USB_SetCurrentMode>:
{
 8008a58:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a5a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008a5c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a5e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a62:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008a64:	d00b      	beq.n	8008a7e <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8008a66:	b941      	cbnz	r1, 8008a7a <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a68:	68c3      	ldr	r3, [r0, #12]
 8008a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a6e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8008a70:	2032      	movs	r0, #50	; 0x32
 8008a72:	f7fc fd51 	bl	8005518 <HAL_Delay>
  return HAL_OK;
 8008a76:	2000      	movs	r0, #0
}
 8008a78:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8008a7a:	2001      	movs	r0, #1
}
 8008a7c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a7e:	68c3      	ldr	r3, [r0, #12]
 8008a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a84:	60c3      	str	r3, [r0, #12]
 8008a86:	e7f3      	b.n	8008a70 <USB_SetCurrentMode+0x18>

08008a88 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008a88:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8008a8a:	0892      	lsrs	r2, r2, #2
 8008a8c:	d00c      	beq.n	8008aa8 <USB_ReadPacket+0x20>
{
 8008a8e:	b410      	push	{r4}
 8008a90:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8008a94:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8008a9e:	4281      	cmp	r1, r0
 8008aa0:	d1fa      	bne.n	8008a98 <USB_ReadPacket+0x10>
}
 8008aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa6:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8008aa8:	4608      	mov	r0, r1
}
 8008aaa:	4770      	bx	lr

08008aac <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008aac:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008aae:	6980      	ldr	r0, [r0, #24]
}
 8008ab0:	4010      	ands	r0, r2
 8008ab2:	4770      	bx	lr

08008ab4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008ab4:	6940      	ldr	r0, [r0, #20]
}
 8008ab6:	f000 0001 	and.w	r0, r0, #1
 8008aba:	4770      	bx	lr

08008abc <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008abc:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ac8:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8008acc:	f001 0303 	and.w	r3, r1, #3
 8008ad0:	4313      	orrs	r3, r2

  if (freq == HCFG_48_MHZ)
 8008ad2:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ad4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ad8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  if (freq == HCFG_48_MHZ)
 8008adc:	d006      	beq.n	8008aec <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8008ade:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 8008ae0:	bf04      	itt	eq
 8008ae2:	f241 7370 	movweq	r3, #6000	; 0x1770
 8008ae6:	6043      	streq	r3, [r0, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8008ae8:	2000      	movs	r0, #0
 8008aea:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8008aec:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008af0:	6043      	str	r3, [r0, #4]
}
 8008af2:	2000      	movs	r0, #0
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008af8:	b530      	push	{r4, r5, lr}
 8008afa:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8008afc:	2500      	movs	r5, #0
 8008afe:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008b00:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008b04:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b0c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b0e:	9b01      	ldr	r3, [sp, #4]
 8008b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8008b14:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b16:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b1a:	2064      	movs	r0, #100	; 0x64
 8008b1c:	f7fc fcfc 	bl	8005518 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008b20:	9b01      	ldr	r3, [sp, #4]
 8008b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b26:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8008b2a:	200a      	movs	r0, #10
 8008b2c:	f7fc fcf4 	bl	8005518 <HAL_Delay>

  return HAL_OK;
}
 8008b30:	4628      	mov	r0, r5
 8008b32:	b003      	add	sp, #12
 8008b34:	bd30      	pop	{r4, r5, pc}
 8008b36:	bf00      	nop

08008b38 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008b38:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008b3e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008b42:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b4a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b52:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b54:	d101      	bne.n	8008b5a <USB_DriveVbus+0x22>
 8008b56:	2901      	cmp	r1, #1
 8008b58:	d00a      	beq.n	8008b70 <USB_DriveVbus+0x38>
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b5a:	04db      	lsls	r3, r3, #19
 8008b5c:	d505      	bpl.n	8008b6a <USB_DriveVbus+0x32>
 8008b5e:	b921      	cbnz	r1, 8008b6a <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b66:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	b002      	add	sp, #8
 8008b6e:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b74:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b78:	9b01      	ldr	r3, [sp, #4]
}
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	b002      	add	sp, #8
 8008b7e:	4770      	bx	lr

08008b80 <USB_HostInit>:
{
 8008b80:	b084      	sub	sp, #16
 8008b82:	b538      	push	{r3, r4, r5, lr}
 8008b84:	4604      	mov	r4, r0
  USBx_PCGCCTL = 0U;
 8008b86:	2000      	movs	r0, #0
 8008b88:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008b8e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8008b92:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008b96:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8008b9a:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
{
 8008b9e:	ad05      	add	r5, sp, #20
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ba0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
{
 8008ba4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ba8:	63a0      	str	r0, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008baa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bac:	9906      	ldr	r1, [sp, #24]
 8008bae:	05dd      	lsls	r5, r3, #23
 8008bb0:	d557      	bpl.n	8008c62 <USB_HostInit+0xe2>
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bb2:	9b07      	ldr	r3, [sp, #28]
 8008bb4:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bb6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bba:	d055      	beq.n	8008c68 <USB_HostInit+0xe8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bbc:	f023 0304 	bic.w	r3, r3, #4
 8008bc0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bc4:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	4b2a      	ldr	r3, [pc, #168]	; (8008c74 <USB_HostInit+0xf4>)
 8008bcc:	e001      	b.n	8008bd2 <USB_HostInit+0x52>
    if (++count > 200000U)
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	d002      	beq.n	8008bd8 <USB_HostInit+0x58>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bd2:	6922      	ldr	r2, [r4, #16]
 8008bd4:	0690      	lsls	r0, r2, #26
 8008bd6:	d4fa      	bmi.n	8008bce <USB_HostInit+0x4e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bd8:	2310      	movs	r3, #16
 8008bda:	6123      	str	r3, [r4, #16]
 8008bdc:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <USB_HostInit+0xf4>)
 8008bde:	e001      	b.n	8008be4 <USB_HostInit+0x64>
    if (++count > 200000U)
 8008be0:	3b01      	subs	r3, #1
 8008be2:	d002      	beq.n	8008bea <USB_HostInit+0x6a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	06d2      	lsls	r2, r2, #27
 8008be8:	d4fa      	bmi.n	8008be0 <USB_HostInit+0x60>
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bea:	b161      	cbz	r1, 8008c06 <USB_HostInit+0x86>
 8008bec:	2200      	movs	r2, #0
    USBx_HC(i)->HCINTMSK = 0U;
 8008bee:	4615      	mov	r5, r2
 8008bf0:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	428a      	cmp	r2, r1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bfc:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008bfe:	60dd      	str	r5, [r3, #12]
 8008c00:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c04:	d1f8      	bne.n	8008bf8 <USB_HostInit+0x78>
  (void)USB_DriveVbus(USBx, 1U);
 8008c06:	2101      	movs	r1, #1
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7ff ff95 	bl	8008b38 <USB_DriveVbus>
  HAL_Delay(200U);
 8008c0e:	20c8      	movs	r0, #200	; 0xc8
 8008c10:	f7fc fc82 	bl	8005518 <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c14:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 8008c18:	2200      	movs	r2, #0
 8008c1a:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c1c:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c20:	05db      	lsls	r3, r3, #23
 8008c22:	d516      	bpl.n	8008c52 <USB_HostInit+0xd2>
    USBx->GRXFSIZ  = 0x200U;
 8008c24:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c28:	4a13      	ldr	r2, [pc, #76]	; (8008c78 <USB_HostInit+0xf8>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c2a:	4b14      	ldr	r3, [pc, #80]	; (8008c7c <USB_HostInit+0xfc>)
    USBx->GRXFSIZ  = 0x200U;
 8008c2c:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c2e:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c30:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8008c34:	9b08      	ldr	r3, [sp, #32]
 8008c36:	b91b      	cbnz	r3, 8008c40 <USB_HostInit+0xc0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c38:	69a3      	ldr	r3, [r4, #24]
 8008c3a:	f043 0310 	orr.w	r3, r3, #16
 8008c3e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c40:	69a2      	ldr	r2, [r4, #24]
 8008c42:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <USB_HostInit+0x100>)
 8008c44:	4313      	orrs	r3, r2
 8008c46:	61a3      	str	r3, [r4, #24]
}
 8008c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	b004      	add	sp, #16
 8008c50:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8008c52:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c54:	4a0b      	ldr	r2, [pc, #44]	; (8008c84 <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x80U;
 8008c58:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c5a:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008c60:	e7e8      	b.n	8008c34 <USB_HostInit+0xb4>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c62:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008c66:	e7a9      	b.n	8008bbc <USB_HostInit+0x3c>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c68:	f043 0304 	orr.w	r3, r3, #4
 8008c6c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008c70:	e7a8      	b.n	8008bc4 <USB_HostInit+0x44>
 8008c72:	bf00      	nop
 8008c74:	00030d40 	.word	0x00030d40
 8008c78:	01000200 	.word	0x01000200
 8008c7c:	00e00300 	.word	0x00e00300
 8008c80:	a3200008 	.word	0xa3200008
 8008c84:	00600080 	.word	0x00600080
 8008c88:	004000e0 	.word	0x004000e0

08008c8c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008c92:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008c96:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c98:	9801      	ldr	r0, [sp, #4]
}
 8008c9a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8008c9e:	b002      	add	sp, #8
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop

08008ca4 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008ca4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008ca8:	6880      	ldr	r0, [r0, #8]
}
 8008caa:	b280      	uxth	r0, r0
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop

08008cb0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008cb4:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8008cb8:	f505 6ca0 	add.w	ip, r5, #1280	; 0x500
{
 8008cbc:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8008cc0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8008cc4:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008cc8:	f04f 3eff 	mov.w	lr, #4294967295
 8008ccc:	f001 010f 	and.w	r1, r1, #15
 8008cd0:	f04f 0801 	mov.w	r8, #1
 8008cd4:	f8cc e008 	str.w	lr, [ip, #8]
 8008cd8:	fa08 f101 	lsl.w	r1, r8, r1
 8008cdc:	fa4f fe82 	sxtb.w	lr, r2
 8008ce0:	f500 6980 	add.w	r9, r0, #1024	; 0x400

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008ce4:	2c03      	cmp	r4, #3
 8008ce6:	d85d      	bhi.n	8008da4 <USB_HC_Init+0xf4>
 8008ce8:	e8df f004 	tbb	[pc, r4]
 8008cec:	02493b49 	.word	0x02493b49
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cf0:	f240 689d 	movw	r8, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008cf4:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cf8:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008cfc:	db64      	blt.n	8008dc8 <USB_HC_Init+0x118>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008cfe:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8008d02:	ea48 0101 	orr.w	r1, r8, r1
 8008d06:	f8c9 1018 	str.w	r1, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d0a:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8008d0e:	2100      	movs	r1, #0
 8008d10:	f04c 7c00 	orr.w	ip, ip, #33554432	; 0x2000000
 8008d14:	f8c0 c018 	str.w	ip, [r0, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8008d18:	4608      	mov	r0, r1
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d1a:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d1c:	f3c7 070a 	ubfx	r7, r7, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d20:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d22:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d26:	433b      	orrs	r3, r7
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d28:	f402 47f0 	and.w	r7, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d2c:	04a2      	lsls	r2, r4, #18
 8008d2e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008d32:	433b      	orrs	r3, r7
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008d34:	2e02      	cmp	r6, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d36:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d3a:	ea43 0300 	orr.w	r3, r3, r0
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008d3e:	bf14      	ite	ne
 8008d40:	2200      	movne	r2, #0
 8008d42:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d46:	4313      	orrs	r3, r2

  if (ep_type == EP_TYPE_INTR)
 8008d48:	2c03      	cmp	r4, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d4a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8008d4e:	d105      	bne.n	8008d5c <USB_HC_Init+0xac>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008d50:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8008d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d58:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d62:	f240 2825 	movw	r8, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8008d66:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d6a:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008d6e:	dac6      	bge.n	8008cfe <USB_HC_Init+0x4e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d70:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8008d74:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 8008d78:	f8cc e00c 	str.w	lr, [ip, #12]
 8008d7c:	e02a      	b.n	8008dd4 <USB_HC_Init+0x124>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d7e:	f240 489d 	movw	r8, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 8008d82:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d86:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008d8a:	db1d      	blt.n	8008dc8 <USB_HC_Init+0x118>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d8c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008d90:	f41e 7f80 	tst.w	lr, #256	; 0x100
 8008d94:	d0b3      	beq.n	8008cfe <USB_HC_Init+0x4e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008d96:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8008d9a:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 8008d9e:	f8cc e00c 	str.w	lr, [ip, #12]
 8008da2:	e7ac      	b.n	8008cfe <USB_HC_Init+0x4e>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008da4:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8008da8:	ea48 0101 	orr.w	r1, r8, r1
 8008dac:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008db0:	6981      	ldr	r1, [r0, #24]
      ret = HAL_ERROR;
 8008db2:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008db6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008dba:	6181      	str	r1, [r0, #24]
      ret = HAL_ERROR;
 8008dbc:	bfac      	ite	ge
 8008dbe:	2000      	movge	r0, #0
 8008dc0:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	e7a8      	b.n	8008d1a <USB_HC_Init+0x6a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008dc8:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8008dcc:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8008dd0:	f8cc e00c 	str.w	lr, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008dd4:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8008dd8:	ea41 0108 	orr.w	r1, r1, r8
 8008ddc:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008de0:	6981      	ldr	r1, [r0, #24]
 8008de2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008de6:	6181      	str	r1, [r0, #24]
 8008de8:	2100      	movs	r1, #0
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008dea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008dee:	e794      	b.n	8008d1a <USB_HC_Init+0x6a>

08008df0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008df4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008df6:	784f      	ldrb	r7, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008df8:	05db      	lsls	r3, r3, #23
 8008dfa:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 8008dfe:	f504 6ca0 	add.w	ip, r4, #1280	; 0x500
 8008e02:	d50d      	bpl.n	8008e20 <USB_HC_StartXfer+0x30>
 8008e04:	790b      	ldrb	r3, [r1, #4]
 8008e06:	b95b      	cbnz	r3, 8008e20 <USB_HC_StartXfer+0x30>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	f000 808b 	beq.w	8008f24 <USB_HC_StartXfer+0x134>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 8008e0e:	2a01      	cmp	r2, #1
 8008e10:	d106      	bne.n	8008e20 <USB_HC_StartXfer+0x30>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008e12:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8008e16:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8008e1a:	f8cc 500c 	str.w	r5, [ip, #12]
      hc->do_ping = 0U;
 8008e1e:	714b      	strb	r3, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008e20:	690b      	ldr	r3, [r1, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d14a      	bne.n	8008ebc <USB_HC_StartXfer+0xcc>
 8008e26:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8008e2a:	2501      	movs	r5, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 8008e2c:	78ce      	ldrb	r6, [r1, #3]
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	d153      	bne.n	8008eda <USB_HC_StartXfer+0xea>
 8008e32:	690d      	ldr	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008e34:	7a8b      	ldrb	r3, [r1, #10]
 8008e36:	075b      	lsls	r3, r3, #29
 8008e38:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e3c:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e40:	f3c5 0e12 	ubfx	lr, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e44:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e48:	f8cc 3010 	str.w	r3, [ip, #16]

  if (dma != 0U)
 8008e4c:	b112      	cbz	r2, 8008e54 <USB_HC_StartXfer+0x64>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008e4e:	68cb      	ldr	r3, [r1, #12]
 8008e50:	f8cc 3014 	str.w	r3, [ip, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008e54:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8008e58:	f8de 3008 	ldr.w	r3, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008e5c:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e60:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8008fa0 <USB_HC_StartXfer+0x1b0>
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008e64:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
 8008e68:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
 8008e72:	075b      	lsls	r3, r3, #29
 8008e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e78:	ea43 0308 	orr.w	r3, r3, r8
 8008e7c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e80:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8008e84:	f8cc 3000 	str.w	r3, [ip]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e88:	f8dc 3000 	ldr.w	r3, [ip]
 8008e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e90:	f8cc 3000 	str.w	r3, [ip]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e94:	f8dc 3000 	ldr.w	r3, [ip]
  if (hc->ep_is_in != 0U)
 8008e98:	b326      	cbz	r6, 8008ee4 <USB_HC_StartXfer+0xf4>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9e:	f8cc 3000 	str.w	r3, [ip]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ea2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008eaa:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008eae:	f8dc 3000 	ldr.w	r3, [ip]
 8008eb2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
  }

  return HAL_OK;
}
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008ebc:	890d      	ldrh	r5, [r1, #8]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	442b      	add	r3, r5
 8008ec2:	fbb3 f3f5 	udiv	r3, r3, r5
    if (num_packets > max_hc_pkt_count)
 8008ec6:	b29e      	uxth	r6, r3
 8008ec8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8008ecc:	d823      	bhi.n	8008f16 <USB_HC_StartXfer+0x126>
 8008ece:	4635      	mov	r5, r6
  if (hc->ep_is_in != 0U)
 8008ed0:	78ce      	ldrb	r6, [r1, #3]
 8008ed2:	ea4f 4ec3 	mov.w	lr, r3, lsl #19
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	d0ab      	beq.n	8008e32 <USB_HC_StartXfer+0x42>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008eda:	890b      	ldrh	r3, [r1, #8]
 8008edc:	fb05 f503 	mul.w	r5, r5, r3
 8008ee0:	610d      	str	r5, [r1, #16]
 8008ee2:	e7a7      	b.n	8008e34 <USB_HC_StartXfer+0x44>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ee8:	f8cc 3000 	str.w	r3, [ip]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008eec:	f8dc 3000 	ldr.w	r3, [ip]
 8008ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ef4:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ef8:	f8dc 3000 	ldr.w	r3, [ip]
 8008efc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	d1d8      	bne.n	8008eb6 <USB_HC_StartXfer+0xc6>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008f04:	2d00      	cmp	r5, #0
 8008f06:	d0d6      	beq.n	8008eb6 <USB_HC_StartXfer+0xc6>
    switch (hc->ep_type)
 8008f08:	79cb      	ldrb	r3, [r1, #7]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d822      	bhi.n	8008f54 <USB_HC_StartXfer+0x164>
 8008f0e:	e8df f003 	tbb	[pc, r3]
 8008f12:	1934      	.short	0x1934
 8008f14:	1934      	.short	0x1934
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008f16:	022d      	lsls	r5, r5, #8
 8008f18:	610d      	str	r5, [r1, #16]
 8008f1a:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8008f1e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008f22:	e783      	b.n	8008e2c <USB_HC_StartXfer+0x3c>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008f24:	794b      	ldrb	r3, [r1, #5]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	f47f af7a 	bne.w	8008e20 <USB_HC_StartXfer+0x30>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f2c:	4b1b      	ldr	r3, [pc, #108]	; (8008f9c <USB_HC_StartXfer+0x1ac>)
 8008f2e:	f8cc 3010 	str.w	r3, [ip, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f32:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f3e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      return HAL_OK;
 8008f42:	e7b8      	b.n	8008eb6 <USB_HC_StartXfer+0xc6>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f44:	f8de 2010 	ldr.w	r2, [lr, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f48:	1ceb      	adds	r3, r5, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f4a:	b292      	uxth	r2, r2
 8008f4c:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d31e      	bcc.n	8008f92 <USB_HC_StartXfer+0x1a2>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f54:	b2ab      	uxth	r3, r5
 8008f56:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8008f58:	089b      	lsrs	r3, r3, #2
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f5a:	68ca      	ldr	r2, [r1, #12]
    for (i = 0U; i < count32b; i++)
 8008f5c:	d0ab      	beq.n	8008eb6 <USB_HC_StartXfer+0xc6>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f5e:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 8008f62:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8008f66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f6a:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f6e:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d1fa      	bne.n	8008f6a <USB_HC_StartXfer+0x17a>
}
 8008f74:	2000      	movs	r0, #0
 8008f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008f7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f7c:	1ceb      	adds	r3, r5, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008f7e:	b292      	uxth	r2, r2
 8008f80:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d2e5      	bcs.n	8008f54 <USB_HC_StartXfer+0x164>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008f88:	6983      	ldr	r3, [r0, #24]
 8008f8a:	f043 0320 	orr.w	r3, r3, #32
 8008f8e:	6183      	str	r3, [r0, #24]
 8008f90:	e7e0      	b.n	8008f54 <USB_HC_StartXfer+0x164>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f92:	6983      	ldr	r3, [r0, #24]
 8008f94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f98:	6183      	str	r3, [r0, #24]
 8008f9a:	e7db      	b.n	8008f54 <USB_HC_StartXfer+0x164>
 8008f9c:	80080000 	.word	0x80080000
 8008fa0:	2000737c 	.word	0x2000737c

08008fa4 <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008fa4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008fa8:	6940      	ldr	r0, [r0, #20]
}
 8008faa:	b280      	uxth	r0, r0
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop

08008fb0 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008fb0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 8008fb4:	b410      	push	{r4}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008fb6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008fba:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fbe:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008fc6:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fca:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008fce:	d022      	beq.n	8009016 <USB_HC_Halt+0x66>
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008fd0:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8008fd4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fd8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008fdc:	d13d      	bne.n	800905a <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fe2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fe6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fee:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ff2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008ff6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ffa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8008ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009002:	e001      	b.n	8009008 <USB_HC_Halt+0x58>
        if (++count > 1000U)
 8009004:	3b01      	subs	r3, #1
 8009006:	d002      	beq.n	800900e <USB_HC_Halt+0x5e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009008:	6822      	ldr	r2, [r4, #0]
 800900a:	2a00      	cmp	r2, #0
 800900c:	dbfa      	blt.n	8009004 <USB_HC_Halt+0x54>
}
 800900e:	2000      	movs	r0, #0
 8009010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009014:	4770      	bx	lr
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009016:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009018:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800901c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009020:	d11b      	bne.n	800905a <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009022:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009026:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800902a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800902e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009032:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009036:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800903a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800903e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8009042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009046:	e001      	b.n	800904c <USB_HC_Halt+0x9c>
        if (++count > 1000U)
 8009048:	3b01      	subs	r3, #1
 800904a:	d0e0      	beq.n	800900e <USB_HC_Halt+0x5e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	2a00      	cmp	r2, #0
 8009050:	dbfa      	blt.n	8009048 <USB_HC_Halt+0x98>
}
 8009052:	2000      	movs	r0, #0
 8009054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009058:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800905a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 800905e:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009060:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8009064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop

0800906c <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800906c:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800906e:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <USB_StopHost+0x8c>)
 8009070:	f44f 6184 	mov.w	r1, #1056	; 0x420
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009074:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800907a:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800907c:	6101      	str	r1, [r0, #16]
 800907e:	e001      	b.n	8009084 <USB_StopHost+0x18>
    if (++count > 200000U)
 8009080:	3b01      	subs	r3, #1
 8009082:	d002      	beq.n	800908a <USB_StopHost+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009084:	6902      	ldr	r2, [r0, #16]
 8009086:	0691      	lsls	r1, r2, #26
 8009088:	d4fa      	bmi.n	8009080 <USB_StopHost+0x14>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800908a:	2310      	movs	r3, #16
 800908c:	6103      	str	r3, [r0, #16]
 800908e:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <USB_StopHost+0x8c>)
 8009090:	e001      	b.n	8009096 <USB_StopHost+0x2a>
    if (++count > 200000U)
 8009092:	3b01      	subs	r3, #1
 8009094:	d002      	beq.n	800909c <USB_StopHost+0x30>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009096:	6902      	ldr	r2, [r0, #16]
 8009098:	06d2      	lsls	r2, r2, #27
 800909a:	d4fa      	bmi.n	8009092 <USB_StopHost+0x26>
 800909c:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090a0:	460c      	mov	r4, r1
 80090a2:	f500 62e0 	add.w	r2, r0, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80090b0:	f844 3b20 	str.w	r3, [r4], #32
  for (i = 0U; i <= 15U; i++)
 80090b4:	4294      	cmp	r4, r2
 80090b6:	d1f6      	bne.n	80090a6 <USB_StopHost+0x3a>
  uint32_t count = 0U;
 80090b8:	2300      	movs	r3, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80090ba:	680a      	ldr	r2, [r1, #0]
 80090bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090c0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80090c4:	600a      	str	r2, [r1, #0]
 80090c6:	e002      	b.n	80090ce <USB_StopHost+0x62>
    {
      if (++count > 1000U)
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090c8:	680a      	ldr	r2, [r1, #0]
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	da03      	bge.n	80090d6 <USB_StopHost+0x6a>
      if (++count > 1000U)
 80090ce:	3301      	adds	r3, #1
 80090d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090d4:	d9f8      	bls.n	80090c8 <USB_StopHost+0x5c>
 80090d6:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 80090d8:	42a1      	cmp	r1, r4
 80090da:	d1ee      	bne.n	80090ba <USB_StopHost+0x4e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80090dc:	f04f 33ff 	mov.w	r3, #4294967295
 80090e0:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090e4:	6143      	str	r3, [r0, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090e6:	6883      	ldr	r3, [r0, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80090e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6083      	str	r3, [r0, #8]
}
 80090f2:	2000      	movs	r0, #0
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	00030d40 	.word	0x00030d40

080090fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80090fc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80090fe:	4903      	ldr	r1, [pc, #12]	; (800910c <MX_FATFS_Init+0x10>)
 8009100:	4803      	ldr	r0, [pc, #12]	; (8009110 <MX_FATFS_Init+0x14>)
 8009102:	f003 ff53 	bl	800cfac <FATFS_LinkDriver>
 8009106:	4b03      	ldr	r3, [pc, #12]	; (8009114 <MX_FATFS_Init+0x18>)
 8009108:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800910a:	bd08      	pop	{r3, pc}
 800910c:	2000d870 	.word	0x2000d870
 8009110:	08011ad4 	.word	0x08011ad4
 8009114:	2000f8e0 	.word	0x2000f8e0

08009118 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8009118:	2000      	movs	r0, #0
 800911a:	4770      	bx	lr

0800911c <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 800911c:	2000      	movs	r0, #0
 800911e:	4770      	bx	lr

08009120 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009120:	4601      	mov	r1, r0
{
 8009122:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009124:	4803      	ldr	r0, [pc, #12]	; (8009134 <USBH_status+0x14>)
 8009126:	f000 fadf 	bl	80096e8 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 800912a:	fab0 f080 	clz	r0, r0
 800912e:	0940      	lsrs	r0, r0, #5
 8009130:	bd08      	pop	{r3, pc}
 8009132:	bf00      	nop
 8009134:	2000f924 	.word	0x2000f924

08009138 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009138:	b510      	push	{r4, lr}
 800913a:	b090      	sub	sp, #64	; 0x40
 800913c:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	480d      	ldr	r0, [pc, #52]	; (8009178 <USBH_read+0x40>)
 8009142:	460b      	mov	r3, r1
 8009144:	4621      	mov	r1, r4
 8009146:	f000 fb03 	bl	8009750 <USBH_MSC_Read>
 800914a:	b908      	cbnz	r0, 8009150 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 800914c:	b010      	add	sp, #64	; 0x40
 800914e:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009150:	4621      	mov	r1, r4
 8009152:	aa03      	add	r2, sp, #12
 8009154:	4808      	ldr	r0, [pc, #32]	; (8009178 <USBH_read+0x40>)
 8009156:	f000 fad9 	bl	800970c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800915a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800915e:	2b28      	cmp	r3, #40	; 0x28
 8009160:	d006      	beq.n	8009170 <USBH_read+0x38>
 8009162:	2b3a      	cmp	r3, #58	; 0x3a
 8009164:	d004      	beq.n	8009170 <USBH_read+0x38>
 8009166:	2b04      	cmp	r3, #4
 8009168:	d002      	beq.n	8009170 <USBH_read+0x38>
      res = RES_ERROR;
 800916a:	2001      	movs	r0, #1
}
 800916c:	b010      	add	sp, #64	; 0x40
 800916e:	bd10      	pop	{r4, pc}
      res = RES_NOTRDY;
 8009170:	2003      	movs	r0, #3
}
 8009172:	b010      	add	sp, #64	; 0x40
 8009174:	bd10      	pop	{r4, pc}
 8009176:	bf00      	nop
 8009178:	2000f924 	.word	0x2000f924

0800917c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800917c:	b510      	push	{r4, lr}
 800917e:	4614      	mov	r4, r2
 8009180:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8009182:	2903      	cmp	r1, #3
 8009184:	d82a      	bhi.n	80091dc <USBH_ioctl+0x60>
 8009186:	e8df f001 	tbb	[pc, r1]
 800918a:	1c02      	.short	0x1c02
 800918c:	0511      	.short	0x0511
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800918e:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8009190:	b00e      	add	sp, #56	; 0x38
 8009192:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009194:	4601      	mov	r1, r0
 8009196:	aa01      	add	r2, sp, #4
 8009198:	4812      	ldr	r0, [pc, #72]	; (80091e4 <USBH_ioctl+0x68>)
 800919a:	f000 fab7 	bl	800970c <USBH_MSC_GetLUNInfo>
 800919e:	b9d0      	cbnz	r0, 80091d6 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80091a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80091a4:	0a5b      	lsrs	r3, r3, #9
 80091a6:	6023      	str	r3, [r4, #0]
}
 80091a8:	b00e      	add	sp, #56	; 0x38
 80091aa:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091ac:	4601      	mov	r1, r0
 80091ae:	aa01      	add	r2, sp, #4
 80091b0:	480c      	ldr	r0, [pc, #48]	; (80091e4 <USBH_ioctl+0x68>)
 80091b2:	f000 faab 	bl	800970c <USBH_MSC_GetLUNInfo>
 80091b6:	b970      	cbnz	r0, 80091d6 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size;
 80091b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80091bc:	6023      	str	r3, [r4, #0]
}
 80091be:	b00e      	add	sp, #56	; 0x38
 80091c0:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091c2:	4601      	mov	r1, r0
 80091c4:	aa01      	add	r2, sp, #4
 80091c6:	4807      	ldr	r0, [pc, #28]	; (80091e4 <USBH_ioctl+0x68>)
 80091c8:	f000 faa0 	bl	800970c <USBH_MSC_GetLUNInfo>
 80091cc:	b918      	cbnz	r0, 80091d6 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 80091ce:	9b02      	ldr	r3, [sp, #8]
 80091d0:	6023      	str	r3, [r4, #0]
}
 80091d2:	b00e      	add	sp, #56	; 0x38
 80091d4:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 80091d6:	2001      	movs	r0, #1
}
 80091d8:	b00e      	add	sp, #56	; 0x38
 80091da:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 80091dc:	2004      	movs	r0, #4
}
 80091de:	b00e      	add	sp, #56	; 0x38
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	bf00      	nop
 80091e4:	2000f924 	.word	0x2000f924

080091e8 <USBH_write>:
{
 80091e8:	b510      	push	{r4, lr}
 80091ea:	b090      	sub	sp, #64	; 0x40
 80091ec:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	4810      	ldr	r0, [pc, #64]	; (8009234 <USBH_write+0x4c>)
 80091f2:	460b      	mov	r3, r1
 80091f4:	4621      	mov	r1, r4
 80091f6:	f000 faf1 	bl	80097dc <USBH_MSC_Write>
 80091fa:	b908      	cbnz	r0, 8009200 <USBH_write+0x18>
}
 80091fc:	b010      	add	sp, #64	; 0x40
 80091fe:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009200:	4621      	mov	r1, r4
 8009202:	aa03      	add	r2, sp, #12
 8009204:	480b      	ldr	r0, [pc, #44]	; (8009234 <USBH_write+0x4c>)
 8009206:	f000 fa81 	bl	800970c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800920a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800920e:	2b27      	cmp	r3, #39	; 0x27
 8009210:	d00c      	beq.n	800922c <USBH_write+0x44>
 8009212:	d906      	bls.n	8009222 <USBH_write+0x3a>
 8009214:	2b28      	cmp	r3, #40	; 0x28
 8009216:	d006      	beq.n	8009226 <USBH_write+0x3e>
 8009218:	2b3a      	cmp	r3, #58	; 0x3a
 800921a:	d004      	beq.n	8009226 <USBH_write+0x3e>
      res = RES_ERROR;
 800921c:	2001      	movs	r0, #1
}
 800921e:	b010      	add	sp, #64	; 0x40
 8009220:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 8009222:	2b04      	cmp	r3, #4
 8009224:	d1fa      	bne.n	800921c <USBH_write+0x34>
      res = RES_NOTRDY;
 8009226:	2003      	movs	r0, #3
}
 8009228:	b010      	add	sp, #64	; 0x40
 800922a:	bd10      	pop	{r4, pc}
      res = RES_WRPRT;
 800922c:	2002      	movs	r0, #2
}
 800922e:	b010      	add	sp, #64	; 0x40
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	2000f924 	.word	0x2000f924

08009238 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8009238:	2000      	movs	r0, #0
 800923a:	4770      	bx	lr

0800923c <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800923c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009240:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009242:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 8009244:	7b2a      	ldrb	r2, [r5, #12]
 8009246:	b122      	cbz	r2, 8009252 <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY;
 8009248:	f112 30ff 	adds.w	r0, r2, #4294967295
 800924c:	bf18      	it	ne
 800924e:	2001      	movne	r0, #1
}
 8009250:	bd70      	pop	{r4, r5, r6, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009252:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8009256:	782b      	ldrb	r3, [r5, #0]
 8009258:	428b      	cmp	r3, r1
 800925a:	4604      	mov	r4, r0
 800925c:	d939      	bls.n	80092d2 <USBH_MSC_Process+0x96>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800925e:	2334      	movs	r3, #52	; 0x34
 8009260:	fb03 5301 	mla	r3, r3, r1, r5
 8009264:	2001      	movs	r0, #1
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009266:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800926a:	f883 0091 	strb.w	r0, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800926e:	2a08      	cmp	r2, #8
 8009270:	d825      	bhi.n	80092be <USBH_MSC_Process+0x82>
 8009272:	e8df f002 	tbb	[pc, r2]
 8009276:	2445      	.short	0x2445
 8009278:	78665005 	.word	0x78665005
 800927c:	2424      	.short	0x2424
 800927e:	41          	.byte	0x41
 800927f:	00          	.byte	0x00
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009280:	b2c9      	uxtb	r1, r1
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fc48 	bl	8009b18 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8009288:	2800      	cmp	r0, #0
 800928a:	f040 80af 	bne.w	80093ec <USBH_MSC_Process+0x1b0>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800928e:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8009292:	2234      	movs	r2, #52	; 0x34
 8009294:	fb02 5203 	mla	r2, r2, r3, r5
 8009298:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 800929c:	2900      	cmp	r1, #0
 800929e:	f000 80cd 	beq.w	800943c <USBH_MSC_Process+0x200>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80092a2:	2101      	movs	r1, #1
 80092a4:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80092a8:	2234      	movs	r2, #52	; 0x34
 80092aa:	fb02 5503 	mla	r5, r2, r3, r5
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80092ae:	2300      	movs	r3, #0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80092b0:	2203      	movs	r2, #3
 80092b2:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80092b6:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80092ba:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80092be:	2104      	movs	r1, #4
 80092c0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092c4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80092c8:	2200      	movs	r2, #0
 80092ca:	f003 fff7 	bl	800d2bc <osMessagePut>
  USBH_StatusTypeDef error = USBH_BUSY;
 80092ce:	2001      	movs	r0, #1
}
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80092d2:	2304      	movs	r3, #4
        MSC_Handle->state = MSC_IDLE;
 80092d4:	2601      	movs	r6, #1
        MSC_Handle->current_lun = 0U;
 80092d6:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80092da:	732e      	strb	r6, [r5, #12]
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092dc:	4619      	mov	r1, r3
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80092de:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092e2:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 80092e6:	f003 ffe9 	bl	800d2bc <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80092ea:	4620      	mov	r0, r4
 80092ec:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80092f0:	2102      	movs	r1, #2
 80092f2:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 80092f4:	4630      	mov	r0, r6
}
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
            MSC_Handle->current_lun++;
 80092f8:	3101      	adds	r1, #1
 80092fa:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
            break;
 80092fe:	e7de      	b.n	80092be <USBH_MSC_Process+0x82>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009300:	2334      	movs	r3, #52	; 0x34
 8009302:	fb03 5101 	mla	r1, r3, r1, r5
 8009306:	2204      	movs	r2, #4
            MSC_Handle->timer = phost->Timer;
 8009308:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800930c:	f881 2090 	strb.w	r2, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8009310:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
            break;
 8009314:	e7d3      	b.n	80092be <USBH_MSC_Process+0x82>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009316:	2634      	movs	r6, #52	; 0x34
 8009318:	fb06 5201 	mla	r2, r6, r1, r5
 800931c:	3294      	adds	r2, #148	; 0x94
 800931e:	b2c9      	uxtb	r1, r1
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fc21 	bl	8009b68 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8009326:	bbd8      	cbnz	r0, 80093a0 <USBH_MSC_Process+0x164>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009328:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800932c:	fb06 5603 	mla	r6, r6, r3, r5
 8009330:	2201      	movs	r2, #1
              MSC_Handle->current_lun++;
 8009332:	3301      	adds	r3, #1
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009334:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009338:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
              MSC_Handle->current_lun++;
 800933c:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 8009340:	e7bd      	b.n	80092be <USBH_MSC_Process+0x82>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009342:	2634      	movs	r6, #52	; 0x34
 8009344:	fb06 5201 	mla	r2, r6, r1, r5
 8009348:	329f      	adds	r2, #159	; 0x9f
 800934a:	b2c9      	uxtb	r1, r1
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fc43 	bl	8009bd8 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8009352:	2800      	cmp	r0, #0
 8009354:	d145      	bne.n	80093e2 <USBH_MSC_Process+0x1a6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009356:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800935a:	fb06 5503 	mla	r5, r6, r3, r5
 800935e:	2302      	movs	r3, #2
 8009360:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8009364:	e7ab      	b.n	80092be <USBH_MSC_Process+0x82>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009366:	2634      	movs	r6, #52	; 0x34
 8009368:	fb06 5201 	mla	r2, r6, r1, r5
 800936c:	329c      	adds	r2, #156	; 0x9c
 800936e:	b2c9      	uxtb	r1, r1
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fc9d 	bl	8009cb0 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8009376:	bb50      	cbnz	r0, 80093ce <USBH_MSC_Process+0x192>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009378:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800937c:	fb06 5603 	mla	r6, r6, r3, r5
 8009380:	f896 209c 	ldrb.w	r2, [r6, #156]	; 0x9c
 8009384:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8009388:	2a02      	cmp	r2, #2
 800938a:	d04b      	beq.n	8009424 <USBH_MSC_Process+0x1e8>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800938c:	2234      	movs	r2, #52	; 0x34
 800938e:	fb02 5203 	mla	r2, r2, r3, r5
 8009392:	2101      	movs	r1, #1
              MSC_Handle->current_lun++;
 8009394:	3301      	adds	r3, #1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009396:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 800939a:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 800939e:	e78e      	b.n	80092be <USBH_MSC_Process+0x82>
            else if (scsi_status == USBH_FAIL)
 80093a0:	2802      	cmp	r0, #2
 80093a2:	d00c      	beq.n	80093be <USBH_MSC_Process+0x182>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093a4:	2804      	cmp	r0, #4
 80093a6:	d18a      	bne.n	80092be <USBH_MSC_Process+0x82>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093a8:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80093ac:	fb06 5503 	mla	r5, r6, r3, r5
 80093b0:	2201      	movs	r2, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093b2:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093b4:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093b8:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 80093bc:	e77f      	b.n	80092be <USBH_MSC_Process+0x82>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80093be:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80093c2:	fb06 5503 	mla	r5, r6, r3, r5
 80093c6:	2305      	movs	r3, #5
 80093c8:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 80093cc:	e777      	b.n	80092be <USBH_MSC_Process+0x82>
            if (scsi_status == USBH_FAIL)
 80093ce:	2802      	cmp	r0, #2
 80093d0:	d109      	bne.n	80093e6 <USBH_MSC_Process+0x1aa>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80093d2:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80093d6:	fb06 5503 	mla	r5, r6, r3, r5
 80093da:	2308      	movs	r3, #8
 80093dc:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 80093e0:	e76d      	b.n	80092be <USBH_MSC_Process+0x82>
            if (scsi_status == USBH_FAIL)
 80093e2:	2802      	cmp	r0, #2
 80093e4:	d0eb      	beq.n	80093be <USBH_MSC_Process+0x182>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093e6:	2804      	cmp	r0, #4
 80093e8:	d0de      	beq.n	80093a8 <USBH_MSC_Process+0x16c>
 80093ea:	e768      	b.n	80092be <USBH_MSC_Process+0x82>
            if (ready_status == USBH_FAIL)
 80093ec:	2802      	cmp	r0, #2
 80093ee:	d128      	bne.n	8009442 <USBH_MSC_Process+0x206>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80093f0:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80093f4:	2234      	movs	r2, #52	; 0x34
 80093f6:	fb02 5203 	mla	r2, r2, r3, r5
 80093fa:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 80093fe:	2902      	cmp	r1, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009400:	bf14      	ite	ne
 8009402:	2101      	movne	r1, #1
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009404:	2100      	moveq	r1, #0
 8009406:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800940a:	2234      	movs	r2, #52	; 0x34
 800940c:	fb02 5503 	mla	r5, r2, r3, r5
 8009410:	2105      	movs	r1, #5
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009412:	2201      	movs	r2, #1
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009414:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009416:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800941a:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800941e:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 8009422:	e74c      	b.n	80092be <USBH_MSC_Process+0x82>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009424:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 8009428:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 800942c:	1a09      	subs	r1, r1, r0
 800942e:	f242 700f 	movw	r0, #9999	; 0x270f
 8009432:	4281      	cmp	r1, r0
 8009434:	d8aa      	bhi.n	800938c <USBH_MSC_Process+0x150>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009436:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
                  break;
 800943a:	e740      	b.n	80092be <USBH_MSC_Process+0x82>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800943c:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 8009440:	e732      	b.n	80092a8 <USBH_MSC_Process+0x6c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009442:	2804      	cmp	r0, #4
 8009444:	f47f af3b 	bne.w	80092be <USBH_MSC_Process+0x82>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009448:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800944c:	2234      	movs	r2, #52	; 0x34
 800944e:	fb02 5503 	mla	r5, r2, r3, r5
 8009452:	2201      	movs	r2, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009454:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009456:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800945a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 800945e:	e72e      	b.n	80092be <USBH_MSC_Process+0x82>

08009460 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009460:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009464:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009466:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8009468:	7ba3      	ldrb	r3, [r4, #14]
 800946a:	2b02      	cmp	r3, #2
{
 800946c:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 800946e:	d004      	beq.n	800947a <USBH_MSC_ClassRequest+0x1a>
 8009470:	2b03      	cmp	r3, #3
 8009472:	d01a      	beq.n	80094aa <USBH_MSC_ClassRequest+0x4a>
 8009474:	b10b      	cbz	r3, 800947a <USBH_MSC_ClassRequest+0x1a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009476:	2001      	movs	r0, #1
}
 8009478:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800947a:	4610      	mov	r0, r2
 800947c:	4621      	mov	r1, r4
 800947e:	f000 f9f3 	bl	8009868 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8009482:	2803      	cmp	r0, #3
 8009484:	d01a      	beq.n	80094bc <USBH_MSC_ClassRequest+0x5c>
      if (status == USBH_OK)
 8009486:	2800      	cmp	r0, #0
 8009488:	d1f6      	bne.n	8009478 <USBH_MSC_ClassRequest+0x18>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800948a:	7823      	ldrb	r3, [r4, #0]
 800948c:	2b02      	cmp	r3, #2
 800948e:	d91e      	bls.n	80094ce <USBH_MSC_ClassRequest+0x6e>
 8009490:	2302      	movs	r3, #2
          MSC_Handle->unit[i].state_changed = 0U;
 8009492:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009496:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009498:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 800949c:	2300      	movs	r3, #0
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800949e:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
 80094a0:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80094a4:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
}
 80094a8:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80094aa:	2100      	movs	r1, #0
 80094ac:	f001 fad0 	bl	800aa50 <USBH_ClrFeature>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1e0      	bne.n	8009476 <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80094b4:	7be3      	ldrb	r3, [r4, #15]
 80094b6:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094b8:	2001      	movs	r0, #1
}
 80094ba:	bd10      	pop	{r4, pc}
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80094bc:	2201      	movs	r2, #1
          MSC_Handle->unit[i].state_changed = 0U;
 80094be:	2000      	movs	r0, #0
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80094c0:	2302      	movs	r3, #2
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80094c2:	7022      	strb	r2, [r4, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80094c4:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80094c8:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
}
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	3301      	adds	r3, #1
 80094d0:	b2db      	uxtb	r3, r3
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80094d2:	2202      	movs	r2, #2
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80094d4:	2b01      	cmp	r3, #1
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80094d6:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80094d8:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80094dc:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80094e0:	d1dc      	bne.n	800949c <USBH_MSC_ClassRequest+0x3c>
}
 80094e2:	bd10      	pop	{r4, pc}

080094e4 <USBH_MSC_InterfaceDeInit>:
{
 80094e4:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80094ea:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 80094ec:	7969      	ldrb	r1, [r5, #5]
{
 80094ee:	4604      	mov	r4, r0
  if (MSC_Handle->OutPipe)
 80094f0:	b969      	cbnz	r1, 800950e <USBH_MSC_InterfaceDeInit+0x2a>
  if (MSC_Handle->InPipe)
 80094f2:	7929      	ldrb	r1, [r5, #4]
 80094f4:	b9b1      	cbnz	r1, 8009524 <USBH_MSC_InterfaceDeInit+0x40>
  if (phost->pActiveClass->pData)
 80094f6:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80094fa:	69d8      	ldr	r0, [r3, #28]
 80094fc:	b128      	cbz	r0, 800950a <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 80094fe:	f005 fe71 	bl	800f1e4 <free>
    phost->pActiveClass->pData = 0U;
 8009502:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8009506:	2200      	movs	r2, #0
 8009508:	61da      	str	r2, [r3, #28]
}
 800950a:	2000      	movs	r0, #0
 800950c:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800950e:	f001 fb1b 	bl	800ab48 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009512:	7969      	ldrb	r1, [r5, #5]
 8009514:	4620      	mov	r0, r4
 8009516:	f001 fb37 	bl	800ab88 <USBH_FreePipe>
  if (MSC_Handle->InPipe)
 800951a:	7929      	ldrb	r1, [r5, #4]
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800951c:	2300      	movs	r3, #0
 800951e:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 8009520:	2900      	cmp	r1, #0
 8009522:	d0e8      	beq.n	80094f6 <USBH_MSC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009524:	4620      	mov	r0, r4
 8009526:	f001 fb0f 	bl	800ab48 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800952a:	7929      	ldrb	r1, [r5, #4]
 800952c:	4620      	mov	r0, r4
 800952e:	f001 fb2b 	bl	800ab88 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009532:	2300      	movs	r3, #0
 8009534:	712b      	strb	r3, [r5, #4]
 8009536:	e7de      	b.n	80094f6 <USBH_MSC_InterfaceDeInit+0x12>

08009538 <USBH_MSC_InterfaceInit>:
{
 8009538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800953c:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
{
 8009540:	b084      	sub	sp, #16
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009542:	2350      	movs	r3, #80	; 0x50
 8009544:	2206      	movs	r2, #6
 8009546:	7909      	ldrb	r1, [r1, #4]
{
 8009548:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800954a:	f000 fcfb 	bl	8009f44 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800954e:	2801      	cmp	r0, #1
 8009550:	d904      	bls.n	800955c <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 8009552:	2702      	movs	r7, #2
}
 8009554:	4638      	mov	r0, r7
 8009556:	b004      	add	sp, #16
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 800955c:	4601      	mov	r1, r0
 800955e:	4606      	mov	r6, r0
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fce5 	bl	8009f30 <USBH_SelectInterface>
  if (status != USBH_OK)
 8009566:	4607      	mov	r7, r0
 8009568:	2800      	cmp	r0, #0
 800956a:	d1f2      	bne.n	8009552 <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800956c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009570:	f8d4 837c 	ldr.w	r8, [r4, #892]	; 0x37c
 8009574:	f005 fe2e 	bl	800f1d4 <malloc>
 8009578:	4605      	mov	r5, r0
 800957a:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 800957e:	2800      	cmp	r0, #0
 8009580:	d0e7      	beq.n	8009552 <USBH_MSC_InterfaceInit+0x1a>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009582:	4639      	mov	r1, r7
 8009584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009588:	f005 fe67 	bl	800f25a <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800958c:	231a      	movs	r3, #26
 800958e:	fb03 4306 	mla	r3, r3, r6, r4
 8009592:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8009596:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 800959a:	0611      	lsls	r1, r2, #24
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800959c:	bf4c      	ite	mi
 800959e:	816b      	strhmi	r3, [r5, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095a0:	812b      	strhpl	r3, [r5, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80095a2:	f04f 031a 	mov.w	r3, #26
 80095a6:	fb03 4606 	mla	r6, r3, r6, r4
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80095aa:	bf48      	it	mi
 80095ac:	71ea      	strbmi	r2, [r5, #7]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80095ae:	f896 1356 	ldrb.w	r1, [r6, #854]	; 0x356
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80095b2:	bf58      	it	pl
 80095b4:	71aa      	strbpl	r2, [r5, #6]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80095b6:	060a      	lsls	r2, r1, #24
 80095b8:	f8b6 3358 	ldrh.w	r3, [r6, #856]	; 0x358
 80095bc:	d43e      	bmi.n	800963c <USBH_MSC_InterfaceInit+0x104>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80095be:	71a9      	strb	r1, [r5, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095c0:	812b      	strh	r3, [r5, #8]
  MSC_Handle->state = MSC_INIT;
 80095c2:	2600      	movs	r6, #0
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80095c4:	4620      	mov	r0, r4
  MSC_Handle->state = MSC_INIT;
 80095c6:	732e      	strb	r6, [r5, #12]
  MSC_Handle->error = MSC_OK;
 80095c8:	736e      	strb	r6, [r5, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80095ca:	73ae      	strb	r6, [r5, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80095cc:	f001 fac2 	bl	800ab54 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80095d0:	79e9      	ldrb	r1, [r5, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80095d2:	7168      	strb	r0, [r5, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80095d4:	4620      	mov	r0, r4
 80095d6:	f001 fabd 	bl	800ab54 <USBH_AllocPipe>
 80095da:	7128      	strb	r0, [r5, #4]
  USBH_MSC_BOT_Init(phost);
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 f94f 	bl	8009880 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80095e2:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 80095e6:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 80095ea:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80095ee:	79aa      	ldrb	r2, [r5, #6]
 80095f0:	7969      	ldrb	r1, [r5, #5]
 80095f2:	f8cd c008 	str.w	ip, [sp, #8]
 80095f6:	f04f 0802 	mov.w	r8, #2
 80095fa:	e9cd 0800 	strd	r0, r8, [sp]
 80095fe:	4620      	mov	r0, r4
 8009600:	f001 fa92 	bl	800ab28 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009604:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8009608:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800960c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009610:	79ea      	ldrb	r2, [r5, #7]
 8009612:	7929      	ldrb	r1, [r5, #4]
 8009614:	9000      	str	r0, [sp, #0]
 8009616:	e9cd 8c01 	strd	r8, ip, [sp, #4]
 800961a:	4620      	mov	r0, r4
 800961c:	f001 fa84 	bl	800ab28 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009620:	4632      	mov	r2, r6
 8009622:	7929      	ldrb	r1, [r5, #4]
 8009624:	4620      	mov	r0, r4
 8009626:	f005 fd7d 	bl	800f124 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800962a:	4632      	mov	r2, r6
 800962c:	7969      	ldrb	r1, [r5, #5]
 800962e:	4620      	mov	r0, r4
 8009630:	f005 fd78 	bl	800f124 <USBH_LL_SetToggle>
}
 8009634:	4638      	mov	r0, r7
 8009636:	b004      	add	sp, #16
 8009638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800963c:	71e9      	strb	r1, [r5, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800963e:	816b      	strh	r3, [r5, #10]
 8009640:	79a9      	ldrb	r1, [r5, #6]
 8009642:	e7be      	b.n	80095c2 <USBH_MSC_InterfaceInit+0x8a>

08009644 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009644:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009648:	b5f0      	push	{r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800964a:	69dc      	ldr	r4, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800964c:	2734      	movs	r7, #52	; 0x34
 800964e:	fb07 4601 	mla	r6, r7, r1, r4
{
 8009652:	b083      	sub	sp, #12
  switch (MSC_Handle->unit[lun].state)
 8009654:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 8009658:	2b06      	cmp	r3, #6
{
 800965a:	4605      	mov	r5, r0
  switch (MSC_Handle->unit[lun].state)
 800965c:	d029      	beq.n	80096b2 <USBH_MSC_RdWrProcess+0x6e>
 800965e:	2b07      	cmp	r3, #7
 8009660:	d012      	beq.n	8009688 <USBH_MSC_RdWrProcess+0x44>
 8009662:	2b05      	cmp	r3, #5
 8009664:	d003      	beq.n	800966e <USBH_MSC_RdWrProcess+0x2a>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009666:	2401      	movs	r4, #1
    default:
      break;

  }
  return error;
}
 8009668:	4620      	mov	r0, r4
 800966a:	b003      	add	sp, #12
 800966c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800966e:	fb07 4201 	mla	r2, r7, r1, r4
 8009672:	329c      	adds	r2, #156	; 0x9c
 8009674:	f000 fb1c 	bl	8009cb0 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8009678:	bb48      	cbnz	r0, 80096ce <USBH_MSC_RdWrProcess+0x8a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800967a:	2301      	movs	r3, #1
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800967c:	2402      	movs	r4, #2
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800967e:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009682:	f886 4091 	strb.w	r4, [r6, #145]	; 0x91
 8009686:	e009      	b.n	800969c <USBH_MSC_RdWrProcess+0x58>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009688:	2300      	movs	r3, #0
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	f000 fb57 	bl	8009d40 <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 8009692:	4604      	mov	r4, r0
 8009694:	b9a8      	cbnz	r0, 80096c2 <USBH_MSC_RdWrProcess+0x7e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009696:	2301      	movs	r3, #1
 8009698:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800969c:	2104      	movs	r1, #4
 800969e:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096a2:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80096a6:	2200      	movs	r2, #0
 80096a8:	f003 fe08 	bl	800d2bc <osMessagePut>
}
 80096ac:	4620      	mov	r0, r4
 80096ae:	b003      	add	sp, #12
 80096b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80096b2:	2300      	movs	r3, #0
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f000 fb88 	bl	8009dcc <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 80096bc:	4604      	mov	r4, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0e9      	beq.n	8009696 <USBH_MSC_RdWrProcess+0x52>
      else if (scsi_status == USBH_FAIL)
 80096c2:	2c02      	cmp	r4, #2
 80096c4:	d00a      	beq.n	80096dc <USBH_MSC_RdWrProcess+0x98>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096c6:	2c04      	cmp	r4, #4
 80096c8:	d003      	beq.n	80096d2 <USBH_MSC_RdWrProcess+0x8e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80096ca:	2401      	movs	r4, #1
 80096cc:	e7e6      	b.n	800969c <USBH_MSC_RdWrProcess+0x58>
      if (scsi_status == USBH_FAIL)
 80096ce:	2804      	cmp	r0, #4
 80096d0:	d1fb      	bne.n	80096ca <USBH_MSC_RdWrProcess+0x86>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096d2:	2308      	movs	r3, #8
 80096d4:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
          error = USBH_FAIL;
 80096d8:	2402      	movs	r4, #2
 80096da:	e7df      	b.n	800969c <USBH_MSC_RdWrProcess+0x58>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80096dc:	2305      	movs	r3, #5
 80096de:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80096e2:	2401      	movs	r4, #1
 80096e4:	e7da      	b.n	800969c <USBH_MSC_RdWrProcess+0x58>
 80096e6:	bf00      	nop

080096e8 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80096e8:	7803      	ldrb	r3, [r0, #0]
 80096ea:	2b0b      	cmp	r3, #11
 80096ec:	d001      	beq.n	80096f2 <USBH_MSC_UnitIsReady+0xa>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 80096ee:	2000      	movs	r0, #0
  }

  return res;
}
 80096f0:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096f2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	2234      	movs	r2, #52	; 0x34
 80096fa:	fb02 3101 	mla	r1, r2, r1, r3
 80096fe:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 1U;
 8009702:	fab0 f080 	clz	r0, r0
 8009706:	0940      	lsrs	r0, r0, #5
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop

0800970c <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 800970c:	7803      	ldrb	r3, [r0, #0]
 800970e:	2b0b      	cmp	r3, #11
 8009710:	d001      	beq.n	8009716 <USBH_MSC_GetLUNInfo+0xa>
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 8009712:	2002      	movs	r0, #2
  }
}
 8009714:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009716:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 800971a:	b470      	push	{r4, r5, r6}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	2034      	movs	r0, #52	; 0x34
 8009720:	2490      	movs	r4, #144	; 0x90
 8009722:	fb10 4101 	smlabb	r1, r0, r1, r4
 8009726:	4419      	add	r1, r3
 8009728:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800972c:	680d      	ldr	r5, [r1, #0]
 800972e:	684c      	ldr	r4, [r1, #4]
 8009730:	6888      	ldr	r0, [r1, #8]
 8009732:	68ce      	ldr	r6, [r1, #12]
 8009734:	60d6      	str	r6, [r2, #12]
 8009736:	3110      	adds	r1, #16
 8009738:	4299      	cmp	r1, r3
 800973a:	6015      	str	r5, [r2, #0]
 800973c:	6054      	str	r4, [r2, #4]
 800973e:	6090      	str	r0, [r2, #8]
 8009740:	f102 0210 	add.w	r2, r2, #16
 8009744:	d1f2      	bne.n	800972c <USBH_MSC_GetLUNInfo+0x20>
 8009746:	680b      	ldr	r3, [r1, #0]
 8009748:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 800974a:	2000      	movs	r0, #0
}
 800974c:	bc70      	pop	{r4, r5, r6}
 800974e:	4770      	bx	lr

08009750 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8009754:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 8009758:	b082      	sub	sp, #8
  if ((phost->device.is_connected == 0U) ||
 800975a:	b17d      	cbz	r5, 800977c <USBH_MSC_Read+0x2c>
      (phost->gState != HOST_CLASS) ||
 800975c:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 800975e:	2d0b      	cmp	r5, #11
 8009760:	4604      	mov	r4, r0
 8009762:	d10b      	bne.n	800977c <USBH_MSC_Read+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009764:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 8009768:	69ee      	ldr	r6, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800976a:	2534      	movs	r5, #52	; 0x34
 800976c:	fb05 6501 	mla	r5, r5, r1, r6
 8009770:	460f      	mov	r7, r1
      (phost->gState != HOST_CLASS) ||
 8009772:	f895 c090 	ldrb.w	ip, [r5, #144]	; 0x90
 8009776:	f1bc 0f01 	cmp.w	ip, #1
 800977a:	d003      	beq.n	8009784 <USBH_MSC_Read+0x34>
  {
    return  USBH_FAIL;
 800977c:	2002      	movs	r0, #2
    }
  }
  MSC_Handle->state = MSC_IDLE;

  return USBH_OK;
}
 800977e:	b002      	add	sp, #8
 8009780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MSC_Handle->state = MSC_READ;
 8009784:	f04f 0c06 	mov.w	ip, #6
 8009788:	f886 c00c 	strb.w	ip, [r6, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800978c:	f885 c090 	strb.w	ip, [r5, #144]	; 0x90
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009790:	9d08      	ldr	r5, [sp, #32]
  MSC_Handle->rw_lun = lun;
 8009792:	f8a6 10fa 	strh.w	r1, [r6, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009796:	9500      	str	r5, [sp, #0]
 8009798:	f000 fb18 	bl	8009dcc <USBH_MSC_SCSI_Read>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800979c:	9b08      	ldr	r3, [sp, #32]
  timeout = phost->Timer;
 800979e:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097a2:	f242 7510 	movw	r5, #10000	; 0x2710
 80097a6:	fb05 f503 	mul.w	r5, r5, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097aa:	e008      	b.n	80097be <USBH_MSC_Read+0x6e>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097ac:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80097b0:	eba3 0308 	sub.w	r3, r3, r8
 80097b4:	42ab      	cmp	r3, r5
 80097b6:	d80c      	bhi.n	80097d2 <USBH_MSC_Read+0x82>
 80097b8:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80097bc:	b14b      	cbz	r3, 80097d2 <USBH_MSC_Read+0x82>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097be:	4639      	mov	r1, r7
 80097c0:	4620      	mov	r0, r4
 80097c2:	f7ff ff3f 	bl	8009644 <USBH_MSC_RdWrProcess>
 80097c6:	2801      	cmp	r0, #1
 80097c8:	d0f0      	beq.n	80097ac <USBH_MSC_Read+0x5c>
  MSC_Handle->state = MSC_IDLE;
 80097ca:	2301      	movs	r3, #1
 80097cc:	7333      	strb	r3, [r6, #12]
  return USBH_OK;
 80097ce:	2000      	movs	r0, #0
 80097d0:	e7d5      	b.n	800977e <USBH_MSC_Read+0x2e>
      MSC_Handle->state = MSC_IDLE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	7333      	strb	r3, [r6, #12]
      return USBH_FAIL;
 80097d6:	2002      	movs	r0, #2
 80097d8:	e7d1      	b.n	800977e <USBH_MSC_Read+0x2e>
 80097da:	bf00      	nop

080097dc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80097dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80097e0:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 80097e4:	b082      	sub	sp, #8
  if ((phost->device.is_connected == 0U) ||
 80097e6:	b17d      	cbz	r5, 8009808 <USBH_MSC_Write+0x2c>
      (phost->gState != HOST_CLASS) ||
 80097e8:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80097ea:	2d0b      	cmp	r5, #11
 80097ec:	4604      	mov	r4, r0
 80097ee:	d10b      	bne.n	8009808 <USBH_MSC_Write+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097f0:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 80097f4:	69ee      	ldr	r6, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80097f6:	2534      	movs	r5, #52	; 0x34
 80097f8:	fb05 6501 	mla	r5, r5, r1, r6
 80097fc:	460f      	mov	r7, r1
      (phost->gState != HOST_CLASS) ||
 80097fe:	f895 c090 	ldrb.w	ip, [r5, #144]	; 0x90
 8009802:	f1bc 0f01 	cmp.w	ip, #1
 8009806:	d003      	beq.n	8009810 <USBH_MSC_Write+0x34>
  {
    return  USBH_FAIL;
 8009808:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
  return USBH_OK;
}
 800980a:	b002      	add	sp, #8
 800980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MSC_Handle->state = MSC_WRITE;
 8009810:	f04f 0c07 	mov.w	ip, #7
 8009814:	f886 c00c 	strb.w	ip, [r6, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009818:	f885 c090 	strb.w	ip, [r5, #144]	; 0x90
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800981c:	9d08      	ldr	r5, [sp, #32]
  MSC_Handle->rw_lun = lun;
 800981e:	f8a6 10fa 	strh.w	r1, [r6, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009822:	9500      	str	r5, [sp, #0]
 8009824:	f000 fa8c 	bl	8009d40 <USBH_MSC_SCSI_Write>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009828:	9b08      	ldr	r3, [sp, #32]
  timeout = phost->Timer;
 800982a:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800982e:	f242 7510 	movw	r5, #10000	; 0x2710
 8009832:	fb05 f503 	mul.w	r5, r5, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009836:	e008      	b.n	800984a <USBH_MSC_Write+0x6e>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009838:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800983c:	eba3 0308 	sub.w	r3, r3, r8
 8009840:	42ab      	cmp	r3, r5
 8009842:	d80c      	bhi.n	800985e <USBH_MSC_Write+0x82>
 8009844:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8009848:	b14b      	cbz	r3, 800985e <USBH_MSC_Write+0x82>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800984a:	4639      	mov	r1, r7
 800984c:	4620      	mov	r0, r4
 800984e:	f7ff fef9 	bl	8009644 <USBH_MSC_RdWrProcess>
 8009852:	2801      	cmp	r0, #1
 8009854:	d0f0      	beq.n	8009838 <USBH_MSC_Write+0x5c>
  MSC_Handle->state = MSC_IDLE;
 8009856:	2301      	movs	r3, #1
 8009858:	7333      	strb	r3, [r6, #12]
  return USBH_OK;
 800985a:	2000      	movs	r0, #0
 800985c:	e7d5      	b.n	800980a <USBH_MSC_Write+0x2e>
      MSC_Handle->state = MSC_IDLE;
 800985e:	2301      	movs	r3, #1
 8009860:	7333      	strb	r3, [r6, #12]
      return USBH_FAIL;
 8009862:	2002      	movs	r0, #2
 8009864:	e7d1      	b.n	800980a <USBH_MSC_Write+0x2e>
 8009866:	bf00      	nop

08009868 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009868:	b410      	push	{r4}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 800986a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800986e:	f64f 64a1 	movw	r4, #65185	; 0xfea1
 8009872:	e9c0 4204 	strd	r4, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009876:	2201      	movs	r2, #1
}
 8009878:	f85d 4b04 	ldr.w	r4, [sp], #4
  return USBH_CtlReq(phost, Maxlun, 1U);
 800987c:	f000 be58 	b.w	800a530 <USBH_CtlReq>

08009880 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009880:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009884:	4a05      	ldr	r2, [pc, #20]	; (800989c <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009886:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009888:	4905      	ldr	r1, [pc, #20]	; (80098a0 <USBH_MSC_BOT_Init+0x20>)
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800988a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800988c:	2201      	movs	r2, #1
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800988e:	6599      	str	r1, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009894:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8009898:	2000      	movs	r0, #0
 800989a:	4770      	bx	lr
 800989c:	43425355 	.word	0x43425355
 80098a0:	20304050 	.word	0x20304050

080098a4 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098a4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80098a8:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098aa:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 80098ac:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80098b0:	3b01      	subs	r3, #1
{
 80098b2:	b082      	sub	sp, #8
 80098b4:	4605      	mov	r5, r0
  switch (MSC_Handle->hbot.state)
 80098b6:	2b0a      	cmp	r3, #10
 80098b8:	d810      	bhi.n	80098dc <USBH_MSC_BOT_Process+0x38>
 80098ba:	e8df f003 	tbb	[pc, r3]
 80098be:	3022      	.short	0x3022
 80098c0:	877b0647 	.word	0x877b0647
 80098c4:	72675d52 	.word	0x72675d52
 80098c8:	13          	.byte	0x13
 80098c9:	00          	.byte	0x00

      break;

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80098ca:	7921      	ldrb	r1, [r4, #4]
 80098cc:	f005 fc14 	bl	800f0f8 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 80098d0:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80098d2:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 80098d4:	f000 80b9 	beq.w	8009a4a <USBH_MSC_BOT_Process+0x1a6>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      else if (URB_Status == USBH_URB_STALL)
 80098d8:	2805      	cmp	r0, #5
 80098da:	d055      	beq.n	8009988 <USBH_MSC_BOT_Process+0xe4>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80098dc:	2601      	movs	r6, #1

    default:
      break;
  }
  return status;
}
 80098de:	4630      	mov	r0, r6
 80098e0:	b002      	add	sp, #8
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.wValue.w = 0U;
 80098e4:	2200      	movs	r2, #0
 80098e6:	f64f 7321 	movw	r3, #65313	; 0xff21
 80098ea:	e9c0 3204 	strd	r3, r2, [r0, #16]
  return USBH_CtlReq(phost, 0U, 0U);
 80098ee:	4611      	mov	r1, r2
 80098f0:	f000 fe1e 	bl	800a530 <USBH_CtlReq>
      if (status == USBH_OK)
 80098f4:	4606      	mov	r6, r0
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d1f1      	bne.n	80098de <USBH_MSC_BOT_Process+0x3a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009900:	e7ed      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009902:	2202      	movs	r2, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009904:	2601      	movs	r6, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009906:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800990a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800990e:	7963      	ldrb	r3, [r4, #5]
 8009910:	9600      	str	r6, [sp, #0]
 8009912:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009916:	221f      	movs	r2, #31
 8009918:	f001 f8e0 	bl	800aadc <USBH_BulkSendData>
      break;
 800991c:	e7df      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800991e:	7961      	ldrb	r1, [r4, #5]
 8009920:	f005 fbea 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8009924:	2801      	cmp	r0, #1
 8009926:	d076      	beq.n	8009a16 <USBH_MSC_BOT_Process+0x172>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009928:	2802      	cmp	r0, #2
 800992a:	d068      	beq.n	80099fe <USBH_MSC_BOT_Process+0x15a>
      else if (URB_Status == USBH_URB_STALL)
 800992c:	2805      	cmp	r0, #5
 800992e:	d1d5      	bne.n	80098dc <USBH_MSC_BOT_Process+0x38>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009930:	220a      	movs	r2, #10
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009932:	2302      	movs	r3, #2
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009934:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009938:	4619      	mov	r1, r3
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800993a:	f8c5 33e0 	str.w	r3, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800993e:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8009942:	2200      	movs	r2, #0
 8009944:	f003 fcba 	bl	800d2bc <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009948:	2601      	movs	r6, #1
 800994a:	e7c8      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800994c:	7923      	ldrb	r3, [r4, #4]
 800994e:	8962      	ldrh	r2, [r4, #10]
 8009950:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009954:	f001 f8d8 	bl	800ab08 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009958:	2304      	movs	r3, #4
 800995a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800995e:	2601      	movs	r6, #1
      break;
 8009960:	e7bd      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009962:	7923      	ldrb	r3, [r4, #4]
 8009964:	220d      	movs	r2, #13
 8009966:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800996a:	f001 f8cd 	bl	800ab08 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800996e:	2308      	movs	r3, #8
 8009970:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009974:	2601      	movs	r6, #1
      break;
 8009976:	e7b2      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009978:	7921      	ldrb	r1, [r4, #4]
 800997a:	f005 fbbd 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800997e:	2801      	cmp	r0, #1
 8009980:	f000 809d 	beq.w	8009abe <USBH_MSC_BOT_Process+0x21a>
      else if (URB_Status == USBH_URB_STALL)
 8009984:	2805      	cmp	r0, #5
 8009986:	d1a9      	bne.n	80098dc <USBH_MSC_BOT_Process+0x38>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009988:	2209      	movs	r2, #9
 800998a:	e7d2      	b.n	8009932 <USBH_MSC_BOT_Process+0x8e>

  switch (dir)
  {
    case BOT_DIR_IN :
      /* send ClrFeture on Bulk IN endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800998c:	79e1      	ldrb	r1, [r4, #7]
 800998e:	f001 f85f 	bl	800aa50 <USBH_ClrFeature>
      if (error == USBH_OK)
 8009992:	b378      	cbz	r0, 80099f4 <USBH_MSC_BOT_Process+0x150>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009994:	2804      	cmp	r0, #4
 8009996:	d1a1      	bne.n	80098dc <USBH_MSC_BOT_Process+0x38>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009998:	230b      	movs	r3, #11
 800999a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800999e:	2601      	movs	r6, #1
 80099a0:	e79d      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>

      break;

    case BOT_DIR_OUT :
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80099a2:	79a1      	ldrb	r1, [r4, #6]
 80099a4:	f001 f854 	bl	800aa50 <USBH_ClrFeature>
      if (error == USBH_OK)
 80099a8:	4606      	mov	r6, r0
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d072      	beq.n	8009a94 <USBH_MSC_BOT_Process+0x1f0>
        if (error == USBH_UNRECOVERED_ERROR)
 80099ae:	2804      	cmp	r0, #4
 80099b0:	d194      	bne.n	80098dc <USBH_MSC_BOT_Process+0x38>
 80099b2:	e7f1      	b.n	8009998 <USBH_MSC_BOT_Process+0xf4>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099b4:	2601      	movs	r6, #1
 80099b6:	7963      	ldrb	r3, [r4, #5]
 80099b8:	8922      	ldrh	r2, [r4, #8]
 80099ba:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80099be:	9600      	str	r6, [sp, #0]
 80099c0:	f001 f88c 	bl	800aadc <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80099c4:	2306      	movs	r3, #6
 80099c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      break;
 80099ca:	e788      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80099cc:	7961      	ldrb	r1, [r4, #5]
 80099ce:	f005 fb93 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80099d2:	2801      	cmp	r0, #1
 80099d4:	d04b      	beq.n	8009a6e <USBH_MSC_BOT_Process+0x1ca>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099d6:	2802      	cmp	r0, #2
 80099d8:	d1a8      	bne.n	800992c <USBH_MSC_BOT_Process+0x88>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80099da:	2305      	movs	r3, #5
 80099dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099e0:	4601      	mov	r1, r0
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80099e2:	f8c5 03e0 	str.w	r0, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80099ec:	f003 fc66 	bl	800d2bc <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099f0:	2601      	movs	r6, #1
 80099f2:	e774      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80099f4:	2307      	movs	r3, #7
 80099f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099fa:	2601      	movs	r6, #1
 80099fc:	e76f      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099fe:	2601      	movs	r6, #1
 8009a00:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a04:	4601      	mov	r1, r0
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009a06:	f8c5 03e0 	str.w	r0, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8009a10:	f003 fc54 	bl	800d2bc <osMessagePut>
 8009a14:	e763      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009a16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009a18:	b19b      	cbz	r3, 8009a42 <USBH_MSC_BOT_Process+0x19e>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009a1a:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8009a1e:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009a20:	bfb4      	ite	lt
 8009a22:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009a24:	2305      	movge	r3, #5
 8009a26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009a2a:	2102      	movs	r1, #2
 8009a2c:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a30:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8009a34:	2200      	movs	r2, #0
 8009a36:	f003 fc41 	bl	800d2bc <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009a3a:	2601      	movs	r6, #1
 8009a3c:	e74f      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a42:	2307      	movs	r3, #7
 8009a44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009a48:	e7ef      	b.n	8009a2a <USBH_MSC_BOT_Process+0x186>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009a4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009a4c:	8962      	ldrh	r2, [r4, #10]
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d954      	bls.n	8009afc <USBH_MSC_BOT_Process+0x258>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009a56:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a58:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009a5a:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a5c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d04d      	beq.n	8009b00 <USBH_MSC_BOT_Process+0x25c>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009a64:	7923      	ldrb	r3, [r4, #4]
 8009a66:	4628      	mov	r0, r5
 8009a68:	f001 f84e 	bl	800ab08 <USBH_BulkReceiveData>
 8009a6c:	e737      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009a70:	8922      	ldrh	r2, [r4, #8]
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d9e3      	bls.n	8009a3e <USBH_MSC_BOT_Process+0x19a>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a76:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a7a:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a7c:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a7e:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a80:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d0dc      	beq.n	8009a42 <USBH_MSC_BOT_Process+0x19e>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a88:	7963      	ldrb	r3, [r4, #5]
 8009a8a:	9000      	str	r0, [sp, #0]
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f001 f825 	bl	800aadc <USBH_BulkSendData>
 8009a92:	e7ca      	b.n	8009a2a <USBH_MSC_BOT_Process+0x186>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009a94:	7961      	ldrb	r1, [r4, #5]
 8009a96:	4628      	mov	r0, r5
 8009a98:	f005 fb56 	bl	800f148 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009a9c:	f1c0 0201 	rsb	r2, r0, #1
 8009aa0:	b2d2      	uxtb	r2, r2
 8009aa2:	7961      	ldrb	r1, [r4, #5]
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f005 fb3d 	bl	800f124 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009aaa:	4632      	mov	r2, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	7921      	ldrb	r1, [r4, #4]
 8009ab0:	f005 fb38 	bl	800f124 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009ab4:	2309      	movs	r3, #9
 8009ab6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009aba:	2601      	movs	r6, #1
 8009abc:	e70f      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009abe:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ac2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ac6:	69de      	ldr	r6, [r3, #28]
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009ac8:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009acc:	7931      	ldrb	r1, [r6, #4]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f005 face 	bl	800f070 <USBH_LL_GetLastXferSize>
 8009ad4:	280d      	cmp	r0, #13
 8009ad6:	d107      	bne.n	8009ae8 <USBH_MSC_BOT_Process+0x244>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009ad8:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <USBH_MSC_BOT_Process+0x270>)
 8009ada:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d103      	bne.n	8009ae8 <USBH_MSC_BOT_Process+0x244>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009ae0:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 8009ae2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d00d      	beq.n	8009b04 <USBH_MSC_BOT_Process+0x260>
          status = USBH_FAIL;
 8009ae8:	2602      	movs	r6, #2
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009aea:	2102      	movs	r1, #2
 8009aec:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009af0:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8009af4:	2200      	movs	r2, #0
 8009af6:	f003 fbe1 	bl	800d2bc <osMessagePut>
 8009afa:	e6f0      	b.n	80098de <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b00:	2207      	movs	r2, #7
 8009b02:	e716      	b.n	8009932 <USBH_MSC_BOT_Process+0x8e>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009b04:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
          status = USBH_OK;
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bf14      	ite	ne
 8009b0c:	2602      	movne	r6, #2
 8009b0e:	2600      	moveq	r6, #0
 8009b10:	e7eb      	b.n	8009aea <USBH_MSC_BOT_Process+0x246>
 8009b12:	bf00      	nop
 8009b14:	53425355 	.word	0x53425355

08009b18 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b18:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009b1c:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009b1e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8009b22:	2a01      	cmp	r2, #1
 8009b24:	d005      	beq.n	8009b32 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8009b26:	2a02      	cmp	r2, #2
 8009b28:	d101      	bne.n	8009b2e <USBH_MSC_SCSI_TestUnitReady+0x16>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b2a:	f7ff bebb 	b.w	80098a4 <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009b2e:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8009b30:	4770      	bx	lr
{
 8009b32:	b430      	push	{r4, r5}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009b34:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b36:	250a      	movs	r5, #10
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b38:	2402      	movs	r4, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b3a:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
 8009b3e:	f8c3 1067 	str.w	r1, [r3, #103]	; 0x67
 8009b42:	f8c3 106b 	str.w	r1, [r3, #107]	; 0x6b
 8009b46:	f8c3 106f 	str.w	r1, [r3, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b4a:	f883 5062 	strb.w	r5, [r3, #98]	; 0x62
      error = USBH_BUSY;
 8009b4e:	4610      	mov	r0, r2
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b50:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009b54:	65d9      	str	r1, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009b56:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009b5a:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8009b62:	bc30      	pop	{r4, r5}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop

08009b68 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b68:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009b6c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b6e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009b70:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d010      	beq.n	8009b9a <USBH_MSC_SCSI_ReadCapacity+0x32>
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d10c      	bne.n	8009b96 <USBH_MSC_SCSI_ReadCapacity+0x2e>
 8009b7c:	4615      	mov	r5, r2
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 8009b7e:	f7ff fe91 	bl	80098a4 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 8009b82:	b938      	cbnz	r0, 8009b94 <USBH_MSC_SCSI_ReadCapacity+0x2c>
      {
        /*assign the capacity*/
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b84:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009b88:	6813      	ldr	r3, [r2, #0]
 8009b8a:	ba1b      	rev	r3, r3
 8009b8c:	602b      	str	r3, [r5, #0]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

        /*assign the page length*/
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009b8e:	88d3      	ldrh	r3, [r2, #6]
 8009b90:	ba5b      	rev16	r3, r3
 8009b92:	80ab      	strh	r3, [r5, #4]
    default:
      break;
  }

  return error;
}
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009b96:	2001      	movs	r0, #1
}
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009b9a:	2208      	movs	r2, #8
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b9c:	2580      	movs	r5, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009b9e:	65e2      	str	r2, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ba6:	200a      	movs	r0, #10
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ba8:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009bac:	2625      	movs	r6, #37	; 0x25
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bae:	2502      	movs	r5, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bb0:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 8009bb4:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 8009bb8:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009bbc:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bc0:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bc4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      error = USBH_BUSY;
 8009bc8:	4618      	mov	r0, r3
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009bca:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bce:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009bd2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}

08009bd8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bda:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009bde:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009be0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d03e      	beq.n	8009c66 <USBH_MSC_SCSI_Inquiry+0x8e>
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d002      	beq.n	8009bf2 <USBH_MSC_SCSI_Inquiry+0x1a>
  USBH_StatusTypeDef error = USBH_FAIL;
 8009bec:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8009bee:	4628      	mov	r0, r5
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf2:	4616      	mov	r6, r2
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bf4:	f7ff fe56 	bl	80098a4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d1f7      	bne.n	8009bee <USBH_MSC_SCSI_Inquiry+0x16>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009bfe:	4601      	mov	r1, r0
 8009c00:	2222      	movs	r2, #34	; 0x22
 8009c02:	4630      	mov	r0, r6
 8009c04:	f005 fb29 	bl	800f25a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009c08:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	f003 031f 	and.w	r3, r3, #31
 8009c12:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009c14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009c1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009c26:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8009c28:	bfba      	itte	lt
 8009c2a:	2301      	movlt	r3, #1
 8009c2c:	70b3      	strblt	r3, [r6, #2]
          inquiry->RemovableMedia = 0U;
 8009c2e:	70b5      	strbge	r5, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009c30:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c34:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f8c6 3007 	str.w	r3, [r6, #7]
 8009c3e:	f8c6 2003 	str.w	r2, [r6, #3]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009c42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c46:	f853 7f10 	ldr.w	r7, [r3, #16]!
 8009c4a:	6858      	ldr	r0, [r3, #4]
 8009c4c:	6899      	ldr	r1, [r3, #8]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	61b3      	str	r3, [r6, #24]
 8009c52:	6130      	str	r0, [r6, #16]
 8009c54:	60f7      	str	r7, [r6, #12]
 8009c56:	6171      	str	r1, [r6, #20]
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009c58:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	f8c6 301d 	str.w	r3, [r6, #29]
}
 8009c62:	4628      	mov	r0, r5
 8009c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009c66:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009c68:	014d      	lsls	r5, r1, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009c6a:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c6c:	2780      	movs	r7, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c6e:	260a      	movs	r6, #10
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009c70:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c74:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      error = USBH_BUSY;
 8009c78:	461d      	mov	r5, r3
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009c7a:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009c7c:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009c80:	2012      	movs	r0, #18
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c82:	2102      	movs	r1, #2
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c84:	f104 0310 	add.w	r3, r4, #16
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009c88:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009c8c:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c90:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c94:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009c98:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009c9c:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ca0:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ca4:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ca8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8009cac:	4628      	mov	r0, r5
 8009cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cb0 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cb2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009cb6:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009cb8:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d016      	beq.n	8009cee <USBH_MSC_SCSI_RequestSense+0x3e>
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d112      	bne.n	8009cea <USBH_MSC_SCSI_RequestSense+0x3a>
 8009cc4:	4615      	mov	r5, r2
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 8009cc6:	f7ff fded 	bl	80098a4 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 8009cca:	b968      	cbnz	r0, 8009ce8 <USBH_MSC_SCSI_RequestSense+0x38>
      {
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009ccc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009cd0:	789b      	ldrb	r3, [r3, #2]
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009cd8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009cdc:	7b1b      	ldrb	r3, [r3, #12]
 8009cde:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009ce0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009ce4:	7b5b      	ldrb	r3, [r3, #13]
 8009ce6:	70ab      	strb	r3, [r5, #2]
    default:
      break;
  }

  return error;
}
 8009ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009cea:	2002      	movs	r0, #2
}
 8009cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009cee:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009cf0:	014d      	lsls	r5, r1, #5
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cf2:	260a      	movs	r6, #10
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009cf4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cf8:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009cfa:	210e      	movs	r1, #14
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cfc:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009d00:	2703      	movs	r7, #3
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d02:	2602      	movs	r6, #2
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009d04:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d08:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d0c:	f104 0510 	add.w	r5, r4, #16
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d10:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 8009d14:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009d18:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009d1a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009d1e:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009d22:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009d26:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d2a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      error = USBH_BUSY;
 8009d2e:	4618      	mov	r0, r3
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009d30:	f884 7063 	strb.w	r7, [r4, #99]	; 0x63
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d34:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d38:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8009d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3e:	bf00      	nop

08009d40 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d42:	f8d0 437c 	ldr.w	r4, [r0, #892]	; 0x37c
{
 8009d46:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d48:	69e4      	ldr	r4, [r4, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009d4a:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8009d4e:	2d01      	cmp	r5, #1
 8009d50:	d007      	beq.n	8009d62 <USBH_MSC_SCSI_Write+0x22>
 8009d52:	2d02      	cmp	r5, #2
 8009d54:	d103      	bne.n	8009d5e <USBH_MSC_SCSI_Write+0x1e>
    default:
      break;
  }

  return error;
}
 8009d56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d5a:	f7ff bda3 	b.w	80098a4 <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d5e:	2002      	movs	r0, #2
}
 8009d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d62:	f8b4 7098 	ldrh.w	r7, [r4, #152]	; 0x98
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d66:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d6a:	fb06 f707 	mul.w	r7, r6, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d6e:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d70:	65e7      	str	r7, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d72:	270a      	movs	r7, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d74:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8009d78:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009d7c:	f3c6 2e07 	ubfx	lr, r6, #8, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d80:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d84:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d88:	f884 7062 	strb.w	r7, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d8c:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009d90:	f3c2 6707 	ubfx	r7, r2, #24, #8
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009d94:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009d98:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009d9c:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009da0:	2102      	movs	r1, #2
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009da2:	f3c2 4607 	ubfx	r6, r2, #16, #8
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009da6:	f3c2 2207 	ubfx	r2, r2, #8, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009daa:	f884 e06a 	strb.w	lr, [r4, #106]	; 0x6a
      MSC_Handle->hbot.pbuf = pbuf;
 8009dae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 8009db2:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009db4:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009db8:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009dbc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009dc0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009dc4:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
}
 8009dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dca:	bf00      	nop

08009dcc <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dce:	f8d0 437c 	ldr.w	r4, [r0, #892]	; 0x37c
{
 8009dd2:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd4:	69e4      	ldr	r4, [r4, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009dd6:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8009dda:	2d01      	cmp	r5, #1
 8009ddc:	d007      	beq.n	8009dee <USBH_MSC_SCSI_Read+0x22>
 8009dde:	2d02      	cmp	r5, #2
 8009de0:	d103      	bne.n	8009dea <USBH_MSC_SCSI_Read+0x1e>
    default:
      break;
  }

  return error;
}
 8009de2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8009de6:	f7ff bd5d 	b.w	80098a4 <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009dea:	2002      	movs	r0, #2
}
 8009dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009dee:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009df2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009df6:	fb06 f101 	mul.w	r1, r6, r1
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009dfa:	f04f 0c80 	mov.w	ip, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009dfe:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e00:	270a      	movs	r7, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e02:	2100      	movs	r1, #0
 8009e04:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8009e08:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009e0c:	f3c6 2e07 	ubfx	lr, r6, #8, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e10:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e14:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e18:	f884 7062 	strb.w	r7, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e1c:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009e20:	f3c2 6707 	ubfx	r7, r2, #24, #8
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009e24:	f04f 0c28 	mov.w	ip, #40	; 0x28
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009e28:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009e2c:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e30:	2102      	movs	r1, #2
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009e32:	f3c2 4607 	ubfx	r6, r2, #16, #8
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009e36:	f3c2 2207 	ubfx	r2, r2, #8, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009e3a:	f884 e06a 	strb.w	lr, [r4, #106]	; 0x6a
      MSC_Handle->hbot.pbuf = pbuf;
 8009e3e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 8009e42:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009e44:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009e48:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009e4c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009e50:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e54:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
}
 8009e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e5a:	bf00      	nop

08009e5c <USBH_Init>:
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d054      	beq.n	8009f0a <USBH_Init+0xae>
{
 8009e60:	b570      	push	{r4, r5, r6, lr}

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e62:	2300      	movs	r3, #0
  phost->id = id;
 8009e64:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8009e68:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e6c:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8009e70:	461a      	mov	r2, r3
{
 8009e72:	b08c      	sub	sp, #48	; 0x30
 8009e74:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8009e78:	f500 746f 	add.w	r4, r0, #956	; 0x3bc
    phost->Pipes[i] = 0U;
 8009e7c:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	d1fb      	bne.n	8009e7c <USBH_Init+0x20>
 8009e84:	f200 131b 	addw	r3, r0, #283	; 0x11b
 8009e88:	f200 341b 	addw	r4, r0, #795	; 0x31b
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e92:	429c      	cmp	r4, r3
 8009e94:	d1fb      	bne.n	8009e8e <USBH_Init+0x32>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8009e96:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009e98:	2540      	movs	r5, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e9a:	f44f 7480 	mov.w	r4, #256	; 0x100
  phost->gState = HOST_IDLE;
 8009e9e:	7002      	strb	r2, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8009ea0:	7042      	strb	r2, [r0, #1]
  phost->Timer = 0U;
 8009ea2:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  phost->Control.errorcount = 0U;
 8009ea6:	7642      	strb	r2, [r0, #25]
  phost->device.is_connected = 0U;
 8009ea8:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009eac:	f880 2323 	strb.w	r2, [r0, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 8009eb0:	f880 2321 	strb.w	r2, [r0, #801]	; 0x321
  phost->RequestState = CMD_SEND;
 8009eb4:	7083      	strb	r3, [r0, #2]
  phost->device.is_ReEnumerated = 0U;
 8009eb6:	f880 2322 	strb.w	r2, [r0, #802]	; 0x322
  phost->Control.state = CTRL_SETUP;
 8009eba:	7603      	strb	r3, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009ebc:	7185      	strb	r5, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ebe:	f8c0 431c 	str.w	r4, [r0, #796]	; 0x31c
  if (pUsrFunc != NULL)
 8009ec2:	b109      	cbz	r1, 8009ec8 <USBH_Init+0x6c>
    phost->pUser = pUsrFunc;
 8009ec4:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009ec8:	4d11      	ldr	r5, [pc, #68]	; (8009f10 <USBH_Init+0xb4>)
 8009eca:	4604      	mov	r4, r0
 8009ecc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ed0:	ae01      	add	r6, sp, #4
 8009ed2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	2100      	movs	r1, #0
 8009eda:	f003 f9d9 	bl	800d290 <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009ede:	3510      	adds	r5, #16
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009ee0:	f8c4 03d8 	str.w	r0, [r4, #984]	; 0x3d8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee6:	ae05      	add	r6, sp, #20
 8009ee8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009eee:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	a805      	add	r0, sp, #20
 8009ef6:	f003 f915 	bl	800d124 <osThreadCreate>
 8009efa:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
  USBH_LL_Init(phost);
 8009efe:	4620      	mov	r0, r4
 8009f00:	f005 f854 	bl	800efac <USBH_LL_Init>
  return USBH_OK;
 8009f04:	2000      	movs	r0, #0
}
 8009f06:	b00c      	add	sp, #48	; 0x30
 8009f08:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8009f0a:	2002      	movs	r0, #2
}
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	0800fae0 	.word	0x0800fae0

08009f14 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8009f14:	b149      	cbz	r1, 8009f2a <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009f16:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8009f1a:	b933      	cbnz	r3, 8009f2a <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
 8009f22:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	4770      	bx	lr
    status = USBH_FAIL;
 8009f2a:	2302      	movs	r3, #2
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	4770      	bx	lr

08009f30 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009f30:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8009f34:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8009f36:	bf86      	itte	hi
 8009f38:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8009f3c:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009f3e:	2002      	movls	r0, #2
  }

  return status;
}
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop

08009f44 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009f44:	b470      	push	{r4, r5, r6}
 8009f46:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f48:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8009f4c:	428e      	cmp	r6, r1
 8009f4e:	b2e5      	uxtb	r5, r4
 8009f50:	d007      	beq.n	8009f62 <USBH_FindInterface+0x1e>
 8009f52:	29ff      	cmp	r1, #255	; 0xff
 8009f54:	d005      	beq.n	8009f62 <USBH_FindInterface+0x1e>
 8009f56:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f58:	b194      	cbz	r4, 8009f80 <USBH_FindInterface+0x3c>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8009f5a:	25ff      	movs	r5, #255	; 0xff
}
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	bc70      	pop	{r4, r5, r6}
 8009f60:	4770      	bx	lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f62:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 8009f66:	4296      	cmp	r6, r2
 8009f68:	d001      	beq.n	8009f6e <USBH_FindInterface+0x2a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f6a:	2aff      	cmp	r2, #255	; 0xff
 8009f6c:	d1f3      	bne.n	8009f56 <USBH_FindInterface+0x12>
 8009f6e:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 8009f72:	429e      	cmp	r6, r3
 8009f74:	d0f2      	beq.n	8009f5c <USBH_FindInterface+0x18>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f76:	2bff      	cmp	r3, #255	; 0xff
 8009f78:	d0f0      	beq.n	8009f5c <USBH_FindInterface+0x18>
 8009f7a:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f7c:	2c00      	cmp	r4, #0
 8009f7e:	d1ec      	bne.n	8009f5a <USBH_FindInterface+0x16>
 8009f80:	2401      	movs	r4, #1
 8009f82:	e7e1      	b.n	8009f48 <USBH_FindInterface+0x4>

08009f84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f84:	b510      	push	{r4, lr}
 8009f86:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009f88:	f005 f83a 	bl	800f000 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	2101      	movs	r1, #1
 8009f90:	f005 f8b6 	bl	800f100 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8009f94:	2000      	movs	r0, #0
 8009f96:	bd10      	pop	{r4, pc}

08009f98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9a:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009fa2:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8009fa6:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009fa8:	bf04      	itt	eq
 8009faa:	2303      	moveq	r3, #3
 8009fac:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8009fae:	7803      	ldrb	r3, [r0, #0]
{
 8009fb0:	4604      	mov	r4, r0
  switch (phost->gState)
 8009fb2:	2b0b      	cmp	r3, #11
 8009fb4:	d849      	bhi.n	800a04a <USBH_Process+0xb2>
 8009fb6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009fba:	0052      	.short	0x0052
 8009fbc:	000c006b 	.word	0x000c006b
 8009fc0:	00480082 	.word	0x00480082
 8009fc4:	00ca00bc 	.word	0x00ca00bc
 8009fc8:	00f800e6 	.word	0x00f800e6
 8009fcc:	01120100 	.word	0x01120100
 8009fd0:	004b      	.short	0x004b
#endif
      break;

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009fd2:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8009fd6:	b10b      	cbz	r3, 8009fdc <USBH_Process+0x44>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009fd8:	2104      	movs	r1, #4
 8009fda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009fdc:	2064      	movs	r0, #100	; 0x64
 8009fde:	f005 f8c3 	bl	800f168 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f005 f828 	bl	800f038 <USBH_LL_GetSpeed>

      phost->gState = HOST_ENUMERATION;
 8009fe8:	2305      	movs	r3, #5
 8009fea:	7023      	strb	r3, [r4, #0]
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009fec:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 fdae 	bl	800ab54 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ff8:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ffa:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fda9 	bl	800ab54 <USBH_AllocPipe>
 800a002:	4601      	mov	r1, r0

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a004:	79a0      	ldrb	r0, [r4, #6]
 800a006:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800a00a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a00e:	7121      	strb	r1, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a010:	2500      	movs	r5, #0
 800a012:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800a016:	9200      	str	r2, [sp, #0]
 800a018:	4620      	mov	r0, r4
 800a01a:	2280      	movs	r2, #128	; 0x80
 800a01c:	f000 fd84 	bl	800ab28 <USBH_OpenPipe>
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a020:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800a024:	79a6      	ldrb	r6, [r4, #6]
 800a026:	7961      	ldrb	r1, [r4, #5]
 800a028:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a02c:	9000      	str	r0, [sp, #0]
 800a02e:	462a      	mov	r2, r5
 800a030:	9501      	str	r5, [sp, #4]
 800a032:	9602      	str	r6, [sp, #8]
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fd77 	bl	800ab28 <USBH_OpenPipe>
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a03a:	2101      	movs	r1, #1
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a03c:	462a      	mov	r2, r5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a03e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a042:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a046:	f003 f939 	bl	800d2bc <osMessagePut>
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 800a04a:	2000      	movs	r0, #0
 800a04c:	b007      	add	sp, #28
 800a04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pActiveClass != NULL)
 800a050:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0f8      	beq.n	800a04a <USBH_Process+0xb2>
        phost->pActiveClass->BgndProcess(phost);
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	4798      	blx	r3
 800a05c:	e7f5      	b.n	800a04a <USBH_Process+0xb2>
      if (phost->device.is_connected)
 800a05e:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0f1      	beq.n	800a04a <USBH_Process+0xb2>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a066:	2501      	movs	r5, #1
 800a068:	7005      	strb	r5, [r0, #0]
        USBH_Delay(200U);
 800a06a:	20c8      	movs	r0, #200	; 0xc8
 800a06c:	f005 f87c 	bl	800f168 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a070:	4620      	mov	r0, r4
 800a072:	f004 ffef 	bl	800f054 <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a076:	2200      	movs	r2, #0
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a078:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a07c:	4629      	mov	r1, r5
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a07e:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 800a082:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a086:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a08a:	f003 f917 	bl	800d2bc <osMessagePut>
 800a08e:	e7dc      	b.n	800a04a <USBH_Process+0xb2>
      if (phost->device.PortEnabled == 1U)
 800a090:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 800a094:	2b01      	cmp	r3, #1
 800a096:	f000 816b 	beq.w	800a370 <USBH_Process+0x3d8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a09a:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800a09e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0a2:	f240 80bb 	bls.w	800a21c <USBH_Process+0x284>
          phost->device.RstCnt++;
 800a0a6:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800a0ae:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800a0b0:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
            phost->gState = HOST_ABORT_STATE;
 800a0b4:	bf8c      	ite	hi
 800a0b6:	230d      	movhi	r3, #13
            phost->gState = HOST_IDLE;
 800a0b8:	2300      	movls	r3, #0
 800a0ba:	7003      	strb	r3, [r0, #0]
 800a0bc:	e084      	b.n	800a1c8 <USBH_Process+0x230>
      phost->device.is_disconnected = 0U;
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f880 2321 	strb.w	r2, [r0, #801]	; 0x321
 800a0c4:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800a0c8:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
    phost->Pipes[i] = 0U;
 800a0cc:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	d1fb      	bne.n	800a0cc <USBH_Process+0x134>
 800a0d4:	f204 131b 	addw	r3, r4, #283	; 0x11b
 800a0d8:	f204 321b 	addw	r2, r4, #795	; 0x31b
    phost->device.Data[i] = 0U;
 800a0dc:	2500      	movs	r5, #0
 800a0de:	f803 5f01 	strb.w	r5, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d1fb      	bne.n	800a0de <USBH_Process+0x146>
      if (phost->pActiveClass != NULL)
 800a0e6:	f8d4 237c 	ldr.w	r2, [r4, #892]	; 0x37c
  phost->gState = HOST_IDLE;
 800a0ea:	7025      	strb	r5, [r4, #0]
  phost->RequestState = CMD_SEND;
 800a0ec:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0ee:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0f0:	f44f 7180 	mov.w	r1, #256	; 0x100
  phost->EnumState = ENUM_IDLE;
 800a0f4:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 800a0f6:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  phost->Control.errorcount = 0U;
 800a0fa:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 800a0fc:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800a0fe:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a100:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a102:	f8c4 131c 	str.w	r1, [r4, #796]	; 0x31c
      if (phost->pActiveClass != NULL)
 800a106:	b122      	cbz	r2, 800a112 <USBH_Process+0x17a>
        phost->pActiveClass->DeInit(phost);
 800a108:	68d3      	ldr	r3, [r2, #12]
 800a10a:	4620      	mov	r0, r4
 800a10c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a10e:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 800a112:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800a116:	b113      	cbz	r3, 800a11e <USBH_Process+0x186>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a118:	2105      	movs	r1, #5
 800a11a:	4620      	mov	r0, r4
 800a11c:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800a11e:	f894 5322 	ldrb.w	r5, [r4, #802]	; 0x322
 800a122:	b2ed      	uxtb	r5, r5
 800a124:	2d01      	cmp	r5, #1
 800a126:	f000 8118 	beq.w	800a35a <USBH_Process+0x3c2>
        USBH_LL_Start(phost);
 800a12a:	4620      	mov	r0, r4
 800a12c:	f004 ff68 	bl	800f000 <USBH_LL_Start>
 800a130:	e04a      	b.n	800a1c8 <USBH_Process+0x230>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800a132:	7843      	ldrb	r3, [r0, #1]
 800a134:	2b07      	cmp	r3, #7
 800a136:	f200 8089 	bhi.w	800a24c <USBH_Process+0x2b4>
 800a13a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a13e:	00d2      	.short	0x00d2
 800a140:	00ba00c9 	.word	0x00ba00c9
 800a144:	009b00b1 	.word	0x009b00b1
 800a148:	00f40076 	.word	0x00f40076
 800a14c:	00ee      	.short	0x00ee
      if (phost->pActiveClass != NULL)
 800a14e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800a152:	b15b      	cbz	r3, 800a16c <USBH_Process+0x1d4>
        status = phost->pActiveClass->Requests(phost);
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	4798      	blx	r3
 800a158:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800a15c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d058      	beq.n	800a216 <USBH_Process+0x27e>
        else if (status == USBH_FAIL)
 800a164:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d101      	bne.n	800a170 <USBH_Process+0x1d8>
        phost->gState = HOST_ABORT_STATE;
 800a16c:	230d      	movs	r3, #13
 800a16e:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a170:	2105      	movs	r1, #5
 800a172:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a176:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a17a:	2200      	movs	r2, #0
 800a17c:	f003 f89e 	bl	800d2bc <osMessagePut>
}
 800a180:	2000      	movs	r0, #0
 800a182:	b007      	add	sp, #28
 800a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pUser != NULL)
 800a186:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f43f af5d 	beq.w	800a04a <USBH_Process+0xb2>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a190:	2101      	movs	r1, #1
 800a192:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a194:	2308      	movs	r3, #8
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a196:	2105      	movs	r1, #5
        phost->gState = HOST_SET_CONFIGURATION;
 800a198:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a19a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a19e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f003 f88a 	bl	800d2bc <osMessagePut>
 800a1a8:	e74f      	b.n	800a04a <USBH_Process+0xb2>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a1aa:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 800a1ae:	f000 fc33 	bl	800aa18 <USBH_SetCfg>
 800a1b2:	b948      	cbnz	r0, 800a1c8 <USBH_Process+0x230>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a1b4:	2309      	movs	r3, #9
 800a1b6:	7023      	strb	r3, [r4, #0]
 800a1b8:	e006      	b.n	800a1c8 <USBH_Process+0x230>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a1ba:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 800a1be:	069b      	lsls	r3, r3, #26
 800a1c0:	f100 80dc 	bmi.w	800a37c <USBH_Process+0x3e4>
        phost->gState = HOST_CHECK_CLASS;
 800a1c4:	230a      	movs	r3, #10
 800a1c6:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1ce:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f003 f872 	bl	800d2bc <osMessagePut>
}
 800a1d8:	2000      	movs	r0, #0
 800a1da:	b007      	add	sp, #28
 800a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->ClassNumber == 0U)
 800a1de:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0c4      	beq.n	800a170 <USBH_Process+0x1d8>
        phost->pActiveClass = NULL;
 800a1e6:	2200      	movs	r2, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a1e8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
        phost->pActiveClass = NULL;
 800a1ec:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a1f0:	7919      	ldrb	r1, [r3, #4]
 800a1f2:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 800a1f6:	4291      	cmp	r1, r2
 800a1f8:	d1b8      	bne.n	800a16c <USBH_Process+0x1d4>
            phost->pActiveClass = phost->pClass[idx];
 800a1fa:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	4798      	blx	r3
 800a202:	2800      	cmp	r0, #0
 800a204:	d1b2      	bne.n	800a16c <USBH_Process+0x1d4>
            phost->gState = HOST_CLASS_REQUEST;
 800a206:	2306      	movs	r3, #6
 800a208:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a20a:	2103      	movs	r1, #3
 800a20c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800a210:	4620      	mov	r0, r4
 800a212:	4798      	blx	r3
 800a214:	e7ac      	b.n	800a170 <USBH_Process+0x1d8>
          phost->gState = HOST_CLASS;
 800a216:	230b      	movs	r3, #11
 800a218:	7023      	strb	r3, [r4, #0]
 800a21a:	e7a9      	b.n	800a170 <USBH_Process+0x1d8>
          phost->Timeout += 10U;
 800a21c:	330a      	adds	r3, #10
 800a21e:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 800a222:	200a      	movs	r0, #10
 800a224:	f004 ffa0 	bl	800f168 <USBH_Delay>
 800a228:	e7ce      	b.n	800a1c8 <USBH_Process+0x230>
        /* .. */
      }
      break;

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a22a:	f890 2334 	ldrb.w	r2, [r0, #820]	; 0x334
 800a22e:	2a00      	cmp	r2, #0
 800a230:	f000 80b6 	beq.w	800a3a0 <USBH_Process+0x408>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a234:	4611      	mov	r1, r2
 800a236:	23ff      	movs	r3, #255	; 0xff
 800a238:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800a23c:	f000 fbac 	bl	800a998 <USBH_Get_StringDesc>
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
 800a240:	2800      	cmp	r0, #0
 800a242:	f000 80de 	beq.w	800a402 <USBH_Process+0x46a>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a246:	2803      	cmp	r0, #3
 800a248:	f000 80db 	beq.w	800a402 <USBH_Process+0x46a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a24c:	2301      	movs	r3, #1
      status = USBH_HandleEnum(phost);
 800a24e:	f88d 3017 	strb.w	r3, [sp, #23]
      if (status == USBH_OK)
 800a252:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f47f aef5 	bne.w	800a04a <USBH_Process+0xb2>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a260:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 800a264:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a268:	2b01      	cmp	r3, #1
          phost->gState = HOST_SET_CONFIGURATION;
 800a26a:	bf0c      	ite	eq
 800a26c:	2308      	moveq	r3, #8
          phost->gState = HOST_INPUT;
 800a26e:	2307      	movne	r3, #7
 800a270:	7023      	strb	r3, [r4, #0]
 800a272:	e77d      	b.n	800a170 <USBH_Process+0x1d8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a274:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 800a278:	f000 faf2 	bl	800a860 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f000 8091 	beq.w	800a3a4 <USBH_Process+0x40c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a282:	2803      	cmp	r0, #3
 800a284:	d1e2      	bne.n	800a24c <USBH_Process+0x2b4>
        phost->device.EnumCnt++;
 800a286:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800a28a:	3301      	adds	r3, #1
 800a28c:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800a28e:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800a290:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a294:	f240 80b7 	bls.w	800a406 <USBH_Process+0x46e>
          phost->gState = HOST_ABORT_STATE;
 800a298:	230d      	movs	r3, #13
 800a29a:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e7d6      	b.n	800a24e <USBH_Process+0x2b6>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a2a0:	2109      	movs	r1, #9
 800a2a2:	f000 fadd 	bl	800a860 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d1eb      	bne.n	800a282 <USBH_Process+0x2ea>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a2aa:	2304      	movs	r3, #4
 800a2ac:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e7cd      	b.n	800a24e <USBH_Process+0x2b6>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	f000 fba2 	bl	800a9fc <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f000 80b0 	beq.w	800a420 <USBH_Process+0x488>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2c0:	2803      	cmp	r0, #3
 800a2c2:	d1c3      	bne.n	800a24c <USBH_Process+0x2b4>
        phost->EnumState = ENUM_IDLE;
 800a2c4:	2300      	movs	r3, #0
        phost->gState = HOST_ABORT_STATE;
 800a2c6:	220d      	movs	r2, #13
        phost->EnumState = ENUM_IDLE;
 800a2c8:	7063      	strb	r3, [r4, #1]
        phost->gState = HOST_ABORT_STATE;
 800a2ca:	7022      	strb	r2, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e7be      	b.n	800a24e <USBH_Process+0x2b6>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a2d0:	2112      	movs	r1, #18
 800a2d2:	f000 fa75 	bl	800a7c0 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d1d3      	bne.n	800a282 <USBH_Process+0x2ea>
        phost->EnumState = ENUM_SET_ADDR;
 800a2da:	2302      	movs	r3, #2
 800a2dc:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e7b5      	b.n	800a24e <USBH_Process+0x2b6>
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a2e2:	2108      	movs	r1, #8
 800a2e4:	f000 fa6c 	bl	800a7c0 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d069      	beq.n	800a3c2 <USBH_Process+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2ee:	2803      	cmp	r0, #3
 800a2f0:	d1ac      	bne.n	800a24c <USBH_Process+0x2b4>
        phost->device.EnumCnt++;
 800a2f2:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800a2fa:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800a2fc:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a300:	d8ca      	bhi.n	800a298 <USBH_Process+0x300>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a302:	7961      	ldrb	r1, [r4, #5]
 800a304:	4620      	mov	r0, r4
 800a306:	f000 fc3f 	bl	800ab88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a30a:	7921      	ldrb	r1, [r4, #4]
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fc3b 	bl	800ab88 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a312:	2300      	movs	r3, #0
 800a314:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a316:	2301      	movs	r3, #1
 800a318:	e799      	b.n	800a24e <USBH_Process+0x2b6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a31a:	f890 1336 	ldrb.w	r1, [r0, #822]	; 0x336
 800a31e:	2900      	cmp	r1, #0
 800a320:	d144      	bne.n	800a3ac <USBH_Process+0x414>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	e793      	b.n	800a24e <USBH_Process+0x2b6>
      if (phost->device.DevDesc.iProduct != 0U)
 800a326:	f890 2335 	ldrb.w	r2, [r0, #821]	; 0x335
 800a32a:	b372      	cbz	r2, 800a38a <USBH_Process+0x3f2>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a32c:	4611      	mov	r1, r2
 800a32e:	23ff      	movs	r3, #255	; 0xff
 800a330:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800a334:	f000 fb30 	bl	800a998 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800a338:	2800      	cmp	r0, #0
 800a33a:	f000 8082 	beq.w	800a442 <USBH_Process+0x4aa>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a33e:	2803      	cmp	r0, #3
 800a340:	d184      	bne.n	800a24c <USBH_Process+0x2b4>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a342:	2307      	movs	r3, #7
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a344:	2105      	movs	r1, #5
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a346:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a348:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a352:	f002 ffb3 	bl	800d2bc <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a356:	2301      	movs	r3, #1
 800a358:	e779      	b.n	800a24e <USBH_Process+0x2b6>
        phost->device.is_ReEnumerated = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  USBH_LL_Start(phost);
 800a360:	4620      	mov	r0, r4
 800a362:	f004 fe4d 	bl	800f000 <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 800a366:	4629      	mov	r1, r5
 800a368:	4620      	mov	r0, r4
 800a36a:	f004 fec9 	bl	800f100 <USBH_LL_DriverVBUS>
 800a36e:	e72b      	b.n	800a1c8 <USBH_Process+0x230>
        phost->device.RstCnt = 0U;
 800a370:	2200      	movs	r2, #0
        phost->gState = HOST_DEV_ATTACHED;
 800a372:	2302      	movs	r3, #2
        phost->device.RstCnt = 0U;
 800a374:	f880 231f 	strb.w	r2, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a378:	7003      	strb	r3, [r0, #0]
 800a37a:	e725      	b.n	800a1c8 <USBH_Process+0x230>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a37c:	2101      	movs	r1, #1
 800a37e:	f000 fb59 	bl	800aa34 <USBH_SetFeature>
 800a382:	2800      	cmp	r0, #0
 800a384:	f43f af1e 	beq.w	800a1c4 <USBH_Process+0x22c>
 800a388:	e71e      	b.n	800a1c8 <USBH_Process+0x230>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a38a:	2307      	movs	r3, #7
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a38c:	2105      	movs	r1, #5
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a38e:	7063      	strb	r3, [r4, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a390:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a394:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a398:	f002 ff90 	bl	800d2bc <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e756      	b.n	800a24e <USBH_Process+0x2b6>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3a0:	2306      	movs	r3, #6
 800a3a2:	e7f3      	b.n	800a38c <USBH_Process+0x3f4>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3a4:	2305      	movs	r3, #5
 800a3a6:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e750      	b.n	800a24e <USBH_Process+0x2b6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a3ac:	23ff      	movs	r3, #255	; 0xff
 800a3ae:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800a3b2:	f000 faf1 	bl	800a998 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d0b3      	beq.n	800a322 <USBH_Process+0x38a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3ba:	1ec3      	subs	r3, r0, #3
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	e745      	b.n	800a24e <USBH_Process+0x2b6>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a3c2:	f894 232d 	ldrb.w	r2, [r4, #813]	; 0x32d
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3c6:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800a3ca:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a3ce:	7921      	ldrb	r1, [r4, #4]
 800a3d0:	9601      	str	r6, [sp, #4]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a3d2:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a3d4:	71a2      	strb	r2, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3d6:	9202      	str	r2, [sp, #8]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a3d8:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3da:	9000      	str	r0, [sp, #0]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3dc:	2280      	movs	r2, #128	; 0x80
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 fba2 	bl	800ab28 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3e4:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800a3e8:	79a7      	ldrb	r7, [r4, #6]
 800a3ea:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a3ee:	7961      	ldrb	r1, [r4, #5]
 800a3f0:	9000      	str	r0, [sp, #0]
 800a3f2:	9601      	str	r6, [sp, #4]
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	9702      	str	r7, [sp, #8]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 fb95 	bl	800ab28 <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3fe:	462b      	mov	r3, r5
 800a400:	e725      	b.n	800a24e <USBH_Process+0x2b6>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a402:	2306      	movs	r3, #6
 800a404:	e79e      	b.n	800a344 <USBH_Process+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a406:	7961      	ldrb	r1, [r4, #5]
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fbbd 	bl	800ab88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a40e:	7921      	ldrb	r1, [r4, #4]
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fbb9 	bl	800ab88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a416:	2300      	movs	r3, #0
 800a418:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800a41a:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e716      	b.n	800a24e <USBH_Process+0x2b6>
        USBH_Delay(2U);
 800a420:	2002      	movs	r0, #2
 800a422:	f004 fea1 	bl	800f168 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a426:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a428:	79a0      	ldrb	r0, [r4, #6]
 800a42a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800a42e:	7921      	ldrb	r1, [r4, #4]
 800a430:	9601      	str	r6, [sp, #4]
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a432:	2703      	movs	r7, #3
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a434:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a438:	7067      	strb	r7, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a43a:	462b      	mov	r3, r5
 800a43c:	9002      	str	r0, [sp, #8]
 800a43e:	9200      	str	r2, [sp, #0]
 800a440:	e7cc      	b.n	800a3dc <USBH_Process+0x444>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a442:	2307      	movs	r3, #7
 800a444:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a446:	2301      	movs	r3, #1
 800a448:	e701      	b.n	800a24e <USBH_Process+0x2b6>
 800a44a:	bf00      	nop

0800a44c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a44c:	b500      	push	{lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	b085      	sub	sp, #20
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a452:	f04f 32ff 	mov.w	r2, #4294967295
 800a456:	f8d4 13d8 	ldr.w	r1, [r4, #984]	; 0x3d8
 800a45a:	a801      	add	r0, sp, #4
 800a45c:	f002 ff5a 	bl	800d314 <osMessageGet>
    if (event.status == osEventMessage)
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	2b10      	cmp	r3, #16
 800a464:	d1f5      	bne.n	800a452 <USBH_Process_OS+0x6>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a466:	4620      	mov	r0, r4
 800a468:	f7ff fd96 	bl	8009f98 <USBH_Process>
 800a46c:	e7f1      	b.n	800a452 <USBH_Process_OS+0x6>
 800a46e:	bf00      	nop

0800a470 <USBH_LL_SetTimer>:
  phost->Timer = time;
 800a470:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop

0800a478 <USBH_LL_IncTimer>:
  phost->Timer++;
 800a478:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 800a47c:	3201      	adds	r2, #1
 800a47e:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a482:	7802      	ldrb	r2, [r0, #0]
 800a484:	2a0b      	cmp	r2, #11
 800a486:	d000      	beq.n	800a48a <USBH_LL_IncTimer+0x12>
}
 800a488:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a48a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0fa      	beq.n	800a488 <USBH_LL_IncTimer+0x10>
    phost->pActiveClass->SOFProcess(phost);
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	4718      	bx	r3
 800a496:	bf00      	nop

0800a498 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800a498:	2101      	movs	r1, #1
 800a49a:	f880 1323 	strb.w	r1, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a49e:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800a4a8:	f002 bf08 	b.w	800d2bc <osMessagePut>

0800a4ac <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 800a4b2:	4770      	bx	lr

0800a4b4 <USBH_LL_Connect>:
{
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	4603      	mov	r3, r0
  phost->device.is_disconnected = 0U;
 800a4b8:	2400      	movs	r4, #0
  phost->device.is_connected = 1U;
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4c0:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  phost->device.is_disconnected = 0U;
 800a4c4:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
  phost->device.is_ReEnumerated = 0U;
 800a4ce:	f883 4322 	strb.w	r4, [r3, #802]	; 0x322
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4d2:	f002 fef3 	bl	800d2bc <osMessagePut>
}
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	bf00      	nop

0800a4dc <USBH_LL_Disconnect>:
{
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4604      	mov	r4, r0
  phost->device.is_connected = 0U;
 800a4e0:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 800a4e2:	2601      	movs	r6, #1
 800a4e4:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 800a4e8:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a4ec:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  USBH_LL_Stop(phost);
 800a4f0:	f004 fd94 	bl	800f01c <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4f4:	7921      	ldrb	r1, [r4, #4]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 fb46 	bl	800ab88 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4fc:	7961      	ldrb	r1, [r4, #5]
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 fb42 	bl	800ab88 <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a504:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a508:	4631      	mov	r1, r6
 800a50a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a50e:	462a      	mov	r2, r5
 800a510:	f002 fed4 	bl	800d2bc <osMessagePut>
}
 800a514:	4628      	mov	r0, r5
 800a516:	bd70      	pop	{r4, r5, r6, pc}

0800a518 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a518:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a51a:	2101      	movs	r1, #1
 800a51c:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a520:	2200      	movs	r2, #0
 800a522:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800a526:	f002 fec9 	bl	800d2bc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800a52a:	2000      	movs	r0, #0
 800a52c:	bd08      	pop	{r3, pc}
 800a52e:	bf00      	nop

0800a530 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a530:	b530      	push	{r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800a532:	7883      	ldrb	r3, [r0, #2]
 800a534:	2b01      	cmp	r3, #1
{
 800a536:	b083      	sub	sp, #12
 800a538:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800a53a:	d011      	beq.n	800a560 <USBH_CtlReq+0x30>
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d003      	beq.n	800a548 <USBH_CtlReq+0x18>
  status = USBH_BUSY;
 800a540:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 800a542:	4628      	mov	r0, r5
 800a544:	b003      	add	sp, #12
 800a546:	bd30      	pop	{r4, r5, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800a548:	7e03      	ldrb	r3, [r0, #24]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	2b0a      	cmp	r3, #10
 800a54e:	d823      	bhi.n	800a598 <USBH_CtlReq+0x68>
 800a550:	e8df f003 	tbb	[pc, r3]
 800a554:	6d18554a 	.word	0x6d18554a
 800a558:	cba3897a 	.word	0xcba3897a
 800a55c:	bdae      	.short	0xbdae
 800a55e:	2e          	.byte	0x2e
 800a55f:	00          	.byte	0x00
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a560:	2003      	movs	r0, #3
      phost->RequestState = CMD_WAIT;
 800a562:	2502      	movs	r5, #2
      phost->Control.buff = buff;
 800a564:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 800a566:	81a2      	strh	r2, [r4, #12]
      phost->RequestState = CMD_WAIT;
 800a568:	70a5      	strb	r5, [r4, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a56a:	f8c4 03e0 	str.w	r0, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a56e:	4601      	mov	r1, r0
      phost->Control.state = CTRL_SETUP;
 800a570:	7623      	strb	r3, [r4, #24]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a572:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a576:	2200      	movs	r2, #0
      status = USBH_BUSY;
 800a578:	461d      	mov	r5, r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a57a:	f002 fe9f 	bl	800d2bc <osMessagePut>
}
 800a57e:	4628      	mov	r0, r5
 800a580:	b003      	add	sp, #12
 800a582:	bd30      	pop	{r4, r5, pc}
      }
      break;

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a584:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 800a588:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a58a:	8982      	ldrh	r2, [r0, #12]
 800a58c:	7903      	ldrb	r3, [r0, #4]
 800a58e:	6881      	ldr	r1, [r0, #8]
 800a590:	f000 fa94 	bl	800aabc <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a594:	2304      	movs	r3, #4
 800a596:	7623      	strb	r3, [r4, #24]
 800a598:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a59c:	2501      	movs	r5, #1
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a59e:	2103      	movs	r1, #3
 800a5a0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f002 fe89 	bl	800d2bc <osMessagePut>
}
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	b003      	add	sp, #12
 800a5ae:	bd30      	pop	{r4, r5, pc}
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5b0:	7e43      	ldrb	r3, [r0, #25]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	7643      	strb	r3, [r0, #25]
 800a5ba:	f240 80d3 	bls.w	800a764 <USBH_CtlReq+0x234>
        phost->Control.state = CTRL_SETUP;
        phost->RequestState = CMD_SEND;
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5be:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800a5c2:	2106      	movs	r1, #6
        phost->Control.errorcount = 0U;
 800a5c4:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5c6:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5c8:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 800a5ca:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 fadb 	bl	800ab88 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5d2:	7921      	ldrb	r1, [r4, #4]
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fad7 	bl	800ab88 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800a5da:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	70a3      	strb	r3, [r4, #2]
 800a5e0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a5e4:	2502      	movs	r5, #2
 800a5e6:	e7da      	b.n	800a59e <USBH_CtlReq+0x6e>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a5e8:	7942      	ldrb	r2, [r0, #5]
 800a5ea:	f100 0110 	add.w	r1, r0, #16
 800a5ee:	f000 fa3d 	bl	800aa6c <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	7623      	strb	r3, [r4, #24]
 800a5f6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a5fa:	2501      	movs	r5, #1
 800a5fc:	e7cf      	b.n	800a59e <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5fe:	7941      	ldrb	r1, [r0, #5]
 800a600:	f004 fd7a 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a604:	2801      	cmp	r0, #1
 800a606:	f000 8096 	beq.w	800a736 <USBH_CtlReq+0x206>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a60a:	2804      	cmp	r0, #4
 800a60c:	d001      	beq.n	800a612 <USBH_CtlReq+0xe2>
 800a60e:	2802      	cmp	r0, #2
 800a610:	d1c2      	bne.n	800a598 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_ERROR;
 800a612:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a614:	2103      	movs	r1, #3
        phost->Control.state = CTRL_DATA_OUT;
 800a616:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a618:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a622:	f002 fe4b 	bl	800d2bc <osMessagePut>
 800a626:	2501      	movs	r5, #1
 800a628:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a62c:	e7b7      	b.n	800a59e <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a62e:	7901      	ldrb	r1, [r0, #4]
 800a630:	f004 fd62 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a634:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a636:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800a638:	f000 809b 	beq.w	800a772 <USBH_CtlReq+0x242>
      if (URB_Status == USBH_URB_STALL)
 800a63c:	2805      	cmp	r0, #5
 800a63e:	f000 80b1 	beq.w	800a7a4 <USBH_CtlReq+0x274>
        if (URB_Status == USBH_URB_ERROR)
 800a642:	2804      	cmp	r0, #4
 800a644:	d1a8      	bne.n	800a598 <USBH_CtlReq+0x68>
 800a646:	e7e4      	b.n	800a612 <USBH_CtlReq+0xe2>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a648:	2501      	movs	r5, #1
 800a64a:	7943      	ldrb	r3, [r0, #5]
 800a64c:	8982      	ldrh	r2, [r0, #12]
 800a64e:	6881      	ldr	r1, [r0, #8]
 800a650:	9500      	str	r5, [sp, #0]
 800a652:	f000 fa1b 	bl	800aa8c <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800a656:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800a65a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a65c:	2306      	movs	r3, #6
 800a65e:	7623      	strb	r3, [r4, #24]
 800a660:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a664:	e79b      	b.n	800a59e <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a666:	7941      	ldrb	r1, [r0, #5]
 800a668:	f004 fd46 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a66c:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a66e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800a670:	f000 808c 	beq.w	800a78c <USBH_CtlReq+0x25c>
      else if (URB_Status == USBH_URB_STALL)
 800a674:	2805      	cmp	r0, #5
 800a676:	f000 809f 	beq.w	800a7b8 <USBH_CtlReq+0x288>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a67a:	2802      	cmp	r0, #2
 800a67c:	f000 8090 	beq.w	800a7a0 <USBH_CtlReq+0x270>
        if (URB_Status == USBH_URB_ERROR)
 800a680:	2804      	cmp	r0, #4
 800a682:	d189      	bne.n	800a598 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_ERROR;
 800a684:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a686:	2103      	movs	r1, #3
          phost->Control.state = CTRL_ERROR;
 800a688:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a68a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a68e:	2200      	movs	r2, #0
 800a690:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a694:	f002 fe12 	bl	800d2bc <osMessagePut>
 800a698:	e7a0      	b.n	800a5dc <USBH_CtlReq+0xac>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a69a:	2200      	movs	r2, #0
 800a69c:	7903      	ldrb	r3, [r0, #4]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	f000 fa0c 	bl	800aabc <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6a4:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800a6a8:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a6aa:	2308      	movs	r3, #8
 800a6ac:	7623      	strb	r3, [r4, #24]
 800a6ae:	e773      	b.n	800a598 <USBH_CtlReq+0x68>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2501      	movs	r5, #1
 800a6b4:	7943      	ldrb	r3, [r0, #5]
 800a6b6:	9500      	str	r5, [sp, #0]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	f000 f9e7 	bl	800aa8c <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6be:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800a6c2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6c4:	230a      	movs	r3, #10
 800a6c6:	7623      	strb	r3, [r4, #24]
 800a6c8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a6cc:	e767      	b.n	800a59e <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6ce:	7941      	ldrb	r1, [r0, #5]
 800a6d0:	f004 fd12 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a6d4:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6d6:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800a6d8:	d021      	beq.n	800a71e <USBH_CtlReq+0x1ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a6e0:	d05c      	beq.n	800a79c <USBH_CtlReq+0x26c>
        if (URB_Status == USBH_URB_ERROR)
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d032      	beq.n	800a74c <USBH_CtlReq+0x21c>
 800a6e6:	2501      	movs	r5, #1
 800a6e8:	e759      	b.n	800a59e <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6ea:	7901      	ldrb	r1, [r0, #4]
 800a6ec:	f004 fd04 	bl	800f0f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a6f0:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6f2:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800a6f4:	d013      	beq.n	800a71e <USBH_CtlReq+0x1ee>
      else if (URB_Status == USBH_URB_ERROR)
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a6fc:	d026      	beq.n	800a74c <USBH_CtlReq+0x21c>
        if (URB_Status == USBH_URB_STALL)
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	d1f1      	bne.n	800a6e6 <USBH_CtlReq+0x1b6>
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a702:	2103      	movs	r1, #3
 800a704:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a708:	2200      	movs	r2, #0
 800a70a:	460d      	mov	r5, r1
 800a70c:	f002 fdd6 	bl	800d2bc <osMessagePut>
        phost->RequestState = CMD_SEND;
 800a710:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800a712:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 800a714:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800a716:	7623      	strb	r3, [r4, #24]
 800a718:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a71c:	e73f      	b.n	800a59e <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_COMPLETE;
 800a71e:	230d      	movs	r3, #13
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a720:	2103      	movs	r1, #3
        phost->Control.state = CTRL_COMPLETE;
 800a722:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a724:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a728:	2200      	movs	r2, #0
 800a72a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a72e:	f002 fdc5 	bl	800d2bc <osMessagePut>
 800a732:	2500      	movs	r5, #0
 800a734:	e7ec      	b.n	800a710 <USBH_CtlReq+0x1e0>
        if (phost->Control.setup.b.wLength.w != 0U)
 800a736:	8ae3      	ldrh	r3, [r4, #22]
 800a738:	f994 2010 	ldrsb.w	r2, [r4, #16]
 800a73c:	b343      	cbz	r3, 800a790 <USBH_CtlReq+0x260>
          if (direction == USB_D2H)
 800a73e:	2a00      	cmp	r2, #0
            phost->Control.state = CTRL_DATA_IN;
 800a740:	bfb4      	ite	lt
 800a742:	2303      	movlt	r3, #3
            phost->Control.state = CTRL_DATA_OUT;
 800a744:	2305      	movge	r3, #5
 800a746:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a748:	2103      	movs	r1, #3
 800a74a:	e765      	b.n	800a618 <USBH_CtlReq+0xe8>
          phost->Control.state = CTRL_ERROR;
 800a74c:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a74e:	2103      	movs	r1, #3
          phost->Control.state = CTRL_ERROR;
 800a750:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a752:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a756:	2200      	movs	r2, #0
 800a758:	f002 fdb0 	bl	800d2bc <osMessagePut>
 800a75c:	2501      	movs	r5, #1
 800a75e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a762:	e71c      	b.n	800a59e <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_SETUP;
 800a764:	2301      	movs	r3, #1
 800a766:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 800a768:	7083      	strb	r3, [r0, #2]
 800a76a:	461d      	mov	r5, r3
 800a76c:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800a770:	e715      	b.n	800a59e <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_STATUS_OUT;
 800a772:	2209      	movs	r2, #9
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a774:	2103      	movs	r1, #3
        phost->Control.state = CTRL_STATUS_IN;
 800a776:	7622      	strb	r2, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a778:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a782:	f002 fd9b 	bl	800d2bc <osMessagePut>
 800a786:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a78a:	e708      	b.n	800a59e <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_STATUS_IN;
 800a78c:	2207      	movs	r2, #7
 800a78e:	e7f1      	b.n	800a774 <USBH_CtlReq+0x244>
          if (direction == USB_D2H)
 800a790:	2a00      	cmp	r2, #0
            phost->Control.state = CTRL_STATUS_OUT;
 800a792:	bfb4      	ite	lt
 800a794:	2309      	movlt	r3, #9
            phost->Control.state = CTRL_STATUS_IN;
 800a796:	2307      	movge	r3, #7
 800a798:	7623      	strb	r3, [r4, #24]
 800a79a:	e7d5      	b.n	800a748 <USBH_CtlReq+0x218>
        phost->Control.state = CTRL_STATUS_OUT;
 800a79c:	2309      	movs	r3, #9
 800a79e:	e7d6      	b.n	800a74e <USBH_CtlReq+0x21e>
        phost->Control.state = CTRL_DATA_OUT;
 800a7a0:	2305      	movs	r3, #5
 800a7a2:	e737      	b.n	800a614 <USBH_CtlReq+0xe4>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7a4:	2103      	movs	r1, #3
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7a6:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	f002 fd83 	bl	800d2bc <osMessagePut>
 800a7b6:	e7ab      	b.n	800a710 <USBH_CtlReq+0x1e0>
        phost->Control.state = CTRL_STALLED;
 800a7b8:	230c      	movs	r3, #12
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7ba:	2103      	movs	r1, #3
        phost->Control.state = CTRL_STALLED;
 800a7bc:	7623      	strb	r3, [r4, #24]
 800a7be:	e7f2      	b.n	800a7a6 <USBH_CtlReq+0x276>

0800a7c0 <USBH_Get_DevDesc>:
{
 800a7c0:	b538      	push	{r3, r4, r5, lr}
  if (phost->RequestState == CMD_SEND)
 800a7c2:	7883      	ldrb	r3, [r0, #2]
 800a7c4:	2b01      	cmp	r3, #1
  if ((status = USBH_GetDescriptor(phost,
 800a7c6:	460d      	mov	r5, r1
{
 800a7c8:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 800a7ca:	f500 718e 	add.w	r1, r0, #284	; 0x11c
  if (phost->RequestState == CMD_SEND)
 800a7ce:	d104      	bne.n	800a7da <USBH_Get_DevDesc+0x1a>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7d0:	4a22      	ldr	r2, [pc, #136]	; (800a85c <USBH_Get_DevDesc+0x9c>)
    phost->Control.setup.b.wLength.w = length;
 800a7d2:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 800a7d4:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7d6:	6102      	str	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800a7d8:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800a7da:	462a      	mov	r2, r5
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7ff fea7 	bl	800a530 <USBH_CtlReq>
  if ((status = USBH_GetDescriptor(phost,
 800a7e2:	b100      	cbz	r0, 800a7e6 <USBH_Get_DevDesc+0x26>
}
 800a7e4:	bd38      	pop	{r3, r4, r5, pc}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a7e6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a7ea:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a7ee:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a7f2:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a7f6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a7fa:	f884 1327 	strb.w	r1, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a7fe:	f8a4 2328 	strh.w	r2, [r4, #808]	; 0x328
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a802:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a806:	f894 2122 	ldrb.w	r2, [r4, #290]	; 0x122
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a80a:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  if (length > 8U)
 800a80e:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a810:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a814:	f884 132b 	strb.w	r1, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a818:	f884 232c 	strb.w	r2, [r4, #812]	; 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a81c:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
  if (length > 8U)
 800a820:	d9e0      	bls.n	800a7e4 <USBH_Get_DevDesc+0x24>
    dev_desc->idVendor           = LE16(buf +  8);
 800a822:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16(buf + 10);
 800a826:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a82a:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a82e:	f894 512a 	ldrb.w	r5, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16(buf +  8);
 800a832:	f8a4 132e 	strh.w	r1, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 800a836:	f8a4 2330 	strh.w	r2, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a83a:	f894 112b 	ldrb.w	r1, [r4, #299]	; 0x12b
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a83e:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a842:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a846:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a84a:	f884 5334 	strb.w	r5, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a84e:	f884 1335 	strb.w	r1, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a852:	f884 2336 	strb.w	r2, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a856:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	01000680 	.word	0x01000680

0800a860 <USBH_Get_CfgDesc>:
  if (phost->RequestState == CMD_SEND)
 800a860:	7883      	ldrb	r3, [r0, #2]
 800a862:	2b01      	cmp	r3, #1
{
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	4605      	mov	r5, r0
 800a86a:	460e      	mov	r6, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a86c:	f100 041c 	add.w	r4, r0, #28
  if (phost->RequestState == CMD_SEND)
 800a870:	d104      	bne.n	800a87c <USBH_Get_CfgDesc+0x1c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a872:	4a48      	ldr	r2, [pc, #288]	; (800a994 <USBH_Get_CfgDesc+0x134>)
    phost->Control.setup.b.wLength.w = length;
 800a874:	82e9      	strh	r1, [r5, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 800a876:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a878:	6102      	str	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800a87a:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800a87c:	4632      	mov	r2, r6
 800a87e:	4621      	mov	r1, r4
 800a880:	4628      	mov	r0, r5
 800a882:	f7ff fe55 	bl	800a530 <USBH_CtlReq>
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a886:	b108      	cbz	r0, 800a88c <USBH_Get_CfgDesc+0x2c>
}
 800a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a88c:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a88e:	7f6a      	ldrb	r2, [r5, #29]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a890:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a894:	f895 3020 	ldrb.w	r3, [r5, #32]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a898:	f885 2339 	strb.w	r2, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a89c:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a8a0:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a8a4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a8a8:	8be9      	ldrh	r1, [r5, #30]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a8aa:	f885 233d 	strb.w	r2, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a8ae:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a8b2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a8b6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a8ba:	f8a5 133a 	strh.w	r1, [r5, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a8be:	2e09      	cmp	r6, #9
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a8c0:	f885 233f 	strb.w	r2, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a8c4:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a8c8:	d9de      	bls.n	800a888 <USBH_Get_CfgDesc+0x28>
 800a8ca:	462f      	mov	r7, r5
 800a8cc:	4684      	mov	ip, r0
    ptr = USB_LEN_CFG_DESC;
 800a8ce:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a8d0:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8d4:	4291      	cmp	r1, r2
 800a8d6:	d802      	bhi.n	800a8de <USBH_Get_CfgDesc+0x7e>
 800a8d8:	e7d6      	b.n	800a888 <USBH_Get_CfgDesc+0x28>
 800a8da:	428a      	cmp	r2, r1
 800a8dc:	d2d4      	bcs.n	800a888 <USBH_Get_CfgDesc+0x28>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8de:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a8e0:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8e2:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a8e4:	7866      	ldrb	r6, [r4, #1]
 800a8e6:	2e04      	cmp	r6, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8e8:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a8ea:	d1f6      	bne.n	800a8da <USBH_Get_CfgDesc+0x7a>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a8ec:	7823      	ldrb	r3, [r4, #0]
 800a8ee:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a8f2:	7863      	ldrb	r3, [r4, #1]
 800a8f4:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a8f8:	78a3      	ldrb	r3, [r4, #2]
 800a8fa:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a8fe:	78e3      	ldrb	r3, [r4, #3]
 800a900:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a904:	f894 9004 	ldrb.w	r9, [r4, #4]
 800a908:	f887 9346 	strb.w	r9, [r7, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a90c:	7963      	ldrb	r3, [r4, #5]
 800a90e:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a912:	79a3      	ldrb	r3, [r4, #6]
 800a914:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a918:	79e3      	ldrb	r3, [r4, #7]
 800a91a:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a91e:	7a23      	ldrb	r3, [r4, #8]
 800a920:	f887 334a 	strb.w	r3, [r7, #842]	; 0x34a
        ep_ix = 0U;
 800a924:	2600      	movs	r6, #0
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a926:	fb0e f80c 	mul.w	r8, lr, ip
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a92a:	454e      	cmp	r6, r9
 800a92c:	d22a      	bcs.n	800a984 <USBH_Get_CfgDesc+0x124>
 800a92e:	4291      	cmp	r1, r2
 800a930:	d928      	bls.n	800a984 <USBH_Get_CfgDesc+0x124>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a932:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a934:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a936:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a938:	f894 a001 	ldrb.w	sl, [r4, #1]
 800a93c:	f1ba 0f05 	cmp.w	sl, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a940:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a942:	d1f2      	bne.n	800a92a <USBH_Get_CfgDesc+0xca>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a944:	3601      	adds	r6, #1
 800a946:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 800a94a:	442b      	add	r3, r5
 800a94c:	f894 9000 	ldrb.w	r9, [r4]
 800a950:	f883 9344 	strb.w	r9, [r3, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a954:	f894 9001 	ldrb.w	r9, [r4, #1]
 800a958:	f883 9345 	strb.w	r9, [r3, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a95c:	f894 9002 	ldrb.w	r9, [r4, #2]
 800a960:	f883 9346 	strb.w	r9, [r3, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a964:	f894 9003 	ldrb.w	r9, [r4, #3]
 800a968:	f883 9347 	strb.w	r9, [r3, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a96c:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 800a970:	f8a3 9348 	strh.w	r9, [r3, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a974:	f894 9006 	ldrb.w	r9, [r4, #6]
 800a978:	f883 934a 	strb.w	r9, [r3, #842]	; 0x34a
 800a97c:	f897 9346 	ldrb.w	r9, [r7, #838]	; 0x346
            ep_ix++;
 800a980:	b2f6      	uxtb	r6, r6
 800a982:	e7d2      	b.n	800a92a <USBH_Get_CfgDesc+0xca>
 800a984:	371a      	adds	r7, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a986:	f1bc 0f00 	cmp.w	ip, #0
 800a98a:	f47f af7d 	bne.w	800a888 <USBH_Get_CfgDesc+0x28>
 800a98e:	f04f 0c01 	mov.w	ip, #1
 800a992:	e79f      	b.n	800a8d4 <USBH_Get_CfgDesc+0x74>
 800a994:	02000680 	.word	0x02000680

0800a998 <USBH_Get_StringDesc>:
{
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	4604      	mov	r4, r0
  if (phost->RequestState == CMD_SEND)
 800a99c:	7880      	ldrb	r0, [r0, #2]
 800a99e:	2801      	cmp	r0, #1
{
 800a9a0:	4615      	mov	r5, r2
 800a9a2:	461f      	mov	r7, r3
                                   phost->device.Data, length)) == USBH_OK)
 800a9a4:	f504 768e 	add.w	r6, r4, #284	; 0x11c
  if (phost->RequestState == CMD_SEND)
 800a9a8:	d109      	bne.n	800a9be <USBH_Get_StringDesc+0x26>
  if ((status = USBH_GetDescriptor(phost,
 800a9aa:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a9ae:	f44f 62d0 	mov.w	r2, #1664	; 0x680
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a9b2:	f240 4309 	movw	r3, #1033	; 0x409
    phost->Control.setup.b.wValue.w = value_idx;
 800a9b6:	8261      	strh	r1, [r4, #18]
    phost->Control.setup.b.wLength.w = length;
 800a9b8:	82e7      	strh	r7, [r4, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a9ba:	8222      	strh	r2, [r4, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a9bc:	82a3      	strh	r3, [r4, #20]
  return USBH_CtlReq(phost, buff, length);
 800a9be:	463a      	mov	r2, r7
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f7ff fdb4 	bl	800a530 <USBH_CtlReq>
  if ((status = USBH_GetDescriptor(phost,
 800a9c8:	b918      	cbnz	r0, 800a9d2 <USBH_Get_StringDesc+0x3a>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9ca:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d000      	beq.n	800a9d4 <USBH_Get_StringDesc+0x3c>
}
 800a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9d4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800a9d8:	3b02      	subs	r3, #2
 800a9da:	429f      	cmp	r7, r3
 800a9dc:	bf28      	it	cs
 800a9de:	461f      	movcs	r7, r3
 800a9e0:	b2b9      	uxth	r1, r7
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9e2:	b147      	cbz	r7, 800a9f6 <USBH_Get_StringDesc+0x5e>
 800a9e4:	4603      	mov	r3, r0
      *pdest =  psrc[idx];
 800a9e6:	18f2      	adds	r2, r6, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9e8:	3302      	adds	r3, #2
 800a9ea:	b29b      	uxth	r3, r3
      *pdest =  psrc[idx];
 800a9ec:	7892      	ldrb	r2, [r2, #2]
 800a9ee:	f805 2b01 	strb.w	r2, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9f2:	4299      	cmp	r1, r3
 800a9f4:	d8f7      	bhi.n	800a9e6 <USBH_Get_StringDesc+0x4e>
    *pdest = 0U; /* mark end of string */
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	702b      	strb	r3, [r5, #0]
}
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9fc <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 800a9fc:	7883      	ldrb	r3, [r0, #2]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d105      	bne.n	800aa0e <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa02:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    phost->Control.setup.b.wIndex.w = 0U;
 800aa06:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa08:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa0a:	8202      	strh	r2, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa0c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	4611      	mov	r1, r2
 800aa12:	f7ff bd8d 	b.w	800a530 <USBH_CtlReq>
 800aa16:	bf00      	nop

0800aa18 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 800aa18:	7883      	ldrb	r3, [r0, #2]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d105      	bne.n	800aa2a <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa1e:	f44f 6210 	mov.w	r2, #2304	; 0x900
    phost->Control.setup.b.wIndex.w = 0U;
 800aa22:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aa24:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa26:	8202      	strh	r2, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa28:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	f7ff bd7f 	b.w	800a530 <USBH_CtlReq>
 800aa32:	bf00      	nop

0800aa34 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 800aa34:	7883      	ldrb	r3, [r0, #2]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d105      	bne.n	800aa46 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa3a:	f44f 7240 	mov.w	r2, #768	; 0x300
    phost->Control.setup.b.wIndex.w = 0U;
 800aa3e:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 800aa40:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa42:	8202      	strh	r2, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa44:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800aa46:	2200      	movs	r2, #0
 800aa48:	4611      	mov	r1, r2
 800aa4a:	f7ff bd71 	b.w	800a530 <USBH_CtlReq>
 800aa4e:	bf00      	nop

0800aa50 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 800aa50:	7883      	ldrb	r3, [r0, #2]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d105      	bne.n	800aa62 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa56:	f44f 7281 	mov.w	r2, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 800aa5a:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 800aa5c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa5e:	6102      	str	r2, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 800aa60:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800aa62:	2200      	movs	r2, #0
 800aa64:	4611      	mov	r1, r2
 800aa66:	f7ff bd63 	b.w	800a530 <USBH_CtlReq>
 800aa6a:	bf00      	nop

0800aa6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa6c:	b530      	push	{r4, r5, lr}
 800aa6e:	b085      	sub	sp, #20

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa70:	2400      	movs	r4, #0
 800aa72:	2508      	movs	r5, #8
 800aa74:	9101      	str	r1, [sp, #4]
 800aa76:	9403      	str	r4, [sp, #12]
 800aa78:	4611      	mov	r1, r2
 800aa7a:	9400      	str	r4, [sp, #0]
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	4622      	mov	r2, r4
 800aa80:	9502      	str	r5, [sp, #8]
 800aa82:	f004 fb1f 	bl	800f0c4 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 800aa86:	4620      	mov	r0, r4
 800aa88:	b005      	add	sp, #20
 800aa8a:	bd30      	pop	{r4, r5, pc}

0800aa8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa8c:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa8e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800aa92:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa94:	2d00      	cmp	r5, #0
{
 800aa96:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa9a:	9202      	str	r2, [sp, #8]
{
 800aa9c:	461d      	mov	r5, r3
    do_ping = 0U;
 800aa9e:	bf18      	it	ne
 800aaa0:	2400      	movne	r4, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	9101      	str	r1, [sp, #4]
 800aaa8:	9200      	str	r2, [sp, #0]
 800aaaa:	9403      	str	r4, [sp, #12]
 800aaac:	4629      	mov	r1, r5
 800aaae:	461a      	mov	r2, r3
 800aab0:	f004 fb08 	bl	800f0c4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800aab4:	2000      	movs	r0, #0
 800aab6:	b005      	add	sp, #20
 800aab8:	bd30      	pop	{r4, r5, pc}
 800aaba:	bf00      	nop

0800aabc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aabc:	b530      	push	{r4, r5, lr}
 800aabe:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aac0:	2400      	movs	r4, #0
 800aac2:	2501      	movs	r5, #1
 800aac4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800aac8:	9403      	str	r4, [sp, #12]
 800aaca:	4619      	mov	r1, r3
 800aacc:	9500      	str	r5, [sp, #0]
 800aace:	4623      	mov	r3, r4
 800aad0:	462a      	mov	r2, r5
 800aad2:	f004 faf7 	bl	800f0c4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 800aad6:	4620      	mov	r0, r4
 800aad8:	b005      	add	sp, #20
 800aada:	bd30      	pop	{r4, r5, pc}

0800aadc <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aadc:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aade:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800aae2:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aae4:	2d00      	cmp	r5, #0
{
 800aae6:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaea:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800aaec:	bf18      	it	ne
 800aaee:	2400      	movne	r4, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	9101      	str	r1, [sp, #4]
 800aaf4:	9200      	str	r2, [sp, #0]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	9403      	str	r4, [sp, #12]
 800aafa:	2302      	movs	r3, #2
 800aafc:	2200      	movs	r2, #0
 800aafe:	f004 fae1 	bl	800f0c4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800ab02:	2000      	movs	r0, #0
 800ab04:	b005      	add	sp, #20
 800ab06:	bd30      	pop	{r4, r5, pc}

0800ab08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab08:	b530      	push	{r4, r5, lr}
 800ab0a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ab0c:	2400      	movs	r4, #0
 800ab0e:	2501      	movs	r5, #1
 800ab10:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ab14:	9403      	str	r4, [sp, #12]
 800ab16:	4619      	mov	r1, r3
 800ab18:	9500      	str	r5, [sp, #0]
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	f004 fad1 	bl	800f0c4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800ab22:	4620      	mov	r0, r4
 800ab24:	b005      	add	sp, #20
 800ab26:	bd30      	pop	{r4, r5, pc}

0800ab28 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab28:	b530      	push	{r4, r5, lr}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800ab30:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab34:	9400      	str	r4, [sp, #0]
{
 800ab36:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab3a:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800ab3e:	f004 fa9b 	bl	800f078 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 800ab42:	2000      	movs	r0, #0
 800ab44:	b005      	add	sp, #20
 800ab46:	bd30      	pop	{r4, r5, pc}

0800ab48 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab48:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 800ab4a:	f004 faad 	bl	800f0a8 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 800ab4e:	2000      	movs	r0, #0
 800ab50:	bd08      	pop	{r3, pc}
 800ab52:	bf00      	nop

0800ab54 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab54:	b430      	push	{r4, r5}
 800ab56:	f500 7260 	add.w	r2, r0, #896	; 0x380
 800ab5a:	2300      	movs	r3, #0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab5c:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800ab60:	0424      	lsls	r4, r4, #16
 800ab62:	b2dd      	uxtb	r5, r3
 800ab64:	d506      	bpl.n	800ab74 <USBH_AllocPipe+0x20>
 800ab66:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 800ab68:	2b0b      	cmp	r3, #11
 800ab6a:	d1f7      	bne.n	800ab5c <USBH_AllocPipe+0x8>
 800ab6c:	25ff      	movs	r5, #255	; 0xff
}
 800ab6e:	4628      	mov	r0, r5
 800ab70:	bc30      	pop	{r4, r5}
 800ab72:	4770      	bx	lr
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ab74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ab78:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ab7c:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 800ab80:	4628      	mov	r0, r5
 800ab82:	bc30      	pop	{r4, r5}
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop

0800ab88 <USBH_FreePipe>:
  if (idx < 11U)
 800ab88:	290a      	cmp	r1, #10
 800ab8a:	d807      	bhi.n	800ab9c <USBH_FreePipe+0x14>
 800ab8c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 800ab90:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800ab94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ab98:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
}
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	4770      	bx	lr

0800aba0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aba0:	4b03      	ldr	r3, [pc, #12]	; (800abb0 <disk_status+0x10>)
 800aba2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800aba6:	4403      	add	r3, r0
 800aba8:	6852      	ldr	r2, [r2, #4]
 800abaa:	7a18      	ldrb	r0, [r3, #8]
 800abac:	6853      	ldr	r3, [r2, #4]
 800abae:	4718      	bx	r3
 800abb0:	200073a8 	.word	0x200073a8

0800abb4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <disk_initialize+0x1c>)
 800abb6:	5c1a      	ldrb	r2, [r3, r0]
 800abb8:	b942      	cbnz	r2, 800abcc <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abba:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 800abbe:	2101      	movs	r1, #1
 800abc0:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abc2:	6852      	ldr	r2, [r2, #4]
 800abc4:	4403      	add	r3, r0
 800abc6:	6812      	ldr	r2, [r2, #0]
 800abc8:	7a18      	ldrb	r0, [r3, #8]
 800abca:	4710      	bx	r2
  }
  return stat;
}
 800abcc:	2000      	movs	r0, #0
 800abce:	4770      	bx	lr
 800abd0:	200073a8 	.word	0x200073a8

0800abd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abd4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abd6:	4c05      	ldr	r4, [pc, #20]	; (800abec <disk_read+0x18>)
 800abd8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800abdc:	4404      	add	r4, r0
 800abde:	686d      	ldr	r5, [r5, #4]
 800abe0:	7a20      	ldrb	r0, [r4, #8]
 800abe2:	68ac      	ldr	r4, [r5, #8]
 800abe4:	46a4      	mov	ip, r4
  return res;
}
 800abe6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abe8:	4760      	bx	ip
 800abea:	bf00      	nop
 800abec:	200073a8 	.word	0x200073a8

0800abf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abf0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abf2:	4c05      	ldr	r4, [pc, #20]	; (800ac08 <disk_write+0x18>)
 800abf4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800abf8:	4404      	add	r4, r0
 800abfa:	686d      	ldr	r5, [r5, #4]
 800abfc:	7a20      	ldrb	r0, [r4, #8]
 800abfe:	68ec      	ldr	r4, [r5, #12]
 800ac00:	46a4      	mov	ip, r4
  return res;
}
 800ac02:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac04:	4760      	bx	ip
 800ac06:	bf00      	nop
 800ac08:	200073a8 	.word	0x200073a8

0800ac0c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac0c:	4b05      	ldr	r3, [pc, #20]	; (800ac24 <disk_ioctl+0x18>)
{
 800ac0e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac10:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800ac14:	4403      	add	r3, r0
 800ac16:	6864      	ldr	r4, [r4, #4]
 800ac18:	7a18      	ldrb	r0, [r3, #8]
 800ac1a:	6923      	ldr	r3, [r4, #16]
  return res;
}
 800ac1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac20:	4718      	bx	r3
 800ac22:	bf00      	nop
 800ac24:	200073a8 	.word	0x200073a8

0800ac28 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800ac28:	4a1e      	ldr	r2, [pc, #120]	; (800aca4 <chk_lock+0x7c>)
 800ac2a:	6813      	ldr	r3, [r2, #0]
{
 800ac2c:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d035      	beq.n	800ac9e <chk_lock+0x76>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac32:	6804      	ldr	r4, [r0, #0]
 800ac34:	429c      	cmp	r4, r3
 800ac36:	d00d      	beq.n	800ac54 <chk_lock+0x2c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac38:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
 800ac3a:	6913      	ldr	r3, [r2, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d02b      	beq.n	800ac98 <chk_lock+0x70>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac40:	6805      	ldr	r5, [r0, #0]
 800ac42:	42ab      	cmp	r3, r5
 800ac44:	d01a      	beq.n	800ac7c <chk_lock+0x54>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ac46:	bb3c      	cbnz	r4, 800ac98 <chk_lock+0x70>
 800ac48:	2902      	cmp	r1, #2
 800ac4a:	bf0c      	ite	eq
 800ac4c:	2000      	moveq	r0, #0
 800ac4e:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800ac50:	bc30      	pop	{r4, r5}
 800ac52:	4770      	bx	lr
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac54:	6854      	ldr	r4, [r2, #4]
 800ac56:	6883      	ldr	r3, [r0, #8]
 800ac58:	429c      	cmp	r4, r3
 800ac5a:	d1ed      	bne.n	800ac38 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800ac5c:	6894      	ldr	r4, [r2, #8]
 800ac5e:	6943      	ldr	r3, [r0, #20]
 800ac60:	429c      	cmp	r4, r3
 800ac62:	d1e9      	bne.n	800ac38 <chk_lock+0x10>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac64:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac66:	b9a1      	cbnz	r1, 800ac92 <chk_lock+0x6a>
 800ac68:	eb02 1203 	add.w	r2, r2, r3, lsl #4
}
 800ac6c:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac6e:	8993      	ldrh	r3, [r2, #12]
 800ac70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac74:	bf14      	ite	ne
 800ac76:	2000      	movne	r0, #0
 800ac78:	2010      	moveq	r0, #16
}
 800ac7a:	4770      	bx	lr
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac7c:	6955      	ldr	r5, [r2, #20]
 800ac7e:	6883      	ldr	r3, [r0, #8]
 800ac80:	429d      	cmp	r5, r3
 800ac82:	d1e0      	bne.n	800ac46 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800ac84:	6943      	ldr	r3, [r0, #20]
 800ac86:	6990      	ldr	r0, [r2, #24]
 800ac88:	4298      	cmp	r0, r3
 800ac8a:	d1dc      	bne.n	800ac46 <chk_lock+0x1e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac8c:	2301      	movs	r3, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	d0ea      	beq.n	800ac68 <chk_lock+0x40>
 800ac92:	2010      	movs	r0, #16
}
 800ac94:	bc30      	pop	{r4, r5}
 800ac96:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac98:	2000      	movs	r0, #0
}
 800ac9a:	bc30      	pop	{r4, r5}
 800ac9c:	4770      	bx	lr
			be = 1;
 800ac9e:	2401      	movs	r4, #1
 800aca0:	e7cb      	b.n	800ac3a <chk_lock+0x12>
 800aca2:	bf00      	nop
 800aca4:	20007384 	.word	0x20007384

0800aca8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800aca8:	4b24      	ldr	r3, [pc, #144]	; (800ad3c <inc_lock+0x94>)
{
 800acaa:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	6804      	ldr	r4, [r0, #0]
 800acb0:	4294      	cmp	r4, r2
 800acb2:	d01a      	beq.n	800acea <inc_lock+0x42>
 800acb4:	691d      	ldr	r5, [r3, #16]
 800acb6:	42a5      	cmp	r5, r4
 800acb8:	d006      	beq.n	800acc8 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acba:	b302      	cbz	r2, 800acfe <inc_lock+0x56>
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	d033      	beq.n	800ad28 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800acc0:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800acc2:	4630      	mov	r0, r6
 800acc4:	bcf0      	pop	{r4, r5, r6, r7}
 800acc6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800acc8:	695f      	ldr	r7, [r3, #20]
 800acca:	6886      	ldr	r6, [r0, #8]
 800accc:	42b7      	cmp	r7, r6
 800acce:	d1f4      	bne.n	800acba <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800acd0:	699f      	ldr	r7, [r3, #24]
 800acd2:	6946      	ldr	r6, [r0, #20]
 800acd4:	42b7      	cmp	r7, r6
 800acd6:	d1f0      	bne.n	800acba <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acd8:	2201      	movs	r2, #1
 800acda:	0115      	lsls	r5, r2, #4
 800acdc:	1958      	adds	r0, r3, r5
 800acde:	8980      	ldrh	r0, [r0, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ace0:	bb29      	cbnz	r1, 800ad2e <inc_lock+0x86>
 800ace2:	1c41      	adds	r1, r0, #1
 800ace4:	b289      	uxth	r1, r1
 800ace6:	1c56      	adds	r6, r2, #1
 800ace8:	e019      	b.n	800ad1e <inc_lock+0x76>
		if (Files[i].fs == dp->obj.fs &&
 800acea:	6886      	ldr	r6, [r0, #8]
 800acec:	685d      	ldr	r5, [r3, #4]
 800acee:	42ae      	cmp	r6, r5
 800acf0:	d1e0      	bne.n	800acb4 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800acf2:	6946      	ldr	r6, [r0, #20]
 800acf4:	689d      	ldr	r5, [r3, #8]
 800acf6:	42ae      	cmp	r6, r5
 800acf8:	d1dc      	bne.n	800acb4 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acfa:	2200      	movs	r2, #0
 800acfc:	e7ed      	b.n	800acda <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acfe:	2601      	movs	r6, #1
		Files[i].fs = dp->obj.fs;
 800ad00:	0115      	lsls	r5, r2, #4
		Files[i].clu = dp->obj.sclust;
 800ad02:	6887      	ldr	r7, [r0, #8]
		Files[i].ofs = dp->dptr;
 800ad04:	6940      	ldr	r0, [r0, #20]
		Files[i].fs = dp->obj.fs;
 800ad06:	515c      	str	r4, [r3, r5]
 800ad08:	195a      	adds	r2, r3, r5
		Files[i].ofs = dp->dptr;
 800ad0a:	e9c2 7001 	strd	r7, r0, [r2, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad0e:	2900      	cmp	r1, #0
		Files[i].ctr = 0;
 800ad10:	f04f 0100 	mov.w	r1, #0
 800ad14:	8191      	strh	r1, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad16:	bf14      	ite	ne
 800ad18:	f44f 7180 	movne.w	r1, #256	; 0x100
 800ad1c:	2101      	moveq	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad1e:	442b      	add	r3, r5
}
 800ad20:	4630      	mov	r0, r6
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad22:	8199      	strh	r1, [r3, #12]
}
 800ad24:	bcf0      	pop	{r4, r5, r6, r7}
 800ad26:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad28:	2602      	movs	r6, #2
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	e7e8      	b.n	800ad00 <inc_lock+0x58>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d1c6      	bne.n	800acc0 <inc_lock+0x18>
 800ad32:	1c56      	adds	r6, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad34:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad38:	e7f1      	b.n	800ad1e <inc_lock+0x76>
 800ad3a:	bf00      	nop
 800ad3c:	20007384 	.word	0x20007384

0800ad40 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad40:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad42:	6804      	ldr	r4, [r0, #0]
 800ad44:	b1f4      	cbz	r4, 800ad84 <get_ldnumber+0x44>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad46:	7825      	ldrb	r5, [r4, #0]
 800ad48:	2d1f      	cmp	r5, #31
 800ad4a:	d90b      	bls.n	800ad64 <get_ldnumber+0x24>
 800ad4c:	2d3a      	cmp	r5, #58	; 0x3a
 800ad4e:	d019      	beq.n	800ad84 <get_ldnumber+0x44>
 800ad50:	4623      	mov	r3, r4
 800ad52:	e002      	b.n	800ad5a <get_ldnumber+0x1a>
 800ad54:	2a3a      	cmp	r2, #58	; 0x3a
 800ad56:	d009      	beq.n	800ad6c <get_ldnumber+0x2c>
 800ad58:	460b      	mov	r3, r1
 800ad5a:	785a      	ldrb	r2, [r3, #1]
 800ad5c:	2a1f      	cmp	r2, #31
 800ad5e:	f103 0101 	add.w	r1, r3, #1
 800ad62:	d8f7      	bhi.n	800ad54 <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad64:	2200      	movs	r2, #0
#endif
	}
	return vol;
}
 800ad66:	4610      	mov	r0, r2
 800ad68:	bc30      	pop	{r4, r5}
 800ad6a:	4770      	bx	lr
			i = *tp++ - '0';
 800ad6c:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad6e:	42a1      	cmp	r1, r4
			i = *tp++ - '0';
 800ad70:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad74:	d106      	bne.n	800ad84 <get_ldnumber+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad76:	2d30      	cmp	r5, #48	; 0x30
 800ad78:	d104      	bne.n	800ad84 <get_ldnumber+0x44>
					*path = ++tt;
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	6003      	str	r3, [r0, #0]
}
 800ad7e:	bc30      	pop	{r4, r5}
 800ad80:	4610      	mov	r0, r2
 800ad82:	4770      	bx	lr
	int vol = -1;
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
}
 800ad88:	4610      	mov	r0, r2
 800ad8a:	bc30      	pop	{r4, r5}
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop

0800ad90 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad90:	440a      	add	r2, r1
 800ad92:	3801      	subs	r0, #1
			*d++ = *s++;
 800ad94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad98:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800ad9c:	4291      	cmp	r1, r2
 800ad9e:	d1f9      	bne.n	800ad94 <mem_cpy.part.0+0x4>
}
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop

0800ada4 <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800ada6:	6b85      	ldr	r5, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ada8:	f100 073c 	add.w	r7, r0, #60	; 0x3c
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800adac:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800adae:	462a      	mov	r2, r5
 800adb0:	7840      	ldrb	r0, [r0, #1]
 800adb2:	4639      	mov	r1, r7
 800adb4:	2301      	movs	r3, #1
 800adb6:	f7ff ff1b 	bl	800abf0 <disk_write>
 800adba:	b9b0      	cbnz	r0, 800adea <sync_window.part.5+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800adbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800adbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 800adc0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800adc2:	1aaa      	subs	r2, r5, r2
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d20e      	bcs.n	800ade6 <sync_window.part.5+0x42>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800adc8:	78a6      	ldrb	r6, [r4, #2]
 800adca:	2e01      	cmp	r6, #1
 800adcc:	d801      	bhi.n	800add2 <sync_window.part.5+0x2e>
 800adce:	e00a      	b.n	800ade6 <sync_window.part.5+0x42>
 800add0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					disk_write(fs->drv, fs->win, wsect, 1);
 800add2:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800add4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800add6:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800add8:	462a      	mov	r2, r5
 800adda:	2301      	movs	r3, #1
 800addc:	4639      	mov	r1, r7
 800adde:	f7ff ff07 	bl	800abf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ade2:	2e01      	cmp	r6, #1
 800ade4:	d1f4      	bne.n	800add0 <sync_window.part.5+0x2c>
	FRESULT res = FR_OK;
 800ade6:	2000      	movs	r0, #0
}
 800ade8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 800adea:	2001      	movs	r0, #1
}
 800adec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adee:	bf00      	nop

0800adf0 <sync_fs>:
{
 800adf0:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800adf2:	78c3      	ldrb	r3, [r0, #3]
{
 800adf4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800adf6:	b95b      	cbnz	r3, 800ae10 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800adf8:	7823      	ldrb	r3, [r4, #0]
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d00f      	beq.n	800ae1e <sync_fs+0x2e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800adfe:	2200      	movs	r2, #0
 800ae00:	7860      	ldrb	r0, [r4, #1]
 800ae02:	4611      	mov	r1, r2
 800ae04:	f7ff ff02 	bl	800ac0c <disk_ioctl>
 800ae08:	3000      	adds	r0, #0
 800ae0a:	bf18      	it	ne
 800ae0c:	2001      	movne	r0, #1
}
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	f7ff ffc8 	bl	800ada4 <sync_window.part.5>
	if (res == FR_OK) {
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d1fa      	bne.n	800ae0e <sync_fs+0x1e>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ae18:	7823      	ldrb	r3, [r4, #0]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d1ef      	bne.n	800adfe <sync_fs+0xe>
 800ae1e:	7923      	ldrb	r3, [r4, #4]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d1ec      	bne.n	800adfe <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800ae24:	89a2      	ldrh	r2, [r4, #12]
 800ae26:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ae2a:	440a      	add	r2, r1
	BYTE *d = (BYTE*)dst;
 800ae2c:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
 800ae2e:	2500      	movs	r5, #0
 800ae30:	f803 5b01 	strb.w	r5, [r3], #1
	} while (--cnt);
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d1fb      	bne.n	800ae30 <sync_fs+0x40>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ae38:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae3c:	0a06      	lsrs	r6, r0, #8
 800ae3e:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
	*ptr++ = (BYTE)val; val >>= 8;
 800ae42:	f884 6225 	strb.w	r6, [r4, #549]	; 0x225
 800ae46:	0c06      	lsrs	r6, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ae48:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800ae4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 800ae4c:	f884 6226 	strb.w	r6, [r4, #550]	; 0x226
	*ptr++ = (BYTE)val;
 800ae50:	f884 0227 	strb.w	r0, [r4, #551]	; 0x227
	*ptr++ = (BYTE)val; val >>= 8;
 800ae54:	0a1e      	lsrs	r6, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800ae56:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ae58:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
	*ptr++ = (BYTE)val; val >>= 8;
 800ae5c:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800ae5e:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
	*ptr++ = (BYTE)val; val >>= 8;
 800ae62:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	*ptr++ = (BYTE)val; val >>= 8;
 800ae66:	2655      	movs	r6, #85	; 0x55
	*ptr++ = (BYTE)val;
 800ae68:	20aa      	movs	r0, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800ae6a:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
	*ptr++ = (BYTE)val; val >>= 8;
 800ae6e:	2352      	movs	r3, #82	; 0x52
			fs->winsect = fs->volbase + 1;
 800ae70:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ae72:	f884 623a 	strb.w	r6, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
 800ae76:	f884 023b 	strb.w	r0, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
 800ae7a:	2661      	movs	r6, #97	; 0x61
	*ptr++ = (BYTE)val;
 800ae7c:	2041      	movs	r0, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800ae7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 800ae82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
 800ae86:	2372      	movs	r3, #114	; 0x72
	*ptr++ = (BYTE)val;
 800ae88:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 800ae8c:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val; val >>= 8;
 800ae90:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 800ae94:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
			fs->winsect = fs->volbase + 1;
 800ae98:	63a2      	str	r2, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 800ae9a:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
	*ptr++ = (BYTE)val;
 800ae9e:	f884 6223 	strb.w	r6, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aea2:	2301      	movs	r3, #1
 800aea4:	7860      	ldrb	r0, [r4, #1]
 800aea6:	f7ff fea3 	bl	800abf0 <disk_write>
			fs->fsi_flag = 0;
 800aeaa:	7125      	strb	r5, [r4, #4]
 800aeac:	e7a7      	b.n	800adfe <sync_fs+0xe>
 800aeae:	bf00      	nop

0800aeb0 <move_window.part.6>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800aeb0:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aeb2:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aeb8:	b113      	cbz	r3, 800aec0 <move_window.part.6+0x10>
 800aeba:	f7ff ff73 	bl	800ada4 <sync_window.part.5>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aebe:	b970      	cbnz	r0, 800aede <move_window.part.6+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aec0:	462a      	mov	r2, r5
 800aec2:	2301      	movs	r3, #1
 800aec4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800aec8:	7860      	ldrb	r0, [r4, #1]
 800aeca:	f7ff fe83 	bl	800abd4 <disk_read>
				res = FR_DISK_ERR;
 800aece:	2800      	cmp	r0, #0
 800aed0:	bf18      	it	ne
 800aed2:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800aed6:	63a5      	str	r5, [r4, #56]	; 0x38
				res = FR_DISK_ERR;
 800aed8:	bf0c      	ite	eq
 800aeda:	2000      	moveq	r0, #0
 800aedc:	2001      	movne	r0, #1
}
 800aede:	bd38      	pop	{r3, r4, r5, pc}

0800aee0 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aee0:	f04f 33ff 	mov.w	r3, #4294967295
 800aee4:	2200      	movs	r2, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800aee6:	4299      	cmp	r1, r3
{
 800aee8:	b510      	push	{r4, lr}
 800aeea:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aeec:	70c2      	strb	r2, [r0, #3]
 800aeee:	6383      	str	r3, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800aef0:	d134      	bne.n	800af5c <check_fs+0x7c>
	rv = rv << 8 | ptr[0];
 800aef2:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 800aef6:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aefa:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800aefe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af02:	4293      	cmp	r3, r2
 800af04:	d128      	bne.n	800af58 <check_fs+0x78>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af06:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800af0a:	2be9      	cmp	r3, #233	; 0xe9
 800af0c:	d005      	beq.n	800af1a <check_fs+0x3a>
 800af0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af10:	4a17      	ldr	r2, [pc, #92]	; (800af70 <check_fs+0x90>)
 800af12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800af16:	4293      	cmp	r3, r2
 800af18:	d126      	bne.n	800af68 <check_fs+0x88>
	rv = rv << 8 | ptr[2];
 800af1a:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 800af1e:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 800af22:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af26:	4913      	ldr	r1, [pc, #76]	; (800af74 <check_fs+0x94>)
	rv = rv << 8 | ptr[1];
 800af28:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800af2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af34:	428b      	cmp	r3, r1
 800af36:	d019      	beq.n	800af6c <check_fs+0x8c>
	rv = rv << 8 | ptr[2];
 800af38:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 800af3c:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 800af40:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af44:	4a0c      	ldr	r2, [pc, #48]	; (800af78 <check_fs+0x98>)
	rv = rv << 8 | ptr[1];
 800af46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800af4a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af4e:	4290      	cmp	r0, r2
 800af50:	bf14      	ite	ne
 800af52:	2002      	movne	r0, #2
 800af54:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800af56:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af58:	2003      	movs	r0, #3
}
 800af5a:	bd10      	pop	{r4, pc}
 800af5c:	f7ff ffa8 	bl	800aeb0 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af60:	2800      	cmp	r0, #0
 800af62:	d0c6      	beq.n	800aef2 <check_fs+0x12>
 800af64:	2004      	movs	r0, #4
}
 800af66:	bd10      	pop	{r4, pc}
	return 2;
 800af68:	2002      	movs	r0, #2
}
 800af6a:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af6c:	2000      	movs	r0, #0
}
 800af6e:	bd10      	pop	{r4, pc}
 800af70:	009000eb 	.word	0x009000eb
 800af74:	00544146 	.word	0x00544146
 800af78:	33544146 	.word	0x33544146

0800af7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af80:	2300      	movs	r3, #0
{
 800af82:	b085      	sub	sp, #20
	*rfs = 0;
 800af84:	600b      	str	r3, [r1, #0]
{
 800af86:	460f      	mov	r7, r1
 800af88:	4614      	mov	r4, r2
	vol = get_ldnumber(path);
 800af8a:	f7ff fed9 	bl	800ad40 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800af8e:	1e06      	subs	r6, r0, #0
 800af90:	f2c0 80fa 	blt.w	800b188 <find_volume+0x20c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af94:	4bbd      	ldr	r3, [pc, #756]	; (800b28c <find_volume+0x310>)
 800af96:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	f000 80f0 	beq.w	800b180 <find_volume+0x204>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800afa0:	6968      	ldr	r0, [r5, #20]
 800afa2:	f002 f8b3 	bl	800d10c <ff_req_grant>
 800afa6:	b918      	cbnz	r0, 800afb0 <find_volume+0x34>

	ENTER_FF(fs);						/* Lock the volume */
 800afa8:	200f      	movs	r0, #15
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800afaa:	b005      	add	sp, #20
 800afac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	*rfs = fs;							/* Return pointer to the file system object */
 800afb0:	603d      	str	r5, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afb2:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800afb4:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afb8:	b163      	cbz	r3, 800afd4 <find_volume+0x58>
		stat = disk_status(fs->drv);
 800afba:	7868      	ldrb	r0, [r5, #1]
 800afbc:	f7ff fdf0 	bl	800aba0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afc0:	07c1      	lsls	r1, r0, #31
 800afc2:	d407      	bmi.n	800afd4 <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afc4:	2c00      	cmp	r4, #0
 800afc6:	f000 810a 	beq.w	800b1de <find_volume+0x262>
 800afca:	f010 0004 	ands.w	r0, r0, #4
 800afce:	d0ec      	beq.n	800afaa <find_volume+0x2e>
				return FR_WRITE_PROTECTED;
 800afd0:	200a      	movs	r0, #10
 800afd2:	e7ea      	b.n	800afaa <find_volume+0x2e>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afd4:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800afd6:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afd8:	7068      	strb	r0, [r5, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 800afda:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800afdc:	f7ff fdea 	bl	800abb4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800afe0:	07c2      	lsls	r2, r0, #31
 800afe2:	f100 80fa 	bmi.w	800b1da <find_volume+0x25e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800afe6:	b10c      	cbz	r4, 800afec <find_volume+0x70>
 800afe8:	0743      	lsls	r3, r0, #29
 800afea:	d4f1      	bmi.n	800afd0 <find_volume+0x54>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800afec:	f105 020c 	add.w	r2, r5, #12
 800aff0:	2102      	movs	r1, #2
 800aff2:	7868      	ldrb	r0, [r5, #1]
 800aff4:	f7ff fe0a 	bl	800ac0c <disk_ioctl>
 800aff8:	2800      	cmp	r0, #0
 800affa:	f040 80ea 	bne.w	800b1d2 <find_volume+0x256>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800affe:	89ab      	ldrh	r3, [r5, #12]
 800b000:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800b004:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800b008:	f200 80e3 	bhi.w	800b1d2 <find_volume+0x256>
 800b00c:	1e5a      	subs	r2, r3, #1
 800b00e:	ea12 0403 	ands.w	r4, r2, r3
 800b012:	f040 80de 	bne.w	800b1d2 <find_volume+0x256>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b016:	4621      	mov	r1, r4
 800b018:	4628      	mov	r0, r5
 800b01a:	f7ff ff61 	bl	800aee0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b01e:	2802      	cmp	r0, #2
 800b020:	f000 80b6 	beq.w	800b190 <find_volume+0x214>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b024:	2804      	cmp	r0, #4
 800b026:	f000 80d4 	beq.w	800b1d2 <find_volume+0x256>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b02a:	2801      	cmp	r0, #1
 800b02c:	f200 80d9 	bhi.w	800b1e2 <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b030:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800b034:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b038:	89a9      	ldrh	r1, [r5, #12]
 800b03a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b03e:	4299      	cmp	r1, r3
 800b040:	f040 80cf 	bne.w	800b1e2 <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b044:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
 800b048:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b04c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800b050:	d109      	bne.n	800b066 <find_volume+0xea>
	rv = rv << 8 | ptr[2];
 800b052:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 800b056:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 800b05a:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 800b05e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800b062:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b066:	f895 c04c 	ldrb.w	ip, [r5, #76]	; 0x4c
		fs->fsize = fasize;
 800b06a:	626b      	str	r3, [r5, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b06c:	f10c 32ff 	add.w	r2, ip, #4294967295
 800b070:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b072:	f885 c002 	strb.w	ip, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b076:	f200 80b4 	bhi.w	800b1e2 <find_volume+0x266>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b07a:	f895 e049 	ldrb.w	lr, [r5, #73]	; 0x49
 800b07e:	fa1f f28e 	uxth.w	r2, lr
 800b082:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b084:	2a00      	cmp	r2, #0
 800b086:	f000 80ac 	beq.w	800b1e2 <find_volume+0x266>
 800b08a:	f10e 32ff 	add.w	r2, lr, #4294967295
 800b08e:	ea12 0f0e 	tst.w	r2, lr
 800b092:	f040 80a6 	bne.w	800b1e2 <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b096:	f895 004e 	ldrb.w	r0, [r5, #78]	; 0x4e
 800b09a:	f895 604d 	ldrb.w	r6, [r5, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b09e:	094a      	lsrs	r2, r1, #5
	rv = rv << 8 | ptr[0];
 800b0a0:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0a4:	fbb6 f9f2 	udiv	r9, r6, r2
 800b0a8:	fb02 6219 	mls	r2, r2, r9, r6
 800b0ac:	b292      	uxth	r2, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0ae:	812e      	strh	r6, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	f040 8096 	bne.w	800b1e2 <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b0b6:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
 800b0ba:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0be:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 800b0c2:	d109      	bne.n	800b0d8 <find_volume+0x15c>
	rv = rv << 8 | ptr[2];
 800b0c4:	f8b5 705e 	ldrh.w	r7, [r5, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 800b0c8:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 800b0cc:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 800b0d0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800b0d4:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800b0d8:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 800b0dc:	f895 704a 	ldrb.w	r7, [r5, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0e0:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
 800b0e4:	d07d      	beq.n	800b1e2 <find_volume+0x266>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b0e6:	fb03 f80c 	mul.w	r8, r3, ip
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0ea:	eb09 0007 	add.w	r0, r9, r7
 800b0ee:	eb00 0c08 	add.w	ip, r0, r8
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b0f2:	4562      	cmp	r2, ip
 800b0f4:	d375      	bcc.n	800b1e2 <find_volume+0x266>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b0f6:	eba2 020c 	sub.w	r2, r2, ip
 800b0fa:	fbb2 f2fe 	udiv	r2, r2, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	d06f      	beq.n	800b1e2 <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b102:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800b106:	4282      	cmp	r2, r0
 800b108:	d874      	bhi.n	800b1f4 <find_volume+0x278>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b10a:	f640 7ef5 	movw	lr, #4085	; 0xff5
 800b10e:	4572      	cmp	r2, lr
 800b110:	eb07 0004 	add.w	r0, r7, r4
 800b114:	44a4      	add	ip, r4
 800b116:	f102 0702 	add.w	r7, r2, #2
 800b11a:	f200 809e 	bhi.w	800b25a <find_volume+0x2de>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b11e:	622f      	str	r7, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b120:	e9c5 400a 	strd	r4, r0, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b124:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b128:	2e00      	cmp	r6, #0
 800b12a:	d05a      	beq.n	800b1e2 <find_volume+0x266>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b12c:	f007 0201 	and.w	r2, r7, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b130:	1e4c      	subs	r4, r1, #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b132:	eb07 0747 	add.w	r7, r7, r7, lsl #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b136:	4422      	add	r2, r4
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b138:	4440      	add	r0, r8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b13a:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 800b13e:	fbb2 f1f1 	udiv	r1, r2, r1
 800b142:	428b      	cmp	r3, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b144:	6328      	str	r0, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b146:	d34c      	bcc.n	800b1e2 <find_volume+0x266>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b148:	f04f 33ff 	mov.w	r3, #4294967295
 800b14c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fs->fsi_flag = 0x80;
 800b150:	2280      	movs	r2, #128	; 0x80
 800b152:	712a      	strb	r2, [r5, #4]
 800b154:	2201      	movs	r2, #1
	fs->id = ++Fsid;		/* File system mount ID */
 800b156:	484e      	ldr	r0, [pc, #312]	; (800b290 <find_volume+0x314>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b158:	494e      	ldr	r1, [pc, #312]	; (800b294 <find_volume+0x318>)
	fs->id = ++Fsid;		/* File system mount ID */
 800b15a:	8803      	ldrh	r3, [r0, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b15c:	680c      	ldr	r4, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 800b15e:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b160:	3301      	adds	r3, #1
 800b162:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b164:	42a5      	cmp	r5, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800b166:	8003      	strh	r3, [r0, #0]
 800b168:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b16a:	bf04      	itt	eq
 800b16c:	2300      	moveq	r3, #0
 800b16e:	600b      	streq	r3, [r1, #0]
 800b170:	690b      	ldr	r3, [r1, #16]
 800b172:	429d      	cmp	r5, r3
 800b174:	f04f 0000 	mov.w	r0, #0
 800b178:	f47f af17 	bne.w	800afaa <find_volume+0x2e>
 800b17c:	6108      	str	r0, [r1, #16]
 800b17e:	e714      	b.n	800afaa <find_volume+0x2e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b180:	200c      	movs	r0, #12
}
 800b182:	b005      	add	sp, #20
 800b184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800b188:	200b      	movs	r0, #11
}
 800b18a:	b005      	add	sp, #20
 800b18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b190:	466e      	mov	r6, sp
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b192:	4631      	mov	r1, r6
 800b194:	f505 7301 	add.w	r3, r5, #516	; 0x204
 800b198:	f505 7411 	add.w	r4, r5, #580	; 0x244
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b19c:	f813 2c06 	ldrb.w	r2, [r3, #-6]
 800b1a0:	b142      	cbz	r2, 800b1b4 <find_volume+0x238>
	rv = rv << 8 | ptr[2];
 800b1a2:	881f      	ldrh	r7, [r3, #0]
	rv = rv << 8 | ptr[1];
 800b1a4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
	rv = rv << 8 | ptr[0];
 800b1a8:	f813 2c02 	ldrb.w	r2, [r3, #-2]
	rv = rv << 8 | ptr[1];
 800b1ac:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800b1b0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b1b4:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1b6:	42a3      	cmp	r3, r4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1b8:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1bc:	d1ee      	bne.n	800b19c <find_volume+0x220>
 800b1be:	f106 0710 	add.w	r7, r6, #16
			bsect = br[i];
 800b1c2:	f856 4b04 	ldr.w	r4, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1c6:	b974      	cbnz	r4, 800b1e6 <find_volume+0x26a>
 800b1c8:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1ca:	42b7      	cmp	r7, r6
 800b1cc:	d1f9      	bne.n	800b1c2 <find_volume+0x246>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1ce:	2804      	cmp	r0, #4
 800b1d0:	d107      	bne.n	800b1e2 <find_volume+0x266>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b1d2:	2001      	movs	r0, #1
}
 800b1d4:	b005      	add	sp, #20
 800b1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b1da:	2003      	movs	r0, #3
 800b1dc:	e6e5      	b.n	800afaa <find_volume+0x2e>
			return FR_OK;				/* The file system object is valid */
 800b1de:	4620      	mov	r0, r4
 800b1e0:	e6e3      	b.n	800afaa <find_volume+0x2e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b1e2:	200d      	movs	r0, #13
 800b1e4:	e6e1      	b.n	800afaa <find_volume+0x2e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f7ff fe79 	bl	800aee0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1ee:	2801      	cmp	r0, #1
 800b1f0:	d8eb      	bhi.n	800b1ca <find_volume+0x24e>
 800b1f2:	e71d      	b.n	800b030 <find_volume+0xb4>
	rv = rv << 8 | ptr[0];
 800b1f4:	f895 8067 	ldrb.w	r8, [r5, #103]	; 0x67
 800b1f8:	f895 e066 	ldrb.w	lr, [r5, #102]	; 0x66
		fs->volbase = bsect;							/* Volume start sector */
 800b1fc:	62ac      	str	r4, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b1fe:	eb0c 0004 	add.w	r0, ip, r4
 800b202:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b204:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800b206:	6368      	str	r0, [r5, #52]	; 0x34
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b208:	ea5e 2008 	orrs.w	r0, lr, r8, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b20c:	622a      	str	r2, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b20e:	62ef      	str	r7, [r5, #44]	; 0x2c
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b210:	d1e7      	bne.n	800b1e2 <find_volume+0x266>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b212:	2e00      	cmp	r6, #0
 800b214:	d1e5      	bne.n	800b1e2 <find_volume+0x266>
	rv = rv << 8 | ptr[2];
 800b216:	f8b5 706a 	ldrh.w	r7, [r5, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800b21a:	f895 0069 	ldrb.w	r0, [r5, #105]	; 0x69
	rv = rv << 8 | ptr[0];
 800b21e:	f895 6068 	ldrb.w	r6, [r5, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800b222:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800b226:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b22a:	1e48      	subs	r0, r1, #1
 800b22c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b230:	fbb2 f1f1 	udiv	r1, r2, r1
 800b234:	428b      	cmp	r3, r1
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b236:	632e      	str	r6, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b238:	d3d3      	bcc.n	800b1e2 <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b23a:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
 800b23e:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 800b242:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b246:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800b24a:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b24c:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b24e:	e9c5 2206 	strd	r2, r2, [r5, #24]
		fs->fsi_flag = 0x80;
 800b252:	7129      	strb	r1, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b254:	d020      	beq.n	800b298 <find_volume+0x31c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b256:	2203      	movs	r2, #3
 800b258:	e77d      	b.n	800b156 <find_volume+0x1da>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b25a:	622f      	str	r7, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b25c:	e9c5 400a 	strd	r4, r0, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b260:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b264:	2e00      	cmp	r6, #0
 800b266:	d0bc      	beq.n	800b1e2 <find_volume+0x266>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b268:	1e4a      	subs	r2, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b26a:	4440      	add	r0, r8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b26c:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 800b270:	fbb2 f1f1 	udiv	r1, r2, r1
 800b274:	4299      	cmp	r1, r3
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b276:	6328      	str	r0, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b278:	d8b3      	bhi.n	800b1e2 <find_volume+0x266>
		fs->fsi_flag = 0x80;
 800b27a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b280:	712a      	strb	r2, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b282:	e9c5 3306 	strd	r3, r3, [r5, #24]
 800b286:	2202      	movs	r2, #2
 800b288:	e765      	b.n	800b156 <find_volume+0x1da>
 800b28a:	bf00      	nop
 800b28c:	20007380 	.word	0x20007380
 800b290:	200073a4 	.word	0x200073a4
 800b294:	20007384 	.word	0x20007384
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b298:	6bab      	ldr	r3, [r5, #56]	; 0x38
			&& move_window(fs, bsect + 1) == FR_OK)
 800b29a:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b29c:	4299      	cmp	r1, r3
 800b29e:	d13f      	bne.n	800b320 <find_volume+0x3a4>
	rv = rv << 8 | ptr[0];
 800b2a0:	f895 223b 	ldrb.w	r2, [r5, #571]	; 0x23b
 800b2a4:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
 800b2a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2ac:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800b2b0:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2b2:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 800b2b4:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2b6:	d1ce      	bne.n	800b256 <find_volume+0x2da>
	rv = rv << 8 | ptr[2];
 800b2b8:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
	rv = rv << 8 | ptr[1];
 800b2ba:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
	rv = rv << 8 | ptr[0];
 800b2be:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2c2:	491a      	ldr	r1, [pc, #104]	; (800b32c <find_volume+0x3b0>)
	rv = rv << 8 | ptr[1];
 800b2c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800b2c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	d1c2      	bne.n	800b256 <find_volume+0x2da>
	rv = rv << 8 | ptr[2];
 800b2d0:	f8b5 0222 	ldrh.w	r0, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 800b2d4:	f895 2221 	ldrb.w	r2, [r5, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 800b2d8:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2dc:	f101 51ff 	add.w	r1, r1, #534773760	; 0x1fe00000
 800b2e0:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
	rv = rv << 8 | ptr[1];
 800b2e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2e8:	3120      	adds	r1, #32
	rv = rv << 8 | ptr[0];
 800b2ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2ee:	428b      	cmp	r3, r1
 800b2f0:	d1b1      	bne.n	800b256 <find_volume+0x2da>
	rv = rv << 8 | ptr[2];
 800b2f2:	f8b5 6226 	ldrh.w	r6, [r5, #550]	; 0x226
	rv = rv << 8 | ptr[1];
 800b2f6:	f895 0225 	ldrb.w	r0, [r5, #549]	; 0x225
	rv = rv << 8 | ptr[2];
 800b2fa:	f8b5 422a 	ldrh.w	r4, [r5, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 800b2fe:	f895 1229 	ldrb.w	r1, [r5, #553]	; 0x229
	rv = rv << 8 | ptr[0];
 800b302:	f895 2224 	ldrb.w	r2, [r5, #548]	; 0x224
 800b306:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
	rv = rv << 8 | ptr[1];
 800b30a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800b30e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	rv = rv << 8 | ptr[0];
 800b312:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b316:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b31a:	e9c5 3206 	strd	r3, r2, [r5, #24]
 800b31e:	e79a      	b.n	800b256 <find_volume+0x2da>
 800b320:	4628      	mov	r0, r5
 800b322:	f7ff fdc5 	bl	800aeb0 <move_window.part.6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b326:	2800      	cmp	r0, #0
 800b328:	d0ba      	beq.n	800b2a0 <find_volume+0x324>
 800b32a:	e794      	b.n	800b256 <find_volume+0x2da>
 800b32c:	41615252 	.word	0x41615252

0800b330 <put_fat.part.8>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 800b334:	7803      	ldrb	r3, [r0, #0]
 800b336:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800b33e:	d069      	beq.n	800b414 <put_fat.part.8+0xe4>
 800b340:	2b03      	cmp	r3, #3
 800b342:	d043      	beq.n	800b3cc <put_fat.part.8+0x9c>
 800b344:	2b01      	cmp	r3, #1
 800b346:	d002      	beq.n	800b34e <put_fat.part.8+0x1e>
	FRESULT res = FR_INT_ERR;
 800b348:	2002      	movs	r0, #2
}
 800b34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b34e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b350:	6b82      	ldr	r2, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b352:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800b356:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b35a:	fbb7 f3fc 	udiv	r3, r7, ip
 800b35e:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b360:	4291      	cmp	r1, r2
 800b362:	d176      	bne.n	800b452 <put_fat.part.8+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b364:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 800b368:	fb0c 7313 	mls	r3, ip, r3, r7
 800b36c:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 800b370:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b374:	d07e      	beq.n	800b474 <put_fat.part.8+0x144>
 800b376:	f818 1003 	ldrb.w	r1, [r8, r3]
 800b37a:	0132      	lsls	r2, r6, #4
 800b37c:	f001 010f 	and.w	r1, r1, #15
 800b380:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b384:	430a      	orrs	r2, r1
 800b386:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b38a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b38c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b38e:	89a0      	ldrh	r0, [r4, #12]
 800b390:	fbb7 f3f0 	udiv	r3, r7, r0
 800b394:	4419      	add	r1, r3
			fs->wflag = 1;
 800b396:	f04f 0c01 	mov.w	ip, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b39a:	4291      	cmp	r1, r2
			fs->wflag = 1;
 800b39c:	f884 c003 	strb.w	ip, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3a0:	d007      	beq.n	800b3b2 <put_fat.part.8+0x82>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f7ff fd84 	bl	800aeb0 <move_window.part.6>
			if (res != FR_OK) break;
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1ce      	bne.n	800b34a <put_fat.part.8+0x1a>
 800b3ac:	89a0      	ldrh	r0, [r4, #12]
 800b3ae:	fbb7 f3f0 	udiv	r3, r7, r0
			p = fs->win + bc % SS(fs);
 800b3b2:	fb00 7713 	mls	r7, r0, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	d05e      	beq.n	800b478 <put_fat.part.8+0x148>
 800b3ba:	f3c6 1607 	ubfx	r6, r6, #4, #8
			fs->wflag = 1;
 800b3be:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b3c0:	f808 6007 	strb.w	r6, [r8, r7]
			fs->wflag = 1;
 800b3c4:	70e3      	strb	r3, [r4, #3]
 800b3c6:	2000      	movs	r0, #0
}
 800b3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3cc:	8987      	ldrh	r7, [r0, #12]
 800b3ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3d2:	08b9      	lsrs	r1, r7, #2
 800b3d4:	fbb5 f1f1 	udiv	r1, r5, r1
 800b3d8:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	d143      	bne.n	800b466 <put_fat.part.8+0x136>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3de:	00ad      	lsls	r5, r5, #2
 800b3e0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b3e4:	fbb5 f3f7 	udiv	r3, r5, r7
 800b3e8:	fb07 5513 	mls	r5, r7, r3, r5
 800b3ec:	194b      	adds	r3, r1, r5
 800b3ee:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[2];
 800b3f2:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[0];
 800b3f4:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3f6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b3fa:	4332      	orrs	r2, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b3fc:	554a      	strb	r2, [r1, r5]
 800b3fe:	0a16      	lsrs	r6, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800b400:	0c10      	lsrs	r0, r2, #16
			fs->wflag = 1;
 800b402:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b404:	0e12      	lsrs	r2, r2, #24
 800b406:	7098      	strb	r0, [r3, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b408:	705e      	strb	r6, [r3, #1]
	*ptr++ = (BYTE)val;
 800b40a:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
 800b40c:	70e1      	strb	r1, [r4, #3]
 800b40e:	2000      	movs	r0, #0
}
 800b410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b414:	8987      	ldrh	r7, [r0, #12]
 800b416:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b418:	6b83      	ldr	r3, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b41a:	0879      	lsrs	r1, r7, #1
 800b41c:	fbb5 f1f1 	udiv	r1, r5, r1
 800b420:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b422:	4299      	cmp	r1, r3
 800b424:	d004      	beq.n	800b430 <put_fat.part.8+0x100>
 800b426:	f7ff fd43 	bl	800aeb0 <move_window.part.6>
			if (res != FR_OK) break;
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d18d      	bne.n	800b34a <put_fat.part.8+0x1a>
 800b42e:	89a7      	ldrh	r7, [r4, #12]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b430:	006d      	lsls	r5, r5, #1
 800b432:	fbb5 f3f7 	udiv	r3, r5, r7
 800b436:	fb07 5713 	mls	r7, r7, r3, r5
 800b43a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b43e:	19da      	adds	r2, r3, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800b440:	55de      	strb	r6, [r3, r7]
 800b442:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 800b446:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800b448:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
 800b44a:	70e3      	strb	r3, [r4, #3]
 800b44c:	2000      	movs	r0, #0
}
 800b44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b452:	f7ff fd2d 	bl	800aeb0 <move_window.part.6>
			if (res != FR_OK) break;
 800b456:	2800      	cmp	r0, #0
 800b458:	f47f af77 	bne.w	800b34a <put_fat.part.8+0x1a>
 800b45c:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 800b460:	fbb7 f3fc 	udiv	r3, r7, ip
 800b464:	e77e      	b.n	800b364 <put_fat.part.8+0x34>
 800b466:	f7ff fd23 	bl	800aeb0 <move_window.part.6>
			if (res != FR_OK) break;
 800b46a:	2800      	cmp	r0, #0
 800b46c:	f47f af6d 	bne.w	800b34a <put_fat.part.8+0x1a>
 800b470:	89a7      	ldrh	r7, [r4, #12]
 800b472:	e7b4      	b.n	800b3de <put_fat.part.8+0xae>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b474:	b2f2      	uxtb	r2, r6
 800b476:	e786      	b.n	800b386 <put_fat.part.8+0x56>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b478:	f818 3007 	ldrb.w	r3, [r8, r7]
 800b47c:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800b480:	f023 060f 	bic.w	r6, r3, #15
 800b484:	4316      	orrs	r6, r2
 800b486:	e79a      	b.n	800b3be <put_fat.part.8+0x8e>

0800b488 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b488:	2901      	cmp	r1, #1
 800b48a:	d931      	bls.n	800b4f0 <get_fat.isra.9+0x68>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b48e:	6a03      	ldr	r3, [r0, #32]
 800b490:	4299      	cmp	r1, r3
 800b492:	4604      	mov	r4, r0
 800b494:	d22a      	bcs.n	800b4ec <get_fat.isra.9+0x64>
		switch (fs->fs_type) {
 800b496:	7803      	ldrb	r3, [r0, #0]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	460d      	mov	r5, r1
 800b49c:	d044      	beq.n	800b528 <get_fat.isra.9+0xa0>
 800b49e:	2b03      	cmp	r3, #3
 800b4a0:	d028      	beq.n	800b4f4 <get_fat.isra.9+0x6c>
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d122      	bne.n	800b4ec <get_fat.isra.9+0x64>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4a8:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4ac:	8982      	ldrh	r2, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800b4ae:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4b2:	fbb6 f3f2 	udiv	r3, r6, r2
 800b4b6:	185f      	adds	r7, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4b8:	4567      	cmp	r7, ip
 800b4ba:	d153      	bne.n	800b564 <get_fat.isra.9+0xdc>
			wc = fs->win[bc++ % SS(fs)];
 800b4bc:	fb02 6313 	mls	r3, r2, r3, r6
 800b4c0:	1c77      	adds	r7, r6, #1
 800b4c2:	4423      	add	r3, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4c4:	fbb7 f0f2 	udiv	r0, r7, r2
 800b4c8:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4ca:	4561      	cmp	r1, ip
			wc = fs->win[bc++ % SS(fs)];
 800b4cc:	f893 603c 	ldrb.w	r6, [r3, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4d0:	d153      	bne.n	800b57a <get_fat.isra.9+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b4d2:	fb02 7710 	mls	r7, r2, r0, r7
 800b4d6:	443c      	add	r4, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b4d8:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b4da:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800b4de:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b4e2:	bf4c      	ite	mi
 800b4e4:	0900      	lsrmi	r0, r0, #4
 800b4e6:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800b4ec:	2001      	movs	r0, #1
}
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b4f0:	2001      	movs	r0, #1
}
 800b4f2:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4f4:	8983      	ldrh	r3, [r0, #12]
 800b4f6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4fa:	0899      	lsrs	r1, r3, #2
 800b4fc:	fbb5 f1f1 	udiv	r1, r5, r1
 800b500:	4431      	add	r1, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b502:	4291      	cmp	r1, r2
 800b504:	d129      	bne.n	800b55a <get_fat.isra.9+0xd2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b506:	00a9      	lsls	r1, r5, #2
 800b508:	343c      	adds	r4, #60	; 0x3c
 800b50a:	fbb1 f5f3 	udiv	r5, r1, r3
 800b50e:	fb03 1115 	mls	r1, r3, r5, r1
 800b512:	1862      	adds	r2, r4, r1
	rv = rv << 8 | ptr[0];
 800b514:	5c60      	ldrb	r0, [r4, r1]
	rv = rv << 8 | ptr[1];
 800b516:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 800b518:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800b51a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800b51e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b522:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b528:	8982      	ldrh	r2, [r0, #12]
 800b52a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b52c:	6b83      	ldr	r3, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b52e:	0851      	lsrs	r1, r2, #1
 800b530:	fbb5 f1f1 	udiv	r1, r5, r1
 800b534:	4431      	add	r1, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b536:	4299      	cmp	r1, r3
 800b538:	d003      	beq.n	800b542 <get_fat.isra.9+0xba>
 800b53a:	f7ff fcb9 	bl	800aeb0 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b53e:	bb20      	cbnz	r0, 800b58a <get_fat.isra.9+0x102>
 800b540:	89a2      	ldrh	r2, [r4, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b542:	0069      	lsls	r1, r5, #1
 800b544:	343c      	adds	r4, #60	; 0x3c
 800b546:	fbb1 f3f2 	udiv	r3, r1, r2
 800b54a:	fb02 1113 	mls	r1, r2, r3, r1
 800b54e:	1863      	adds	r3, r4, r1
	rv = rv << 8 | ptr[0];
 800b550:	5c60      	ldrb	r0, [r4, r1]
 800b552:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b554:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55a:	f7ff fca9 	bl	800aeb0 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b55e:	b9a0      	cbnz	r0, 800b58a <get_fat.isra.9+0x102>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	e7d0      	b.n	800b506 <get_fat.isra.9+0x7e>
 800b564:	4639      	mov	r1, r7
 800b566:	f7ff fca3 	bl	800aeb0 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b56a:	b970      	cbnz	r0, 800b58a <get_fat.isra.9+0x102>
 800b56c:	89a2      	ldrh	r2, [r4, #12]
 800b56e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b570:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 800b574:	fbb6 f3f2 	udiv	r3, r6, r2
 800b578:	e7a0      	b.n	800b4bc <get_fat.isra.9+0x34>
 800b57a:	4620      	mov	r0, r4
 800b57c:	f7ff fc98 	bl	800aeb0 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b580:	b918      	cbnz	r0, 800b58a <get_fat.isra.9+0x102>
 800b582:	89a2      	ldrh	r2, [r4, #12]
 800b584:	fbb7 f0f2 	udiv	r0, r7, r2
 800b588:	e7a3      	b.n	800b4d2 <get_fat.isra.9+0x4a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b58a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b590 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b590:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b594:	d22b      	bcs.n	800b5ee <dir_sdi+0x5e>
 800b596:	06ca      	lsls	r2, r1, #27
{
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b59c:	d125      	bne.n	800b5ea <dir_sdi+0x5a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b59e:	6881      	ldr	r1, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800b5a0:	6144      	str	r4, [r0, #20]
 800b5a2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800b5a4:	6806      	ldr	r6, [r0, #0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b5a6:	bb29      	cbnz	r1, 800b5f4 <dir_sdi+0x64>
 800b5a8:	7833      	ldrb	r3, [r6, #0]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d901      	bls.n	800b5b2 <dir_sdi+0x22>
		clst = fs->dirbase;
 800b5ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b5b0:	b9fb      	cbnz	r3, 800b5f2 <dir_sdi+0x62>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b5b2:	8933      	ldrh	r3, [r6, #8]
 800b5b4:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800b5b8:	d917      	bls.n	800b5ea <dir_sdi+0x5a>
		dp->sect = fs->dirbase;
 800b5ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b5bc:	61eb      	str	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800b5be:	61a9      	str	r1, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b5c0:	b19b      	cbz	r3, 800b5ea <dir_sdi+0x5a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b5c2:	89b1      	ldrh	r1, [r6, #12]
 800b5c4:	fbb4 f2f1 	udiv	r2, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b5c8:	363c      	adds	r6, #60	; 0x3c
 800b5ca:	fb01 4412 	mls	r4, r1, r2, r4
 800b5ce:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b5d0:	4413      	add	r3, r2
 800b5d2:	e9c5 3407 	strd	r3, r4, [r5, #28]
	return FR_OK;
 800b5d6:	2000      	movs	r0, #0
}
 800b5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5da:	6a33      	ldr	r3, [r6, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b5dc:	3b02      	subs	r3, #2
	clst -= 2;
 800b5de:	1e8a      	subs	r2, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d320      	bcc.n	800b626 <dir_sdi+0x96>
		dp->sect = clust2sect(fs, clst);
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e9c5 1306 	strd	r1, r3, [r5, #24]
		return FR_INT_ERR;
 800b5ea:	2002      	movs	r0, #2
}
 800b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
 800b5ee:	2002      	movs	r0, #2
}
 800b5f0:	4770      	bx	lr
 800b5f2:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b5f4:	8973      	ldrh	r3, [r6, #10]
 800b5f6:	89b7      	ldrh	r7, [r6, #12]
 800b5f8:	fb07 f703 	mul.w	r7, r7, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5fc:	42bc      	cmp	r4, r7
 800b5fe:	d3ec      	bcc.n	800b5da <dir_sdi+0x4a>
 800b600:	4630      	mov	r0, r6
 800b602:	e007      	b.n	800b614 <dir_sdi+0x84>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b604:	2801      	cmp	r0, #1
 800b606:	d9f0      	bls.n	800b5ea <dir_sdi+0x5a>
 800b608:	6a33      	ldr	r3, [r6, #32]
 800b60a:	4283      	cmp	r3, r0
 800b60c:	d9ed      	bls.n	800b5ea <dir_sdi+0x5a>
		while (ofs >= csz) {				/* Follow cluster chain */
 800b60e:	42a7      	cmp	r7, r4
 800b610:	d8e4      	bhi.n	800b5dc <dir_sdi+0x4c>
 800b612:	6828      	ldr	r0, [r5, #0]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b614:	f7ff ff38 	bl	800b488 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b618:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b61a:	4601      	mov	r1, r0
			ofs -= csz;
 800b61c:	eba4 0407 	sub.w	r4, r4, r7
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b620:	d1f0      	bne.n	800b604 <dir_sdi+0x74>
 800b622:	2001      	movs	r0, #1
}
 800b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return clst * fs->csize + fs->database;
 800b626:	8973      	ldrh	r3, [r6, #10]
 800b628:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800b62a:	fb02 0303 	mla	r3, r2, r3, r0
		dp->sect = clust2sect(fs, clst);
 800b62e:	61eb      	str	r3, [r5, #28]
 800b630:	e7c5      	b.n	800b5be <dir_sdi+0x2e>
 800b632:	bf00      	nop

0800b634 <create_chain>:
{
 800b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800b63a:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 800b63c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800b63e:	bb29      	cbnz	r1, 800b68c <create_chain+0x58>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b640:	69b5      	ldr	r5, [r6, #24]
 800b642:	6a33      	ldr	r3, [r6, #32]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b644:	b9f5      	cbnz	r5, 800b684 <create_chain+0x50>
 800b646:	2501      	movs	r5, #1
 800b648:	462c      	mov	r4, r5
 800b64a:	e006      	b.n	800b65a <create_chain+0x26>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b64c:	2801      	cmp	r0, #1
 800b64e:	d015      	beq.n	800b67c <create_chain+0x48>
 800b650:	3001      	adds	r0, #1
 800b652:	d031      	beq.n	800b6b8 <create_chain+0x84>
			if (ncl == scl) return 0;		/* No free cluster */
 800b654:	42ac      	cmp	r4, r5
 800b656:	d034      	beq.n	800b6c2 <create_chain+0x8e>
 800b658:	6a33      	ldr	r3, [r6, #32]
			ncl++;							/* Next cluster */
 800b65a:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b65c:	429c      	cmp	r4, r3
 800b65e:	d302      	bcc.n	800b666 <create_chain+0x32>
				if (ncl > scl) return 0;	/* No free cluster */
 800b660:	2d01      	cmp	r5, #1
 800b662:	d92e      	bls.n	800b6c2 <create_chain+0x8e>
				ncl = 2;
 800b664:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b666:	4621      	mov	r1, r4
 800b668:	6838      	ldr	r0, [r7, #0]
 800b66a:	f7ff ff0d 	bl	800b488 <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800b66e:	2800      	cmp	r0, #0
 800b670:	d1ec      	bne.n	800b64c <create_chain+0x18>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b672:	2c01      	cmp	r4, #1
 800b674:	d902      	bls.n	800b67c <create_chain+0x48>
 800b676:	6a33      	ldr	r3, [r6, #32]
 800b678:	429c      	cmp	r4, r3
 800b67a:	d314      	bcc.n	800b6a6 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b67c:	2401      	movs	r4, #1
}
 800b67e:	4620      	mov	r0, r4
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b684:	429d      	cmp	r5, r3
 800b686:	bf28      	it	cs
 800b688:	2501      	movcs	r5, #1
 800b68a:	e7dd      	b.n	800b648 <create_chain+0x14>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff fefb 	bl	800b488 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b692:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b694:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b696:	d9f1      	bls.n	800b67c <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d00d      	beq.n	800b6b8 <create_chain+0x84>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b69c:	6a33      	ldr	r3, [r6, #32]
 800b69e:	4283      	cmp	r3, r0
 800b6a0:	d8ed      	bhi.n	800b67e <create_chain+0x4a>
 800b6a2:	4645      	mov	r5, r8
 800b6a4:	e7d0      	b.n	800b648 <create_chain+0x14>
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff fe3f 	bl	800b330 <put_fat.part.8>
		if (res == FR_OK && clst != 0) {
 800b6b2:	b150      	cbz	r0, 800b6ca <create_chain+0x96>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b6b4:	2801      	cmp	r0, #1
 800b6b6:	d1e1      	bne.n	800b67c <create_chain+0x48>
				ncl = 2;
 800b6b8:	f04f 34ff 	mov.w	r4, #4294967295
}
 800b6bc:	4620      	mov	r0, r4
 800b6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (ncl > scl) return 0;	/* No free cluster */
 800b6c2:	2400      	movs	r4, #0
}
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (res == FR_OK && clst != 0) {
 800b6ca:	f1b8 0f00 	cmp.w	r8, #0
 800b6ce:	d00c      	beq.n	800b6ea <create_chain+0xb6>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b6d0:	f1b8 0f01 	cmp.w	r8, #1
 800b6d4:	d9d2      	bls.n	800b67c <create_chain+0x48>
 800b6d6:	6a33      	ldr	r3, [r6, #32]
 800b6d8:	4598      	cmp	r8, r3
 800b6da:	d2cf      	bcs.n	800b67c <create_chain+0x48>
 800b6dc:	4641      	mov	r1, r8
 800b6de:	4622      	mov	r2, r4
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff fe25 	bl	800b330 <put_fat.part.8>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d1e4      	bne.n	800b6b4 <create_chain+0x80>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6ea:	e9d6 2307 	ldrd	r2, r3, [r6, #28]
 800b6ee:	3b02      	subs	r3, #2
 800b6f0:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 800b6f2:	61b4      	str	r4, [r6, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6f4:	d801      	bhi.n	800b6fa <create_chain+0xc6>
 800b6f6:	3a01      	subs	r2, #1
 800b6f8:	61f2      	str	r2, [r6, #28]
		fs->fsi_flag |= 1;
 800b6fa:	7933      	ldrb	r3, [r6, #4]
 800b6fc:	f043 0301 	orr.w	r3, r3, #1
 800b700:	7133      	strb	r3, [r6, #4]
 800b702:	e7bc      	b.n	800b67e <create_chain+0x4a>

0800b704 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b704:	2901      	cmp	r1, #1
 800b706:	d93f      	bls.n	800b788 <remove_chain+0x84>
{
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800b70a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b70c:	6a2b      	ldr	r3, [r5, #32]
 800b70e:	428b      	cmp	r3, r1
 800b710:	460c      	mov	r4, r1
 800b712:	4607      	mov	r7, r0
 800b714:	d92c      	bls.n	800b770 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b716:	bb3a      	cbnz	r2, 800b768 <remove_chain+0x64>
 800b718:	4628      	mov	r0, r5
 800b71a:	e01b      	b.n	800b754 <remove_chain+0x50>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b71c:	2e01      	cmp	r6, #1
 800b71e:	4628      	mov	r0, r5
 800b720:	d026      	beq.n	800b770 <remove_chain+0x6c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b722:	1c73      	adds	r3, r6, #1
 800b724:	d032      	beq.n	800b78c <remove_chain+0x88>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b726:	2c01      	cmp	r4, #1
 800b728:	d922      	bls.n	800b770 <remove_chain+0x6c>
 800b72a:	6a2b      	ldr	r3, [r5, #32]
 800b72c:	429c      	cmp	r4, r3
 800b72e:	d21f      	bcs.n	800b770 <remove_chain+0x6c>
 800b730:	f7ff fdfe 	bl	800b330 <put_fat.part.8>
			if (res != FR_OK) return res;
 800b734:	b9b8      	cbnz	r0, 800b766 <remove_chain+0x62>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b736:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 800b73a:	1e91      	subs	r1, r2, #2
 800b73c:	428b      	cmp	r3, r1
 800b73e:	d205      	bcs.n	800b74c <remove_chain+0x48>
			fs->fsi_flag |= 1;
 800b740:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 800b742:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 800b744:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 800b748:	61eb      	str	r3, [r5, #28]
			fs->fsi_flag |= 1;
 800b74a:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b74c:	42b2      	cmp	r2, r6
 800b74e:	d909      	bls.n	800b764 <remove_chain+0x60>
 800b750:	6838      	ldr	r0, [r7, #0]
 800b752:	4634      	mov	r4, r6
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b754:	4621      	mov	r1, r4
 800b756:	f7ff fe97 	bl	800b488 <get_fat.isra.9>
 800b75a:	4621      	mov	r1, r4
		if (nxt == 0) break;				/* Empty cluster? */
 800b75c:	4606      	mov	r6, r0
 800b75e:	2200      	movs	r2, #0
 800b760:	2800      	cmp	r0, #0
 800b762:	d1db      	bne.n	800b71c <remove_chain+0x18>
	return FR_OK;
 800b764:	2000      	movs	r0, #0
}
 800b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b768:	2a01      	cmp	r2, #1
 800b76a:	d901      	bls.n	800b770 <remove_chain+0x6c>
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d801      	bhi.n	800b774 <remove_chain+0x70>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b770:	2002      	movs	r0, #2
}
 800b772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b774:	4611      	mov	r1, r2
 800b776:	4628      	mov	r0, r5
 800b778:	f04f 32ff 	mov.w	r2, #4294967295
 800b77c:	f7ff fdd8 	bl	800b330 <put_fat.part.8>
		if (res != FR_OK) return res;
 800b780:	2800      	cmp	r0, #0
 800b782:	d1f0      	bne.n	800b766 <remove_chain+0x62>
 800b784:	6838      	ldr	r0, [r7, #0]
 800b786:	e7e5      	b.n	800b754 <remove_chain+0x50>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b788:	2002      	movs	r0, #2
}
 800b78a:	4770      	bx	lr
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b78c:	2001      	movs	r0, #1
}
 800b78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b790 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b790:	69c2      	ldr	r2, [r0, #28]
 800b792:	b312      	cbz	r2, 800b7da <dir_next+0x4a>
{
 800b794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b798:	6945      	ldr	r5, [r0, #20]
 800b79a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b79c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800b7a0:	d218      	bcs.n	800b7d4 <dir_next+0x44>
	FATFS *fs = dp->obj.fs;
 800b7a2:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7a4:	89b3      	ldrh	r3, [r6, #12]
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	fbb5 f0f3 	udiv	r0, r5, r3
 800b7ac:	fb03 5310 	mls	r3, r3, r0, r5
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	b93b      	cbnz	r3, 800b7c4 <dir_next+0x34>
		if (!dp->clust) {		/* Static table */
 800b7b4:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800b7b6:	3201      	adds	r2, #1
 800b7b8:	61e2      	str	r2, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800b7ba:	b981      	cbnz	r1, 800b7de <dir_next+0x4e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7bc:	8932      	ldrh	r2, [r6, #8]
 800b7be:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800b7c2:	d933      	bls.n	800b82c <dir_next+0x9c>
 800b7c4:	f106 073c 	add.w	r7, r6, #60	; 0x3c
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b7c8:	443b      	add	r3, r7
 800b7ca:	6223      	str	r3, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 800b7cc:	6165      	str	r5, [r4, #20]
	return FR_OK;
 800b7ce:	2000      	movs	r0, #0
}
 800b7d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7d4:	2004      	movs	r0, #4
}
 800b7d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7da:	2004      	movs	r0, #4
}
 800b7dc:	4770      	bx	lr
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b7de:	8972      	ldrh	r2, [r6, #10]
 800b7e0:	3a01      	subs	r2, #1
 800b7e2:	4202      	tst	r2, r0
 800b7e4:	d1ee      	bne.n	800b7c4 <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7ff fe4e 	bl	800b488 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b7ec:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b7ee:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b7f0:	d963      	bls.n	800b8ba <dir_next+0x12a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b7f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7f6:	d021      	beq.n	800b83c <dir_next+0xac>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b7f8:	6a33      	ldr	r3, [r6, #32]
 800b7fa:	4283      	cmp	r3, r0
 800b7fc:	d920      	bls.n	800b840 <dir_next+0xb0>
 800b7fe:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 800b802:	f1a0 0902 	sub.w	r9, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b806:	3b02      	subs	r3, #2
 800b808:	454b      	cmp	r3, r9
	return clst * fs->csize + fs->database;
 800b80a:	bf84      	itt	hi
 800b80c:	8972      	ldrhhi	r2, [r6, #10]
 800b80e:	6b73      	ldrhi	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 800b810:	f8c4 8018 	str.w	r8, [r4, #24]
	return clst * fs->csize + fs->database;
 800b814:	bf88      	it	hi
 800b816:	fb09 3202 	mlahi	r2, r9, r2, r3
 800b81a:	89b3      	ldrh	r3, [r6, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b81c:	bf98      	it	ls
 800b81e:	2200      	movls	r2, #0
				dp->sect = clust2sect(fs, clst);
 800b820:	61e2      	str	r2, [r4, #28]
 800b822:	fbb5 f2f3 	udiv	r2, r5, r3
 800b826:	fb03 5312 	mls	r3, r3, r2, r5
 800b82a:	e7cd      	b.n	800b7c8 <dir_next+0x38>
				dp->sect = 0; return FR_NO_FILE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	61e3      	str	r3, [r4, #28]
 800b830:	2004      	movs	r0, #4
 800b832:	e7d0      	b.n	800b7d6 <dir_next+0x46>
 800b834:	4630      	mov	r0, r6
 800b836:	f7ff fab5 	bl	800ada4 <sync_window.part.5>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b83a:	b190      	cbz	r0, 800b862 <dir_next+0xd2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b83c:	2001      	movs	r0, #1
 800b83e:	e7ca      	b.n	800b7d6 <dir_next+0x46>
					if (!stretch) {								/* If no stretch, report EOT */
 800b840:	2f00      	cmp	r7, #0
 800b842:	d0f3      	beq.n	800b82c <dir_next+0x9c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b844:	69a1      	ldr	r1, [r4, #24]
 800b846:	4620      	mov	r0, r4
 800b848:	f7ff fef4 	bl	800b634 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b84c:	4680      	mov	r8, r0
 800b84e:	2800      	cmp	r0, #0
 800b850:	d035      	beq.n	800b8be <dir_next+0x12e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b852:	2801      	cmp	r0, #1
 800b854:	d031      	beq.n	800b8ba <dir_next+0x12a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b856:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b85a:	d0ef      	beq.n	800b83c <dir_next+0xac>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b85c:	78f3      	ldrb	r3, [r6, #3]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1e8      	bne.n	800b834 <dir_next+0xa4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b862:	89b2      	ldrh	r2, [r6, #12]
 800b864:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 800b868:	443a      	add	r2, r7
	BYTE *d = (BYTE*)dst;
 800b86a:	463b      	mov	r3, r7
		*d++ = (BYTE)val;
 800b86c:	2100      	movs	r1, #0
 800b86e:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 800b872:	4293      	cmp	r3, r2
 800b874:	d1fb      	bne.n	800b86e <dir_next+0xde>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b876:	6a33      	ldr	r3, [r6, #32]
 800b878:	8971      	ldrh	r1, [r6, #10]
 800b87a:	1e9a      	subs	r2, r3, #2
	clst -= 2;
 800b87c:	f1a8 0902 	sub.w	r9, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b880:	4591      	cmp	r9, r2
	return clst * fs->csize + fs->database;
 800b882:	bf36      	itet	cc
 800b884:	6b72      	ldrcc	r2, [r6, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b886:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
 800b888:	fb09 2201 	mlacc	r2, r9, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b88c:	63b2      	str	r2, [r6, #56]	; 0x38
 800b88e:	b1e9      	cbz	r1, 800b8cc <dir_next+0x13c>
 800b890:	f04f 0b00 	mov.w	fp, #0
						fs->wflag = 1;
 800b894:	f04f 0a01 	mov.w	sl, #1
 800b898:	e005      	b.n	800b8a6 <dir_next+0x116>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b89a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800b89c:	8973      	ldrh	r3, [r6, #10]
 800b89e:	3201      	adds	r2, #1
 800b8a0:	455b      	cmp	r3, fp
 800b8a2:	63b2      	str	r2, [r6, #56]	; 0x38
 800b8a4:	d90d      	bls.n	800b8c2 <dir_next+0x132>
						fs->wflag = 1;
 800b8a6:	f886 a003 	strb.w	sl, [r6, #3]
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f7ff fa7a 	bl	800ada4 <sync_window.part.5>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8b0:	f10b 0b01 	add.w	fp, fp, #1
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d0f0      	beq.n	800b89a <dir_next+0x10a>
 800b8b8:	e7c0      	b.n	800b83c <dir_next+0xac>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b8ba:	2002      	movs	r0, #2
 800b8bc:	e78b      	b.n	800b7d6 <dir_next+0x46>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b8be:	2007      	movs	r0, #7
 800b8c0:	e789      	b.n	800b7d6 <dir_next+0x46>
 800b8c2:	6a33      	ldr	r3, [r6, #32]
					fs->winsect -= n;							/* Restore window offset */
 800b8c4:	eba2 020b 	sub.w	r2, r2, fp
 800b8c8:	63b2      	str	r2, [r6, #56]	; 0x38
 800b8ca:	e79c      	b.n	800b806 <dir_next+0x76>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8cc:	468b      	mov	fp, r1
 800b8ce:	e7f9      	b.n	800b8c4 <dir_next+0x134>

0800b8d0 <dir_find>:
{
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8d4:	2100      	movs	r1, #0
{
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800b8da:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8dc:	f7ff fe58 	bl	800b590 <dir_sdi>
	if (res != FR_OK) return res;
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d145      	bne.n	800b972 <dir_find+0xa2>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ea:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800b8ee:	632b      	str	r3, [r5, #48]	; 0x30
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8f0:	4698      	mov	r8, r3
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8f2:	46d9      	mov	r9, fp
 800b8f4:	e00b      	b.n	800b90e <dir_find+0x3e>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b8f6:	2b0f      	cmp	r3, #15
 800b8f8:	d03f      	beq.n	800b97a <dir_find+0xaa>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8fa:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
 800b8fe:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800b902:	2100      	movs	r1, #0
 800b904:	4628      	mov	r0, r5
 800b906:	f7ff ff43 	bl	800b790 <dir_next>
	} while (res == FR_OK);
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d14c      	bne.n	800b9a8 <dir_find+0xd8>
		res = move_window(fs, dp->sect);
 800b90e:	69e9      	ldr	r1, [r5, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	4299      	cmp	r1, r3
 800b914:	d004      	beq.n	800b920 <dir_find+0x50>
 800b916:	4638      	mov	r0, r7
 800b918:	f7ff faca 	bl	800aeb0 <move_window.part.6>
		if (res != FR_OK) break;
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d143      	bne.n	800b9a8 <dir_find+0xd8>
		c = dp->dir[DIR_Name];
 800b920:	6a2c      	ldr	r4, [r5, #32]
 800b922:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b924:	2e00      	cmp	r6, #0
 800b926:	d05b      	beq.n	800b9e0 <dir_find+0x110>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b928:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b92a:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b92c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800b930:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b932:	d0e2      	beq.n	800b8fa <dir_find+0x2a>
 800b934:	0712      	lsls	r2, r2, #28
 800b936:	d4de      	bmi.n	800b8f6 <dir_find+0x26>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b938:	2b0f      	cmp	r3, #15
 800b93a:	d01e      	beq.n	800b97a <dir_find+0xaa>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b93c:	f1b9 0f00 	cmp.w	r9, #0
 800b940:	d037      	beq.n	800b9b2 <dir_find+0xe2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b942:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b946:	07db      	lsls	r3, r3, #31
 800b948:	d4d7      	bmi.n	800b8fa <dir_find+0x2a>
		r = *d++ - *s++;
 800b94a:	4620      	mov	r0, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	f810 3b0b 	ldrb.w	r3, [r0], #11
 800b952:	f811 2f24 	ldrb.w	r2, [r1, #36]!
 800b956:	3401      	adds	r4, #1
 800b958:	1a9b      	subs	r3, r3, r2
	} while (--cnt && r == 0);
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1cd      	bne.n	800b8fa <dir_find+0x2a>
		r = *d++ - *s++;
 800b95e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b962:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	} while (--cnt && r == 0);
 800b966:	4284      	cmp	r4, r0
		r = *d++ - *s++;
 800b968:	eba3 0302 	sub.w	r3, r3, r2
	} while (--cnt && r == 0);
 800b96c:	d1f5      	bne.n	800b95a <dir_find+0x8a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1c3      	bne.n	800b8fa <dir_find+0x2a>
}
 800b972:	4650      	mov	r0, sl
 800b974:	b007      	add	sp, #28
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b97a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b97e:	0658      	lsls	r0, r3, #25
 800b980:	d4bf      	bmi.n	800b902 <dir_find+0x32>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b982:	0671      	lsls	r1, r6, #25
 800b984:	d527      	bpl.n	800b9d6 <dir_find+0x106>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b986:	696b      	ldr	r3, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 800b988:	f894 b00d 	ldrb.w	fp, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b98c:	632b      	str	r3, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b98e:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b992:	7b63      	ldrb	r3, [r4, #13]
 800b994:	455b      	cmp	r3, fp
 800b996:	d029      	beq.n	800b9ec <dir_find+0x11c>
 800b998:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800b99c:	2100      	movs	r1, #0
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f7ff fef6 	bl	800b790 <dir_next>
	} while (res == FR_OK);
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d0b2      	beq.n	800b90e <dir_find+0x3e>
 800b9a8:	4682      	mov	sl, r0
}
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	b007      	add	sp, #28
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	f104 000b 	add.w	r0, r4, #11
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b9b6:	4621      	mov	r1, r4
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b9b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9bc:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 800b9c0:	ea43 0959 	orr.w	r9, r3, r9, lsr #1
 800b9c4:	fa52 f989 	uxtab	r9, r2, r9
	} while (--n);
 800b9c8:	4281      	cmp	r1, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b9ca:	fa5f f989 	uxtb.w	r9, r9
	} while (--n);
 800b9ce:	d1f3      	bne.n	800b9b8 <dir_find+0xe8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b9d0:	45cb      	cmp	fp, r9
 800b9d2:	d1b6      	bne.n	800b942 <dir_find+0x72>
 800b9d4:	e7cd      	b.n	800b972 <dir_find+0xa2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9d6:	45b1      	cmp	r9, r6
 800b9d8:	d0db      	beq.n	800b992 <dir_find+0xc2>
 800b9da:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800b9de:	e7dd      	b.n	800b99c <dir_find+0xcc>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9e0:	f04f 0a04 	mov.w	sl, #4
}
 800b9e4:	4650      	mov	r0, sl
 800b9e6:	b007      	add	sp, #28
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rv = rv << 8 | ptr[0];
 800b9ec:	7ee2      	ldrb	r2, [r4, #27]
 800b9ee:	7ea3      	ldrb	r3, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b9f0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800b9f4:	d1d0      	bne.n	800b998 <dir_find+0xc8>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b9f6:	7823      	ldrb	r3, [r4, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9f8:	6939      	ldr	r1, [r7, #16]
 800b9fa:	4a2a      	ldr	r2, [pc, #168]	; (800baa4 <dir_find+0x1d4>)
 800b9fc:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba02:	3b01      	subs	r3, #1
 800ba04:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800ba08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ba0c:	2101      	movs	r1, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ba0e:	e9cd b700 	strd	fp, r7, [sp]
 800ba12:	e9cd a502 	strd	sl, r5, [sp, #8]
 800ba16:	9f04      	ldr	r7, [sp, #16]
 800ba18:	9605      	str	r6, [sp, #20]
 800ba1a:	4625      	mov	r5, r4
 800ba1c:	4691      	mov	r9, r2
 800ba1e:	461c      	mov	r4, r3
 800ba20:	460b      	mov	r3, r1
 800ba22:	e011      	b.n	800ba48 <dir_find+0x178>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba24:	2cfe      	cmp	r4, #254	; 0xfe
 800ba26:	d81d      	bhi.n	800ba64 <dir_find+0x194>
 800ba28:	f001 fb08 	bl	800d03c <ff_wtoupper>
 800ba2c:	4683      	mov	fp, r0
 800ba2e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800ba32:	f001 fb03 	bl	800d03c <ff_wtoupper>
 800ba36:	4583      	cmp	fp, r0
 800ba38:	d114      	bne.n	800ba64 <dir_find+0x194>
	rv = rv << 8 | ptr[0];
 800ba3a:	4633      	mov	r3, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba3c:	4654      	mov	r4, sl
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba3e:	4a1a      	ldr	r2, [pc, #104]	; (800baa8 <dir_find+0x1d8>)
 800ba40:	454a      	cmp	r2, r9
 800ba42:	d016      	beq.n	800ba72 <dir_find+0x1a2>
 800ba44:	f819 1f01 	ldrb.w	r1, [r9, #1]!
	rv = rv << 8 | ptr[0];
 800ba48:	5c6e      	ldrb	r6, [r5, r1]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ba4a:	1868      	adds	r0, r5, r1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba4c:	f104 0a01 	add.w	sl, r4, #1
	rv = rv << 8 | ptr[0];
 800ba50:	7840      	ldrb	r0, [r0, #1]
 800ba52:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba56:	4630      	mov	r0, r6
		if (wc) {
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e3      	bne.n	800ba24 <dir_find+0x154>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ba5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba60:	4296      	cmp	r6, r2
 800ba62:	d0ec      	beq.n	800ba3e <dir_find+0x16e>
 800ba64:	e9dd b700 	ldrd	fp, r7, [sp]
 800ba68:	e9dd a502 	ldrd	sl, r5, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba6c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800ba70:	e747      	b.n	800b902 <dir_find+0x32>
 800ba72:	469c      	mov	ip, r3
 800ba74:	4623      	mov	r3, r4
 800ba76:	462c      	mov	r4, r5
 800ba78:	e9dd b700 	ldrd	fp, r7, [sp]
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ba7c:	7822      	ldrb	r2, [r4, #0]
 800ba7e:	9e05      	ldr	r6, [sp, #20]
 800ba80:	0652      	lsls	r2, r2, #25
 800ba82:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800ba86:	d508      	bpl.n	800ba9a <dir_find+0x1ca>
 800ba88:	f1bc 0f00 	cmp.w	ip, #0
 800ba8c:	d005      	beq.n	800ba9a <dir_find+0x1ca>
 800ba8e:	9a04      	ldr	r2, [sp, #16]
 800ba90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f47f af7f 	bne.w	800b998 <dir_find+0xc8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba9a:	3e01      	subs	r6, #1
 800ba9c:	fa5f f986 	uxtb.w	r9, r6
 800baa0:	e72f      	b.n	800b902 <dir_find+0x32>
 800baa2:	bf00      	nop
 800baa4:	08011b78 	.word	0x08011b78
 800baa8:	08011b84 	.word	0x08011b84

0800baac <follow_path>:
{
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800bab0:	f8d0 b000 	ldr.w	fp, [r0]
{
 800bab4:	b085      	sub	sp, #20
 800bab6:	4607      	mov	r7, r0
 800bab8:	460e      	mov	r6, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800baba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babe:	2b2f      	cmp	r3, #47	; 0x2f
 800bac0:	d0fa      	beq.n	800bab8 <follow_path+0xc>
 800bac2:	2b5c      	cmp	r3, #92	; 0x5c
 800bac4:	d0f8      	beq.n	800bab8 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800bac6:	2100      	movs	r1, #0
 800bac8:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800baca:	7830      	ldrb	r0, [r6, #0]
 800bacc:	281f      	cmp	r0, #31
 800bace:	f240 8133 	bls.w	800bd38 <follow_path+0x28c>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bad2:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800bad4:	465b      	mov	r3, fp
		w = p[si++];					/* Get a character */
 800bad6:	b280      	uxth	r0, r0
		if (w < ' ') break;				/* Break if end of the path name */
 800bad8:	281f      	cmp	r0, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bada:	691d      	ldr	r5, [r3, #16]
		if (w < ' ') break;				/* Break if end of the path name */
 800badc:	d946      	bls.n	800bb6c <follow_path+0xc0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bade:	282f      	cmp	r0, #47	; 0x2f
 800bae0:	d02c      	beq.n	800bb3c <follow_path+0x90>
 800bae2:	285c      	cmp	r0, #92	; 0x5c
 800bae4:	d02a      	beq.n	800bb3c <follow_path+0x90>
 800bae6:	f1a5 0902 	sub.w	r9, r5, #2
 800baea:	46b0      	mov	r8, r6
		w = p[si++];					/* Get a character */
 800baec:	2401      	movs	r4, #1
 800baee:	e010      	b.n	800bb12 <follow_path+0x66>
		lfn[di++] = w;					/* Store the Unicode character */
 800baf0:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800baf4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800baf8:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 800bafa:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800bafe:	f240 8117 	bls.w	800bd30 <follow_path+0x284>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bb02:	282f      	cmp	r0, #47	; 0x2f
 800bb04:	d01c      	beq.n	800bb40 <follow_path+0x94>
 800bb06:	285c      	cmp	r0, #92	; 0x5c
 800bb08:	d01a      	beq.n	800bb40 <follow_path+0x94>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bb0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb0e:	d011      	beq.n	800bb34 <follow_path+0x88>
 800bb10:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bb12:	2101      	movs	r1, #1
 800bb14:	f001 fa6e 	bl	800cff4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bb18:	b160      	cbz	r0, 800bb34 <follow_path+0x88>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bb1a:	287f      	cmp	r0, #127	; 0x7f
 800bb1c:	d8e8      	bhi.n	800baf0 <follow_path+0x44>
	while (*str && *str != chr) str++;
 800bb1e:	2822      	cmp	r0, #34	; 0x22
 800bb20:	d008      	beq.n	800bb34 <follow_path+0x88>
 800bb22:	4a96      	ldr	r2, [pc, #600]	; (800bd7c <follow_path+0x2d0>)
 800bb24:	232a      	movs	r3, #42	; 0x2a
 800bb26:	e003      	b.n	800bb30 <follow_path+0x84>
 800bb28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0df      	beq.n	800baf0 <follow_path+0x44>
 800bb30:	4298      	cmp	r0, r3
 800bb32:	d1f9      	bne.n	800bb28 <follow_path+0x7c>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bb34:	2006      	movs	r0, #6
}
 800bb36:	b005      	add	sp, #20
 800bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bb3c:	2400      	movs	r4, #0
		w = p[si++];					/* Get a character */
 800bb3e:	2301      	movs	r3, #1
 800bb40:	4433      	add	r3, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb42:	781a      	ldrb	r2, [r3, #0]
 800bb44:	2a2f      	cmp	r2, #47	; 0x2f
 800bb46:	461e      	mov	r6, r3
 800bb48:	f103 0301 	add.w	r3, r3, #1
 800bb4c:	d0f9      	beq.n	800bb42 <follow_path+0x96>
 800bb4e:	2a5c      	cmp	r2, #92	; 0x5c
 800bb50:	d0f7      	beq.n	800bb42 <follow_path+0x96>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bb52:	b15c      	cbz	r4, 800bb6c <follow_path+0xc0>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bb54:	f04f 0900 	mov.w	r9, #0
 800bb58:	eb05 0244 	add.w	r2, r5, r4, lsl #1
		w = lfn[di - 1];
 800bb5c:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800bb60:	2b20      	cmp	r3, #32
 800bb62:	d001      	beq.n	800bb68 <follow_path+0xbc>
 800bb64:	2b2e      	cmp	r3, #46	; 0x2e
 800bb66:	d104      	bne.n	800bb72 <follow_path+0xc6>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bb68:	3c01      	subs	r4, #1
 800bb6a:	d1f7      	bne.n	800bb5c <follow_path+0xb0>
	lfn[di] = 0;						/* LFN is created */
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	802b      	strh	r3, [r5, #0]
 800bb70:	e7e0      	b.n	800bb34 <follow_path+0x88>
 800bb72:	9b01      	ldr	r3, [sp, #4]
 800bb74:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 800bb78:	eb05 0244 	add.w	r2, r5, r4, lsl #1
	mem_set(dp->fn, ' ', 11);
 800bb7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb80:	f107 002f 	add.w	r0, r7, #47	; 0x2f
		*d++ = (BYTE)val;
 800bb84:	2120      	movs	r1, #32
 800bb86:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 800bb8a:	4283      	cmp	r3, r0
 800bb8c:	d1fb      	bne.n	800bb86 <follow_path+0xda>
 800bb8e:	1eab      	subs	r3, r5, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bb90:	f04f 0800 	mov.w	r8, #0
 800bb94:	e001      	b.n	800bb9a <follow_path+0xee>
 800bb96:	f108 0801 	add.w	r8, r8, #1
 800bb9a:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 800bb9e:	2820      	cmp	r0, #32
 800bba0:	d0f9      	beq.n	800bb96 <follow_path+0xea>
 800bba2:	282e      	cmp	r0, #46	; 0x2e
 800bba4:	d0f7      	beq.n	800bb96 <follow_path+0xea>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bba6:	f1b8 0f00 	cmp.w	r8, #0
 800bbaa:	d001      	beq.n	800bbb0 <follow_path+0x104>
 800bbac:	f049 0903 	orr.w	r9, r9, #3
 800bbb0:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bbb2:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800bbb6:	2a2e      	cmp	r2, #46	; 0x2e
 800bbb8:	d001      	beq.n	800bbbe <follow_path+0x112>
 800bbba:	3c01      	subs	r4, #1
 800bbbc:	d1f9      	bne.n	800bbb2 <follow_path+0x106>
		dp->fn[i++] = (BYTE)w;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	469a      	mov	sl, r3
 800bbc2:	2208      	movs	r2, #8
		w = lfn[si++];					/* Get an LFN character */
 800bbc4:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 800bbc8:	b340      	cbz	r0, 800bc1c <follow_path+0x170>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bbca:	2820      	cmp	r0, #32
 800bbcc:	d073      	beq.n	800bcb6 <follow_path+0x20a>
 800bbce:	282e      	cmp	r0, #46	; 0x2e
 800bbd0:	d076      	beq.n	800bcc0 <follow_path+0x214>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d21a      	bcs.n	800bc0c <follow_path+0x160>
 800bbd6:	4544      	cmp	r4, r8
 800bbd8:	d074      	beq.n	800bcc4 <follow_path+0x218>
		if (w >= 0x80) {				/* Non ASCII character */
 800bbda:	287f      	cmp	r0, #127	; 0x7f
 800bbdc:	f200 808f 	bhi.w	800bcfe <follow_path+0x252>
	while (*str && *str != chr) str++;
 800bbe0:	282b      	cmp	r0, #43	; 0x2b
 800bbe2:	f000 809d 	beq.w	800bd20 <follow_path+0x274>
 800bbe6:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800bd84 <follow_path+0x2d8>
 800bbea:	212c      	movs	r1, #44	; 0x2c
 800bbec:	4281      	cmp	r1, r0
 800bbee:	f000 8097 	beq.w	800bd20 <follow_path+0x274>
 800bbf2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	d1f8      	bne.n	800bbec <follow_path+0x140>
				if (IsUpper(w)) {		/* ASCII large capital */
 800bbfa:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800bbfe:	2919      	cmp	r1, #25
 800bc00:	f200 80a3 	bhi.w	800bd4a <follow_path+0x29e>
					b |= 2;
 800bc04:	f04a 0a02 	orr.w	sl, sl, #2
 800bc08:	b2c0      	uxtb	r0, r0
 800bc0a:	e08c      	b.n	800bd26 <follow_path+0x27a>
			if (ni == 11) {				/* Long extension */
 800bc0c:	2a0b      	cmp	r2, #11
 800bc0e:	f000 80aa 	beq.w	800bd66 <follow_path+0x2ba>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bc12:	4544      	cmp	r4, r8
 800bc14:	d058      	beq.n	800bcc8 <follow_path+0x21c>
 800bc16:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 800bc1a:	d255      	bcs.n	800bcc8 <follow_path+0x21c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc20:	2be5      	cmp	r3, #229	; 0xe5
 800bc22:	bf04      	itt	eq
 800bc24:	2305      	moveq	r3, #5
 800bc26:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800bc2a:	2a08      	cmp	r2, #8
 800bc2c:	bf04      	itt	eq
 800bc2e:	ea4f 0a8a 	moveq.w	sl, sl, lsl #2
 800bc32:	fa5f fa8a 	uxtbeq.w	sl, sl
 800bc36:	f00a 030c 	and.w	r3, sl, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc3a:	2b0c      	cmp	r3, #12
 800bc3c:	d04c      	beq.n	800bcd8 <follow_path+0x22c>
 800bc3e:	f00a 0a03 	and.w	sl, sl, #3
 800bc42:	f1ba 0f03 	cmp.w	sl, #3
 800bc46:	d047      	beq.n	800bcd8 <follow_path+0x22c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bc48:	f019 0f02 	tst.w	r9, #2
 800bc4c:	d108      	bne.n	800bc60 <follow_path+0x1b4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bc4e:	f1ba 0f01 	cmp.w	sl, #1
 800bc52:	bf08      	it	eq
 800bc54:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	bf08      	it	eq
 800bc5c:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc60:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff fe33 	bl	800b8d0 <dir_find>
			ns = dp->fn[NSFLAG];
 800bc6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d13d      	bne.n	800bcee <follow_path+0x242>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc72:	075a      	lsls	r2, r3, #29
 800bc74:	f53f af5f 	bmi.w	800bb36 <follow_path+0x8a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc78:	79bb      	ldrb	r3, [r7, #6]
 800bc7a:	06db      	lsls	r3, r3, #27
 800bc7c:	d56f      	bpl.n	800bd5e <follow_path+0x2b2>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc7e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	fbb0 f2f1 	udiv	r2, r0, r1
 800bc88:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
 800bc8c:	fb01 0212 	mls	r2, r1, r2, r0
 800bc90:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 800bc92:	f89b 1000 	ldrb.w	r1, [fp]
	rv = rv << 8 | ptr[0];
 800bc96:	7ed8      	ldrb	r0, [r3, #27]
 800bc98:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800bc9a:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800bc9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800bca0:	d105      	bne.n	800bcae <follow_path+0x202>
	rv = rv << 8 | ptr[0];
 800bca2:	7d59      	ldrb	r1, [r3, #21]
 800bca4:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bca6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bcaa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bcae:	60ba      	str	r2, [r7, #8]
 800bcb0:	7830      	ldrb	r0, [r6, #0]
 800bcb2:	683b      	ldr	r3, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcb4:	e70f      	b.n	800bad6 <follow_path+0x2a>
			cf |= NS_LOSS | NS_LFN; continue;
 800bcb6:	f049 0903 	orr.w	r9, r9, #3
 800bcba:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 800bcbe:	e781      	b.n	800bbc4 <follow_path+0x118>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bcc0:	4544      	cmp	r4, r8
 800bcc2:	d1f8      	bne.n	800bcb6 <follow_path+0x20a>
			if (ni == 11) {				/* Long extension */
 800bcc4:	2a0b      	cmp	r2, #11
 800bcc6:	d04e      	beq.n	800bd66 <follow_path+0x2ba>
			b <<= 2; continue;
 800bcc8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800bccc:	fa5f fa8a 	uxtb.w	sl, sl
 800bcd0:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bcd2:	220b      	movs	r2, #11
 800bcd4:	2308      	movs	r3, #8
 800bcd6:	e7f0      	b.n	800bcba <follow_path+0x20e>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bcd8:	f049 0902 	orr.w	r9, r9, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bcdc:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800bce0:	4638      	mov	r0, r7
 800bce2:	f7ff fdf5 	bl	800b8d0 <dir_find>
			ns = dp->fn[NSFLAG];
 800bce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d0c1      	beq.n	800bc72 <follow_path+0x1c6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bcee:	2804      	cmp	r0, #4
 800bcf0:	f47f af21 	bne.w	800bb36 <follow_path+0x8a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bcf4:	f013 0f04 	tst.w	r3, #4
 800bcf8:	bf08      	it	eq
 800bcfa:	2005      	moveq	r0, #5
 800bcfc:	e71b      	b.n	800bb36 <follow_path+0x8a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bcfe:	2100      	movs	r1, #0
 800bd00:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bd04:	f001 f976 	bl	800cff4 <ff_convert>
 800bd08:	f049 0902 	orr.w	r9, r9, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bd0c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bd10:	b130      	cbz	r0, 800bd20 <follow_path+0x274>
 800bd12:	491b      	ldr	r1, [pc, #108]	; (800bd80 <follow_path+0x2d4>)
 800bd14:	4408      	add	r0, r1
 800bd16:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	f47f af60 	bne.w	800bbe0 <follow_path+0x134>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bd20:	f049 0903 	orr.w	r9, r9, #3
 800bd24:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800bd26:	18f9      	adds	r1, r7, r3
 800bd28:	3301      	adds	r3, #1
 800bd2a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800bd2e:	e7c4      	b.n	800bcba <follow_path+0x20e>
	*path = &p[si];						/* Return pointer to the next segment */
 800bd30:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bd32:	f04f 0904 	mov.w	r9, #4
 800bd36:	e70f      	b.n	800bb58 <follow_path+0xac>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd38:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800bd3a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800bd3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800bd40:	b005      	add	sp, #20
 800bd42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800bd46:	f7ff bc23 	b.w	800b590 <dir_sdi>
					if (IsLower(w)) {	/* ASCII small capital */
 800bd4a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800bd4e:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800bd50:	bf97      	itett	ls
 800bd52:	3820      	subls	r0, #32
 800bd54:	b2c0      	uxtbhi	r0, r0
 800bd56:	b2c0      	uxtbls	r0, r0
 800bd58:	f04a 0a01 	orrls.w	sl, sl, #1
 800bd5c:	e7e3      	b.n	800bd26 <follow_path+0x27a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd5e:	2005      	movs	r0, #5
}
 800bd60:	b005      	add	sp, #20
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd6a:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 800bd6c:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd70:	f47f af61 	bne.w	800bc36 <follow_path+0x18a>
 800bd74:	2305      	movs	r3, #5
 800bd76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800bd7a:	e75c      	b.n	800bc36 <follow_path+0x18a>
 800bd7c:	08011b89 	.word	0x08011b89
 800bd80:	08011af8 	.word	0x08011af8
 800bd84:	08011b95 	.word	0x08011b95

0800bd88 <dir_register>:
{
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd8c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800bd90:	f013 07a0 	ands.w	r7, r3, #160	; 0xa0
{
 800bd94:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd96:	f040 80f0 	bne.w	800bf7a <dir_register+0x1f2>
	FATFS *fs = dp->obj.fs;
 800bd9a:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bd9e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800bda2:	881a      	ldrh	r2, [r3, #0]
 800bda4:	2a00      	cmp	r2, #0
 800bda6:	f000 817c 	beq.w	800c0a2 <dir_register+0x31a>
 800bdaa:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800bdae:	3701      	adds	r7, #1
 800bdb0:	2a00      	cmp	r2, #0
 800bdb2:	d1fa      	bne.n	800bdaa <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
 800bdb4:	f100 0524 	add.w	r5, r0, #36	; 0x24
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4629      	mov	r1, r5
 800bdbc:	a807      	add	r0, sp, #28
 800bdbe:	220c      	movs	r2, #12
 800bdc0:	f7fe ffe6 	bl	800ad90 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bdc4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bdc8:	07de      	lsls	r6, r3, #31
 800bdca:	d454      	bmi.n	800be76 <dir_register+0xee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bdcc:	079b      	lsls	r3, r3, #30
 800bdce:	f140 80d2 	bpl.w	800bf76 <dir_register+0x1ee>
 800bdd2:	4bb5      	ldr	r3, [pc, #724]	; (800c0a8 <dir_register+0x320>)
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	fba3 3707 	umull	r3, r7, r3, r7
 800bdda:	08bf      	lsrs	r7, r7, #2
 800bddc:	3701      	adds	r7, #1
	res = dir_sdi(dp, 0);
 800bdde:	2100      	movs	r1, #0
 800bde0:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800bde2:	f8d4 8000 	ldr.w	r8, [r4]
	res = dir_sdi(dp, 0);
 800bde6:	f7ff fbd3 	bl	800b590 <dir_sdi>
	if (res == FR_OK) {
 800bdea:	4683      	mov	fp, r0
 800bdec:	2800      	cmp	r0, #0
 800bdee:	f040 80ae 	bne.w	800bf4e <dir_register+0x1c6>
		n = 0;
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	e008      	b.n	800be08 <dir_register+0x80>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bdf6:	b1bb      	cbz	r3, 800be28 <dir_register+0xa0>
				n = 0;					/* Not a blank entry. Restart to search */
 800bdf8:	2600      	movs	r6, #0
			res = dir_next(dp, 1);
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f7ff fcc7 	bl	800b790 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800be02:	2800      	cmp	r0, #0
 800be04:	f040 80a2 	bne.w	800bf4c <dir_register+0x1c4>
			res = move_window(fs, dp->sect);
 800be08:	69e3      	ldr	r3, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800be0a:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800be0e:	4293      	cmp	r3, r2
 800be10:	4640      	mov	r0, r8
 800be12:	4619      	mov	r1, r3
 800be14:	d004      	beq.n	800be20 <dir_register+0x98>
 800be16:	f7ff f84b 	bl	800aeb0 <move_window.part.6>
			if (res != FR_OK) break;
 800be1a:	2800      	cmp	r0, #0
 800be1c:	f040 8096 	bne.w	800bf4c <dir_register+0x1c4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800be20:	6a23      	ldr	r3, [r4, #32]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2be5      	cmp	r3, #229	; 0xe5
 800be26:	d1e6      	bne.n	800bdf6 <dir_register+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800be28:	3601      	adds	r6, #1
 800be2a:	42b7      	cmp	r7, r6
 800be2c:	d1e5      	bne.n	800bdfa <dir_register+0x72>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800be2e:	1e7b      	subs	r3, r7, #1
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	f040 80b3 	bne.w	800bf9c <dir_register+0x214>
		res = move_window(fs, dp->sect);
 800be36:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800be38:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800be3c:	4299      	cmp	r1, r3
 800be3e:	f040 80a2 	bne.w	800bf86 <dir_register+0x1fe>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800be42:	6a23      	ldr	r3, [r4, #32]
		*d++ = (BYTE)val;
 800be44:	2100      	movs	r1, #0
 800be46:	f103 0220 	add.w	r2, r3, #32
 800be4a:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 800be4e:	4293      	cmp	r3, r2
 800be50:	d1fb      	bne.n	800be4a <dir_register+0xc2>
 800be52:	4629      	mov	r1, r5
 800be54:	220b      	movs	r2, #11
 800be56:	6a20      	ldr	r0, [r4, #32]
 800be58:	f7fe ff9a 	bl	800ad90 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800be5c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800be60:	6a21      	ldr	r1, [r4, #32]
 800be62:	f003 0318 	and.w	r3, r3, #24
			fs->wflag = 1;
 800be66:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800be68:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800be6a:	f88a 2003 	strb.w	r2, [sl, #3]
}
 800be6e:	4658      	mov	r0, fp
 800be70:	b00b      	add	sp, #44	; 0x2c
 800be72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be76:	2340      	movs	r3, #64	; 0x40
 800be78:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800be7c:	220b      	movs	r2, #11
 800be7e:	a907      	add	r1, sp, #28
 800be80:	4628      	mov	r0, r5
		for (n = 1; n < 100; n++) {
 800be82:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800be86:	4e89      	ldr	r6, [pc, #548]	; (800c0ac <dir_register+0x324>)
 800be88:	f7fe ff82 	bl	800ad90 <mem_cpy.part.0>
		for (n = 1; n < 100; n++) {
 800be8c:	4643      	mov	r3, r8
 800be8e:	f10d 0c1b 	add.w	ip, sp, #27
 800be92:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 800be94:	f003 000f 	and.w	r0, r3, #15
 800be98:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 800be9c:	2939      	cmp	r1, #57	; 0x39
 800be9e:	bf88      	it	hi
 800bea0:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 800bea4:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 800bea6:	f102 32ff 	add.w	r2, r2, #4294967295
 800beaa:	f80c 1901 	strb.w	r1, [ip], #-1
	} while (seq);
 800beae:	d1f1      	bne.n	800be94 <dir_register+0x10c>
	ns[i] = '~';
 800beb0:	a90a      	add	r1, sp, #40	; 0x28
 800beb2:	4411      	add	r1, r2
 800beb4:	207e      	movs	r0, #126	; 0x7e
 800beb6:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800beba:	2a00      	cmp	r2, #0
 800bebc:	d050      	beq.n	800bf60 <dir_register+0x1d8>
 800bebe:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800bec2:	2920      	cmp	r1, #32
 800bec4:	d008      	beq.n	800bed8 <dir_register+0x150>
 800bec6:	4629      	mov	r1, r5
 800bec8:	e003      	b.n	800bed2 <dir_register+0x14a>
 800beca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bece:	2820      	cmp	r0, #32
 800bed0:	d002      	beq.n	800bed8 <dir_register+0x150>
 800bed2:	3301      	adds	r3, #1
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d1f8      	bne.n	800beca <dir_register+0x142>
 800bed8:	1e59      	subs	r1, r3, #1
 800beda:	4429      	add	r1, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bedc:	a80a      	add	r0, sp, #40	; 0x28
 800bede:	4410      	add	r0, r2
 800bee0:	2a07      	cmp	r2, #7
 800bee2:	f103 0301 	add.w	r3, r3, #1
 800bee6:	bf96      	itet	ls
 800bee8:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
 800beec:	2020      	movhi	r0, #32
 800beee:	3201      	addls	r2, #1
	} while (j < 8);
 800bef0:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bef2:	f801 0f01 	strb.w	r0, [r1, #1]!
	} while (j < 8);
 800bef6:	d9f1      	bls.n	800bedc <dir_register+0x154>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bef8:	4620      	mov	r0, r4
 800befa:	f7ff fce9 	bl	800b8d0 <dir_find>
 800befe:	4683      	mov	fp, r0
			if (res != FR_OK) break;
 800bf00:	bb80      	cbnz	r0, 800bf64 <dir_register+0x1dc>
		for (n = 1; n < 100; n++) {
 800bf02:	f108 0801 	add.w	r8, r8, #1
 800bf06:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800bf0a:	d023      	beq.n	800bf54 <dir_register+0x1cc>
 800bf0c:	220b      	movs	r2, #11
 800bf0e:	a907      	add	r1, sp, #28
 800bf10:	4628      	mov	r0, r5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bf12:	f8da 9010 	ldr.w	r9, [sl, #16]
 800bf16:	f7fe ff3b 	bl	800ad90 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf1a:	f1b8 0f05 	cmp.w	r8, #5
 800bf1e:	d913      	bls.n	800bf48 <dir_register+0x1c0>
 800bf20:	f1a9 0c02 	sub.w	ip, r9, #2
 800bf24:	4643      	mov	r3, r8
		while (*lfn) {	/* Create a CRC */
 800bf26:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	d0af      	beq.n	800be8e <dir_register+0x106>
 800bf2e:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800bf30:	f002 0001 	and.w	r0, r2, #1
 800bf34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800bf38:	03d8      	lsls	r0, r3, #15
 800bf3a:	bf48      	it	mi
 800bf3c:	4073      	eormi	r3, r6
			for (i = 0; i < 16; i++) {
 800bf3e:	3901      	subs	r1, #1
				wc >>= 1;
 800bf40:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 800bf44:	d1f4      	bne.n	800bf30 <dir_register+0x1a8>
 800bf46:	e7ee      	b.n	800bf26 <dir_register+0x19e>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf48:	4643      	mov	r3, r8
 800bf4a:	e7a0      	b.n	800be8e <dir_register+0x106>
			if (res != FR_OK) break;
 800bf4c:	4683      	mov	fp, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bf4e:	f1bb 0f04 	cmp.w	fp, #4
 800bf52:	d18c      	bne.n	800be6e <dir_register+0xe6>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bf54:	f04f 0b07 	mov.w	fp, #7
}
 800bf58:	4658      	mov	r0, fp
 800bf5a:	b00b      	add	sp, #44	; 0x2c
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bf60:	4613      	mov	r3, r2
 800bf62:	e7b9      	b.n	800bed8 <dir_register+0x150>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bf64:	2804      	cmp	r0, #4
 800bf66:	d182      	bne.n	800be6e <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bf68:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bf6c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf70:	079b      	lsls	r3, r3, #30
 800bf72:	f53f af2e 	bmi.w	800bdd2 <dir_register+0x4a>
 800bf76:	2701      	movs	r7, #1
 800bf78:	e731      	b.n	800bdde <dir_register+0x56>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bf7a:	f04f 0b06 	mov.w	fp, #6
}
 800bf7e:	4658      	mov	r0, fp
 800bf80:	b00b      	add	sp, #44	; 0x2c
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	4650      	mov	r0, sl
 800bf88:	f7fe ff92 	bl	800aeb0 <move_window.part.6>
		if (res == FR_OK) {
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f43f af58 	beq.w	800be42 <dir_register+0xba>
 800bf92:	4683      	mov	fp, r0
}
 800bf94:	4658      	mov	r0, fp
 800bf96:	b00b      	add	sp, #44	; 0x2c
 800bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bf9c:	6961      	ldr	r1, [r4, #20]
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 800bfa6:	f7ff faf3 	bl	800b590 <dir_sdi>
		if (res == FR_OK) {
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d1f1      	bne.n	800bf92 <dir_register+0x20a>
	BYTE sum = 0;
 800bfae:	4602      	mov	r2, r0
		if (res == FR_OK) {
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bfb6:	01d3      	lsls	r3, r2, #7
 800bfb8:	f811 6b01 	ldrb.w	r6, [r1], #1
 800bfbc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800bfc0:	fa56 f383 	uxtab	r3, r6, r3
	} while (--n);
 800bfc4:	4281      	cmp	r1, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bfc6:	b2da      	uxtb	r2, r3
	} while (--n);
 800bfc8:	d1f5      	bne.n	800bfb6 <dir_register+0x22e>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bfca:	e9cd 5b02 	strd	r5, fp, [sp, #8]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bfce:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800c0b0 <dir_register+0x328>
 800bfd2:	9201      	str	r2, [sp, #4]
				res = move_window(fs, dp->sect);
 800bfd4:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bfd6:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800bfda:	4299      	cmp	r1, r3
 800bfdc:	d004      	beq.n	800bfe8 <dir_register+0x260>
 800bfde:	4650      	mov	r0, sl
 800bfe0:	f7fe ff66 	bl	800aeb0 <move_window.part.6>
				if (res != FR_OK) break;
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d1d4      	bne.n	800bf92 <dir_register+0x20a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bfe8:	f89d b000 	ldrb.w	fp, [sp]
 800bfec:	6a21      	ldr	r1, [r4, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bfee:	9e01      	ldr	r6, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bff0:	f8da e010 	ldr.w	lr, [sl, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bff4:	734e      	strb	r6, [r1, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bff6:	f10b 32ff 	add.w	r2, fp, #4294967295
	dir[LDIR_Type] = 0;
 800bffa:	2500      	movs	r5, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bffc:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c000:	f04f 060f 	mov.w	r6, #15
	dir[LDIR_Type] = 0;
 800c004:	730d      	strb	r5, [r1, #12]
	s = wc = 0;
 800c006:	462b      	mov	r3, r5
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c008:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 800c00c:	768d      	strb	r5, [r1, #26]
	s = wc = 0;
 800c00e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 800c010:	76cd      	strb	r5, [r1, #27]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c012:	72ce      	strb	r6, [r1, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c014:	2501      	movs	r5, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c016:	f64f 78ff 	movw	r8, #65535	; 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800c01a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c01e:	e016      	b.n	800c04e <dir_register+0x2c6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c020:	f83e 3012 	ldrh.w	r3, [lr, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800c024:	554b      	strb	r3, [r1, r5]
 800c026:	0a1d      	lsrs	r5, r3, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c028:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val;
 800c02a:	707d      	strb	r5, [r7, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c02c:	bbbb      	cbnz	r3, 800c09e <dir_register+0x316>
	} while (++s < 13);
 800c02e:	2e0c      	cmp	r6, #12
 800c030:	d821      	bhi.n	800c076 <dir_register+0x2ee>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c032:	f819 3006 	ldrb.w	r3, [r9, r6]
 800c036:	18cd      	adds	r5, r1, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800c038:	f801 c003 	strb.w	ip, [r1, r3]
 800c03c:	3002      	adds	r0, #2
	*ptr++ = (BYTE)val;
 800c03e:	f885 c001 	strb.w	ip, [r5, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c042:	f64f 73ff 	movw	r3, #65535	; 0xffff
	} while (++s < 13);
 800c046:	280c      	cmp	r0, #12
 800c048:	d80e      	bhi.n	800c068 <dir_register+0x2e0>
 800c04a:	f819 5000 	ldrb.w	r5, [r9, r0]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c04e:	4543      	cmp	r3, r8
 800c050:	eb01 0705 	add.w	r7, r1, r5
 800c054:	f100 0601 	add.w	r6, r0, #1
 800c058:	d1e2      	bne.n	800c020 <dir_register+0x298>
	*ptr++ = (BYTE)val;
 800c05a:	4630      	mov	r0, r6
	} while (++s < 13);
 800c05c:	280c      	cmp	r0, #12
	*ptr++ = (BYTE)val; val >>= 8;
 800c05e:	f801 c005 	strb.w	ip, [r1, r5]
	*ptr++ = (BYTE)val;
 800c062:	f887 c001 	strb.w	ip, [r7, #1]
	} while (++s < 13);
 800c066:	d9f0      	bls.n	800c04a <dir_register+0x2c2>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c068:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c06c:	4283      	cmp	r3, r0
 800c06e:	d002      	beq.n	800c076 <dir_register+0x2ee>
 800c070:	f83e 3012 	ldrh.w	r3, [lr, r2, lsl #1]
 800c074:	b90b      	cbnz	r3, 800c07a <dir_register+0x2f2>
 800c076:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
				fs->wflag = 1;
 800c07a:	2301      	movs	r3, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c07c:	f881 b000 	strb.w	fp, [r1]
				res = dir_next(dp, 0);	/* Next entry */
 800c080:	4620      	mov	r0, r4
 800c082:	2100      	movs	r1, #0
				fs->wflag = 1;
 800c084:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c088:	f7ff fb82 	bl	800b790 <dir_next>
			} while (res == FR_OK && --nent);
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d180      	bne.n	800bf92 <dir_register+0x20a>
 800c090:	9b00      	ldr	r3, [sp, #0]
 800c092:	3b01      	subs	r3, #1
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	d19d      	bne.n	800bfd4 <dir_register+0x24c>
 800c098:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800c09c:	e6cb      	b.n	800be36 <dir_register+0xae>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c09e:	4630      	mov	r0, r6
 800c0a0:	e7d1      	b.n	800c046 <dir_register+0x2be>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c0a2:	4617      	mov	r7, r2
 800c0a4:	e686      	b.n	800bdb4 <dir_register+0x2c>
 800c0a6:	bf00      	nop
 800c0a8:	4ec4ec4f 	.word	0x4ec4ec4f
 800c0ac:	00011021 	.word	0x00011021
 800c0b0:	08011b78 	.word	0x08011b78

0800c0b4 <unlock_fs.part.10>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c0b4:	290f      	cmp	r1, #15
 800c0b6:	d002      	beq.n	800c0be <unlock_fs.part.10+0xa>
		ff_rel_grant(fs->sobj);
 800c0b8:	6940      	ldr	r0, [r0, #20]
 800c0ba:	f001 b831 	b.w	800d120 <ff_rel_grant>
}
 800c0be:	4770      	bx	lr

0800c0c0 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800c0c0:	2300      	movs	r3, #0
{
 800c0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800c0c6:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800c0c8:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c0ca:	69c2      	ldr	r2, [r0, #28]
 800c0cc:	2a00      	cmp	r2, #0
 800c0ce:	d067      	beq.n	800c1a0 <get_fileinfo+0xe0>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c0d0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800c0d2:	3201      	adds	r2, #1
 800c0d4:	460d      	mov	r5, r1
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	d064      	beq.n	800c1a4 <get_fileinfo+0xe4>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	8818      	ldrh	r0, [r3, #0]
 800c0de:	b198      	cbz	r0, 800c108 <get_fileinfo+0x48>
 800c0e0:	f101 0615 	add.w	r6, r1, #21
 800c0e4:	2401      	movs	r4, #1
 800c0e6:	e00a      	b.n	800c0fe <get_fileinfo+0x3e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c0e8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800c0ec:	d00c      	beq.n	800c108 <get_fileinfo+0x48>
				fno->fname[i++] = (TCHAR)w;
 800c0ee:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800c0f8:	1c63      	adds	r3, r4, #1
 800c0fa:	b130      	cbz	r0, 800c10a <get_fileinfo+0x4a>
 800c0fc:	461c      	mov	r4, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c0fe:	2100      	movs	r1, #0
 800c100:	f000 ff78 	bl	800cff4 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c104:	2800      	cmp	r0, #0
 800c106:	d1ef      	bne.n	800c0e8 <get_fileinfo+0x28>
			i = j = 0;
 800c108:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c10a:	442c      	add	r4, r5
 800c10c:	2300      	movs	r3, #0
 800c10e:	75a3      	strb	r3, [r4, #22]
 800c110:	7daf      	ldrb	r7, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 800c112:	f8d8 1020 	ldr.w	r1, [r8, #32]
	i = j = 0;
 800c116:	2000      	movs	r0, #0
 800c118:	f101 0c0b 	add.w	ip, r1, #11
		c = (TCHAR)dp->dir[i++];
 800c11c:	460a      	mov	r2, r1
			fno->altname[j++] = '.';
 800c11e:	f04f 082e 	mov.w	r8, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 800c122:	f812 3b01 	ldrb.w	r3, [r2], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800c126:	2b20      	cmp	r3, #32
 800c128:	d01b      	beq.n	800c162 <get_fileinfo+0xa2>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	eba2 0601 	sub.w	r6, r2, r1
 800c130:	bf08      	it	eq
 800c132:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800c134:	2e09      	cmp	r6, #9
 800c136:	d037      	beq.n	800c1a8 <get_fileinfo+0xe8>
		fno->altname[j] = c;
 800c138:	182c      	adds	r4, r5, r0
 800c13a:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 800c13c:	b987      	cbnz	r7, 800c160 <get_fileinfo+0xa0>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c13e:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 800c142:	f1be 0f19 	cmp.w	lr, #25
 800c146:	d80a      	bhi.n	800c15e <get_fileinfo+0x9e>
 800c148:	2e08      	cmp	r6, #8
 800c14a:	f891 e00c 	ldrb.w	lr, [r1, #12]
 800c14e:	bf8c      	ite	hi
 800c150:	2610      	movhi	r6, #16
 800c152:	2608      	movls	r6, #8
 800c154:	ea1e 0f06 	tst.w	lr, r6
				c += 0x20;			/* To lower */
 800c158:	bf1c      	itt	ne
 800c15a:	3320      	addne	r3, #32
 800c15c:	b2db      	uxtbne	r3, r3
			fno->fname[j] = c;
 800c15e:	75a3      	strb	r3, [r4, #22]
		j++;
 800c160:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 800c162:	4562      	cmp	r2, ip
 800c164:	d1dd      	bne.n	800c122 <get_fileinfo+0x62>
		fno->fname[j] = 0;
 800c166:	182c      	adds	r4, r5, r0
	if (!lfv) {
 800c168:	b927      	cbnz	r7, 800c174 <get_fileinfo+0xb4>
		fno->fname[j] = 0;
 800c16a:	75a7      	strb	r7, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c16c:	7b0b      	ldrb	r3, [r1, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	bf08      	it	eq
 800c172:	462c      	moveq	r4, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c174:	2300      	movs	r3, #0
 800c176:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c178:	7acb      	ldrb	r3, [r1, #11]
 800c17a:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 800c17c:	8bc8      	ldrh	r0, [r1, #30]
	rv = rv << 8 | ptr[1];
 800c17e:	7f4a      	ldrb	r2, [r1, #29]
	rv = rv << 8 | ptr[0];
 800c180:	7f0b      	ldrb	r3, [r1, #28]
	rv = rv << 8 | ptr[1];
 800c182:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800c186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c18a:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 800c18c:	8b08      	ldrh	r0, [r1, #24]
	rv = rv << 8 | ptr[1];
 800c18e:	7dca      	ldrb	r2, [r1, #23]
	rv = rv << 8 | ptr[0];
 800c190:	7d8b      	ldrb	r3, [r1, #22]
	rv = rv << 8 | ptr[1];
 800c192:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800c196:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c19a:	0c1a      	lsrs	r2, r3, #16
 800c19c:	80eb      	strh	r3, [r5, #6]
 800c19e:	80aa      	strh	r2, [r5, #4]
}
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	461f      	mov	r7, r3
 800c1a6:	e7b4      	b.n	800c112 <get_fileinfo+0x52>
			if (!lfv) fno->fname[j] = '.';
 800c1a8:	182c      	adds	r4, r5, r0
 800c1aa:	b90f      	cbnz	r7, 800c1b0 <get_fileinfo+0xf0>
 800c1ac:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 800c1b0:	f884 8009 	strb.w	r8, [r4, #9]
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	e7bf      	b.n	800c138 <get_fileinfo+0x78>

0800c1b8 <dir_read.constprop.12>:
FRESULT dir_read (
 800c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 800c1bc:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
 800c1be:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800c1c0:	6805      	ldr	r5, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800c1c2:	463e      	mov	r6, r7
	FRESULT res = FR_NO_FILE;
 800c1c4:	2004      	movs	r0, #4
 800c1c6:	e006      	b.n	800c1d6 <dir_read.constprop.12+0x1e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c1c8:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f7ff fadf 	bl	800b790 <dir_next>
		if (res != FR_OK) break;
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d158      	bne.n	800c288 <dir_read.constprop.12+0xd0>
	while (dp->sect) {
 800c1d6:	69e1      	ldr	r1, [r4, #28]
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	d059      	beq.n	800c290 <dir_read.constprop.12+0xd8>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c1de:	428b      	cmp	r3, r1
 800c1e0:	d004      	beq.n	800c1ec <dir_read.constprop.12+0x34>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f7fe fe64 	bl	800aeb0 <move_window.part.6>
		if (res != FR_OK) break;
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d14d      	bne.n	800c288 <dir_read.constprop.12+0xd0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c1ec:	6a21      	ldr	r1, [r4, #32]
 800c1ee:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	d048      	beq.n	800c286 <dir_read.constprop.12+0xce>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c1f4:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c1f6:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1fc:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c1fe:	d0e3      	beq.n	800c1c8 <dir_read.constprop.12+0x10>
 800c200:	2a2e      	cmp	r2, #46	; 0x2e
 800c202:	d0e1      	beq.n	800c1c8 <dir_read.constprop.12+0x10>
 800c204:	f023 0020 	bic.w	r0, r3, #32
 800c208:	2808      	cmp	r0, #8
 800c20a:	d0dd      	beq.n	800c1c8 <dir_read.constprop.12+0x10>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c20c:	2b0f      	cmp	r3, #15
 800c20e:	d144      	bne.n	800c29a <dir_read.constprop.12+0xe2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c210:	0650      	lsls	r0, r2, #25
 800c212:	d535      	bpl.n	800c280 <dir_read.constprop.12+0xc8>
						dp->blk_ofs = dp->dptr;
 800c214:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 800c216:	7b4f      	ldrb	r7, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800c218:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800c21a:	f002 06bf 	and.w	r6, r2, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c21e:	7b4b      	ldrb	r3, [r1, #13]
 800c220:	42bb      	cmp	r3, r7
 800c222:	d1d1      	bne.n	800c1c8 <dir_read.constprop.12+0x10>
	rv = rv << 8 | ptr[0];
 800c224:	7eca      	ldrb	r2, [r1, #27]
 800c226:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c228:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800c22c:	d1cc      	bne.n	800c1c8 <dir_read.constprop.12+0x10>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c22e:	780a      	ldrb	r2, [r1, #0]
 800c230:	4829      	ldr	r0, [pc, #164]	; (800c2d8 <dir_read.constprop.12+0x120>)
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c232:	f8d5 8010 	ldr.w	r8, [r5, #16]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c23a:	3a01      	subs	r2, #1
 800c23c:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800c240:	2301      	movs	r3, #1
 800c242:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800c246:	f100 0e0c 	add.w	lr, r0, #12
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c24a:	469c      	mov	ip, r3
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c24c:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800c250:	e009      	b.n	800c266 <dir_read.constprop.12+0xae>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c252:	2afe      	cmp	r2, #254	; 0xfe
 800c254:	d8b8      	bhi.n	800c1c8 <dir_read.constprop.12+0x10>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c256:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
	rv = rv << 8 | ptr[0];
 800c25a:	469c      	mov	ip, r3
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c25c:	3201      	adds	r2, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c25e:	4586      	cmp	lr, r0
 800c260:	d02e      	beq.n	800c2c0 <dir_read.constprop.12+0x108>
 800c262:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c266:	eb01 0a03 	add.w	sl, r1, r3
	rv = rv << 8 | ptr[0];
 800c26a:	5ccb      	ldrb	r3, [r1, r3]
 800c26c:	f89a a001 	ldrb.w	sl, [sl, #1]
 800c270:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
		if (wc) {
 800c274:	f1bc 0f00 	cmp.w	ip, #0
 800c278:	d1eb      	bne.n	800c252 <dir_read.constprop.12+0x9a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c27a:	454b      	cmp	r3, r9
 800c27c:	d0ef      	beq.n	800c25e <dir_read.constprop.12+0xa6>
 800c27e:	e7a3      	b.n	800c1c8 <dir_read.constprop.12+0x10>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c280:	42b2      	cmp	r2, r6
 800c282:	d1a1      	bne.n	800c1c8 <dir_read.constprop.12+0x10>
 800c284:	e7cb      	b.n	800c21e <dir_read.constprop.12+0x66>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c286:	2004      	movs	r0, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c288:	2300      	movs	r3, #0
 800c28a:	61e3      	str	r3, [r4, #28]
}
 800c28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c290:	2800      	cmp	r0, #0
 800c292:	d1f9      	bne.n	800c288 <dir_read.constprop.12+0xd0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c294:	2000      	movs	r0, #0
}
 800c296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c29a:	b96e      	cbnz	r6, 800c2b8 <dir_read.constprop.12+0x100>
 800c29c:	f101 000b 	add.w	r0, r1, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c2a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2a4:	01f3      	lsls	r3, r6, #7
 800c2a6:	ea43 0656 	orr.w	r6, r3, r6, lsr #1
 800c2aa:	fa52 f686 	uxtab	r6, r2, r6
	} while (--n);
 800c2ae:	4281      	cmp	r1, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c2b0:	b2f6      	uxtb	r6, r6
	} while (--n);
 800c2b2:	d1f5      	bne.n	800c2a0 <dir_read.constprop.12+0xe8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c2b4:	42be      	cmp	r6, r7
 800c2b6:	d0ed      	beq.n	800c294 <dir_read.constprop.12+0xdc>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2bc:	6323      	str	r3, [r4, #48]	; 0x30
 800c2be:	e7e9      	b.n	800c294 <dir_read.constprop.12+0xdc>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c2c0:	780b      	ldrb	r3, [r1, #0]
 800c2c2:	065b      	lsls	r3, r3, #25
 800c2c4:	d505      	bpl.n	800c2d2 <dir_read.constprop.12+0x11a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c2c6:	2afe      	cmp	r2, #254	; 0xfe
 800c2c8:	f63f af7e 	bhi.w	800c1c8 <dir_read.constprop.12+0x10>
		lfnbuf[i] = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c2d2:	3e01      	subs	r6, #1
 800c2d4:	b2f6      	uxtb	r6, r6
 800c2d6:	e778      	b.n	800c1ca <dir_read.constprop.12+0x12>
 800c2d8:	08011b78 	.word	0x08011b78

0800c2dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c2e0:	b140      	cbz	r0, 800c2f4 <validate+0x18>
 800c2e2:	6803      	ldr	r3, [r0, #0]
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	b12b      	cbz	r3, 800c2f4 <validate+0x18>
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	b11a      	cbz	r2, 800c2f4 <validate+0x18>
 800c2ec:	8881      	ldrh	r1, [r0, #4]
 800c2ee:	88da      	ldrh	r2, [r3, #6]
 800c2f0:	4291      	cmp	r1, r2
 800c2f2:	d003      	beq.n	800c2fc <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800c2f4:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	602b      	str	r3, [r5, #0]
	return res;
}
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c2fc:	6958      	ldr	r0, [r3, #20]
 800c2fe:	f000 ff05 	bl	800d10c <ff_req_grant>
 800c302:	b910      	cbnz	r0, 800c30a <validate+0x2e>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c304:	4603      	mov	r3, r0
			res = FR_TIMEOUT;
 800c306:	200f      	movs	r0, #15
 800c308:	e7f6      	b.n	800c2f8 <validate+0x1c>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	7858      	ldrb	r0, [r3, #1]
 800c30e:	f7fe fc47 	bl	800aba0 <disk_status>
 800c312:	f010 0001 	ands.w	r0, r0, #1
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c316:	6823      	ldr	r3, [r4, #0]
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c318:	d0ee      	beq.n	800c2f8 <validate+0x1c>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0ea      	beq.n	800c2f4 <validate+0x18>
		ff_rel_grant(fs->sobj);
 800c31e:	6958      	ldr	r0, [r3, #20]
 800c320:	f000 fefe 	bl	800d120 <ff_rel_grant>
 800c324:	e7e6      	b.n	800c2f4 <validate+0x18>
 800c326:	bf00      	nop

0800c328 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32a:	b085      	sub	sp, #20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c32c:	ab04      	add	r3, sp, #16
{
 800c32e:	9001      	str	r0, [sp, #4]
	const TCHAR *rp = path;
 800c330:	f843 1d04 	str.w	r1, [r3, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c334:	4618      	mov	r0, r3
{
 800c336:	9100      	str	r1, [sp, #0]
 800c338:	4617      	mov	r7, r2
	vol = get_ldnumber(&rp);
 800c33a:	f7fe fd01 	bl	800ad40 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c33e:	1e05      	subs	r5, r0, #0
 800c340:	db30      	blt.n	800c3a4 <f_mount+0x7c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c342:	4e23      	ldr	r6, [pc, #140]	; (800c3d0 <f_mount+0xa8>)
 800c344:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]

	if (cfs) {
 800c348:	b184      	cbz	r4, 800c36c <f_mount+0x44>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c34a:	4b22      	ldr	r3, [pc, #136]	; (800c3d4 <f_mount+0xac>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c34c:	6960      	ldr	r0, [r4, #20]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	4294      	cmp	r4, r2
 800c352:	bf04      	itt	eq
 800c354:	2200      	moveq	r2, #0
 800c356:	601a      	streq	r2, [r3, #0]
 800c358:	691a      	ldr	r2, [r3, #16]
 800c35a:	4294      	cmp	r4, r2
 800c35c:	bf04      	itt	eq
 800c35e:	2200      	moveq	r2, #0
 800c360:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c362:	f000 fecd 	bl	800d100 <ff_del_syncobj>
 800c366:	b1c8      	cbz	r0, 800c39c <f_mount+0x74>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c368:	2300      	movs	r3, #0
 800c36a:	7023      	strb	r3, [r4, #0]
	}

	if (fs) {
 800c36c:	9901      	ldr	r1, [sp, #4]
 800c36e:	b179      	cbz	r1, 800c390 <f_mount+0x68>
		fs->fs_type = 0;				/* Clear new fs object */
 800c370:	2400      	movs	r4, #0
 800c372:	f801 4b14 	strb.w	r4, [r1], #20
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c376:	b2e8      	uxtb	r0, r5
 800c378:	f000 feb2 	bl	800d0e0 <ff_cre_syncobj>
 800c37c:	b170      	cbz	r0, 800c39c <f_mount+0x74>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c37e:	9901      	ldr	r1, [sp, #4]
 800c380:	f846 1025 	str.w	r1, [r6, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c384:	b131      	cbz	r1, 800c394 <f_mount+0x6c>
 800c386:	2f01      	cmp	r7, #1
 800c388:	d010      	beq.n	800c3ac <f_mount+0x84>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800c38a:	4620      	mov	r0, r4
 800c38c:	b005      	add	sp, #20
 800c38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800c390:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c394:	460c      	mov	r4, r1
}
 800c396:	4620      	mov	r0, r4
 800c398:	b005      	add	sp, #20
 800c39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c39c:	2402      	movs	r4, #2
}
 800c39e:	4620      	mov	r0, r4
 800c3a0:	b005      	add	sp, #20
 800c3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3a4:	240b      	movs	r4, #11
}
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	b005      	add	sp, #20
 800c3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	a901      	add	r1, sp, #4
 800c3b0:	4668      	mov	r0, sp
 800c3b2:	f7fe fde3 	bl	800af7c <find_volume>
 800c3b6:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800c3b8:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d0e5      	beq.n	800c38a <f_mount+0x62>
 800c3be:	2c0c      	cmp	r4, #12
 800c3c0:	d0e3      	beq.n	800c38a <f_mount+0x62>
 800c3c2:	2c0b      	cmp	r4, #11
 800c3c4:	d0e1      	beq.n	800c38a <f_mount+0x62>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	f7ff fe74 	bl	800c0b4 <unlock_fs.part.10>
 800c3cc:	e7dd      	b.n	800c38a <f_mount+0x62>
 800c3ce:	bf00      	nop
 800c3d0:	20007380 	.word	0x20007380
 800c3d4:	20007384 	.word	0x20007384

0800c3d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3dc:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c3e0:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d04d      	beq.n	800c482 <f_open+0xaa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c3e6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 800c3ee:	a902      	add	r1, sp, #8
 800c3f0:	463a      	mov	r2, r7
 800c3f2:	a801      	add	r0, sp, #4
 800c3f4:	f7fe fdc2 	bl	800af7c <find_volume>
	if (res == FR_OK) {
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	b198      	cbz	r0, 800c424 <f_open+0x4c>
		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
 800c3fc:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c400:	2300      	movs	r3, #0
 800c402:	6033      	str	r3, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c404:	f1bc 0f00 	cmp.w	ip, #0
 800c408:	d03c      	beq.n	800c484 <f_open+0xac>
 800c40a:	2c0c      	cmp	r4, #12
 800c40c:	d03a      	beq.n	800c484 <f_open+0xac>
 800c40e:	2c0b      	cmp	r4, #11
 800c410:	d038      	beq.n	800c484 <f_open+0xac>
 800c412:	4660      	mov	r0, ip
 800c414:	4621      	mov	r1, r4
 800c416:	f7ff fe4d 	bl	800c0b4 <unlock_fs.part.10>
}
 800c41a:	4620      	mov	r0, r4
 800c41c:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
 800c424:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
		INIT_NAMBUF(fs);
 800c428:	aa10      	add	r2, sp, #64	; 0x40
 800c42a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c42c:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 800c42e:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c430:	f7ff fb3c 	bl	800baac <follow_path>
 800c434:	f005 081c 	and.w	r8, r5, #28
 800c438:	4603      	mov	r3, r0
		if (res == FR_OK) {
 800c43a:	bb40      	cbnz	r0, 800c48e <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c43c:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800c440:	2b00      	cmp	r3, #0
 800c442:	db48      	blt.n	800c4d6 <f_open+0xfe>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c444:	f017 0ffe 	tst.w	r7, #254	; 0xfe
 800c448:	bf14      	ite	ne
 800c44a:	f04f 0901 	movne.w	r9, #1
 800c44e:	f04f 0900 	moveq.w	r9, #0
 800c452:	4649      	mov	r1, r9
 800c454:	a803      	add	r0, sp, #12
 800c456:	f7fe fbe7 	bl	800ac28 <chk_lock>
 800c45a:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c45c:	f1b8 0f00 	cmp.w	r8, #0
 800c460:	f000 8106 	beq.w	800c670 <f_open+0x298>
			if (res != FR_OK) {					/* No file, create new */
 800c464:	b9c0      	cbnz	r0, 800c498 <f_open+0xc0>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c466:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800c46a:	f013 0f11 	tst.w	r3, #17
 800c46e:	d028      	beq.n	800c4c2 <f_open+0xea>
	LEAVE_FF(fs, res);
 800c470:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c474:	6034      	str	r4, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c476:	f1bc 0f00 	cmp.w	ip, #0
 800c47a:	f000 810c 	beq.w	800c696 <f_open+0x2be>
					res = FR_DENIED;
 800c47e:	2407      	movs	r4, #7
 800c480:	e7c7      	b.n	800c412 <f_open+0x3a>
	if (!fp) return FR_INVALID_OBJECT;
 800c482:	2409      	movs	r4, #9
}
 800c484:	4620      	mov	r0, r4
 800c486:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c48e:	f1b8 0f00 	cmp.w	r8, #0
 800c492:	d101      	bne.n	800c498 <f_open+0xc0>
 800c494:	4604      	mov	r4, r0
 800c496:	e7b1      	b.n	800c3fc <f_open+0x24>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c498:	2b04      	cmp	r3, #4
 800c49a:	f040 811f 	bne.w	800c6dc <f_open+0x304>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c49e:	4bae      	ldr	r3, [pc, #696]	; (800c758 <f_open+0x380>)
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	f000 8093 	beq.w	800c5ce <f_open+0x1f6>
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 808f 	beq.w	800c5ce <f_open+0x1f6>
	LEAVE_FF(fs, res);
 800c4b0:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	6033      	str	r3, [r6, #0]
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c4b8:	2412      	movs	r4, #18
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c4ba:	f1bc 0f00 	cmp.w	ip, #0
 800c4be:	d1a8      	bne.n	800c412 <f_open+0x3a>
 800c4c0:	e7e0      	b.n	800c484 <f_open+0xac>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c4c2:	076b      	lsls	r3, r5, #29
 800c4c4:	d50f      	bpl.n	800c4e6 <f_open+0x10e>
	LEAVE_FF(fs, res);
 800c4c6:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4ca:	6034      	str	r4, [r6, #0]
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c4cc:	2408      	movs	r4, #8
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c4ce:	f1bc 0f00 	cmp.w	ip, #0
 800c4d2:	d19e      	bne.n	800c412 <f_open+0x3a>
 800c4d4:	e7d6      	b.n	800c484 <f_open+0xac>
	LEAVE_FF(fs, res);
 800c4d6:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4da:	6034      	str	r4, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c4dc:	2406      	movs	r4, #6
 800c4de:	f1bc 0f00 	cmp.w	ip, #0
 800c4e2:	d196      	bne.n	800c412 <f_open+0x3a>
 800c4e4:	e7ce      	b.n	800c484 <f_open+0xac>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c4e6:	0728      	lsls	r0, r5, #28
 800c4e8:	d479      	bmi.n	800c5de <f_open+0x206>
 800c4ea:	f8dd c008 	ldr.w	ip, [sp, #8]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4ee:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
			fp->dir_ptr = dj.dir;
 800c4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4f4:	6272      	str	r2, [r6, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4f6:	4649      	mov	r1, r9
			fp->dir_ptr = dj.dir;
 800c4f8:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4fa:	a803      	add	r0, sp, #12
 800c4fc:	f7fe fbd4 	bl	800aca8 <inc_lock>
 800c500:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c502:	2800      	cmp	r0, #0
 800c504:	d05a      	beq.n	800c5bc <f_open+0x1e4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c506:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 800c50c:	f89c 1000 	ldrb.w	r1, [ip]
	rv = rv << 8 | ptr[0];
 800c510:	7ed8      	ldrb	r0, [r3, #27]
 800c512:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c514:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800c516:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800c51a:	d105      	bne.n	800c528 <f_open+0x150>
	rv = rv << 8 | ptr[0];
 800c51c:	7d58      	ldrb	r0, [r3, #21]
 800c51e:	7d19      	ldrb	r1, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c520:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800c524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c528:	60b2      	str	r2, [r6, #8]
	rv = rv << 8 | ptr[2];
 800c52a:	8bd9      	ldrh	r1, [r3, #30]
	rv = rv << 8 | ptr[1];
 800c52c:	7f5a      	ldrb	r2, [r3, #29]
	rv = rv << 8 | ptr[0];
 800c52e:	7f1b      	ldrb	r3, [r3, #28]
			fp->obj.id = fs->id;
 800c530:	f8bc 0006 	ldrh.w	r0, [ip, #6]
 800c534:	80b0      	strh	r0, [r6, #4]
	rv = rv << 8 | ptr[1];
 800c536:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800c53a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c53e:	f106 0530 	add.w	r5, r6, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c542:	2200      	movs	r2, #0
 800c544:	f506 5181 	add.w	r1, r6, #4128	; 0x1020
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c548:	60f3      	str	r3, [r6, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c54a:	f8c6 c000 	str.w	ip, [r6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c54e:	62f2      	str	r2, [r6, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 800c550:	7572      	strb	r2, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c552:	6232      	str	r2, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c554:	61b2      	str	r2, [r6, #24]
			fp->flag = mode;		/* Set file access mode */
 800c556:	7537      	strb	r7, [r6, #20]
	BYTE *d = (BYTE*)dst;
 800c558:	462b      	mov	r3, r5
 800c55a:	3110      	adds	r1, #16
		*d++ = (BYTE)val;
 800c55c:	f803 2b01 	strb.w	r2, [r3], #1
	} while (--cnt);
 800c560:	428b      	cmp	r3, r1
 800c562:	d1fb      	bne.n	800c55c <f_open+0x184>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c564:	06ba      	lsls	r2, r7, #26
 800c566:	f57f af54 	bpl.w	800c412 <f_open+0x3a>
 800c56a:	68f7      	ldr	r7, [r6, #12]
 800c56c:	2f00      	cmp	r7, #0
 800c56e:	f43f af50 	beq.w	800c412 <f_open+0x3a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c572:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800c576:	f8bc 800a 	ldrh.w	r8, [ip, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c57a:	68b1      	ldr	r1, [r6, #8]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c57c:	61b7      	str	r7, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c57e:	fb03 f808 	mul.w	r8, r3, r8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c582:	4547      	cmp	r7, r8
 800c584:	d805      	bhi.n	800c592 <f_open+0x1ba>
 800c586:	e097      	b.n	800c6b8 <f_open+0x2e0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c588:	1c43      	adds	r3, r0, #1
 800c58a:	d015      	beq.n	800c5b8 <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c58c:	45b8      	cmp	r8, r7
 800c58e:	f080 808f 	bcs.w	800c6b0 <f_open+0x2d8>
					clst = get_fat(&fp->obj, clst);
 800c592:	6830      	ldr	r0, [r6, #0]
 800c594:	f7fe ff78 	bl	800b488 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800c598:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800c59a:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c59c:	eba7 0708 	sub.w	r7, r7, r8
					if (clst <= 1) res = FR_INT_ERR;
 800c5a0:	d8f2      	bhi.n	800c588 <f_open+0x1b0>
 800c5a2:	2402      	movs	r4, #2
	LEAVE_FF(fs, res);
 800c5a4:	f8dd c008 	ldr.w	ip, [sp, #8]
				fp->clust = clst;
 800c5a8:	61f1      	str	r1, [r6, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	6033      	str	r3, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c5ae:	f1bc 0f00 	cmp.w	ip, #0
 800c5b2:	f47f af2c 	bne.w	800c40e <f_open+0x36>
 800c5b6:	e765      	b.n	800c484 <f_open+0xac>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5b8:	2401      	movs	r4, #1
 800c5ba:	e7f3      	b.n	800c5a4 <f_open+0x1cc>
	LEAVE_FF(fs, res);
 800c5bc:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c5c0:	6030      	str	r0, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c5c2:	2402      	movs	r4, #2
 800c5c4:	f1bc 0f00 	cmp.w	ip, #0
 800c5c8:	f47f af23 	bne.w	800c412 <f_open+0x3a>
 800c5cc:	e75a      	b.n	800c484 <f_open+0xac>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c5ce:	a803      	add	r0, sp, #12
 800c5d0:	f7ff fbda 	bl	800bd88 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c5d4:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f47f af5b 	bne.w	800c494 <f_open+0xbc>
				dw = GET_FATTIME();
 800c5de:	f7fc fd9b 	bl	8009118 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5e4:	f8dd c008 	ldr.w	ip, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5e8:	b2c5      	uxtb	r5, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ea:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ee:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 800c5f2:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800c5f4:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5f6:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5f8:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 800c5fa:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800c5fe:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800c600:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800c602:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800c604:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c608:	2220      	movs	r2, #32
 800c60a:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 800c60e:	f89c 2000 	ldrb.w	r2, [ip]
	rv = rv << 8 | ptr[0];
 800c612:	7ed9      	ldrb	r1, [r3, #27]
 800c614:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c616:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800c618:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800c61c:	d063      	beq.n	800c6e6 <f_open+0x30e>
	*ptr++ = (BYTE)val; val >>= 8;
 800c61e:	2200      	movs	r2, #0
 800c620:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800c622:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c624:	f89c 1000 	ldrb.w	r1, [ip]
 800c628:	2903      	cmp	r1, #3
 800c62a:	d059      	beq.n	800c6e0 <f_open+0x308>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800c62e:	2200      	movs	r2, #0
					fs->wflag = 1;
 800c630:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800c632:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800c634:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800c636:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800c638:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800c63a:	f88c 1003 	strb.w	r1, [ip, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c63e:	b195      	cbz	r5, 800c666 <f_open+0x28e>
						res = remove_chain(&dj.obj, cl, 0);
 800c640:	4629      	mov	r1, r5
 800c642:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 800c644:	f8dc 8038 	ldr.w	r8, [ip, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 800c648:	f7ff f85c 	bl	800b704 <remove_chain>
						if (res == FR_OK) {
 800c64c:	2800      	cmp	r0, #0
 800c64e:	f47f af21 	bne.w	800c494 <f_open+0xbc>
							res = move_window(fs, dw);
 800c652:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c656:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800c65a:	4598      	cmp	r8, r3
 800c65c:	f105 35ff 	add.w	r5, r5, #4294967295
 800c660:	d152      	bne.n	800c708 <f_open+0x330>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c662:	f8cc 5018 	str.w	r5, [ip, #24]
				mode |= FA_MODIFIED;
 800c666:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800c66a:	f04f 0901 	mov.w	r9, #1
 800c66e:	e73e      	b.n	800c4ee <f_open+0x116>
 800c670:	f8dd c008 	ldr.w	ip, [sp, #8]
			if (res == FR_OK) {					/* Following succeeded */
 800c674:	2800      	cmp	r0, #0
 800c676:	f47f af0d 	bne.w	800c494 <f_open+0xbc>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c67a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800c67e:	f013 0210 	ands.w	r2, r3, #16
 800c682:	d10e      	bne.n	800c6a2 <f_open+0x2ca>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c684:	07a9      	lsls	r1, r5, #30
 800c686:	d508      	bpl.n	800c69a <f_open+0x2c2>
 800c688:	07d8      	lsls	r0, r3, #31
 800c68a:	d506      	bpl.n	800c69a <f_open+0x2c2>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c68c:	6032      	str	r2, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c68e:	f1bc 0f00 	cmp.w	ip, #0
 800c692:	f47f aef4 	bne.w	800c47e <f_open+0xa6>
						res = FR_DENIED;
 800c696:	2407      	movs	r4, #7
 800c698:	e6f4      	b.n	800c484 <f_open+0xac>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c69a:	0729      	lsls	r1, r5, #28
 800c69c:	f57f af27 	bpl.w	800c4ee <f_open+0x116>
 800c6a0:	e7e1      	b.n	800c666 <f_open+0x28e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6a2:	6034      	str	r4, [r6, #0]
					res = FR_NO_FILE;
 800c6a4:	2404      	movs	r4, #4
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c6a6:	f1bc 0f00 	cmp.w	ip, #0
 800c6aa:	f47f aeb2 	bne.w	800c412 <f_open+0x3a>
 800c6ae:	e6e9      	b.n	800c484 <f_open+0xac>
 800c6b0:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c6b4:	f8bc 300c 	ldrh.w	r3, [ip, #12]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6b8:	fbb7 f2f3 	udiv	r2, r7, r3
 800c6bc:	fb03 7312 	mls	r3, r3, r2, r7
				fp->clust = clst;
 800c6c0:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f43f aea5 	beq.w	800c412 <f_open+0x3a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6c8:	f8dc 3020 	ldr.w	r3, [ip, #32]
	clst -= 2;
 800c6cc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6ce:	3b02      	subs	r3, #2
 800c6d0:	4299      	cmp	r1, r3
 800c6d2:	d30f      	bcc.n	800c6f4 <f_open+0x31c>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	6033      	str	r3, [r6, #0]
 800c6d8:	2402      	movs	r4, #2
 800c6da:	e69a      	b.n	800c412 <f_open+0x3a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c6dc:	461c      	mov	r4, r3
 800c6de:	e68d      	b.n	800c3fc <f_open+0x24>
	*ptr++ = (BYTE)val; val >>= 8;
 800c6e0:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800c6e2:	755a      	strb	r2, [r3, #21]
 800c6e4:	e7a2      	b.n	800c62c <f_open+0x254>
	rv = rv << 8 | ptr[0];
 800c6e6:	7d59      	ldrb	r1, [r3, #21]
 800c6e8:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c6ee:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 800c6f2:	e794      	b.n	800c61e <f_open+0x246>
	return clst * fs->csize + fs->database;
 800c6f4:	f8bc 300a 	ldrh.w	r3, [ip, #10]
 800c6f8:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c6fc:	fb01 0103 	mla	r1, r1, r3, r0
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c700:	b971      	cbnz	r1, 800c720 <f_open+0x348>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c702:	6031      	str	r1, [r6, #0]
 800c704:	2402      	movs	r4, #2
 800c706:	e684      	b.n	800c412 <f_open+0x3a>
 800c708:	4660      	mov	r0, ip
 800c70a:	4641      	mov	r1, r8
 800c70c:	f7fe fbd0 	bl	800aeb0 <move_window.part.6>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c710:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c714:	f8cc 5018 	str.w	r5, [ip, #24]
		if (res == FR_OK) {
 800c718:	2800      	cmp	r0, #0
 800c71a:	d0a4      	beq.n	800c666 <f_open+0x28e>
 800c71c:	4604      	mov	r4, r0
 800c71e:	e66d      	b.n	800c3fc <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c720:	440a      	add	r2, r1
 800c722:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c724:	f89c 0001 	ldrb.w	r0, [ip, #1]
 800c728:	4629      	mov	r1, r5
 800c72a:	2301      	movs	r3, #1
 800c72c:	f7fe fa52 	bl	800abd4 <disk_read>
	LEAVE_FF(fs, res);
 800c730:	f8dd c008 	ldr.w	ip, [sp, #8]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c734:	b138      	cbz	r0, 800c746 <f_open+0x36e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c736:	2300      	movs	r3, #0
 800c738:	6033      	str	r3, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c73a:	2401      	movs	r4, #1
 800c73c:	f1bc 0f00 	cmp.w	ip, #0
 800c740:	f47f ae67 	bne.w	800c412 <f_open+0x3a>
 800c744:	e69e      	b.n	800c484 <f_open+0xac>
 800c746:	f1bc 0f00 	cmp.w	ip, #0
 800c74a:	f43f ae9b 	beq.w	800c484 <f_open+0xac>
 800c74e:	4660      	mov	r0, ip
 800c750:	4621      	mov	r1, r4
 800c752:	f7ff fcaf 	bl	800c0b4 <unlock_fs.part.10>
 800c756:	e660      	b.n	800c41a <f_open+0x42>
 800c758:	20007384 	.word	0x20007384

0800c75c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	461f      	mov	r7, r3
 800c762:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800c764:	2300      	movs	r3, #0
{
 800c766:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 800c768:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c76a:	a903      	add	r1, sp, #12
{
 800c76c:	4615      	mov	r5, r2
 800c76e:	4606      	mov	r6, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c770:	f7ff fdb4 	bl	800c2dc <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c774:	b150      	cbz	r0, 800c78c <f_read+0x30>
 800c776:	4604      	mov	r4, r0
 800c778:	9803      	ldr	r0, [sp, #12]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c77a:	b118      	cbz	r0, 800c784 <f_read+0x28>
 800c77c:	2c0c      	cmp	r4, #12
 800c77e:	d001      	beq.n	800c784 <f_read+0x28>
 800c780:	2c0b      	cmp	r4, #11
 800c782:	d151      	bne.n	800c828 <f_read+0xcc>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800c784:	4620      	mov	r0, r4
 800c786:	b005      	add	sp, #20
 800c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c78c:	7d74      	ldrb	r4, [r6, #21]
 800c78e:	9803      	ldr	r0, [sp, #12]
 800c790:	2c00      	cmp	r4, #0
 800c792:	d1f2      	bne.n	800c77a <f_read+0x1e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c794:	7d33      	ldrb	r3, [r6, #20]
 800c796:	07db      	lsls	r3, r3, #31
 800c798:	d54d      	bpl.n	800c836 <f_read+0xda>
	remain = fp->obj.objsize - fp->fptr;
 800c79a:	69b1      	ldr	r1, [r6, #24]
 800c79c:	68f3      	ldr	r3, [r6, #12]
 800c79e:	eba3 0801 	sub.w	r8, r3, r1
 800c7a2:	45a8      	cmp	r8, r5
 800c7a4:	bf28      	it	cs
 800c7a6:	46a8      	movcs	r8, r5
	for ( ;  btr;								/* Repeat until all data read */
 800c7a8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ac:	d07f      	beq.n	800c8ae <f_read+0x152>
 800c7ae:	f106 0b30 	add.w	fp, r6, #48	; 0x30
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c7b2:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800c7b6:	fbb1 f5fc 	udiv	r5, r1, ip
 800c7ba:	fb0c 1215 	mls	r2, ip, r5, r1
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	d158      	bne.n	800c874 <f_read+0x118>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c7c2:	8943      	ldrh	r3, [r0, #10]
 800c7c4:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800c7c6:	402b      	ands	r3, r5
 800c7c8:	d078      	beq.n	800c8bc <f_read+0x160>
 800c7ca:	69f2      	ldr	r2, [r6, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c7cc:	6a01      	ldr	r1, [r0, #32]
	clst -= 2;
 800c7ce:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c7d0:	3902      	subs	r1, #2
 800c7d2:	428a      	cmp	r2, r1
 800c7d4:	f080 80dd 	bcs.w	800c992 <f_read+0x236>
	return clst * fs->csize + fs->database;
 800c7d8:	8941      	ldrh	r1, [r0, #10]
 800c7da:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c7dc:	fb01 5502 	mla	r5, r1, r2, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7e0:	2d00      	cmp	r5, #0
 800c7e2:	f000 80d6 	beq.w	800c992 <f_read+0x236>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c7e6:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800c7ea:	fbb8 fafc 	udiv	sl, r8, ip
			sect += csect;
 800c7ee:	441d      	add	r5, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c7f0:	f1ba 0f00 	cmp.w	sl, #0
 800c7f4:	d026      	beq.n	800c844 <f_read+0xe8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7f6:	eb03 020a 	add.w	r2, r3, sl
 800c7fa:	428a      	cmp	r2, r1
					cc = fs->csize - csect;
 800c7fc:	bf88      	it	hi
 800c7fe:	eba1 0a03 	subhi.w	sl, r1, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c802:	7840      	ldrb	r0, [r0, #1]
 800c804:	4653      	mov	r3, sl
 800c806:	462a      	mov	r2, r5
 800c808:	4649      	mov	r1, r9
 800c80a:	f7fe f9e3 	bl	800abd4 <disk_read>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f000 8083 	beq.w	800c91a <f_read+0x1be>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	2401      	movs	r4, #1
 800c818:	7574      	strb	r4, [r6, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 808e 	beq.w	800c93c <f_read+0x1e0>
		ff_rel_grant(fs->sobj);
 800c820:	6958      	ldr	r0, [r3, #20]
 800c822:	f000 fc7d 	bl	800d120 <ff_rel_grant>
 800c826:	e7ad      	b.n	800c784 <f_read+0x28>
 800c828:	4621      	mov	r1, r4
 800c82a:	f7ff fc43 	bl	800c0b4 <unlock_fs.part.10>
}
 800c82e:	4620      	mov	r0, r4
 800c830:	b005      	add	sp, #20
 800c832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c836:	2800      	cmp	r0, #0
 800c838:	d06d      	beq.n	800c916 <f_read+0x1ba>
		ff_rel_grant(fs->sobj);
 800c83a:	6940      	ldr	r0, [r0, #20]
 800c83c:	f000 fc70 	bl	800d120 <ff_rel_grant>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c840:	2407      	movs	r4, #7
 800c842:	e79f      	b.n	800c784 <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c844:	6a32      	ldr	r2, [r6, #32]
 800c846:	42aa      	cmp	r2, r5
 800c848:	d00e      	beq.n	800c868 <f_read+0x10c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c84a:	f996 3014 	ldrsb.w	r3, [r6, #20]
 800c84e:	7840      	ldrb	r0, [r0, #1]
 800c850:	2b00      	cmp	r3, #0
 800c852:	db75      	blt.n	800c940 <f_read+0x1e4>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c854:	2301      	movs	r3, #1
 800c856:	462a      	mov	r2, r5
 800c858:	4659      	mov	r1, fp
 800c85a:	f7fe f9bb 	bl	800abd4 <disk_read>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d1d8      	bne.n	800c814 <f_read+0xb8>
 800c862:	9803      	ldr	r0, [sp, #12]
 800c864:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800c868:	69b1      	ldr	r1, [r6, #24]
			fp->sect = sect;
 800c86a:	6235      	str	r5, [r6, #32]
 800c86c:	fbb1 f2fc 	udiv	r2, r1, ip
 800c870:	fb0c 1212 	mls	r2, ip, r2, r1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c874:	ebac 0302 	sub.w	r3, ip, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c878:	4543      	cmp	r3, r8
 800c87a:	d804      	bhi.n	800c886 <f_read+0x12a>
	if (cnt) {
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 8094 	bne.w	800c9aa <f_read+0x24e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c882:	61b1      	str	r1, [r6, #24]
 800c884:	e795      	b.n	800c7b2 <f_read+0x56>
 800c886:	2500      	movs	r5, #0
 800c888:	eb0b 0102 	add.w	r1, fp, r2
 800c88c:	4648      	mov	r0, r9
 800c88e:	4642      	mov	r2, r8
 800c890:	f7fe fa7e 	bl	800ad90 <mem_cpy.part.0>
 800c894:	69b1      	ldr	r1, [r6, #24]
 800c896:	9803      	ldr	r0, [sp, #12]
 800c898:	44c1      	add	r9, r8
 800c89a:	46c2      	mov	sl, r8
 800c89c:	46a8      	mov	r8, r5
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	4451      	add	r1, sl
 800c8a2:	4453      	add	r3, sl
 800c8a4:	61b1      	str	r1, [r6, #24]
 800c8a6:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800c8a8:	f1b8 0f00 	cmp.w	r8, #0
 800c8ac:	d181      	bne.n	800c7b2 <f_read+0x56>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	f43f af68 	beq.w	800c784 <f_read+0x28>
		ff_rel_grant(fs->sobj);
 800c8b4:	6940      	ldr	r0, [r0, #20]
 800c8b6:	f000 fc33 	bl	800d120 <ff_rel_grant>
 800c8ba:	e763      	b.n	800c784 <f_read+0x28>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c8bc:	b931      	cbnz	r1, 800c8cc <f_read+0x170>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8be:	68b2      	ldr	r2, [r6, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8c0:	2a01      	cmp	r2, #1
 800c8c2:	d96c      	bls.n	800c99e <f_read+0x242>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8c4:	1c51      	adds	r1, r2, #1
 800c8c6:	d035      	beq.n	800c934 <f_read+0x1d8>
				fp->clust = clst;				/* Update current cluster */
 800c8c8:	61f2      	str	r2, [r6, #28]
 800c8ca:	e77f      	b.n	800c7cc <f_read+0x70>
					if (fp->cltbl) {
 800c8cc:	f8d6 e02c 	ldr.w	lr, [r6, #44]	; 0x2c
 800c8d0:	f8d6 c000 	ldr.w	ip, [r6]
 800c8d4:	f1be 0f00 	cmp.w	lr, #0
 800c8d8:	d043      	beq.n	800c962 <f_read+0x206>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8da:	f8de 5004 	ldr.w	r5, [lr, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c8de:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 800c8e2:	f8bc c00a 	ldrh.w	ip, [ip, #10]
 800c8e6:	fbb1 f2f2 	udiv	r2, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c8ea:	f10e 0104 	add.w	r1, lr, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c8ee:	fbb2 f2fc 	udiv	r2, r2, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c8f2:	b14d      	cbz	r5, 800c908 <f_read+0x1ac>
		if (cl < ncl) break;	/* In this fragment? */
 800c8f4:	42aa      	cmp	r2, r5
 800c8f6:	d202      	bcs.n	800c8fe <f_read+0x1a2>
 800c8f8:	e030      	b.n	800c95c <f_read+0x200>
 800c8fa:	4295      	cmp	r5, r2
 800c8fc:	d82e      	bhi.n	800c95c <f_read+0x200>
		cl -= ncl; tbl++;		/* Next fragment */
 800c8fe:	1b52      	subs	r2, r2, r5
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c900:	f851 5f08 	ldr.w	r5, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c904:	2d00      	cmp	r5, #0
 800c906:	d1f8      	bne.n	800c8fa <f_read+0x19e>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c908:	2302      	movs	r3, #2
 800c90a:	7573      	strb	r3, [r6, #21]
		ff_rel_grant(fs->sobj);
 800c90c:	6940      	ldr	r0, [r0, #20]
 800c90e:	f000 fc07 	bl	800d120 <ff_rel_grant>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c912:	2402      	movs	r4, #2
 800c914:	e736      	b.n	800c784 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c916:	2407      	movs	r4, #7
 800c918:	e734      	b.n	800c784 <f_read+0x28>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c91a:	f996 2014 	ldrsb.w	r2, [r6, #20]
 800c91e:	9803      	ldr	r0, [sp, #12]
 800c920:	2a00      	cmp	r2, #0
 800c922:	8983      	ldrh	r3, [r0, #12]
 800c924:	db26      	blt.n	800c974 <f_read+0x218>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c926:	fb03 fa0a 	mul.w	sl, r3, sl
 800c92a:	69b1      	ldr	r1, [r6, #24]
 800c92c:	44d1      	add	r9, sl
 800c92e:	eba8 080a 	sub.w	r8, r8, sl
				continue;
 800c932:	e7b4      	b.n	800c89e <f_read+0x142>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c934:	2401      	movs	r4, #1
 800c936:	7574      	strb	r4, [r6, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c938:	2800      	cmp	r0, #0
 800c93a:	d1bb      	bne.n	800c8b4 <f_read+0x158>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c93c:	2401      	movs	r4, #1
 800c93e:	e721      	b.n	800c784 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c940:	2301      	movs	r3, #1
 800c942:	4659      	mov	r1, fp
 800c944:	f7fe f954 	bl	800abf0 <disk_write>
 800c948:	2800      	cmp	r0, #0
 800c94a:	f47f af63 	bne.w	800c814 <f_read+0xb8>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c94e:	7d33      	ldrb	r3, [r6, #20]
 800c950:	9a03      	ldr	r2, [sp, #12]
 800c952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c956:	7533      	strb	r3, [r6, #20]
 800c958:	7850      	ldrb	r0, [r2, #1]
 800c95a:	e77b      	b.n	800c854 <f_read+0xf8>
	return cl + *tbl;	/* Return the cluster number */
 800c95c:	6849      	ldr	r1, [r1, #4]
 800c95e:	440a      	add	r2, r1
 800c960:	e7ae      	b.n	800c8c0 <f_read+0x164>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c962:	4660      	mov	r0, ip
 800c964:	69f1      	ldr	r1, [r6, #28]
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	f7fe fd8e 	bl	800b488 <get_fat.isra.9>
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	4602      	mov	r2, r0
 800c970:	9803      	ldr	r0, [sp, #12]
 800c972:	e7a5      	b.n	800c8c0 <f_read+0x164>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c974:	6a32      	ldr	r2, [r6, #32]
 800c976:	1b55      	subs	r5, r2, r5
 800c978:	4555      	cmp	r5, sl
 800c97a:	d2d4      	bcs.n	800c926 <f_read+0x1ca>
	if (cnt) {
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0d2      	beq.n	800c926 <f_read+0x1ca>
 800c980:	fb03 9005 	mla	r0, r3, r5, r9
 800c984:	461a      	mov	r2, r3
 800c986:	4659      	mov	r1, fp
 800c988:	f7fe fa02 	bl	800ad90 <mem_cpy.part.0>
 800c98c:	9803      	ldr	r0, [sp, #12]
 800c98e:	8983      	ldrh	r3, [r0, #12]
 800c990:	e7c9      	b.n	800c926 <f_read+0x1ca>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c992:	2402      	movs	r4, #2
 800c994:	7574      	strb	r4, [r6, #21]
		ff_rel_grant(fs->sobj);
 800c996:	6940      	ldr	r0, [r0, #20]
 800c998:	f000 fbc2 	bl	800d120 <ff_rel_grant>
 800c99c:	e6f2      	b.n	800c784 <f_read+0x28>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c99e:	2402      	movs	r4, #2
 800c9a0:	7574      	strb	r4, [r6, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f43f aeee 	beq.w	800c784 <f_read+0x28>
 800c9a8:	e7b0      	b.n	800c90c <f_read+0x1b0>
 800c9aa:	eba8 0503 	sub.w	r5, r8, r3
	if (cnt) {
 800c9ae:	4698      	mov	r8, r3
 800c9b0:	e76a      	b.n	800c888 <f_read+0x12c>
 800c9b2:	bf00      	nop

0800c9b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	b082      	sub	sp, #8
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9b8:	a901      	add	r1, sp, #4
{
 800c9ba:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9bc:	f7ff fc8e 	bl	800c2dc <validate>
	if (res == FR_OK) {
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d13a      	bne.n	800ca3c <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9c6:	7d2b      	ldrb	r3, [r5, #20]
 800c9c8:	065a      	lsls	r2, r3, #25
 800c9ca:	d540      	bpl.n	800ca4e <f_sync+0x9a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9cc:	061b      	lsls	r3, r3, #24
 800c9ce:	d44f      	bmi.n	800ca70 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c9d0:	f7fc fba2 	bl	8009118 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c9d4:	9c01      	ldr	r4, [sp, #4]
 800c9d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c9d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c9da:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 800c9dc:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c9de:	d13f      	bne.n	800ca60 <f_sync+0xac>
				if (res == FR_OK) {
					dir = fp->dir_ptr;
 800c9e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c9e2:	7ada      	ldrb	r2, [r3, #11]
 800c9e4:	f042 0220 	orr.w	r2, r2, #32
 800c9e8:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c9ea:	68aa      	ldr	r2, [r5, #8]
 800c9ec:	6829      	ldr	r1, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9ee:	769a      	strb	r2, [r3, #26]
 800c9f0:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 800c9f4:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c9f6:	7809      	ldrb	r1, [r1, #0]
 800c9f8:	2903      	cmp	r1, #3
 800c9fa:	d103      	bne.n	800ca04 <f_sync+0x50>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9fc:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c9fe:	0a11      	lsrs	r1, r2, #8
 800ca00:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800ca02:	7559      	strb	r1, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca04:	68ea      	ldr	r2, [r5, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca06:	771a      	strb	r2, [r3, #28]
 800ca08:	0a11      	lsrs	r1, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800ca0a:	7759      	strb	r1, [r3, #29]
 800ca0c:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ca0e:	0a31      	lsrs	r1, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800ca10:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800ca12:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca14:	7798      	strb	r0, [r3, #30]
	*ptr++ = (BYTE)val;
 800ca16:	77da      	strb	r2, [r3, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca18:	75d9      	strb	r1, [r3, #23]
 800ca1a:	0c30      	lsrs	r0, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ca1c:	2200      	movs	r2, #0
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800ca1e:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ca20:	0e36      	lsrs	r6, r6, #24
 800ca22:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
 800ca24:	765e      	strb	r6, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca26:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 800ca28:	74da      	strb	r2, [r3, #19]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca2a:	4620      	mov	r0, r4
					fs->wflag = 1;
 800ca2c:	70e1      	strb	r1, [r4, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca2e:	f7fe f9df 	bl	800adf0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca32:	7d2b      	ldrb	r3, [r5, #20]
 800ca34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca38:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca3a:	752b      	strb	r3, [r5, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ca3c:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ca3e:	b118      	cbz	r0, 800ca48 <f_sync+0x94>
 800ca40:	2c0c      	cmp	r4, #12
 800ca42:	d001      	beq.n	800ca48 <f_sync+0x94>
 800ca44:	2c0b      	cmp	r4, #11
 800ca46:	d105      	bne.n	800ca54 <f_sync+0xa0>
}
 800ca48:	4620      	mov	r0, r4
 800ca4a:	b002      	add	sp, #8
 800ca4c:	bd70      	pop	{r4, r5, r6, pc}
	LEAVE_FF(fs, res);
 800ca4e:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0f9      	beq.n	800ca48 <f_sync+0x94>
 800ca54:	4621      	mov	r1, r4
 800ca56:	f7ff fb2d 	bl	800c0b4 <unlock_fs.part.10>
}
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	b002      	add	sp, #8
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	4620      	mov	r0, r4
 800ca62:	f7fe fa25 	bl	800aeb0 <move_window.part.6>
				if (res == FR_OK) {
 800ca66:	4604      	mov	r4, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d1e7      	bne.n	800ca3c <f_sync+0x88>
 800ca6c:	9c01      	ldr	r4, [sp, #4]
 800ca6e:	e7b7      	b.n	800c9e0 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca70:	9b01      	ldr	r3, [sp, #4]
 800ca72:	6a2a      	ldr	r2, [r5, #32]
 800ca74:	7858      	ldrb	r0, [r3, #1]
 800ca76:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f7fe f8b8 	bl	800abf0 <disk_write>
 800ca80:	b130      	cbz	r0, 800ca90 <f_sync+0xdc>
 800ca82:	9b01      	ldr	r3, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ca84:	b14b      	cbz	r3, 800ca9a <f_sync+0xe6>
		ff_rel_grant(fs->sobj);
 800ca86:	6958      	ldr	r0, [r3, #20]
 800ca88:	f000 fb4a 	bl	800d120 <ff_rel_grant>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca8c:	2401      	movs	r4, #1
 800ca8e:	e7db      	b.n	800ca48 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca90:	7d2b      	ldrb	r3, [r5, #20]
 800ca92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca96:	752b      	strb	r3, [r5, #20]
 800ca98:	e79a      	b.n	800c9d0 <f_sync+0x1c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca9a:	2401      	movs	r4, #1
 800ca9c:	e7d4      	b.n	800ca48 <f_sync+0x94>
 800ca9e:	bf00      	nop

0800caa0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800caa0:	b530      	push	{r4, r5, lr}
 800caa2:	b083      	sub	sp, #12
 800caa4:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800caa6:	f7ff ff85 	bl	800c9b4 <f_sync>
	if (res == FR_OK)
 800caaa:	4604      	mov	r4, r0
 800caac:	b110      	cbz	r0, 800cab4 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800caae:	4620      	mov	r0, r4
 800cab0:	b003      	add	sp, #12
 800cab2:	bd30      	pop	{r4, r5, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cab4:	a901      	add	r1, sp, #4
 800cab6:	4628      	mov	r0, r5
 800cab8:	f7ff fc10 	bl	800c2dc <validate>
		if (res == FR_OK) {
 800cabc:	4604      	mov	r4, r0
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d1f5      	bne.n	800caae <f_close+0xe>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cac2:	692b      	ldr	r3, [r5, #16]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d909      	bls.n	800cade <f_close+0x3e>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800caca:	2402      	movs	r4, #2
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cacc:	9b01      	ldr	r3, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0ed      	beq.n	800caae <f_close+0xe>
		ff_rel_grant(fs->sobj);
 800cad2:	6958      	ldr	r0, [r3, #20]
 800cad4:	f000 fb24 	bl	800d120 <ff_rel_grant>
}
 800cad8:	4620      	mov	r0, r4
 800cada:	b003      	add	sp, #12
 800cadc:	bd30      	pop	{r4, r5, pc}
		n = Files[i].ctr;
 800cade:	4909      	ldr	r1, [pc, #36]	; (800cb04 <f_close+0x64>)
 800cae0:	011b      	lsls	r3, r3, #4
 800cae2:	18c8      	adds	r0, r1, r3
 800cae4:	8982      	ldrh	r2, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cae6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800caea:	d007      	beq.n	800cafc <f_close+0x5c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800caec:	b13a      	cbz	r2, 800cafe <f_close+0x5e>
 800caee:	3a01      	subs	r2, #1
 800caf0:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800caf2:	8182      	strh	r2, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800caf4:	b11a      	cbz	r2, 800cafe <f_close+0x5e>
				fp->obj.fs = 0;			/* Invalidate file object */
 800caf6:	2300      	movs	r3, #0
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	e7e7      	b.n	800cacc <f_close+0x2c>
		Files[i].ctr = n;
 800cafc:	8184      	strh	r4, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cafe:	2200      	movs	r2, #0
 800cb00:	50ca      	str	r2, [r1, r3]
 800cb02:	e7f8      	b.n	800caf6 <f_close+0x56>
 800cb04:	20007384 	.word	0x20007384

0800cb08 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	b083      	sub	sp, #12
 800cb0e:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cb10:	a901      	add	r1, sp, #4
{
 800cb12:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cb14:	f7ff fbe2 	bl	800c2dc <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d15e      	bne.n	800cbda <f_lseek+0xd2>
 800cb1c:	7d65      	ldrb	r5, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cb1e:	2d00      	cmp	r5, #0
 800cb20:	d15c      	bne.n	800cbdc <f_lseek+0xd4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cb22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cb24:	2a00      	cmp	r2, #0
 800cb26:	d064      	beq.n	800cbf2 <f_lseek+0xea>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cb28:	1c71      	adds	r1, r6, #1
 800cb2a:	f000 80b5 	beq.w	800cc98 <f_lseek+0x190>
 800cb2e:	68e3      	ldr	r3, [r4, #12]
 800cb30:	9801      	ldr	r0, [sp, #4]
 800cb32:	429e      	cmp	r6, r3
 800cb34:	bf28      	it	cs
 800cb36:	461e      	movcs	r6, r3
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
			fp->fptr = ofs;				/* Set file pointer */
 800cb38:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	d045      	beq.n	800cbca <f_lseek+0xc2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cb3e:	6827      	ldr	r7, [r4, #0]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb40:	6853      	ldr	r3, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb42:	89b9      	ldrh	r1, [r7, #12]
 800cb44:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cb48:	3204      	adds	r2, #4
				fp->clust = clmt_clust(fp, ofs - 1);
 800cb4a:	1e77      	subs	r7, r6, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb4c:	fbb7 f1f1 	udiv	r1, r7, r1
 800cb50:	fbb1 f1fc 	udiv	r1, r1, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cb54:	b933      	cbnz	r3, 800cb64 <f_lseek+0x5c>
 800cb56:	e0c8      	b.n	800ccea <f_lseek+0x1e2>
		cl -= ncl; tbl++;		/* Next fragment */
 800cb58:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb5a:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 80c3 	beq.w	800ccea <f_lseek+0x1e2>
		if (cl < ncl) break;	/* In this fragment? */
 800cb64:	428b      	cmp	r3, r1
 800cb66:	d9f7      	bls.n	800cb58 <f_lseek+0x50>
	return cl + *tbl;	/* Return the cluster number */
 800cb68:	6853      	ldr	r3, [r2, #4]
 800cb6a:	440b      	add	r3, r1
 800cb6c:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb6e:	6a01      	ldr	r1, [r0, #32]
				fp->clust = clmt_clust(fp, ofs - 1);
 800cb70:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb72:	1e8b      	subs	r3, r1, #2
 800cb74:	4293      	cmp	r3, r2
 800cb76:	f240 80ca 	bls.w	800cd0e <f_lseek+0x206>
	return clst * fs->csize + fs->database;
 800cb7a:	8941      	ldrh	r1, [r0, #10]
 800cb7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb7e:	fb02 3301 	mla	r3, r2, r1, r3
				dsc = clust2sect(fs, fp->clust);
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 80c3 	beq.w	800cd0e <f_lseek+0x206>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cb88:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cb8c:	fbb6 f2fc 	udiv	r2, r6, ip
 800cb90:	fb0c 6612 	mls	r6, ip, r2, r6
 800cb94:	b1d6      	cbz	r6, 800cbcc <f_lseek+0xc4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cb96:	fbb7 f6fc 	udiv	r6, r7, ip
 800cb9a:	3901      	subs	r1, #1
 800cb9c:	400e      	ands	r6, r1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cb9e:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cba0:	441e      	add	r6, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cba2:	42b2      	cmp	r2, r6
 800cba4:	d012      	beq.n	800cbcc <f_lseek+0xc4>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cba6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800cbaa:	7840      	ldrb	r0, [r0, #1]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f104 0730 	add.w	r7, r4, #48	; 0x30
 800cbb2:	f2c0 810e 	blt.w	800cdd2 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	2301      	movs	r3, #1
 800cbba:	4632      	mov	r2, r6
 800cbbc:	f7fe f80a 	bl	800abd4 <disk_read>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	f040 808a 	bne.w	800ccda <f_lseek+0x1d2>
 800cbc6:	9801      	ldr	r0, [sp, #4]
#endif
					fp->sect = dsc;
 800cbc8:	6226      	str	r6, [r4, #32]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cbca:	b110      	cbz	r0, 800cbd2 <f_lseek+0xca>
 800cbcc:	4629      	mov	r1, r5
 800cbce:	f7ff fa71 	bl	800c0b4 <unlock_fs.part.10>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	b003      	add	sp, #12
 800cbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbda:	4605      	mov	r5, r0
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cbdc:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d0f7      	beq.n	800cbd2 <f_lseek+0xca>
 800cbe2:	2d0c      	cmp	r5, #12
 800cbe4:	d0f5      	beq.n	800cbd2 <f_lseek+0xca>
 800cbe6:	2d0b      	cmp	r5, #11
 800cbe8:	d1f0      	bne.n	800cbcc <f_lseek+0xc4>
}
 800cbea:	4628      	mov	r0, r5
 800cbec:	b003      	add	sp, #12
 800cbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cbf2:	68e3      	ldr	r3, [r4, #12]
 800cbf4:	42b3      	cmp	r3, r6
 800cbf6:	d204      	bcs.n	800cc02 <f_lseek+0xfa>
 800cbf8:	7d22      	ldrb	r2, [r4, #20]
 800cbfa:	f012 0f02 	tst.w	r2, #2
 800cbfe:	bf08      	it	eq
 800cc00:	461e      	moveq	r6, r3
 800cc02:	9901      	ldr	r1, [sp, #4]
		ifptr = fp->fptr;
 800cc04:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 800cc06:	2200      	movs	r2, #0
 800cc08:	4608      	mov	r0, r1
 800cc0a:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800cc0c:	2e00      	cmp	r6, #0
 800cc0e:	d0dc      	beq.n	800cbca <f_lseek+0xc2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cc10:	894a      	ldrh	r2, [r1, #10]
 800cc12:	f8b1 800c 	ldrh.w	r8, [r1, #12]
 800cc16:	fb08 f802 	mul.w	r8, r8, r2
			if (ifptr > 0 &&
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d036      	beq.n	800cc8c <f_lseek+0x184>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	1e72      	subs	r2, r6, #1
 800cc22:	fbb3 f1f8 	udiv	r1, r3, r8
 800cc26:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800cc2a:	428a      	cmp	r2, r1
 800cc2c:	d32e      	bcc.n	800cc8c <f_lseek+0x184>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cc2e:	f1c8 0200 	rsb	r2, r8, #0
 800cc32:	4013      	ands	r3, r2
				clst = fp->clust;
 800cc34:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cc36:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 800cc38:	1af6      	subs	r6, r6, r3
			if (clst != 0) {
 800cc3a:	2f00      	cmp	r7, #0
 800cc3c:	f000 8082 	beq.w	800cd44 <f_lseek+0x23c>
				while (ofs > bcs) {						/* Cluster following loop */
 800cc40:	4546      	cmp	r6, r8
 800cc42:	d815      	bhi.n	800cc70 <f_lseek+0x168>
 800cc44:	e0d3      	b.n	800cdee <f_lseek+0x2e6>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cc46:	f7fe fcf5 	bl	800b634 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cc4a:	4607      	mov	r7, r0
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d078      	beq.n	800cd42 <f_lseek+0x23a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc50:	1c7b      	adds	r3, r7, #1
 800cc52:	9901      	ldr	r1, [sp, #4]
 800cc54:	f000 80e0 	beq.w	800ce18 <f_lseek+0x310>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cc58:	2f01      	cmp	r7, #1
 800cc5a:	f240 80e6 	bls.w	800ce2a <f_lseek+0x322>
 800cc5e:	6a0b      	ldr	r3, [r1, #32]
 800cc60:	42bb      	cmp	r3, r7
 800cc62:	f240 80eb 	bls.w	800ce3c <f_lseek+0x334>
				while (ofs > bcs) {						/* Cluster following loop */
 800cc66:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800cc68:	61e7      	str	r7, [r4, #28]
 800cc6a:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800cc6c:	f080 80c0 	bcs.w	800cdf0 <f_lseek+0x2e8>
					ofs -= bcs; fp->fptr += bcs;
 800cc70:	4443      	add	r3, r8
 800cc72:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cc74:	7d23      	ldrb	r3, [r4, #20]
 800cc76:	079a      	lsls	r2, r3, #30
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cc78:	4639      	mov	r1, r7
 800cc7a:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800cc7c:	eba6 0608 	sub.w	r6, r6, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cc80:	d4e1      	bmi.n	800cc46 <f_lseek+0x13e>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cc82:	6820      	ldr	r0, [r4, #0]
 800cc84:	f7fe fc00 	bl	800b488 <get_fat.isra.9>
 800cc88:	4607      	mov	r7, r0
 800cc8a:	e7e1      	b.n	800cc50 <f_lseek+0x148>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cc8c:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cc8e:	2f00      	cmp	r7, #0
 800cc90:	d04b      	beq.n	800cd2a <f_lseek+0x222>
 800cc92:	2300      	movs	r3, #0
				fp->clust = clst;
 800cc94:	61e7      	str	r7, [r4, #28]
 800cc96:	e7d0      	b.n	800cc3a <f_lseek+0x132>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cc98:	68a7      	ldr	r7, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc9a:	f8d2 9000 	ldr.w	r9, [r2]
 800cc9e:	f102 0a04 	add.w	sl, r2, #4
			if (cl) {
 800cca2:	b32f      	cbz	r7, 800ccf0 <f_lseek+0x1e8>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cca4:	f04f 0802 	mov.w	r8, #2
 800cca8:	463e      	mov	r6, r7
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ccaa:	f04f 0b00 	mov.w	fp, #0
 800ccae:	e003      	b.n	800ccb8 <f_lseek+0x1b0>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccb0:	1c42      	adds	r2, r0, #1
 800ccb2:	d012      	beq.n	800ccda <f_lseek+0x1d2>
					} while (cl == pcl + 1);
 800ccb4:	4283      	cmp	r3, r0
 800ccb6:	d16f      	bne.n	800cd98 <f_lseek+0x290>
						cl = get_fat(&fp->obj, cl);
 800ccb8:	4631      	mov	r1, r6
 800ccba:	6820      	ldr	r0, [r4, #0]
 800ccbc:	f7fe fbe4 	bl	800b488 <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ccc0:	2801      	cmp	r0, #1
					} while (cl == pcl + 1);
 800ccc2:	f106 0301 	add.w	r3, r6, #1
						pcl = cl; ncl++;
 800ccc6:	f10b 0b01 	add.w	fp, fp, #1
 800ccca:	4606      	mov	r6, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cccc:	d8f0      	bhi.n	800ccb0 <f_lseek+0x1a8>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	2502      	movs	r5, #2
 800ccd2:	7565      	strb	r5, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ccd4:	b92b      	cbnz	r3, 800cce2 <f_lseek+0x1da>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ccd6:	2502      	movs	r5, #2
 800ccd8:	e77b      	b.n	800cbd2 <f_lseek+0xca>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	2501      	movs	r5, #1
 800ccde:	7565      	strb	r5, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cce0:	b1db      	cbz	r3, 800cd1a <f_lseek+0x212>
		ff_rel_grant(fs->sobj);
 800cce2:	6958      	ldr	r0, [r3, #20]
 800cce4:	f000 fa1c 	bl	800d120 <ff_rel_grant>
 800cce8:	e773      	b.n	800cbd2 <f_lseek+0xca>
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ccea:	f06f 0201 	mvn.w	r2, #1
 800ccee:	e73e      	b.n	800cb6e <f_lseek+0x66>
 800ccf0:	9901      	ldr	r1, [sp, #4]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ccf2:	f04f 0802 	mov.w	r8, #2
			if (ulen <= tlen) {
 800ccf6:	45c8      	cmp	r8, r9
			*fp->cltbl = ulen;	/* Number of items used */
 800ccf8:	f8c2 8000 	str.w	r8, [r2]
			if (ulen <= tlen) {
 800ccfc:	d80f      	bhi.n	800cd1e <f_lseek+0x216>
				*tbl = 0;		/* Terminate table */
 800ccfe:	2300      	movs	r3, #0
 800cd00:	4608      	mov	r0, r1
 800cd02:	f8ca 3000 	str.w	r3, [sl]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cd06:	2800      	cmp	r0, #0
 800cd08:	f47f af60 	bne.w	800cbcc <f_lseek+0xc4>
 800cd0c:	e761      	b.n	800cbd2 <f_lseek+0xca>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cd0e:	2502      	movs	r5, #2
 800cd10:	7565      	strb	r5, [r4, #21]
		ff_rel_grant(fs->sobj);
 800cd12:	6940      	ldr	r0, [r0, #20]
 800cd14:	f000 fa04 	bl	800d120 <ff_rel_grant>
 800cd18:	e75b      	b.n	800cbd2 <f_lseek+0xca>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd1a:	2501      	movs	r5, #1
 800cd1c:	e759      	b.n	800cbd2 <f_lseek+0xca>
 800cd1e:	4608      	mov	r0, r1
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cd20:	2511      	movs	r5, #17
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cd22:	2800      	cmp	r0, #0
 800cd24:	f47f af52 	bne.w	800cbcc <f_lseek+0xc4>
 800cd28:	e753      	b.n	800cbd2 <f_lseek+0xca>
					clst = create_chain(&fp->obj, 0);
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	f7fe fc81 	bl	800b634 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cd32:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800cd34:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cd36:	d0ca      	beq.n	800ccce <f_lseek+0x1c6>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd38:	1c41      	adds	r1, r0, #1
 800cd3a:	d0ce      	beq.n	800ccda <f_lseek+0x1d2>
					fp->obj.sclust = clst;
 800cd3c:	60a0      	str	r0, [r4, #8]
 800cd3e:	69a3      	ldr	r3, [r4, #24]
 800cd40:	e7a8      	b.n	800cc94 <f_lseek+0x18c>
 800cd42:	69a3      	ldr	r3, [r4, #24]
 800cd44:	9901      	ldr	r1, [sp, #4]
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cd46:	68e2      	ldr	r2, [r4, #12]
 800cd48:	429a      	cmp	r2, r3
			fp->flag |= FA_MODIFIED;
 800cd4a:	bf3f      	itttt	cc
 800cd4c:	7d22      	ldrbcc	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800cd4e:	60e3      	strcc	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800cd50:	f042 0240 	orrcc.w	r2, r2, #64	; 0x40
 800cd54:	7522      	strbcc	r2, [r4, #20]
 800cd56:	898a      	ldrh	r2, [r1, #12]
 800cd58:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd5c:	fb02 3310 	mls	r3, r2, r0, r3
 800cd60:	4608      	mov	r0, r1
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f43f af32 	beq.w	800cbcc <f_lseek+0xc4>
 800cd68:	6a22      	ldr	r2, [r4, #32]
 800cd6a:	42ba      	cmp	r2, r7
 800cd6c:	f43f af2e 	beq.w	800cbcc <f_lseek+0xc4>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cd70:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800cd74:	7848      	ldrb	r0, [r1, #1]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cd7c:	db1c      	blt.n	800cdb8 <f_lseek+0x2b0>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd7e:	4631      	mov	r1, r6
 800cd80:	2301      	movs	r3, #1
 800cd82:	463a      	mov	r2, r7
 800cd84:	f7fd ff26 	bl	800abd4 <disk_read>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d1a6      	bne.n	800ccda <f_lseek+0x1d2>
 800cd8c:	9801      	ldr	r0, [sp, #4]
			fp->sect = nsect;
 800cd8e:	6227      	str	r7, [r4, #32]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cd90:	2800      	cmp	r0, #0
 800cd92:	f47f af1b 	bne.w	800cbcc <f_lseek+0xc4>
 800cd96:	e71c      	b.n	800cbd2 <f_lseek+0xca>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cd98:	f108 0802 	add.w	r8, r8, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cd9c:	45c1      	cmp	r9, r8
 800cd9e:	d305      	bcc.n	800cdac <f_lseek+0x2a4>
						*tbl++ = ncl; *tbl++ = tcl;
 800cda0:	4653      	mov	r3, sl
 800cda2:	f843 bb08 	str.w	fp, [r3], #8
 800cda6:	f8ca 7004 	str.w	r7, [sl, #4]
 800cdaa:	469a      	mov	sl, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cdac:	9901      	ldr	r1, [sp, #4]
 800cdae:	6a0b      	ldr	r3, [r1, #32]
 800cdb0:	4283      	cmp	r3, r0
 800cdb2:	d94b      	bls.n	800ce4c <f_lseek+0x344>
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	e777      	b.n	800cca8 <f_lseek+0x1a0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cdb8:	2301      	movs	r3, #1
 800cdba:	4631      	mov	r1, r6
 800cdbc:	f7fd ff18 	bl	800abf0 <disk_write>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d18a      	bne.n	800ccda <f_lseek+0x1d2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cdc4:	7d23      	ldrb	r3, [r4, #20]
 800cdc6:	9a01      	ldr	r2, [sp, #4]
 800cdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdcc:	7523      	strb	r3, [r4, #20]
 800cdce:	7850      	ldrb	r0, [r2, #1]
 800cdd0:	e7d5      	b.n	800cd7e <f_lseek+0x276>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7fd ff0b 	bl	800abf0 <disk_write>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f47f af7d 	bne.w	800ccda <f_lseek+0x1d2>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cde0:	7d23      	ldrb	r3, [r4, #20]
 800cde2:	9a01      	ldr	r2, [sp, #4]
 800cde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cde8:	7523      	strb	r3, [r4, #20]
 800cdea:	7850      	ldrb	r0, [r2, #1]
 800cdec:	e6e3      	b.n	800cbb6 <f_lseek+0xae>
 800cdee:	9901      	ldr	r1, [sp, #4]
				if (ofs % SS(fs)) {
 800cdf0:	898a      	ldrh	r2, [r1, #12]
 800cdf2:	fbb6 f0f2 	udiv	r0, r6, r2
				fp->fptr += ofs;
 800cdf6:	4433      	add	r3, r6
				if (ofs % SS(fs)) {
 800cdf8:	fb02 6210 	mls	r2, r2, r0, r6
				fp->fptr += ofs;
 800cdfc:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800cdfe:	b31a      	cbz	r2, 800ce48 <f_lseek+0x340>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce00:	6a0a      	ldr	r2, [r1, #32]
	clst -= 2;
 800ce02:	1ebe      	subs	r6, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce04:	3a02      	subs	r2, #2
 800ce06:	4296      	cmp	r6, r2
 800ce08:	d21b      	bcs.n	800ce42 <f_lseek+0x33a>
	return clst * fs->csize + fs->database;
 800ce0a:	894f      	ldrh	r7, [r1, #10]
 800ce0c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800ce0e:	fb06 2707 	mla	r7, r6, r7, r2
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ce12:	b1b7      	cbz	r7, 800ce42 <f_lseek+0x33a>
					nsect += (DWORD)(ofs / SS(fs));
 800ce14:	4407      	add	r7, r0
 800ce16:	e796      	b.n	800cd46 <f_lseek+0x23e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce18:	2501      	movs	r5, #1
 800ce1a:	7565      	strb	r5, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	f43f af7c 	beq.w	800cd1a <f_lseek+0x212>
		ff_rel_grant(fs->sobj);
 800ce22:	6948      	ldr	r0, [r1, #20]
 800ce24:	f000 f97c 	bl	800d120 <ff_rel_grant>
 800ce28:	e6d3      	b.n	800cbd2 <f_lseek+0xca>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	7563      	strb	r3, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ce2e:	2900      	cmp	r1, #0
 800ce30:	f43f af51 	beq.w	800ccd6 <f_lseek+0x1ce>
		ff_rel_grant(fs->sobj);
 800ce34:	6948      	ldr	r0, [r1, #20]
 800ce36:	f000 f973 	bl	800d120 <ff_rel_grant>
 800ce3a:	e74c      	b.n	800ccd6 <f_lseek+0x1ce>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	7563      	strb	r3, [r4, #21]
 800ce40:	e7f8      	b.n	800ce34 <f_lseek+0x32c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ce42:	2502      	movs	r5, #2
 800ce44:	7565      	strb	r5, [r4, #21]
 800ce46:	e7ec      	b.n	800ce22 <f_lseek+0x31a>
		fp->fptr = nsect = 0;
 800ce48:	4617      	mov	r7, r2
 800ce4a:	e77c      	b.n	800cd46 <f_lseek+0x23e>
 800ce4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ce4e:	e752      	b.n	800ccf6 <f_lseek+0x1ee>

0800ce50 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ce50:	b530      	push	{r4, r5, lr}
 800ce52:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800ce56:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ce58:	b360      	cbz	r0, 800ceb4 <f_opendir+0x64>
 800ce5a:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800ce5c:	a903      	add	r1, sp, #12
 800ce5e:	2200      	movs	r2, #0
 800ce60:	a801      	add	r0, sp, #4
 800ce62:	f7fe f88b 	bl	800af7c <find_volume>
	if (res == FR_OK) {
 800ce66:	4604      	mov	r4, r0
 800ce68:	b158      	cbz	r0, 800ce82 <f_opendir+0x32>
 800ce6a:	9803      	ldr	r0, [sp, #12]
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	602b      	str	r3, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ce70:	b118      	cbz	r0, 800ce7a <f_opendir+0x2a>
 800ce72:	2c0c      	cmp	r4, #12
 800ce74:	d001      	beq.n	800ce7a <f_opendir+0x2a>
 800ce76:	2c0b      	cmp	r4, #11
 800ce78:	d115      	bne.n	800cea6 <f_opendir+0x56>

	LEAVE_FF(fs, res);
}
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800ce80:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 800ce86:	aa04      	add	r2, sp, #16
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ce88:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 800ce8a:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f7fe fe0d 	bl	800baac <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800ce92:	4604      	mov	r4, r0
 800ce94:	b198      	cbz	r0, 800cebe <f_opendir+0x6e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ce96:	2c04      	cmp	r4, #4
 800ce98:	9803      	ldr	r0, [sp, #12]
 800ce9a:	d1e7      	bne.n	800ce6c <f_opendir+0x1c>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	602b      	str	r3, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d036      	beq.n	800cf12 <f_opendir+0xc2>
 800cea4:	2405      	movs	r4, #5
 800cea6:	4621      	mov	r1, r4
 800cea8:	f7ff f904 	bl	800c0b4 <unlock_fs.part.10>
}
 800ceac:	4620      	mov	r0, r4
 800ceae:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800ceb2:	bd30      	pop	{r4, r5, pc}
	if (!dp) return FR_INVALID_OBJECT;
 800ceb4:	2409      	movs	r4, #9
}
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800cebc:	bd30      	pop	{r4, r5, pc}
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cebe:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 800cec2:	9803      	ldr	r0, [sp, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	db11      	blt.n	800ceec <f_opendir+0x9c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cec8:	79ab      	ldrb	r3, [r5, #6]
 800ceca:	06db      	lsls	r3, r3, #27
 800cecc:	d51e      	bpl.n	800cf0c <f_opendir+0xbc>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cece:	6a2a      	ldr	r2, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 800ced0:	7801      	ldrb	r1, [r0, #0]
	rv = rv << 8 | ptr[0];
 800ced2:	7ed4      	ldrb	r4, [r2, #27]
 800ced4:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800ced6:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ced8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800cedc:	d105      	bne.n	800ceea <f_opendir+0x9a>
	rv = rv << 8 | ptr[0];
 800cede:	7d51      	ldrb	r1, [r2, #21]
 800cee0:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cee2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ceea:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 800ceec:	88c3      	ldrh	r3, [r0, #6]
 800ceee:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cef0:	2100      	movs	r1, #0
 800cef2:	4628      	mov	r0, r5
 800cef4:	f7fe fb4c 	bl	800b590 <dir_sdi>
				if (res == FR_OK) {
 800cef8:	4604      	mov	r4, r0
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d1cb      	bne.n	800ce96 <f_opendir+0x46>
					if (obj->sclust) {
 800cefe:	68ab      	ldr	r3, [r5, #8]
 800cf00:	b94b      	cbnz	r3, 800cf16 <f_opendir+0xc6>
	LEAVE_FF(fs, res);
 800cf02:	9803      	ldr	r0, [sp, #12]
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cf04:	612c      	str	r4, [r5, #16]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d1cd      	bne.n	800cea6 <f_opendir+0x56>
 800cf0a:	e7b6      	b.n	800ce7a <f_opendir+0x2a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cf0c:	602c      	str	r4, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d1c8      	bne.n	800cea4 <f_opendir+0x54>
	if (!dp) return FR_INVALID_OBJECT;
 800cf12:	2405      	movs	r4, #5
 800cf14:	e7b1      	b.n	800ce7a <f_opendir+0x2a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cf16:	4601      	mov	r1, r0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f7fd fec5 	bl	800aca8 <inc_lock>
 800cf1e:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cf20:	b928      	cbnz	r0, 800cf2e <f_opendir+0xde>
	LEAVE_FF(fs, res);
 800cf22:	9803      	ldr	r0, [sp, #12]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cf24:	602c      	str	r4, [r5, #0]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cf26:	2412      	movs	r4, #18
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d1bc      	bne.n	800cea6 <f_opendir+0x56>
 800cf2c:	e7a5      	b.n	800ce7a <f_opendir+0x2a>
	LEAVE_FF(fs, res);
 800cf2e:	9803      	ldr	r0, [sp, #12]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d1b8      	bne.n	800cea6 <f_opendir+0x56>
 800cf34:	e7a1      	b.n	800ce7a <f_opendir+0x2a>
 800cf36:	bf00      	nop

0800cf38 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3a:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 800cf3e:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cf40:	a901      	add	r1, sp, #4
{
 800cf42:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cf44:	f7ff f9ca 	bl	800c2dc <validate>
	if (res == FR_OK) {
 800cf48:	4604      	mov	r4, r0
 800cf4a:	b950      	cbnz	r0, 800cf62 <f_readdir+0x2a>
		if (!fno) {
 800cf4c:	b32e      	cbz	r6, 800cf9a <f_readdir+0x62>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	aa02      	add	r2, sp, #8
 800cf52:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800cf54:	4628      	mov	r0, r5
 800cf56:	f7ff f92f 	bl	800c1b8 <dir_read.constprop.12>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
 800cf5a:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800cf5e:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800cf60:	d00c      	beq.n	800cf7c <f_readdir+0x44>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cf62:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf64:	b130      	cbz	r0, 800cf74 <f_readdir+0x3c>
 800cf66:	2c0c      	cmp	r4, #12
 800cf68:	d004      	beq.n	800cf74 <f_readdir+0x3c>
 800cf6a:	2c0b      	cmp	r4, #11
 800cf6c:	d002      	beq.n	800cf74 <f_readdir+0x3c>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	f7ff f8a0 	bl	800c0b4 <unlock_fs.part.10>
}
 800cf74:	4620      	mov	r0, r4
 800cf76:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 800cf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				get_fileinfo(dp, fno);		/* Get the object information */
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f7ff f89e 	bl	800c0c0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cf84:	4639      	mov	r1, r7
 800cf86:	4628      	mov	r0, r5
 800cf88:	f7fe fc02 	bl	800b790 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf8c:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 800cf8e:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf90:	d1e7      	bne.n	800cf62 <f_readdir+0x2a>
	LEAVE_FF(fs, res);
 800cf92:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf94:	b138      	cbz	r0, 800cfa6 <f_readdir+0x6e>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf96:	463c      	mov	r4, r7
 800cf98:	e7e9      	b.n	800cf6e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f7fe faf7 	bl	800b590 <dir_sdi>
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	e7dd      	b.n	800cf62 <f_readdir+0x2a>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	e7e4      	b.n	800cf74 <f_readdir+0x3c>
 800cfaa:	bf00      	nop

0800cfac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cfac:	b4f0      	push	{r4, r5, r6, r7}
  if(disk.nbr < _VOLUMES)
 800cfae:	4b10      	ldr	r3, [pc, #64]	; (800cff0 <FATFS_LinkDriver+0x44>)
 800cfb0:	7a5c      	ldrb	r4, [r3, #9]
 800cfb2:	b114      	cbz	r4, 800cfba <FATFS_LinkDriver+0xe>
  uint8_t ret = 1;
 800cfb4:	2001      	movs	r0, #1
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800cfb6:	bcf0      	pop	{r4, r5, r6, r7}
 800cfb8:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 800cfba:	7a5f      	ldrb	r7, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800cfbc:	7a5e      	ldrb	r6, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800cfbe:	7a5d      	ldrb	r5, [r3, #9]
 800cfc0:	f004 02ff 	and.w	r2, r4, #255	; 0xff
    DiskNum = disk.nbr++;
 800cfc4:	7a5c      	ldrb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 800cfc6:	55da      	strb	r2, [r3, r7]
    disk.drv[disk.nbr] = drv;
 800cfc8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    DiskNum = disk.nbr++;
 800cfcc:	b2e4      	uxtb	r4, r4
    disk.drv[disk.nbr] = drv;
 800cfce:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 800cfd0:	441d      	add	r5, r3
    DiskNum = disk.nbr++;
 800cfd2:	1c60      	adds	r0, r4, #1
 800cfd4:	b2c0      	uxtb	r0, r0
 800cfd6:	7258      	strb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800cfd8:	722a      	strb	r2, [r5, #8]
    path[0] = DiskNum + '0';
 800cfda:	3430      	adds	r4, #48	; 0x30
    path[1] = ':';
 800cfdc:	253a      	movs	r5, #58	; 0x3a
    path[2] = '/';
 800cfde:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800cfe0:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 800cfe2:	4610      	mov	r0, r2
    path[1] = ':';
 800cfe4:	704d      	strb	r5, [r1, #1]
    path[3] = 0;
 800cfe6:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800cfe8:	708b      	strb	r3, [r1, #2]
}
 800cfea:	bcf0      	pop	{r4, r5, r6, r7}
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	200073a8 	.word	0x200073a8

0800cff4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cff4:	287f      	cmp	r0, #127	; 0x7f
 800cff6:	d91a      	bls.n	800d02e <ff_convert+0x3a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cff8:	b991      	cbnz	r1, 800d020 <ff_convert+0x2c>
{
 800cffa:	b410      	push	{r4}
 800cffc:	4a0e      	ldr	r2, [pc, #56]	; (800d038 <ff_convert+0x44>)
		if (dir) {		/* OEM code to Unicode */
 800cffe:	23c7      	movs	r3, #199	; 0xc7
 800d000:	e003      	b.n	800d00a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d002:	2980      	cmp	r1, #128	; 0x80
 800d004:	d016      	beq.n	800d034 <ff_convert+0x40>
 800d006:	f832 3f02 	ldrh.w	r3, [r2, #2]!
				if (chr == Tbl[c]) break;
 800d00a:	4298      	cmp	r0, r3
 800d00c:	b28c      	uxth	r4, r1
 800d00e:	f101 0101 	add.w	r1, r1, #1
 800d012:	d1f6      	bne.n	800d002 <ff_convert+0xe>
 800d014:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800d018:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 800d01a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d01e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d020:	28ff      	cmp	r0, #255	; 0xff
 800d022:	d805      	bhi.n	800d030 <ff_convert+0x3c>
 800d024:	4b04      	ldr	r3, [pc, #16]	; (800d038 <ff_convert+0x44>)
 800d026:	3880      	subs	r0, #128	; 0x80
 800d028:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800d02c:	4770      	bx	lr
}
 800d02e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d030:	2000      	movs	r0, #0
 800d032:	4770      	bx	lr
 800d034:	2000      	movs	r0, #0
 800d036:	e7f0      	b.n	800d01a <ff_convert+0x26>
 800d038:	08011b9c 	.word	0x08011b9c

0800d03c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d03c:	b470      	push	{r4, r5, r6}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d03e:	4a26      	ldr	r2, [pc, #152]	; (800d0d8 <ff_wtoupper+0x9c>)
 800d040:	4b26      	ldr	r3, [pc, #152]	; (800d0dc <ff_wtoupper+0xa0>)
 800d042:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d046:	f641 517d 	movw	r1, #7549	; 0x1d7d
 800d04a:	bf3c      	itt	cc
 800d04c:	4613      	movcc	r3, r2
 800d04e:	2161      	movcc	r1, #97	; 0x61
 800d050:	3304      	adds	r3, #4
 800d052:	e00d      	b.n	800d070 <ff_wtoupper+0x34>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 800d054:	4281      	cmp	r1, r0
 800d056:	d80e      	bhi.n	800d076 <ff_wtoupper+0x3a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d058:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800d05c:	b2d4      	uxtb	r4, r2
		if (chr < bc + nc) {	/* In the block? */
 800d05e:	1865      	adds	r5, r4, r1
 800d060:	42a8      	cmp	r0, r5
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d062:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 800d066:	db08      	blt.n	800d07a <ff_wtoupper+0x3e>
 800d068:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800d06a:	b17a      	cbz	r2, 800d08c <ff_wtoupper+0x50>
 800d06c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d070:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 800d072:	2900      	cmp	r1, #0
 800d074:	d1ee      	bne.n	800d054 <ff_wtoupper+0x18>
	}

	return chr;
}
 800d076:	bc70      	pop	{r4, r5, r6}
 800d078:	4770      	bx	lr
			switch (cmd) {
 800d07a:	2a08      	cmp	r2, #8
 800d07c:	d8fb      	bhi.n	800d076 <ff_wtoupper+0x3a>
 800d07e:	e8df f002 	tbb	[pc, r2]
 800d082:	120e      	.short	0x120e
 800d084:	211e1b18 	.word	0x211e1b18
 800d088:	2724      	.short	0x2724
 800d08a:	0a          	.byte	0x0a
 800d08b:	00          	.byte	0x00
		if (!cmd) p += nc;
 800d08c:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 800d090:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800d094:	e7dc      	b.n	800d050 <ff_wtoupper+0x14>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d096:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800d09a:	b280      	uxth	r0, r0
 800d09c:	e7eb      	b.n	800d076 <ff_wtoupper+0x3a>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d09e:	1a41      	subs	r1, r0, r1
 800d0a0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800d0a4:	e7e7      	b.n	800d076 <ff_wtoupper+0x3a>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d0a6:	1a41      	subs	r1, r0, r1
 800d0a8:	f001 0301 	and.w	r3, r1, #1
 800d0ac:	1ac0      	subs	r0, r0, r3
 800d0ae:	b280      	uxth	r0, r0
 800d0b0:	e7e1      	b.n	800d076 <ff_wtoupper+0x3a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d0b2:	3810      	subs	r0, #16
 800d0b4:	b280      	uxth	r0, r0
 800d0b6:	e7de      	b.n	800d076 <ff_wtoupper+0x3a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d0b8:	3820      	subs	r0, #32
 800d0ba:	b280      	uxth	r0, r0
 800d0bc:	e7db      	b.n	800d076 <ff_wtoupper+0x3a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d0be:	3830      	subs	r0, #48	; 0x30
 800d0c0:	b280      	uxth	r0, r0
 800d0c2:	e7d8      	b.n	800d076 <ff_wtoupper+0x3a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d0c4:	381a      	subs	r0, #26
 800d0c6:	b280      	uxth	r0, r0
 800d0c8:	e7d5      	b.n	800d076 <ff_wtoupper+0x3a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d0ca:	3008      	adds	r0, #8
 800d0cc:	b280      	uxth	r0, r0
 800d0ce:	e7d2      	b.n	800d076 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d0d0:	3850      	subs	r0, #80	; 0x50
 800d0d2:	b280      	uxth	r0, r0
 800d0d4:	e7cf      	b.n	800d076 <ff_wtoupper+0x3a>
 800d0d6:	bf00      	nop
 800d0d8:	08011c9c 	.word	0x08011c9c
 800d0dc:	08011e90 	.word	0x08011e90

0800d0e0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	460c      	mov	r4, r1
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800d0e6:	2300      	movs	r3, #0
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	4668      	mov	r0, sp
    osSemaphoreDef(SEM);
 800d0ec:	e9cd 3300 	strd	r3, r3, [sp]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d0f0:	f000 f874 	bl	800d1dc <osSemaphoreCreate>
 800d0f4:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800d0f6:	3000      	adds	r0, #0
 800d0f8:	bf18      	it	ne
 800d0fa:	2001      	movne	r0, #1
 800d0fc:	b002      	add	sp, #8
 800d0fe:	bd10      	pop	{r4, pc}

0800d100 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d100:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d102:	f000 f8c3 	bl	800d28c <osSemaphoreDelete>
#endif
    return 1;
}
 800d106:	2001      	movs	r0, #1
 800d108:	bd08      	pop	{r3, pc}
 800d10a:	bf00      	nop

0800d10c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d10c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800d10e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d112:	f000 f88d 	bl	800d230 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 800d116:	fab0 f080 	clz	r0, r0
 800d11a:	0940      	lsrs	r0, r0, #5
 800d11c:	bd08      	pop	{r3, pc}
 800d11e:	bf00      	nop

0800d120 <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d120:	f000 b8b2 	b.w	800d288 <osSemaphoreRelease>

0800d124 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d124:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d126:	6945      	ldr	r5, [r0, #20]
 800d128:	6902      	ldr	r2, [r0, #16]
 800d12a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800d12e:	460b      	mov	r3, r1
 800d130:	b086      	sub	sp, #24
 800d132:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d136:	b16d      	cbz	r5, 800d154 <osThreadCreate+0x30>
 800d138:	6980      	ldr	r0, [r0, #24]
 800d13a:	b158      	cbz	r0, 800d154 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 800d13c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800d13e:	bf14      	ite	ne
 800d140:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d142:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d144:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800d148:	9400      	str	r4, [sp, #0]
 800d14a:	4630      	mov	r0, r6
 800d14c:	f000 ffd0 	bl	800e0f0 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800d150:	b006      	add	sp, #24
 800d152:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800d154:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800d156:	bf14      	ite	ne
 800d158:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d15a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d15c:	ad05      	add	r5, sp, #20
 800d15e:	b292      	uxth	r2, r2
 800d160:	9400      	str	r4, [sp, #0]
 800d162:	4630      	mov	r0, r6
 800d164:	9501      	str	r5, [sp, #4]
 800d166:	f000 fffb 	bl	800e160 <xTaskCreate>
 800d16a:	2801      	cmp	r0, #1
 800d16c:	bf0c      	ite	eq
 800d16e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 800d170:	2000      	movne	r0, #0
}
 800d172:	b006      	add	sp, #24
 800d174:	bd70      	pop	{r4, r5, r6, pc}
 800d176:	bf00      	nop

0800d178 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d178:	b510      	push	{r4, lr}
 800d17a:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d17c:	2400      	movs	r4, #0
 800d17e:	9401      	str	r4, [sp, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d180:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d184:	b14b      	cbz	r3, 800d19a <osMutexRelease+0x22>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d186:	a901      	add	r1, sp, #4
 800d188:	f000 fbde 	bl	800d948 <xQueueGiveFromISR>
 800d18c:	2801      	cmp	r0, #1
 800d18e:	d10a      	bne.n	800d1a6 <osMutexRelease+0x2e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d190:	9b01      	ldr	r3, [sp, #4]
 800d192:	b95b      	cbnz	r3, 800d1ac <osMutexRelease+0x34>
  osStatus result = osOK;
 800d194:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d196:	b002      	add	sp, #8
 800d198:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d19a:	461a      	mov	r2, r3
 800d19c:	4619      	mov	r1, r3
 800d19e:	f000 faaf 	bl	800d700 <xQueueGenericSend>
 800d1a2:	2801      	cmp	r0, #1
 800d1a4:	d0f6      	beq.n	800d194 <osMutexRelease+0x1c>
    result = osErrorOS;
 800d1a6:	20ff      	movs	r0, #255	; 0xff
}
 800d1a8:	b002      	add	sp, #8
 800d1aa:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d1ac:	4b05      	ldr	r3, [pc, #20]	; (800d1c4 <osMutexRelease+0x4c>)
 800d1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800d1bc:	4620      	mov	r0, r4
}
 800d1be:	b002      	add	sp, #8
 800d1c0:	bd10      	pop	{r4, pc}
 800d1c2:	bf00      	nop
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800d1ce:	b91c      	cbnz	r4, 800d1d8 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 800d1d0:	f000 fdea 	bl	800dda8 <vQueueDelete>

  return osOK;
 800d1d4:	4620      	mov	r0, r4
}
 800d1d6:	bd10      	pop	{r4, pc}
    return osErrorISR;
 800d1d8:	2082      	movs	r0, #130	; 0x82
}
 800d1da:	bd10      	pop	{r4, pc}

0800d1dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d1dc:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d1de:	6844      	ldr	r4, [r0, #4]
{ 
 800d1e0:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 800d1e2:	b16c      	cbz	r4, 800d200 <osSemaphoreCreate+0x24>
    if (count == 1) {
 800d1e4:	2901      	cmp	r1, #1
 800d1e6:	d11d      	bne.n	800d224 <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d1e8:	2503      	movs	r5, #3
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	9500      	str	r5, [sp, #0]
 800d1f0:	4623      	mov	r3, r4
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	f000 fa00 	bl	800d5f8 <xQueueGenericCreateStatic>
 800d1f8:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	b003      	add	sp, #12
 800d1fe:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 800d200:	2901      	cmp	r1, #1
 800d202:	d113      	bne.n	800d22c <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 800d204:	4608      	mov	r0, r1
 800d206:	2203      	movs	r2, #3
 800d208:	4621      	mov	r1, r4
 800d20a:	f000 fa49 	bl	800d6a0 <xQueueGenericCreate>
 800d20e:	4605      	mov	r5, r0
 800d210:	2800      	cmp	r0, #0
 800d212:	d0f2      	beq.n	800d1fa <osSemaphoreCreate+0x1e>
 800d214:	4623      	mov	r3, r4
 800d216:	4622      	mov	r2, r4
 800d218:	4621      	mov	r1, r4
 800d21a:	f000 fa71 	bl	800d700 <xQueueGenericSend>
}
 800d21e:	4628      	mov	r0, r5
 800d220:	b003      	add	sp, #12
 800d222:	bd30      	pop	{r4, r5, pc}
      return NULL;
 800d224:	2500      	movs	r5, #0
}
 800d226:	4628      	mov	r0, r5
 800d228:	b003      	add	sp, #12
 800d22a:	bd30      	pop	{r4, r5, pc}
      return NULL;
 800d22c:	4625      	mov	r5, r4
 800d22e:	e7e4      	b.n	800d1fa <osSemaphoreCreate+0x1e>

0800d230 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d230:	b510      	push	{r4, lr}
 800d232:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d234:	2400      	movs	r4, #0
 800d236:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d238:	b300      	cbz	r0, 800d27c <osSemaphoreWait+0x4c>
 800d23a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d23e:	b933      	cbnz	r3, 800d24e <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d240:	f000 fc92 	bl	800db68 <xQueueSemaphoreTake>
 800d244:	2801      	cmp	r0, #1
 800d246:	d116      	bne.n	800d276 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 800d248:	2000      	movs	r0, #0
}
 800d24a:	b002      	add	sp, #8
 800d24c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d24e:	aa01      	add	r2, sp, #4
 800d250:	4621      	mov	r1, r4
 800d252:	f000 fd59 	bl	800dd08 <xQueueReceiveFromISR>
 800d256:	2801      	cmp	r0, #1
 800d258:	d10d      	bne.n	800d276 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 800d25a:	9b01      	ldr	r3, [sp, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d0f3      	beq.n	800d248 <osSemaphoreWait+0x18>
 800d260:	4b08      	ldr	r3, [pc, #32]	; (800d284 <osSemaphoreWait+0x54>)
 800d262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	f3bf 8f6f 	isb	sy
  return osOK;
 800d270:	4620      	mov	r0, r4
}
 800d272:	b002      	add	sp, #8
 800d274:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800d276:	20ff      	movs	r0, #255	; 0xff
}
 800d278:	b002      	add	sp, #8
 800d27a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 800d27c:	2080      	movs	r0, #128	; 0x80
}
 800d27e:	b002      	add	sp, #8
 800d280:	bd10      	pop	{r4, pc}
 800d282:	bf00      	nop
 800d284:	e000ed04 	.word	0xe000ed04

0800d288 <osSemaphoreRelease>:
 800d288:	f7ff bf76 	b.w	800d178 <osMutexRelease>

0800d28c <osSemaphoreDelete>:
 800d28c:	f7ff bf9c 	b.w	800d1c8 <osMutexDelete>

0800d290 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d290:	b530      	push	{r4, r5, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d292:	6882      	ldr	r2, [r0, #8]
{
 800d294:	b083      	sub	sp, #12
 800d296:	e9d0 4100 	ldrd	r4, r1, [r0]
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d29a:	b10a      	cbz	r2, 800d2a0 <osMessageCreate+0x10>
 800d29c:	68c3      	ldr	r3, [r0, #12]
 800d29e:	b933      	cbnz	r3, 800d2ae <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d2a4:	b003      	add	sp, #12
 800d2a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d2aa:	f000 b9f9 	b.w	800d6a0 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d2ae:	2500      	movs	r5, #0
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	9500      	str	r5, [sp, #0]
 800d2b4:	f000 f9a0 	bl	800d5f8 <xQueueGenericCreateStatic>
}
 800d2b8:	b003      	add	sp, #12
 800d2ba:	bd30      	pop	{r4, r5, pc}

0800d2bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d2bc:	b510      	push	{r4, lr}
 800d2be:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken = pdFALSE;
 800d2c0:	2400      	movs	r4, #0
{
 800d2c2:	9101      	str	r1, [sp, #4]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800d2c4:	42a2      	cmp	r2, r4
 800d2c6:	bf08      	it	eq
 800d2c8:	2201      	moveq	r2, #1
  portBASE_TYPE taskWoken = pdFALSE;
 800d2ca:	9403      	str	r4, [sp, #12]
 800d2cc:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800d2d0:	b15b      	cbz	r3, 800d2ea <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d2d2:	4623      	mov	r3, r4
 800d2d4:	aa03      	add	r2, sp, #12
 800d2d6:	a901      	add	r1, sp, #4
 800d2d8:	f000 fad0 	bl	800d87c <xQueueGenericSendFromISR>
 800d2dc:	2801      	cmp	r0, #1
 800d2de:	d109      	bne.n	800d2f4 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d2e0:	9b03      	ldr	r3, [sp, #12]
 800d2e2:	b953      	cbnz	r3, 800d2fa <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800d2e4:	2000      	movs	r0, #0
}
 800d2e6:	b004      	add	sp, #16
 800d2e8:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d2ea:	a901      	add	r1, sp, #4
 800d2ec:	f000 fa08 	bl	800d700 <xQueueGenericSend>
 800d2f0:	2801      	cmp	r0, #1
 800d2f2:	d0f7      	beq.n	800d2e4 <osMessagePut+0x28>
      return osErrorOS;
 800d2f4:	20ff      	movs	r0, #255	; 0xff
}
 800d2f6:	b004      	add	sp, #16
 800d2f8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d2fa:	4b05      	ldr	r3, [pc, #20]	; (800d310 <osMessagePut+0x54>)
 800d2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	f3bf 8f6f 	isb	sy
  return osOK;
 800d30a:	4620      	mov	r0, r4
}
 800d30c:	b004      	add	sp, #16
 800d30e:	bd10      	pop	{r4, pc}
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800d318:	2500      	movs	r5, #0
  event.def.message_id = queue_id;
 800d31a:	9103      	str	r1, [sp, #12]
{
 800d31c:	4604      	mov	r4, r0
  event.value.v = 0;
 800d31e:	9502      	str	r5, [sp, #8]
  
  if (queue_id == NULL) {
 800d320:	2900      	cmp	r1, #0
 800d322:	d02e      	beq.n	800d382 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800d324:	9500      	str	r5, [sp, #0]
 800d326:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d32a:	b99b      	cbnz	r3, 800d354 <osMessageGet+0x40>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d32c:	4608      	mov	r0, r1
 800d32e:	a902      	add	r1, sp, #8
 800d330:	4616      	mov	r6, r2
 800d332:	f000 fb5f 	bl	800d9f4 <xQueueReceive>
 800d336:	2801      	cmp	r0, #1
 800d338:	d02e      	beq.n	800d398 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d33a:	2e00      	cmp	r6, #0
 800d33c:	bf0c      	ite	eq
 800d33e:	2300      	moveq	r3, #0
 800d340:	2340      	movne	r3, #64	; 0x40
 800d342:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 800d344:	ab04      	add	r3, sp, #16
 800d346:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d34a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d34e:	4620      	mov	r0, r4
 800d350:	b004      	add	sp, #16
 800d352:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d354:	4608      	mov	r0, r1
 800d356:	466a      	mov	r2, sp
 800d358:	a902      	add	r1, sp, #8
 800d35a:	f000 fcd5 	bl	800dd08 <xQueueReceiveFromISR>
 800d35e:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800d360:	bf04      	itt	eq
 800d362:	2310      	moveq	r3, #16
 800d364:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800d366:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 800d368:	bf18      	it	ne
 800d36a:	9501      	strne	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0e9      	beq.n	800d344 <osMessageGet+0x30>
 800d370:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <osMessageGet+0x8c>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	e7e0      	b.n	800d344 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d382:	ab04      	add	r3, sp, #16
 800d384:	2280      	movs	r2, #128	; 0x80
 800d386:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 800d38a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d38e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d392:	4620      	mov	r0, r4
 800d394:	b004      	add	sp, #16
 800d396:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 800d398:	2310      	movs	r3, #16
 800d39a:	9301      	str	r3, [sp, #4]
 800d39c:	e7d2      	b.n	800d344 <osMessageGet+0x30>
 800d39e:	bf00      	nop
 800d3a0:	e000ed04 	.word	0xe000ed04

0800d3a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3a8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3ac:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3ae:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3b0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3b2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3b4:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop

0800d3bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop

0800d3c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3c4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d3c6:	6802      	ldr	r2, [r0, #0]
{
 800d3c8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3ca:	689c      	ldr	r4, [r3, #8]
 800d3cc:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3ce:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d3d0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d3d2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3d4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d3d6:	6099      	str	r1, [r3, #8]
}
 800d3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800d3dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d3de:	6002      	str	r2, [r0, #0]
}
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop

0800d3e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d3e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d3e8:	1c6b      	adds	r3, r5, #1
 800d3ea:	d011      	beq.n	800d410 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d3ec:	f100 0208 	add.w	r2, r0, #8
 800d3f0:	e000      	b.n	800d3f4 <vListInsert+0x10>
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6853      	ldr	r3, [r2, #4]
 800d3f6:	681c      	ldr	r4, [r3, #0]
 800d3f8:	42ac      	cmp	r4, r5
 800d3fa:	d9fa      	bls.n	800d3f2 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d3fc:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d3fe:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d400:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d402:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d404:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d406:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 800d408:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d40a:	6004      	str	r4, [r0, #0]
}
 800d40c:	bc30      	pop	{r4, r5}
 800d40e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800d410:	6902      	ldr	r2, [r0, #16]
 800d412:	6853      	ldr	r3, [r2, #4]
 800d414:	e7f2      	b.n	800d3fc <vListInsert+0x18>
 800d416:	bf00      	nop

0800d418 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d418:	6842      	ldr	r2, [r0, #4]
 800d41a:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 800d41c:	6903      	ldr	r3, [r0, #16]
{
 800d41e:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d420:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d422:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d424:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d426:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800d428:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800d42a:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d42c:	bf08      	it	eq
 800d42e:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800d430:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800d432:	2100      	movs	r1, #0
 800d434:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d436:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d438:	6818      	ldr	r0, [r3, #0]
}
 800d43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d444:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d446:	6b85      	ldr	r5, [r0, #56]	; 0x38
{
 800d448:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d44a:	b932      	cbnz	r2, 800d45a <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d44c:	6806      	ldr	r6, [r0, #0]
 800d44e:	3501      	adds	r5, #1
 800d450:	2e00      	cmp	r6, #0
 800d452:	d02d      	beq.n	800d4b0 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800d454:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d456:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800d458:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d45a:	b986      	cbnz	r6, 800d47e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d45c:	6840      	ldr	r0, [r0, #4]
 800d45e:	f001 fed8 	bl	800f212 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d466:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d468:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d46a:	4293      	cmp	r3, r2
 800d46c:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d470:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d472:	d3ef      	bcc.n	800d454 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d478:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d47a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d47e:	68c0      	ldr	r0, [r0, #12]
 800d480:	f001 fec7 	bl	800f212 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d484:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d486:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d488:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d48a:	4252      	negs	r2, r2
 800d48c:	4413      	add	r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d48e:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d490:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d492:	d202      	bcs.n	800d49a <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d494:	68a3      	ldr	r3, [r4, #8]
 800d496:	441a      	add	r2, r3
 800d498:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d49a:	2e02      	cmp	r6, #2
 800d49c:	d003      	beq.n	800d4a6 <prvCopyDataToQueue+0x66>
 800d49e:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800d4a0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4a2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4a6:	2d00      	cmp	r5, #0
 800d4a8:	d1d4      	bne.n	800d454 <prvCopyDataToQueue+0x14>
 800d4aa:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7d2      	b.n	800d456 <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4b0:	6880      	ldr	r0, [r0, #8]
 800d4b2:	f001 f96f 	bl	800e794 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4b6:	60a6      	str	r6, [r4, #8]
 800d4b8:	e7cd      	b.n	800d456 <prvCopyDataToQueue+0x16>
 800d4ba:	bf00      	nop

0800d4bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d4be:	b172      	cbz	r2, 800d4de <prvCopyDataFromQueue+0x22>
{
 800d4c0:	b410      	push	{r4}
 800d4c2:	460b      	mov	r3, r1
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4c4:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4c8:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4ca:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4cc:	60c1      	str	r1, [r0, #12]
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4ce:	bf24      	itt	cs
 800d4d0:	6801      	ldrcs	r1, [r0, #0]
 800d4d2:	60c1      	strcs	r1, [r0, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
	}
}
 800d4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f001 be9a 	b.w	800f212 <memcpy>
 800d4de:	4770      	bx	lr

0800d4e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4e4:	f001 fa86 	bl	800e9f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4e8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800d4ec:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ee:	2c00      	cmp	r4, #0
 800d4f0:	dd16      	ble.n	800d520 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4f4:	b1a3      	cbz	r3, 800d520 <prvUnlockQueue+0x40>
 800d4f6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800d4fa:	e005      	b.n	800d508 <prvUnlockQueue+0x28>
 800d4fc:	3c01      	subs	r4, #1
 800d4fe:	b2e3      	uxtb	r3, r4
 800d500:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d502:	b16b      	cbz	r3, 800d520 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d504:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d506:	b15b      	cbz	r3, 800d520 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d508:	4630      	mov	r0, r6
 800d50a:	f001 f841 	bl	800e590 <xTaskRemoveFromEventList>
 800d50e:	2800      	cmp	r0, #0
 800d510:	d0f4      	beq.n	800d4fc <prvUnlockQueue+0x1c>
 800d512:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d514:	f001 f8d2 	bl	800e6bc <vTaskMissedYield>
 800d518:	b2e3      	uxtb	r3, r4
 800d51a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1f1      	bne.n	800d504 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d520:	23ff      	movs	r3, #255	; 0xff
 800d522:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d526:	f001 fa87 	bl	800ea38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d52a:	f001 fa63 	bl	800e9f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d52e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800d532:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d534:	2c00      	cmp	r4, #0
 800d536:	dd16      	ble.n	800d566 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d538:	692b      	ldr	r3, [r5, #16]
 800d53a:	b1a3      	cbz	r3, 800d566 <prvUnlockQueue+0x86>
 800d53c:	f105 0610 	add.w	r6, r5, #16
 800d540:	e005      	b.n	800d54e <prvUnlockQueue+0x6e>
 800d542:	3c01      	subs	r4, #1
 800d544:	b2e3      	uxtb	r3, r4
 800d546:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d548:	b16b      	cbz	r3, 800d566 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d54a:	692b      	ldr	r3, [r5, #16]
 800d54c:	b15b      	cbz	r3, 800d566 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d54e:	4630      	mov	r0, r6
 800d550:	f001 f81e 	bl	800e590 <xTaskRemoveFromEventList>
 800d554:	2800      	cmp	r0, #0
 800d556:	d0f4      	beq.n	800d542 <prvUnlockQueue+0x62>
 800d558:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800d55a:	f001 f8af 	bl	800e6bc <vTaskMissedYield>
 800d55e:	b2e3      	uxtb	r3, r4
 800d560:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1f1      	bne.n	800d54a <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d566:	23ff      	movs	r3, #255	; 0xff
 800d568:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800d56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d570:	f001 ba62 	b.w	800ea38 <vPortExitCritical>

0800d574 <xQueueGenericReset>:
{
 800d574:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800d576:	b1e0      	cbz	r0, 800d5b2 <xQueueGenericReset+0x3e>
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800d57c:	f001 fa3a 	bl	800e9f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d580:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 800d584:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d586:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d588:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d58c:	1acb      	subs	r3, r1, r3
 800d58e:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d590:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d592:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800d594:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d596:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d598:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800d59c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d5a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800d5a4:	b975      	cbnz	r5, 800d5c4 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5a6:	6923      	ldr	r3, [r4, #16]
 800d5a8:	b9ab      	cbnz	r3, 800d5d6 <xQueueGenericReset+0x62>
	taskEXIT_CRITICAL();
 800d5aa:	f001 fa45 	bl	800ea38 <vPortExitCritical>
}
 800d5ae:	2001      	movs	r0, #1
 800d5b0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	e7fe      	b.n	800d5c2 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5c4:	f104 0010 	add.w	r0, r4, #16
 800d5c8:	f7ff feec 	bl	800d3a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d5d0:	f7ff fee8 	bl	800d3a4 <vListInitialise>
 800d5d4:	e7e9      	b.n	800d5aa <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5d6:	f104 0010 	add.w	r0, r4, #16
 800d5da:	f000 ffd9 	bl	800e590 <xTaskRemoveFromEventList>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d0e3      	beq.n	800d5aa <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800d5e2:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <xQueueGenericReset+0x80>)
 800d5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	e7da      	b.n	800d5aa <xQueueGenericReset+0x36>
 800d5f4:	e000ed04 	.word	0xe000ed04

0800d5f8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5f8:	b940      	cbnz	r0, 800d60c <xQueueGenericCreateStatic+0x14>
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	e7fe      	b.n	800d60a <xQueueGenericCreateStatic+0x12>
		configASSERT( pxStaticQueue != NULL );
 800d60c:	b18b      	cbz	r3, 800d632 <xQueueGenericCreateStatic+0x3a>
	{
 800d60e:	b510      	push	{r4, lr}
 800d610:	b082      	sub	sp, #8
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d612:	b37a      	cbz	r2, 800d674 <xQueueGenericCreateStatic+0x7c>
 800d614:	b1b1      	cbz	r1, 800d644 <xQueueGenericCreateStatic+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d616:	2448      	movs	r4, #72	; 0x48
 800d618:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d61a:	9c01      	ldr	r4, [sp, #4]
 800d61c:	2c48      	cmp	r4, #72	; 0x48
 800d61e:	d01a      	beq.n	800d656 <xQueueGenericCreateStatic+0x5e>
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	e7fe      	b.n	800d630 <xQueueGenericCreateStatic+0x38>
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	e7fe      	b.n	800d642 <xQueueGenericCreateStatic+0x4a>
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	e7fe      	b.n	800d654 <xQueueGenericCreateStatic+0x5c>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d656:	601a      	str	r2, [r3, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d658:	9c01      	ldr	r4, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d660:	e9c3 010f 	strd	r0, r1, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d664:	2101      	movs	r1, #1
 800d666:	4618      	mov	r0, r3
 800d668:	461c      	mov	r4, r3
 800d66a:	f7ff ff83 	bl	800d574 <xQueueGenericReset>
	}
 800d66e:	4620      	mov	r0, r4
 800d670:	b002      	add	sp, #8
 800d672:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d674:	b141      	cbz	r1, 800d688 <xQueueGenericCreateStatic+0x90>
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	e7fe      	b.n	800d686 <xQueueGenericCreateStatic+0x8e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d688:	2248      	movs	r2, #72	; 0x48
 800d68a:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d68c:	9a01      	ldr	r2, [sp, #4]
 800d68e:	2a48      	cmp	r2, #72	; 0x48
 800d690:	d1c6      	bne.n	800d620 <xQueueGenericCreateStatic+0x28>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d692:	2201      	movs	r2, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d694:	9c01      	ldr	r4, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d696:	601b      	str	r3, [r3, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d69c:	e7e0      	b.n	800d660 <xQueueGenericCreateStatic+0x68>
 800d69e:	bf00      	nop

0800d6a0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6a0:	b940      	cbnz	r0, 800d6b4 <xQueueGenericCreate+0x14>
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	e7fe      	b.n	800d6b2 <xQueueGenericCreate+0x12>
	{
 800d6b4:	b570      	push	{r4, r5, r6, lr}
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 800d6ba:	b169      	cbz	r1, 800d6d8 <xQueueGenericCreate+0x38>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6bc:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6c0:	3048      	adds	r0, #72	; 0x48
 800d6c2:	f001 fb11 	bl	800ece8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	b1b0      	cbz	r0, 800d6f8 <xQueueGenericCreate+0x58>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6ca:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6cc:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6d0:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6d4:	6003      	str	r3, [r0, #0]
 800d6d6:	e007      	b.n	800d6e8 <xQueueGenericCreate+0x48>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6d8:	2048      	movs	r0, #72	; 0x48
 800d6da:	f001 fb05 	bl	800ece8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d6de:	4604      	mov	r4, r0
 800d6e0:	b150      	cbz	r0, 800d6f8 <xQueueGenericCreate+0x58>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6e2:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6e6:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d6e8:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7ff ff40 	bl	800d574 <xQueueGenericReset>
	}
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6f8:	2400      	movs	r4, #0
	}
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	bd70      	pop	{r4, r5, r6, pc}
 800d6fe:	bf00      	nop

0800d700 <xQueueGenericSend>:
{
 800d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d708:	2800      	cmp	r0, #0
 800d70a:	f000 8099 	beq.w	800d840 <xQueueGenericSend+0x140>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d70e:	2900      	cmp	r1, #0
 800d710:	f000 8089 	beq.w	800d826 <xQueueGenericSend+0x126>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d714:	2b02      	cmp	r3, #2
 800d716:	d10b      	bne.n	800d730 <xQueueGenericSend+0x30>
 800d718:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d71a:	2a01      	cmp	r2, #1
 800d71c:	d008      	beq.n	800d730 <xQueueGenericSend+0x30>
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	e7fe      	b.n	800d72e <xQueueGenericSend+0x2e>
 800d730:	4604      	mov	r4, r0
 800d732:	461f      	mov	r7, r3
 800d734:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d736:	f000 ffc7 	bl	800e6c8 <xTaskGetSchedulerState>
 800d73a:	b950      	cbnz	r0, 800d752 <xQueueGenericSend+0x52>
 800d73c:	9e01      	ldr	r6, [sp, #4]
 800d73e:	b14e      	cbz	r6, 800d754 <xQueueGenericSend+0x54>
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	e7fe      	b.n	800d750 <xQueueGenericSend+0x50>
 800d752:	2600      	movs	r6, #0
					portYIELD_WITHIN_API();
 800d754:	f8df a120 	ldr.w	sl, [pc, #288]	; 800d878 <xQueueGenericSend+0x178>
		prvLockQueue( pxQueue );
 800d758:	f04f 0800 	mov.w	r8, #0
 800d75c:	e007      	b.n	800d76e <xQueueGenericSend+0x6e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d75e:	f001 f96b 	bl	800ea38 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d762:	4620      	mov	r0, r4
 800d764:	f7ff febc 	bl	800d4e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d768:	f000 fe10 	bl	800e38c <xTaskResumeAll>
 800d76c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800d76e:	f001 f941 	bl	800e9f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d772:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d774:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d776:	429a      	cmp	r2, r3
 800d778:	d33f      	bcc.n	800d7fa <xQueueGenericSend+0xfa>
 800d77a:	2f02      	cmp	r7, #2
 800d77c:	d03d      	beq.n	800d7fa <xQueueGenericSend+0xfa>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d77e:	9d01      	ldr	r5, [sp, #4]
 800d780:	2d00      	cmp	r5, #0
 800d782:	d066      	beq.n	800d852 <xQueueGenericSend+0x152>
				else if( xEntryTimeSet == pdFALSE )
 800d784:	b916      	cbnz	r6, 800d78c <xQueueGenericSend+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d786:	a802      	add	r0, sp, #8
 800d788:	f000 ff46 	bl	800e618 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d78c:	f001 f954 	bl	800ea38 <vPortExitCritical>
		vTaskSuspendAll();
 800d790:	f000 fd4e 	bl	800e230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d794:	f001 f92e 	bl	800e9f4 <vPortEnterCritical>
 800d798:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d79c:	2bff      	cmp	r3, #255	; 0xff
 800d79e:	bf08      	it	eq
 800d7a0:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800d7a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d7a8:	2bff      	cmp	r3, #255	; 0xff
 800d7aa:	bf08      	it	eq
 800d7ac:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800d7b0:	f001 f942 	bl	800ea38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7b4:	a901      	add	r1, sp, #4
 800d7b6:	a802      	add	r0, sp, #8
 800d7b8:	f000 ff3a 	bl	800e630 <xTaskCheckForTimeOut>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d153      	bne.n	800d868 <xQueueGenericSend+0x168>
	taskENTER_CRITICAL();
 800d7c0:	f001 f918 	bl	800e9f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d7c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d1c8      	bne.n	800d75e <xQueueGenericSend+0x5e>
	taskEXIT_CRITICAL();
 800d7cc:	f001 f934 	bl	800ea38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7d0:	9901      	ldr	r1, [sp, #4]
 800d7d2:	f104 0010 	add.w	r0, r4, #16
 800d7d6:	f000 fec1 	bl	800e55c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f7ff fe80 	bl	800d4e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7e0:	f000 fdd4 	bl	800e38c <xTaskResumeAll>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d1c1      	bne.n	800d76c <xQueueGenericSend+0x6c>
					portYIELD_WITHIN_API();
 800d7e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7ec:	f8ca 3000 	str.w	r3, [sl]
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	e7b8      	b.n	800d76c <xQueueGenericSend+0x6c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7fa:	463a      	mov	r2, r7
 800d7fc:	4649      	mov	r1, r9
 800d7fe:	4620      	mov	r0, r4
 800d800:	f7ff fe1e 	bl	800d440 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d806:	bb43      	cbnz	r3, 800d85a <xQueueGenericSend+0x15a>
					else if( xYieldRequired != pdFALSE )
 800d808:	b138      	cbz	r0, 800d81a <xQueueGenericSend+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 800d80a:	4b1b      	ldr	r3, [pc, #108]	; (800d878 <xQueueGenericSend+0x178>)
 800d80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d81a:	f001 f90d 	bl	800ea38 <vPortExitCritical>
				return pdPASS;
 800d81e:	2001      	movs	r0, #1
}
 800d820:	b004      	add	sp, #16
 800d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d826:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d828:	2a00      	cmp	r2, #0
 800d82a:	f43f af73 	beq.w	800d714 <xQueueGenericSend+0x14>
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	e7fe      	b.n	800d83e <xQueueGenericSend+0x13e>
 800d840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d844:	f383 8811 	msr	BASEPRI, r3
 800d848:	f3bf 8f6f 	isb	sy
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	e7fe      	b.n	800d850 <xQueueGenericSend+0x150>
					taskEXIT_CRITICAL();
 800d852:	f001 f8f1 	bl	800ea38 <vPortExitCritical>
					return errQUEUE_FULL;
 800d856:	4628      	mov	r0, r5
 800d858:	e7e2      	b.n	800d820 <xQueueGenericSend+0x120>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d85a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d85e:	f000 fe97 	bl	800e590 <xTaskRemoveFromEventList>
 800d862:	2800      	cmp	r0, #0
 800d864:	d1d1      	bne.n	800d80a <xQueueGenericSend+0x10a>
 800d866:	e7d8      	b.n	800d81a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
 800d868:	4620      	mov	r0, r4
 800d86a:	f7ff fe39 	bl	800d4e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d86e:	f000 fd8d 	bl	800e38c <xTaskResumeAll>
			return errQUEUE_FULL;
 800d872:	2000      	movs	r0, #0
 800d874:	e7d4      	b.n	800d820 <xQueueGenericSend+0x120>
 800d876:	bf00      	nop
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <xQueueGenericSendFromISR>:
{
 800d87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d880:	2800      	cmp	r0, #0
 800d882:	d035      	beq.n	800d8f0 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d884:	b341      	cbz	r1, 800d8d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d886:	2b02      	cmp	r3, #2
 800d888:	d10b      	bne.n	800d8a2 <xQueueGenericSendFromISR+0x26>
 800d88a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d88c:	2c01      	cmp	r4, #1
 800d88e:	d008      	beq.n	800d8a2 <xQueueGenericSendFromISR+0x26>
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	e7fe      	b.n	800d8a0 <xQueueGenericSendFromISR+0x24>
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	461f      	mov	r7, r3
 800d8a6:	4690      	mov	r8, r2
 800d8a8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8aa:	f001 f9c7 	bl	800ec3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8ae:	f3ef 8611 	mrs	r6, BASEPRI
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d8c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d31b      	bcc.n	800d902 <xQueueGenericSendFromISR+0x86>
 800d8ca:	2f02      	cmp	r7, #2
 800d8cc:	d019      	beq.n	800d902 <xQueueGenericSendFromISR+0x86>
			xReturn = errQUEUE_FULL;
 800d8ce:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8d0:	f386 8811 	msr	BASEPRI, r6
}
 800d8d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8d8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d8da:	2c00      	cmp	r4, #0
 800d8dc:	d0d3      	beq.n	800d886 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	e7fe      	b.n	800d8ee <xQueueGenericSendFromISR+0x72>
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	e7fe      	b.n	800d900 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d902:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d906:	463a      	mov	r2, r7
 800d908:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 800d90a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d90c:	4620      	mov	r0, r4
 800d90e:	f7ff fd97 	bl	800d440 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d912:	1c6b      	adds	r3, r5, #1
 800d914:	d008      	beq.n	800d928 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d916:	1c6b      	adds	r3, r5, #1
 800d918:	b25b      	sxtb	r3, r3
 800d91a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800d91e:	2001      	movs	r0, #1
	__asm volatile
 800d920:	f386 8811 	msr	BASEPRI, r6
}
 800d924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d0f7      	beq.n	800d91e <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d92e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d932:	f000 fe2d 	bl	800e590 <xTaskRemoveFromEventList>
 800d936:	2800      	cmp	r0, #0
 800d938:	d0f1      	beq.n	800d91e <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800d93a:	f1b8 0f00 	cmp.w	r8, #0
 800d93e:	d0ee      	beq.n	800d91e <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d940:	2001      	movs	r0, #1
 800d942:	f8c8 0000 	str.w	r0, [r8]
 800d946:	e7c3      	b.n	800d8d0 <xQueueGenericSendFromISR+0x54>

0800d948 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800d948:	b370      	cbz	r0, 800d9a8 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d94a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d94c:	b143      	cbz	r3, 800d960 <xQueueGiveFromISR+0x18>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	e7fe      	b.n	800d95e <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d960:	6803      	ldr	r3, [r0, #0]
 800d962:	b353      	cbz	r3, 800d9ba <xQueueGiveFromISR+0x72>
{
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	4604      	mov	r4, r0
 800d968:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96a:	f001 f967 	bl	800ec3c <vPortValidateInterruptPriority>
	__asm volatile
 800d96e:	f3ef 8611 	mrs	r6, BASEPRI
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d986:	4293      	cmp	r3, r2
 800d988:	d931      	bls.n	800d9ee <xQueueGiveFromISR+0xa6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d98a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d98e:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800d990:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d992:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800d994:	1c5a      	adds	r2, r3, #1
 800d996:	d01c      	beq.n	800d9d2 <xQueueGiveFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d998:	3301      	adds	r3, #1
 800d99a:	b25b      	sxtb	r3, r3
 800d99c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800d9a0:	2001      	movs	r0, #1
	__asm volatile
 800d9a2:	f386 8811 	msr	BASEPRI, r6
}
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	e7fe      	b.n	800d9b8 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d9ba:	6883      	ldr	r3, [r0, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d0d1      	beq.n	800d964 <xQueueGiveFromISR+0x1c>
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	e7fe      	b.n	800d9d0 <xQueueGiveFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0e3      	beq.n	800d9a0 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d9dc:	f000 fdd8 	bl	800e590 <xTaskRemoveFromEventList>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d0dd      	beq.n	800d9a0 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 800d9e4:	2d00      	cmp	r5, #0
 800d9e6:	d0db      	beq.n	800d9a0 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	6028      	str	r0, [r5, #0]
 800d9ec:	e7d9      	b.n	800d9a2 <xQueueGiveFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e7d7      	b.n	800d9a2 <xQueueGiveFromISR+0x5a>
 800d9f2:	bf00      	nop

0800d9f4 <xQueueReceive>:
{
 800d9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	f000 8099 	beq.w	800db34 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da02:	2900      	cmp	r1, #0
 800da04:	f000 8089 	beq.w	800db1a <xQueueReceive+0x126>
 800da08:	4604      	mov	r4, r0
 800da0a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da0c:	f000 fe5c 	bl	800e6c8 <xTaskGetSchedulerState>
 800da10:	b950      	cbnz	r0, 800da28 <xQueueReceive+0x34>
 800da12:	9b01      	ldr	r3, [sp, #4]
 800da14:	b143      	cbz	r3, 800da28 <xQueueReceive+0x34>
 800da16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	e7fe      	b.n	800da26 <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 800da28:	f000 ffe4 	bl	800e9f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da2e:	2d00      	cmp	r5, #0
 800da30:	d148      	bne.n	800dac4 <xQueueReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d06a      	beq.n	800db0e <xQueueReceive+0x11a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da38:	a802      	add	r0, sp, #8
 800da3a:	f000 fded 	bl	800e618 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800da3e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800db64 <xQueueReceive+0x170>
		prvLockQueue( pxQueue );
 800da42:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da44:	f104 0824 	add.w	r8, r4, #36	; 0x24
 800da48:	e012      	b.n	800da70 <xQueueReceive+0x7c>
	taskENTER_CRITICAL();
 800da4a:	f000 ffd3 	bl	800e9f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da50:	2b00      	cmp	r3, #0
 800da52:	d046      	beq.n	800dae2 <xQueueReceive+0xee>
	taskEXIT_CRITICAL();
 800da54:	f000 fff0 	bl	800ea38 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800da58:	4620      	mov	r0, r4
 800da5a:	f7ff fd41 	bl	800d4e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da5e:	f000 fc95 	bl	800e38c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800da62:	f000 ffc7 	bl	800e9f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da68:	bb65      	cbnz	r5, 800dac4 <xQueueReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d04e      	beq.n	800db0e <xQueueReceive+0x11a>
		taskEXIT_CRITICAL();
 800da70:	f000 ffe2 	bl	800ea38 <vPortExitCritical>
		vTaskSuspendAll();
 800da74:	f000 fbdc 	bl	800e230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da78:	f000 ffbc 	bl	800e9f4 <vPortEnterCritical>
 800da7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800da80:	2bff      	cmp	r3, #255	; 0xff
 800da82:	bf08      	it	eq
 800da84:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 800da88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800da8c:	2bff      	cmp	r3, #255	; 0xff
 800da8e:	bf08      	it	eq
 800da90:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 800da94:	f000 ffd0 	bl	800ea38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da98:	a901      	add	r1, sp, #4
 800da9a:	a802      	add	r0, sp, #8
 800da9c:	f000 fdc8 	bl	800e630 <xTaskCheckForTimeOut>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d0d2      	beq.n	800da4a <xQueueReceive+0x56>
			prvUnlockQueue( pxQueue );
 800daa4:	4620      	mov	r0, r4
 800daa6:	f7ff fd1b 	bl	800d4e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daaa:	f000 fc6f 	bl	800e38c <xTaskResumeAll>
	taskENTER_CRITICAL();
 800daae:	f000 ffa1 	bl	800e9f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dab4:	b35b      	cbz	r3, 800db0e <xQueueReceive+0x11a>
	taskEXIT_CRITICAL();
 800dab6:	f000 ffbf 	bl	800ea38 <vPortExitCritical>
		taskENTER_CRITICAL();
 800daba:	f000 ff9b 	bl	800e9f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dabe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dac0:	2d00      	cmp	r5, #0
 800dac2:	d0d2      	beq.n	800da6a <xQueueReceive+0x76>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dac4:	4639      	mov	r1, r7
 800dac6:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dac8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800daca:	f7ff fcf7 	bl	800d4bc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dace:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dad0:	6923      	ldr	r3, [r4, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d137      	bne.n	800db46 <xQueueReceive+0x152>
				taskEXIT_CRITICAL();
 800dad6:	f000 ffaf 	bl	800ea38 <vPortExitCritical>
				return pdPASS;
 800dada:	2001      	movs	r0, #1
}
 800dadc:	b005      	add	sp, #20
 800dade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800dae2:	f000 ffa9 	bl	800ea38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dae6:	9901      	ldr	r1, [sp, #4]
 800dae8:	4640      	mov	r0, r8
 800daea:	f000 fd37 	bl	800e55c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800daee:	4620      	mov	r0, r4
 800daf0:	f7ff fcf6 	bl	800d4e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800daf4:	f000 fc4a 	bl	800e38c <xTaskResumeAll>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d1de      	bne.n	800daba <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
 800dafc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db00:	f8c9 3000 	str.w	r3, [r9]
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	e7d5      	b.n	800daba <xQueueReceive+0xc6>
					taskEXIT_CRITICAL();
 800db0e:	f000 ff93 	bl	800ea38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800db12:	2000      	movs	r0, #0
}
 800db14:	b005      	add	sp, #20
 800db16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f43f af73 	beq.w	800da08 <xQueueReceive+0x14>
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	e7fe      	b.n	800db32 <xQueueReceive+0x13e>
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	e7fe      	b.n	800db44 <xQueueReceive+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db46:	f104 0010 	add.w	r0, r4, #16
 800db4a:	f000 fd21 	bl	800e590 <xTaskRemoveFromEventList>
 800db4e:	2800      	cmp	r0, #0
 800db50:	d0c1      	beq.n	800dad6 <xQueueReceive+0xe2>
						queueYIELD_IF_USING_PREEMPTION();
 800db52:	4b04      	ldr	r3, [pc, #16]	; (800db64 <xQueueReceive+0x170>)
 800db54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	e7b8      	b.n	800dad6 <xQueueReceive+0xe2>
 800db64:	e000ed04 	.word	0xe000ed04

0800db68 <xQueueSemaphoreTake>:
{
 800db68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db6c:	b084      	sub	sp, #16
 800db6e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800db70:	b150      	cbz	r0, 800db88 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 800db72:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800db74:	b18d      	cbz	r5, 800db9a <xQueueSemaphoreTake+0x32>
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	e7fe      	b.n	800db86 <xQueueSemaphoreTake+0x1e>
 800db88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	e7fe      	b.n	800db98 <xQueueSemaphoreTake+0x30>
 800db9a:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db9c:	f000 fd94 	bl	800e6c8 <xTaskGetSchedulerState>
 800dba0:	b950      	cbnz	r0, 800dbb8 <xQueueSemaphoreTake+0x50>
 800dba2:	9d01      	ldr	r5, [sp, #4]
 800dba4:	b145      	cbz	r5, 800dbb8 <xQueueSemaphoreTake+0x50>
 800dba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbaa:	f383 8811 	msr	BASEPRI, r3
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	e7fe      	b.n	800dbb6 <xQueueSemaphoreTake+0x4e>
 800dbb8:	462e      	mov	r6, r5
					portYIELD_WITHIN_API();
 800dbba:	f8df 8148 	ldr.w	r8, [pc, #328]	; 800dd04 <xQueueSemaphoreTake+0x19c>
		prvLockQueue( pxQueue );
 800dbbe:	2700      	movs	r7, #0
 800dbc0:	e00c      	b.n	800dbdc <xQueueSemaphoreTake+0x74>
	taskENTER_CRITICAL();
 800dbc2:	f000 ff17 	bl	800e9f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dbc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d039      	beq.n	800dc40 <xQueueSemaphoreTake+0xd8>
	taskEXIT_CRITICAL();
 800dbcc:	f000 ff34 	bl	800ea38 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f7ff fc85 	bl	800d4e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbd6:	f000 fbd9 	bl	800e38c <xTaskResumeAll>
 800dbda:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dbdc:	f000 ff0a 	bl	800e9f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dbe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d171      	bne.n	800dcca <xQueueSemaphoreTake+0x162>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbe6:	9b01      	ldr	r3, [sp, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d061      	beq.n	800dcb0 <xQueueSemaphoreTake+0x148>
				else if( xEntryTimeSet == pdFALSE )
 800dbec:	b916      	cbnz	r6, 800dbf4 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbee:	a802      	add	r0, sp, #8
 800dbf0:	f000 fd12 	bl	800e618 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dbf4:	f000 ff20 	bl	800ea38 <vPortExitCritical>
		vTaskSuspendAll();
 800dbf8:	f000 fb1a 	bl	800e230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbfc:	f000 fefa 	bl	800e9f4 <vPortEnterCritical>
 800dc00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc04:	2bff      	cmp	r3, #255	; 0xff
 800dc06:	bf08      	it	eq
 800dc08:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800dc0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc10:	2bff      	cmp	r3, #255	; 0xff
 800dc12:	bf08      	it	eq
 800dc14:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800dc18:	f000 ff0e 	bl	800ea38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc1c:	a901      	add	r1, sp, #4
 800dc1e:	a802      	add	r0, sp, #8
 800dc20:	f000 fd06 	bl	800e630 <xTaskCheckForTimeOut>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d0cc      	beq.n	800dbc2 <xQueueSemaphoreTake+0x5a>
			prvUnlockQueue( pxQueue );
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f7ff fc59 	bl	800d4e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc2e:	f000 fbad 	bl	800e38c <xTaskResumeAll>
	taskENTER_CRITICAL();
 800dc32:	f000 fedf 	bl	800e9f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc38:	b1db      	cbz	r3, 800dc72 <xQueueSemaphoreTake+0x10a>
	taskEXIT_CRITICAL();
 800dc3a:	f000 fefd 	bl	800ea38 <vPortExitCritical>
 800dc3e:	e7cc      	b.n	800dbda <xQueueSemaphoreTake+0x72>
 800dc40:	f000 fefa 	bl	800ea38 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	b1db      	cbz	r3, 800dc80 <xQueueSemaphoreTake+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc48:	9901      	ldr	r1, [sp, #4]
 800dc4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dc4e:	f000 fc85 	bl	800e55c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc52:	4620      	mov	r0, r4
 800dc54:	f7ff fc44 	bl	800d4e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc58:	f000 fb98 	bl	800e38c <xTaskResumeAll>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d1bc      	bne.n	800dbda <xQueueSemaphoreTake+0x72>
					portYIELD_WITHIN_API();
 800dc60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc64:	f8c8 3000 	str.w	r3, [r8]
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	e7b3      	b.n	800dbda <xQueueSemaphoreTake+0x72>
	taskEXIT_CRITICAL();
 800dc72:	f000 fee1 	bl	800ea38 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800dc76:	b965      	cbnz	r5, 800dc92 <xQueueSemaphoreTake+0x12a>
}
 800dc78:	4628      	mov	r0, r5
 800dc7a:	b004      	add	sp, #16
 800dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 800dc80:	f000 feb8 	bl	800e9f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc84:	68a0      	ldr	r0, [r4, #8]
 800dc86:	f000 fd2f 	bl	800e6e8 <xTaskPriorityInherit>
 800dc8a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800dc8c:	f000 fed4 	bl	800ea38 <vPortExitCritical>
 800dc90:	e7da      	b.n	800dc48 <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 800dc92:	f000 feaf 	bl	800e9f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc98:	b119      	cbz	r1, 800dca2 <xQueueSemaphoreTake+0x13a>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dc9c:	6819      	ldr	r1, [r3, #0]
 800dc9e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dca2:	68a0      	ldr	r0, [r4, #8]
 800dca4:	f000 fdce 	bl	800e844 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800dca8:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800dcaa:	f000 fec5 	bl	800ea38 <vPortExitCritical>
 800dcae:	e7e3      	b.n	800dc78 <xQueueSemaphoreTake+0x110>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dcb0:	b145      	cbz	r5, 800dcc4 <xQueueSemaphoreTake+0x15c>
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	e7fe      	b.n	800dcc2 <xQueueSemaphoreTake+0x15a>
					taskEXIT_CRITICAL();
 800dcc4:	f000 feb8 	bl	800ea38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800dcc8:	e7d6      	b.n	800dc78 <xQueueSemaphoreTake+0x110>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcca:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dccc:	3b01      	subs	r3, #1
 800dcce:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcd0:	b912      	cbnz	r2, 800dcd8 <xQueueSemaphoreTake+0x170>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dcd2:	f000 fe17 	bl	800e904 <pvTaskIncrementMutexHeldCount>
 800dcd6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcd8:	6923      	ldr	r3, [r4, #16]
 800dcda:	b91b      	cbnz	r3, 800dce4 <xQueueSemaphoreTake+0x17c>
				taskEXIT_CRITICAL();
 800dcdc:	f000 feac 	bl	800ea38 <vPortExitCritical>
				return pdPASS;
 800dce0:	2501      	movs	r5, #1
 800dce2:	e7c9      	b.n	800dc78 <xQueueSemaphoreTake+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dce4:	f104 0010 	add.w	r0, r4, #16
 800dce8:	f000 fc52 	bl	800e590 <xTaskRemoveFromEventList>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d0f5      	beq.n	800dcdc <xQueueSemaphoreTake+0x174>
						queueYIELD_IF_USING_PREEMPTION();
 800dcf0:	4b04      	ldr	r3, [pc, #16]	; (800dd04 <xQueueSemaphoreTake+0x19c>)
 800dcf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	e7ec      	b.n	800dcdc <xQueueSemaphoreTake+0x174>
 800dd02:	bf00      	nop
 800dd04:	e000ed04 	.word	0xe000ed04

0800dd08 <xQueueReceiveFromISR>:
{
 800dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800dd0c:	b1b0      	cbz	r0, 800dd3c <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd0e:	b371      	cbz	r1, 800dd6e <xQueueReceiveFromISR+0x66>
 800dd10:	4605      	mov	r5, r0
 800dd12:	4690      	mov	r8, r2
 800dd14:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd16:	f000 ff91 	bl	800ec3c <vPortValidateInterruptPriority>
	__asm volatile
 800dd1a:	f3ef 8711 	mrs	r7, BASEPRI
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd2e:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd30:	b96c      	cbnz	r4, 800dd4e <xQueueReceiveFromISR+0x46>
			xReturn = pdFAIL;
 800dd32:	4620      	mov	r0, r4
	__asm volatile
 800dd34:	f387 8811 	msr	BASEPRI, r7
}
 800dd38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	e7fe      	b.n	800dd4c <xQueueReceiveFromISR+0x44>
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd4e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd52:	4649      	mov	r1, r9
 800dd54:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd56:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd58:	f7ff fbb0 	bl	800d4bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd5c:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800dd5e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd60:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800dd62:	d010      	beq.n	800dd86 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd64:	1c73      	adds	r3, r6, #1
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800dd6c:	e00d      	b.n	800dd8a <xQueueReceiveFromISR+0x82>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d0cd      	beq.n	800dd10 <xQueueReceiveFromISR+0x8>
 800dd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	e7fe      	b.n	800dd84 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd86:	692b      	ldr	r3, [r5, #16]
 800dd88:	b90b      	cbnz	r3, 800dd8e <xQueueReceiveFromISR+0x86>
			xReturn = pdPASS;
 800dd8a:	2001      	movs	r0, #1
 800dd8c:	e7d2      	b.n	800dd34 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd8e:	f105 0010 	add.w	r0, r5, #16
 800dd92:	f000 fbfd 	bl	800e590 <xTaskRemoveFromEventList>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d0f7      	beq.n	800dd8a <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800dd9a:	f1b8 0f00 	cmp.w	r8, #0
 800dd9e:	d0f4      	beq.n	800dd8a <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dda0:	2001      	movs	r0, #1
 800dda2:	f8c8 0000 	str.w	r0, [r8]
 800dda6:	e7c5      	b.n	800dd34 <xQueueReceiveFromISR+0x2c>

0800dda8 <vQueueDelete>:
	configASSERT( pxQueue );
 800dda8:	b1c0      	cbz	r0, 800dddc <vQueueDelete+0x34>
 800ddaa:	4a13      	ldr	r2, [pc, #76]	; (800ddf8 <vQueueDelete+0x50>)
{
 800ddac:	b410      	push	{r4}
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddae:	2300      	movs	r3, #0
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	e002      	b.n	800ddba <vQueueDelete+0x12>
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	2b08      	cmp	r3, #8
 800ddb8:	d00a      	beq.n	800ddd0 <vQueueDelete+0x28>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ddba:	684c      	ldr	r4, [r1, #4]
 800ddbc:	42a0      	cmp	r0, r4
 800ddbe:	f101 0108 	add.w	r1, r1, #8
 800ddc2:	d1f7      	bne.n	800ddb4 <vQueueDelete+0xc>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ddc4:	2100      	movs	r1, #0

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ddc6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ddca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ddce:	6061      	str	r1, [r4, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ddd0:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800ddd4:	b15b      	cbz	r3, 800ddee <vQueueDelete+0x46>
}
 800ddd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	e7fe      	b.n	800ddec <vQueueDelete+0x44>
 800ddee:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 800ddf2:	f001 b80b 	b.w	800ee0c <vPortFree>
 800ddf6:	bf00      	nop
 800ddf8:	2000f8e4 	.word	0x2000f8e4

0800ddfc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ddfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de00:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de02:	f000 fdf7 	bl	800e9f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de06:	4a35      	ldr	r2, [pc, #212]	; (800dedc <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 800de08:	4d35      	ldr	r5, [pc, #212]	; (800dee0 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 800de0a:	6813      	ldr	r3, [r2, #0]
 800de0c:	3301      	adds	r3, #1
 800de0e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d034      	beq.n	800de80 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de16:	4f33      	ldr	r7, [pc, #204]	; (800dee4 <prvAddNewTaskToReadyList+0xe8>)
 800de18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	b343      	cbz	r3, 800de70 <prvAddNewTaskToReadyList+0x74>
 800de1e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800df08 <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de22:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800df0c <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de26:	4e30      	ldr	r6, [pc, #192]	; (800dee8 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 800de28:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 800de2c:	6831      	ldr	r1, [r6, #0]
 800de2e:	2301      	movs	r3, #1
 800de30:	4083      	lsls	r3, r0
 800de32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de36:	430b      	orrs	r3, r1
		uxTaskNumber++;
 800de38:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 800de3a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800de3e:	1d21      	adds	r1, r4, #4
 800de40:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 800de42:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 800de46:	f7ff fabd 	bl	800d3c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de4a:	f000 fdf5 	bl	800ea38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	b163      	cbz	r3, 800de6c <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de52:	682a      	ldr	r2, [r5, #0]
 800de54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800de56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800de58:	429a      	cmp	r2, r3
 800de5a:	d207      	bcs.n	800de6c <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de5c:	4b23      	ldr	r3, [pc, #140]	; (800deec <prvAddNewTaskToReadyList+0xf0>)
 800de5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800df08 <prvAddNewTaskToReadyList+0x10c>
 800de76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de78:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800de7a:	bf98      	it	ls
 800de7c:	602c      	strls	r4, [r5, #0]
 800de7e:	e7d0      	b.n	800de22 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 800de80:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de82:	6813      	ldr	r3, [r2, #0]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d004      	beq.n	800de92 <prvAddNewTaskToReadyList+0x96>
 800de88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800de8a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800df08 <prvAddNewTaskToReadyList+0x10c>
 800de8e:	4f15      	ldr	r7, [pc, #84]	; (800dee4 <prvAddNewTaskToReadyList+0xe8>)
 800de90:	e7c7      	b.n	800de22 <prvAddNewTaskToReadyList+0x26>
 800de92:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800df08 <prvAddNewTaskToReadyList+0x10c>
 800de96:	4646      	mov	r6, r8
 800de98:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de9c:	4630      	mov	r0, r6
 800de9e:	3614      	adds	r6, #20
 800dea0:	f7ff fa80 	bl	800d3a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dea4:	42b7      	cmp	r7, r6
 800dea6:	d1f9      	bne.n	800de9c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dea8:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800df10 <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 800deac:	4e10      	ldr	r6, [pc, #64]	; (800def0 <prvAddNewTaskToReadyList+0xf4>)
 800deae:	4f0d      	ldr	r7, [pc, #52]	; (800dee4 <prvAddNewTaskToReadyList+0xe8>)
	vListInitialise( &xDelayedTaskList1 );
 800deb0:	4648      	mov	r0, r9
 800deb2:	f7ff fa77 	bl	800d3a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7ff fa74 	bl	800d3a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800debc:	480d      	ldr	r0, [pc, #52]	; (800def4 <prvAddNewTaskToReadyList+0xf8>)
 800debe:	f7ff fa71 	bl	800d3a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dec2:	480d      	ldr	r0, [pc, #52]	; (800def8 <prvAddNewTaskToReadyList+0xfc>)
 800dec4:	f7ff fa6e 	bl	800d3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dec8:	480c      	ldr	r0, [pc, #48]	; (800defc <prvAddNewTaskToReadyList+0x100>)
 800deca:	f7ff fa6b 	bl	800d3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dece:	4a0c      	ldr	r2, [pc, #48]	; (800df00 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ded0:	4b0c      	ldr	r3, [pc, #48]	; (800df04 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800ded2:	f8c2 9000 	str.w	r9, [r2]
 800ded6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ded8:	601e      	str	r6, [r3, #0]
 800deda:	e7a2      	b.n	800de22 <prvAddNewTaskToReadyList+0x26>
 800dedc:	2000744c 	.word	0x2000744c
 800dee0:	200073b4 	.word	0x200073b4
 800dee4:	200074a8 	.word	0x200074a8
 800dee8:	20007460 	.word	0x20007460
 800deec:	e000ed04 	.word	0xe000ed04
 800def0:	20007478 	.word	0x20007478
 800def4:	20007494 	.word	0x20007494
 800def8:	200074c0 	.word	0x200074c0
 800defc:	200074ac 	.word	0x200074ac
 800df00:	200073b8 	.word	0x200073b8
 800df04:	200073bc 	.word	0x200073bc
 800df08:	200073c0 	.word	0x200073c0
 800df0c:	2000745c 	.word	0x2000745c
 800df10:	20007464 	.word	0x20007464

0800df14 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df14:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800df18:	b163      	cbz	r3, 800df34 <prvDeleteTCB+0x20>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d014      	beq.n	800df48 <prvDeleteTCB+0x34>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d014      	beq.n	800df4c <prvDeleteTCB+0x38>
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	e7fe      	b.n	800df32 <prvDeleteTCB+0x1e>
	{
 800df34:	b510      	push	{r4, lr}
 800df36:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 800df38:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800df3a:	f000 ff67 	bl	800ee0c <vPortFree>
				vPortFree( pxTCB );
 800df3e:	4620      	mov	r0, r4
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800df44:	f000 bf62 	b.w	800ee0c <vPortFree>
				vPortFree( pxTCB );
 800df48:	f000 bf60 	b.w	800ee0c <vPortFree>
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop

0800df50 <prvIdleTask>:
{
 800df50:	b580      	push	{r7, lr}
 800df52:	4c15      	ldr	r4, [pc, #84]	; (800dfa8 <prvIdleTask+0x58>)
 800df54:	4e15      	ldr	r6, [pc, #84]	; (800dfac <prvIdleTask+0x5c>)
 800df56:	4d16      	ldr	r5, [pc, #88]	; (800dfb0 <prvIdleTask+0x60>)
 800df58:	f8df a058 	ldr.w	sl, [pc, #88]	; 800dfb4 <prvIdleTask+0x64>
				taskYIELD();
 800df5c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800dfb8 <prvIdleTask+0x68>
 800df60:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 800df64:	e011      	b.n	800df8a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800df66:	f000 fd45 	bl	800e9f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df6a:	68f3      	ldr	r3, [r6, #12]
 800df6c:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df6e:	1d38      	adds	r0, r7, #4
 800df70:	f7ff fa52 	bl	800d418 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	3b01      	subs	r3, #1
 800df78:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800df80:	f000 fd5a 	bl	800ea38 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800df84:	4638      	mov	r0, r7
 800df86:	f7ff ffc5 	bl	800df14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1ea      	bne.n	800df66 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df90:	f8da 3000 	ldr.w	r3, [sl]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d9f8      	bls.n	800df8a <prvIdleTask+0x3a>
				taskYIELD();
 800df98:	f8c9 8000 	str.w	r8, [r9]
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	e7f1      	b.n	800df8a <prvIdleTask+0x3a>
 800dfa6:	bf00      	nop
 800dfa8:	20007450 	.word	0x20007450
 800dfac:	200074c0 	.word	0x200074c0
 800dfb0:	2000744c 	.word	0x2000744c
 800dfb4:	200073c0 	.word	0x200073c0
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfbc:	4a03      	ldr	r2, [pc, #12]	; (800dfcc <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfbe:	4b04      	ldr	r3, [pc, #16]	; (800dfd0 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfc0:	6812      	ldr	r2, [r2, #0]
 800dfc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfc4:	68d2      	ldr	r2, [r2, #12]
 800dfc6:	6852      	ldr	r2, [r2, #4]
 800dfc8:	601a      	str	r2, [r3, #0]
	}
}
 800dfca:	4770      	bx	lr
 800dfcc:	200073b8 	.word	0x200073b8
 800dfd0:	2000748c 	.word	0x2000748c

0800dfd4 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dfda:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dfdc:	6b25      	ldr	r5, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dfde:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dfe2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800dfe6:	3a01      	subs	r2, #1
 800dfe8:	eb05 0582 	add.w	r5, r5, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dfec:	4681      	mov	r9, r0
 800dfee:	469b      	mov	fp, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dff0:	f025 0a07 	bic.w	sl, r5, #7
	if( pcName != NULL )
 800dff4:	b399      	cbz	r1, 800e05e <prvInitialiseNewTask.isra.2+0x8a>
 800dff6:	1e48      	subs	r0, r1, #1
 800dff8:	f104 0533 	add.w	r5, r4, #51	; 0x33
 800dffc:	310f      	adds	r1, #15
 800dffe:	e001      	b.n	800e004 <prvInitialiseNewTask.isra.2+0x30>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e000:	4288      	cmp	r0, r1
 800e002:	d006      	beq.n	800e012 <prvInitialiseNewTask.isra.2+0x3e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e004:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e008:	f805 7f01 	strb.w	r7, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e00c:	7807      	ldrb	r7, [r0, #0]
 800e00e:	2f00      	cmp	r7, #0
 800e010:	d1f6      	bne.n	800e000 <prvInitialiseNewTask.isra.2+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e012:	2300      	movs	r3, #0
 800e014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e018:	2e06      	cmp	r6, #6
 800e01a:	bf28      	it	cs
 800e01c:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 800e01e:	2500      	movs	r5, #0
	pxNewTCB->uxPriority = uxPriority;
 800e020:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800e022:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e026:	1d20      	adds	r0, r4, #4
 800e028:	f7ff f9c8 	bl	800d3bc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e02c:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e030:	f104 0018 	add.w	r0, r4, #24
 800e034:	f7ff f9c2 	bl	800d3bc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e038:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e03a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e03c:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e03e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e042:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e044:	465a      	mov	r2, fp
 800e046:	4649      	mov	r1, r9
 800e048:	4650      	mov	r0, sl
 800e04a:	f000 fca5 	bl	800e998 <pxPortInitialiseStack>
 800e04e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e050:	f1b8 0f00 	cmp.w	r8, #0
 800e054:	d001      	beq.n	800e05a <prvInitialiseNewTask.isra.2+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e056:	f8c8 4000 	str.w	r4, [r8]
}
 800e05a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e05e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800e062:	e7d9      	b.n	800e018 <prvInitialiseNewTask.isra.2+0x44>

0800e064 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e066:	4b1b      	ldr	r3, [pc, #108]	; (800e0d4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e068:	4e1b      	ldr	r6, [pc, #108]	; (800e0d8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800e06a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06c:	6833      	ldr	r3, [r6, #0]
{
 800e06e:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e070:	1d18      	adds	r0, r3, #4
{
 800e072:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e074:	f7ff f9d0 	bl	800d418 <uxListRemove>
 800e078:	b940      	cbnz	r0, 800e08c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e07a:	6833      	ldr	r3, [r6, #0]
 800e07c:	4917      	ldr	r1, [pc, #92]	; (800e0dc <prvAddCurrentTaskToDelayedList+0x78>)
 800e07e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e080:	680b      	ldr	r3, [r1, #0]
 800e082:	2201      	movs	r2, #1
 800e084:	4082      	lsls	r2, r0
 800e086:	ea23 0302 	bic.w	r3, r3, r2
 800e08a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e08c:	1c6b      	adds	r3, r5, #1
 800e08e:	d017      	beq.n	800e0c0 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e090:	6833      	ldr	r3, [r6, #0]
 800e092:	1964      	adds	r4, r4, r5
 800e094:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800e096:	d20b      	bcs.n	800e0b0 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e098:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800e09a:	6818      	ldr	r0, [r3, #0]
 800e09c:	6831      	ldr	r1, [r6, #0]
 800e09e:	3104      	adds	r1, #4
 800e0a0:	f7ff f9a0 	bl	800d3e4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <prvAddCurrentTaskToDelayedList+0x80>)
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 800e0aa:	bf88      	it	hi
 800e0ac:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0b0:	4b0d      	ldr	r3, [pc, #52]	; (800e0e8 <prvAddCurrentTaskToDelayedList+0x84>)
 800e0b2:	6818      	ldr	r0, [r3, #0]
 800e0b4:	6831      	ldr	r1, [r6, #0]
}
 800e0b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0ba:	3104      	adds	r1, #4
 800e0bc:	f7ff b992 	b.w	800d3e4 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e0c0:	2f00      	cmp	r7, #0
 800e0c2:	d0e5      	beq.n	800e090 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0c4:	6831      	ldr	r1, [r6, #0]
 800e0c6:	4809      	ldr	r0, [pc, #36]	; (800e0ec <prvAddCurrentTaskToDelayedList+0x88>)
 800e0c8:	3104      	adds	r1, #4
}
 800e0ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0ce:	f7ff b979 	b.w	800d3c4 <vListInsertEnd>
 800e0d2:	bf00      	nop
 800e0d4:	200074d4 	.word	0x200074d4
 800e0d8:	200073b4 	.word	0x200073b4
 800e0dc:	20007460 	.word	0x20007460
 800e0e0:	200073b8 	.word	0x200073b8
 800e0e4:	2000748c 	.word	0x2000748c
 800e0e8:	200073bc 	.word	0x200073bc
 800e0ec:	200074ac 	.word	0x200074ac

0800e0f0 <xTaskCreateStatic>:
	{
 800e0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0f2:	b087      	sub	sp, #28
 800e0f4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800e0f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800e0fa:	b1bd      	cbz	r5, 800e12c <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 800e0fc:	b16c      	cbz	r4, 800e11a <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0fe:	2754      	movs	r7, #84	; 0x54
 800e100:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e102:	9f05      	ldr	r7, [sp, #20]
 800e104:	2f54      	cmp	r7, #84	; 0x54
 800e106:	d01a      	beq.n	800e13e <xTaskCreateStatic+0x4e>
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	e7fe      	b.n	800e118 <xTaskCreateStatic+0x28>
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	e7fe      	b.n	800e12a <xTaskCreateStatic+0x3a>
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	e7fe      	b.n	800e13c <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e13e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e140:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e142:	ad04      	add	r5, sp, #16
 800e144:	9402      	str	r4, [sp, #8]
 800e146:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e148:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e14c:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e14e:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e150:	f7ff ff40 	bl	800dfd4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e154:	4620      	mov	r0, r4
 800e156:	f7ff fe51 	bl	800ddfc <prvAddNewTaskToReadyList>
	}
 800e15a:	9804      	ldr	r0, [sp, #16]
 800e15c:	b007      	add	sp, #28
 800e15e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e160 <xTaskCreate>:
	{
 800e160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e164:	4607      	mov	r7, r0
 800e166:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e168:	0090      	lsls	r0, r2, #2
	{
 800e16a:	4616      	mov	r6, r2
 800e16c:	4688      	mov	r8, r1
 800e16e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e170:	f000 fdba 	bl	800ece8 <pvPortMalloc>
			if( pxStack != NULL )
 800e174:	b320      	cbz	r0, 800e1c0 <xTaskCreate+0x60>
 800e176:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e178:	2054      	movs	r0, #84	; 0x54
 800e17a:	f000 fdb5 	bl	800ece8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e17e:	4604      	mov	r4, r0
 800e180:	b1b0      	cbz	r0, 800e1b0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800e182:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e184:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e188:	9d0d      	ldr	r5, [sp, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e18a:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e18e:	9501      	str	r5, [sp, #4]
 800e190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e192:	9402      	str	r4, [sp, #8]
 800e194:	464b      	mov	r3, r9
 800e196:	4632      	mov	r2, r6
 800e198:	4641      	mov	r1, r8
 800e19a:	4638      	mov	r0, r7
 800e19c:	9500      	str	r5, [sp, #0]
 800e19e:	f7ff ff19 	bl	800dfd4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f7ff fe2a 	bl	800ddfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1a8:	2001      	movs	r0, #1
	}
 800e1aa:	b005      	add	sp, #20
 800e1ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f000 fe2b 	bl	800ee0c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1b6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e1ba:	b005      	add	sp, #20
 800e1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800e1c4:	e7f1      	b.n	800e1aa <xTaskCreate+0x4a>
 800e1c6:	bf00      	nop

0800e1c8 <vTaskStartScheduler>:
{
 800e1c8:	b530      	push	{r4, r5, lr}
 800e1ca:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1cc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1ce:	aa07      	add	r2, sp, #28
 800e1d0:	a906      	add	r1, sp, #24
 800e1d2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1d8:	f7f2 f9e2 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1dc:	a805      	add	r0, sp, #20
 800e1de:	c807      	ldmia	r0, {r0, r1, r2}
 800e1e0:	4623      	mov	r3, r4
 800e1e2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800e1e6:	9400      	str	r4, [sp, #0]
 800e1e8:	490c      	ldr	r1, [pc, #48]	; (800e21c <vTaskStartScheduler+0x54>)
 800e1ea:	480d      	ldr	r0, [pc, #52]	; (800e220 <vTaskStartScheduler+0x58>)
 800e1ec:	f7ff ff80 	bl	800e0f0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e1f0:	b190      	cbz	r0, 800e218 <vTaskStartScheduler+0x50>
 800e1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e202:	4808      	ldr	r0, [pc, #32]	; (800e224 <vTaskStartScheduler+0x5c>)
		xSchedulerRunning = pdTRUE;
 800e204:	4a08      	ldr	r2, [pc, #32]	; (800e228 <vTaskStartScheduler+0x60>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <vTaskStartScheduler+0x64>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800e208:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 800e20c:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 800e20e:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 800e210:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e212:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800e214:	f000 fc8a 	bl	800eb2c <xPortStartScheduler>
}
 800e218:	b009      	add	sp, #36	; 0x24
 800e21a:	bd30      	pop	{r4, r5, pc}
 800e21c:	08011f4c 	.word	0x08011f4c
 800e220:	0800df51 	.word	0x0800df51
 800e224:	2000748c 	.word	0x2000748c
 800e228:	200074a8 	.word	0x200074a8
 800e22c:	200074d4 	.word	0x200074d4

0800e230 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e230:	4a02      	ldr	r2, [pc, #8]	; (800e23c <vTaskSuspendAll+0xc>)
 800e232:	6813      	ldr	r3, [r2, #0]
 800e234:	3301      	adds	r3, #1
 800e236:	6013      	str	r3, [r2, #0]
}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	20007458 	.word	0x20007458

0800e240 <xTaskIncrementTick>:
{
 800e240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e244:	4b46      	ldr	r3, [pc, #280]	; (800e360 <xTaskIncrementTick+0x120>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	b9cb      	cbnz	r3, 800e27e <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e24a:	4b46      	ldr	r3, [pc, #280]	; (800e364 <xTaskIncrementTick+0x124>)
 800e24c:	681e      	ldr	r6, [r3, #0]
 800e24e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800e250:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e252:	b30e      	cbz	r6, 800e298 <xTaskIncrementTick+0x58>
 800e254:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e384 <xTaskIncrementTick+0x144>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e258:	f8db 2000 	ldr.w	r2, [fp]
 800e25c:	42b2      	cmp	r2, r6
 800e25e:	d929      	bls.n	800e2b4 <xTaskIncrementTick+0x74>
 800e260:	4f41      	ldr	r7, [pc, #260]	; (800e368 <xTaskIncrementTick+0x128>)
 800e262:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800e388 <xTaskIncrementTick+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 800e266:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e268:	f8d8 3000 	ldr.w	r3, [r8]
 800e26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800e276:	2b02      	cmp	r3, #2
 800e278:	bf28      	it	cs
 800e27a:	2401      	movcs	r4, #1
 800e27c:	e004      	b.n	800e288 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800e27e:	4a3b      	ldr	r2, [pc, #236]	; (800e36c <xTaskIncrementTick+0x12c>)
 800e280:	6813      	ldr	r3, [r2, #0]
 800e282:	3301      	adds	r3, #1
 800e284:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e286:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800e288:	4b39      	ldr	r3, [pc, #228]	; (800e370 <xTaskIncrementTick+0x130>)
 800e28a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800e28c:	2b00      	cmp	r3, #0
}
 800e28e:	bf0c      	ite	eq
 800e290:	4620      	moveq	r0, r4
 800e292:	2001      	movne	r0, #1
 800e294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800e298:	4d36      	ldr	r5, [pc, #216]	; (800e374 <xTaskIncrementTick+0x134>)
 800e29a:	682b      	ldr	r3, [r5, #0]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d048      	beq.n	800e334 <xTaskIncrementTick+0xf4>
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	e7fe      	b.n	800e2b2 <xTaskIncrementTick+0x72>
 800e2b4:	4d2f      	ldr	r5, [pc, #188]	; (800e374 <xTaskIncrementTick+0x134>)
 800e2b6:	4f2c      	ldr	r7, [pc, #176]	; (800e368 <xTaskIncrementTick+0x128>)
 800e2b8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800e388 <xTaskIncrementTick+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 800e2bc:	2400      	movs	r4, #0
 800e2be:	e02d      	b.n	800e31c <xTaskIncrementTick+0xdc>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2c0:	682a      	ldr	r2, [r5, #0]
 800e2c2:	68d2      	ldr	r2, [r2, #12]
 800e2c4:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2cc:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800e2d0:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d2:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800e2d4:	d32b      	bcc.n	800e32e <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d6:	f7ff f89f 	bl	800d418 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2da:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2de:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2e2:	b109      	cbz	r1, 800e2e8 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2e4:	f7ff f898 	bl	800d418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2e8:	4a23      	ldr	r2, [pc, #140]	; (800e378 <xTaskIncrementTick+0x138>)
 800e2ea:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800e2ee:	6813      	ldr	r3, [r2, #0]
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	fa01 fc00 	lsl.w	ip, r1, r0
 800e2f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e2fa:	4651      	mov	r1, sl
 800e2fc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800e300:	ea4c 0c03 	orr.w	ip, ip, r3
 800e304:	f8c2 c000 	str.w	ip, [r2]
 800e308:	f7ff f85c 	bl	800d3c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e30c:	f8d8 0000 	ldr.w	r0, [r8]
 800e310:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800e314:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800e316:	4291      	cmp	r1, r2
 800e318:	bf28      	it	cs
 800e31a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e31c:	682a      	ldr	r2, [r5, #0]
 800e31e:	6812      	ldr	r2, [r2, #0]
 800e320:	2a00      	cmp	r2, #0
 800e322:	d1cd      	bne.n	800e2c0 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e324:	f04f 32ff 	mov.w	r2, #4294967295
 800e328:	f8cb 2000 	str.w	r2, [fp]
					break;
 800e32c:	e79c      	b.n	800e268 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 800e32e:	f8cb 1000 	str.w	r1, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e332:	e799      	b.n	800e268 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 800e334:	4b11      	ldr	r3, [pc, #68]	; (800e37c <xTaskIncrementTick+0x13c>)
 800e336:	6829      	ldr	r1, [r5, #0]
 800e338:	4a11      	ldr	r2, [pc, #68]	; (800e380 <xTaskIncrementTick+0x140>)
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	6028      	str	r0, [r5, #0]
 800e33e:	6019      	str	r1, [r3, #0]
 800e340:	6813      	ldr	r3, [r2, #0]
 800e342:	3301      	adds	r3, #1
 800e344:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	b933      	cbnz	r3, 800e35a <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e34c:	f8df b034 	ldr.w	fp, [pc, #52]	; 800e384 <xTaskIncrementTick+0x144>
 800e350:	f04f 32ff 	mov.w	r2, #4294967295
 800e354:	f8cb 2000 	str.w	r2, [fp]
 800e358:	e77e      	b.n	800e258 <xTaskIncrementTick+0x18>
 800e35a:	f7ff fe2f 	bl	800dfbc <prvResetNextTaskUnblockTime.part.1>
 800e35e:	e779      	b.n	800e254 <xTaskIncrementTick+0x14>
 800e360:	20007458 	.word	0x20007458
 800e364:	200074d4 	.word	0x200074d4
 800e368:	200073c0 	.word	0x200073c0
 800e36c:	20007454 	.word	0x20007454
 800e370:	200074d8 	.word	0x200074d8
 800e374:	200073b8 	.word	0x200073b8
 800e378:	20007460 	.word	0x20007460
 800e37c:	200073bc 	.word	0x200073bc
 800e380:	20007490 	.word	0x20007490
 800e384:	2000748c 	.word	0x2000748c
 800e388:	200073b4 	.word	0x200073b4

0800e38c <xTaskResumeAll>:
{
 800e38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800e390:	4c36      	ldr	r4, [pc, #216]	; (800e46c <xTaskResumeAll+0xe0>)
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	b943      	cbnz	r3, 800e3a8 <xTaskResumeAll+0x1c>
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	e7fe      	b.n	800e3a6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e3a8:	f000 fb24 	bl	800e9f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e3ac:	6823      	ldr	r3, [r4, #0]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3b2:	6824      	ldr	r4, [r4, #0]
 800e3b4:	bb7c      	cbnz	r4, 800e416 <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3b6:	4b2e      	ldr	r3, [pc, #184]	; (800e470 <xTaskResumeAll+0xe4>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	b363      	cbz	r3, 800e416 <xTaskResumeAll+0x8a>
 800e3bc:	4d2d      	ldr	r5, [pc, #180]	; (800e474 <xTaskResumeAll+0xe8>)
 800e3be:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800e48c <xTaskResumeAll+0x100>
					prvAddTaskToReadyList( pxTCB );
 800e3c2:	4e2d      	ldr	r6, [pc, #180]	; (800e478 <xTaskResumeAll+0xec>)
 800e3c4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800e490 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3c8:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800e494 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3cc:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800e3d0:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3d2:	b333      	cbz	r3, 800e422 <xTaskResumeAll+0x96>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d4:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e3d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3da:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3de:	f104 0018 	add.w	r0, r4, #24
 800e3e2:	f7ff f819 	bl	800d418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	f7ff f816 	bl	800d418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e3ee:	6832      	ldr	r2, [r6, #0]
 800e3f0:	fa07 f300 	lsl.w	r3, r7, r0
 800e3f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	4641      	mov	r1, r8
 800e3fc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800e400:	6033      	str	r3, [r6, #0]
 800e402:	f7fe ffdf 	bl	800d3c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e406:	f8db 3000 	ldr.w	r3, [fp]
 800e40a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40e:	429a      	cmp	r2, r3
 800e410:	d3dc      	bcc.n	800e3cc <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800e412:	602f      	str	r7, [r5, #0]
 800e414:	e7da      	b.n	800e3cc <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800e416:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e418:	f000 fb0e 	bl	800ea38 <vPortExitCritical>
}
 800e41c:	4620      	mov	r0, r4
 800e41e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800e422:	b13c      	cbz	r4, 800e434 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e424:	4b15      	ldr	r3, [pc, #84]	; (800e47c <xTaskResumeAll+0xf0>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	b9db      	cbnz	r3, 800e464 <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e42c:	4b14      	ldr	r3, [pc, #80]	; (800e480 <xTaskResumeAll+0xf4>)
 800e42e:	f04f 32ff 	mov.w	r2, #4294967295
 800e432:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e434:	4e13      	ldr	r6, [pc, #76]	; (800e484 <xTaskResumeAll+0xf8>)
 800e436:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e438:	b13c      	cbz	r4, 800e44a <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800e43a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e43c:	f7ff ff00 	bl	800e240 <xTaskIncrementTick>
 800e440:	b100      	cbz	r0, 800e444 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800e442:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e444:	3c01      	subs	r4, #1
 800e446:	d1f9      	bne.n	800e43c <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800e448:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d0e2      	beq.n	800e416 <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800e450:	4b0d      	ldr	r3, [pc, #52]	; (800e488 <xTaskResumeAll+0xfc>)
 800e452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e460:	2401      	movs	r4, #1
 800e462:	e7d9      	b.n	800e418 <xTaskResumeAll+0x8c>
 800e464:	f7ff fdaa 	bl	800dfbc <prvResetNextTaskUnblockTime.part.1>
 800e468:	e7e4      	b.n	800e434 <xTaskResumeAll+0xa8>
 800e46a:	bf00      	nop
 800e46c:	20007458 	.word	0x20007458
 800e470:	2000744c 	.word	0x2000744c
 800e474:	200074d8 	.word	0x200074d8
 800e478:	20007460 	.word	0x20007460
 800e47c:	200073b8 	.word	0x200073b8
 800e480:	2000748c 	.word	0x2000748c
 800e484:	20007454 	.word	0x20007454
 800e488:	e000ed04 	.word	0xe000ed04
 800e48c:	20007494 	.word	0x20007494
 800e490:	200073c0 	.word	0x200073c0
 800e494:	200073b4 	.word	0x200073b4

0800e498 <vTaskDelay>:
	{
 800e498:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e49a:	b198      	cbz	r0, 800e4c4 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 800e49c:	4b0e      	ldr	r3, [pc, #56]	; (800e4d8 <vTaskDelay+0x40>)
 800e49e:	6819      	ldr	r1, [r3, #0]
 800e4a0:	b141      	cbz	r1, 800e4b4 <vTaskDelay+0x1c>
 800e4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	e7fe      	b.n	800e4b2 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	3201      	adds	r2, #1
 800e4b8:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4ba:	f7ff fdd3 	bl	800e064 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e4be:	f7ff ff65 	bl	800e38c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e4c2:	b938      	cbnz	r0, 800e4d4 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 800e4c4:	4b05      	ldr	r3, [pc, #20]	; (800e4dc <vTaskDelay+0x44>)
 800e4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	f3bf 8f6f 	isb	sy
	}
 800e4d4:	bd08      	pop	{r3, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20007458 	.word	0x20007458
 800e4dc:	e000ed04 	.word	0xe000ed04

0800e4e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4e0:	4b19      	ldr	r3, [pc, #100]	; (800e548 <vTaskSwitchContext+0x68>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	b9eb      	cbnz	r3, 800e522 <vTaskSwitchContext+0x42>
		xYieldPending = pdFALSE;
 800e4e6:	4919      	ldr	r1, [pc, #100]	; (800e54c <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e8:	4a19      	ldr	r2, [pc, #100]	; (800e550 <vTaskSwitchContext+0x70>)
{
 800e4ea:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800e4ec:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ee:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e4f0:	fab3 f383 	clz	r3, r3
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	f1c3 031f 	rsb	r3, r3, #31
 800e4fa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e4fe:	0092      	lsls	r2, r2, #2
 800e500:	4814      	ldr	r0, [pc, #80]	; (800e554 <vTaskSwitchContext+0x74>)
 800e502:	5881      	ldr	r1, [r0, r2]
 800e504:	1884      	adds	r4, r0, r2
 800e506:	b181      	cbz	r1, 800e52a <vTaskSwitchContext+0x4a>
 800e508:	6861      	ldr	r1, [r4, #4]
 800e50a:	3208      	adds	r2, #8
 800e50c:	6849      	ldr	r1, [r1, #4]
 800e50e:	6061      	str	r1, [r4, #4]
 800e510:	4402      	add	r2, r0
 800e512:	4291      	cmp	r1, r2
 800e514:	d012      	beq.n	800e53c <vTaskSwitchContext+0x5c>
 800e516:	4b10      	ldr	r3, [pc, #64]	; (800e558 <vTaskSwitchContext+0x78>)
 800e518:	68ca      	ldr	r2, [r1, #12]
 800e51a:	601a      	str	r2, [r3, #0]
}
 800e51c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e520:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800e522:	4b0a      	ldr	r3, [pc, #40]	; (800e54c <vTaskSwitchContext+0x6c>)
 800e524:	2201      	movs	r2, #1
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	4770      	bx	lr
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	e7fe      	b.n	800e53a <vTaskSwitchContext+0x5a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e53c:	2214      	movs	r2, #20
 800e53e:	fb02 0303 	mla	r3, r2, r3, r0
 800e542:	6849      	ldr	r1, [r1, #4]
 800e544:	6059      	str	r1, [r3, #4]
 800e546:	e7e6      	b.n	800e516 <vTaskSwitchContext+0x36>
 800e548:	20007458 	.word	0x20007458
 800e54c:	200074d8 	.word	0x200074d8
 800e550:	20007460 	.word	0x20007460
 800e554:	200073c0 	.word	0x200073c0
 800e558:	200073b4 	.word	0x200073b4

0800e55c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800e55c:	b940      	cbnz	r0, 800e570 <vTaskPlaceOnEventList+0x14>
 800e55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	e7fe      	b.n	800e56e <vTaskPlaceOnEventList+0x12>
{
 800e570:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e572:	4b06      	ldr	r3, [pc, #24]	; (800e58c <vTaskPlaceOnEventList+0x30>)
 800e574:	460c      	mov	r4, r1
 800e576:	6819      	ldr	r1, [r3, #0]
 800e578:	3118      	adds	r1, #24
 800e57a:	f7fe ff33 	bl	800d3e4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e57e:	4620      	mov	r0, r4
 800e580:	2101      	movs	r1, #1
}
 800e582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e586:	f7ff bd6d 	b.w	800e064 <prvAddCurrentTaskToDelayedList>
 800e58a:	bf00      	nop
 800e58c:	200073b4 	.word	0x200073b4

0800e590 <xTaskRemoveFromEventList>:
{
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e592:	68c3      	ldr	r3, [r0, #12]
 800e594:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e596:	b32c      	cbz	r4, 800e5e4 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e598:	f104 0518 	add.w	r5, r4, #24
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7fe ff3b 	bl	800d418 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5a2:	4b17      	ldr	r3, [pc, #92]	; (800e600 <xTaskRemoveFromEventList+0x70>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	bb33      	cbnz	r3, 800e5f6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e5a8:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e5aa:	4d16      	ldr	r5, [pc, #88]	; (800e604 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f7fe ff33 	bl	800d418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e5b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5b4:	682f      	ldr	r7, [r5, #0]
 800e5b6:	4814      	ldr	r0, [pc, #80]	; (800e608 <xTaskRemoveFromEventList+0x78>)
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	4093      	lsls	r3, r2
 800e5bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e5c0:	433b      	orrs	r3, r7
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e5c8:	602b      	str	r3, [r5, #0]
 800e5ca:	f7fe fefb 	bl	800d3c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5ce:	4b0f      	ldr	r3, [pc, #60]	; (800e60c <xTaskRemoveFromEventList+0x7c>)
 800e5d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800e5d8:	bf83      	ittte	hi
 800e5da:	4b0d      	ldrhi	r3, [pc, #52]	; (800e610 <xTaskRemoveFromEventList+0x80>)
 800e5dc:	2001      	movhi	r0, #1
 800e5de:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800e5e0:	2000      	movls	r0, #0
}
 800e5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	e7fe      	b.n	800e5f4 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4806      	ldr	r0, [pc, #24]	; (800e614 <xTaskRemoveFromEventList+0x84>)
 800e5fa:	f7fe fee3 	bl	800d3c4 <vListInsertEnd>
 800e5fe:	e7e6      	b.n	800e5ce <xTaskRemoveFromEventList+0x3e>
 800e600:	20007458 	.word	0x20007458
 800e604:	20007460 	.word	0x20007460
 800e608:	200073c0 	.word	0x200073c0
 800e60c:	200073b4 	.word	0x200073b4
 800e610:	200074d8 	.word	0x200074d8
 800e614:	20007494 	.word	0x20007494

0800e618 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e618:	4a03      	ldr	r2, [pc, #12]	; (800e628 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e61a:	4b04      	ldr	r3, [pc, #16]	; (800e62c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e61c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	e9c0 2300 	strd	r2, r3, [r0]
}
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	20007490 	.word	0x20007490
 800e62c:	200074d4 	.word	0x200074d4

0800e630 <xTaskCheckForTimeOut>:
{
 800e630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800e632:	b340      	cbz	r0, 800e686 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800e634:	b1f1      	cbz	r1, 800e674 <xTaskCheckForTimeOut+0x44>
 800e636:	460d      	mov	r5, r1
 800e638:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e63a:	f000 f9db 	bl	800e9f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e63e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800e6b8 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 800e642:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e644:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800e646:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800e64a:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e64c:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 800e650:	d022      	beq.n	800e698 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e652:	4918      	ldr	r1, [pc, #96]	; (800e6b4 <xTaskCheckForTimeOut+0x84>)
 800e654:	6822      	ldr	r2, [r4, #0]
 800e656:	f8d1 e000 	ldr.w	lr, [r1]
 800e65a:	4572      	cmp	r2, lr
 800e65c:	d001      	beq.n	800e662 <xTaskCheckForTimeOut+0x32>
 800e65e:	42b7      	cmp	r7, r6
 800e660:	d925      	bls.n	800e6ae <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e662:	4283      	cmp	r3, r0
 800e664:	d81a      	bhi.n	800e69c <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800e66a:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800e66c:	f000 f9e4 	bl	800ea38 <vPortExitCritical>
}
 800e670:	4628      	mov	r0, r5
 800e672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	e7fe      	b.n	800e684 <xTaskCheckForTimeOut+0x54>
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	e7fe      	b.n	800e696 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 800e698:	2500      	movs	r5, #0
 800e69a:	e7e7      	b.n	800e66c <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e69c:	6809      	ldr	r1, [r1, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e69e:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 800e6a2:	1a1b      	subs	r3, r3, r0
 800e6a4:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800e6a6:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e6a8:	e9c4 1200 	strd	r1, r2, [r4]
 800e6ac:	e7de      	b.n	800e66c <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 800e6ae:	2501      	movs	r5, #1
 800e6b0:	e7dc      	b.n	800e66c <xTaskCheckForTimeOut+0x3c>
 800e6b2:	bf00      	nop
 800e6b4:	20007490 	.word	0x20007490
 800e6b8:	200074d4 	.word	0x200074d4

0800e6bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e6bc:	4b01      	ldr	r3, [pc, #4]	; (800e6c4 <vTaskMissedYield+0x8>)
 800e6be:	2201      	movs	r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]
}
 800e6c2:	4770      	bx	lr
 800e6c4:	200074d8 	.word	0x200074d8

0800e6c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e6c8:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <xTaskGetSchedulerState+0x18>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	b133      	cbz	r3, 800e6dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ce:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <xTaskGetSchedulerState+0x1c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800e6d4:	bf0c      	ite	eq
 800e6d6:	2002      	moveq	r0, #2
 800e6d8:	2000      	movne	r0, #0
 800e6da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6dc:	2001      	movs	r0, #1
	}
 800e6de:	4770      	bx	lr
 800e6e0:	200074a8 	.word	0x200074a8
 800e6e4:	20007458 	.word	0x20007458

0800e6e8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800e6e8:	b318      	cbz	r0, 800e732 <xTaskPriorityInherit+0x4a>
	{
 800e6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e6ec:	4c26      	ldr	r4, [pc, #152]	; (800e788 <xTaskPriorityInherit+0xa0>)
 800e6ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e6f0:	6822      	ldr	r2, [r4, #0]
 800e6f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d214      	bcs.n	800e722 <xTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6f8:	6982      	ldr	r2, [r0, #24]
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	db04      	blt.n	800e708 <xTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6fe:	6822      	ldr	r2, [r4, #0]
 800e700:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e702:	f1c2 0207 	rsb	r2, r2, #7
 800e706:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e708:	4d20      	ldr	r5, [pc, #128]	; (800e78c <xTaskPriorityInherit+0xa4>)
 800e70a:	6942      	ldr	r2, [r0, #20]
 800e70c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e710:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e714:	429a      	cmp	r2, r3
 800e716:	d00d      	beq.n	800e734 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800e71e:	2001      	movs	r0, #1
	}
 800e720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e722:	6823      	ldr	r3, [r4, #0]
 800e724:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e728:	4298      	cmp	r0, r3
 800e72a:	bf2c      	ite	cs
 800e72c:	2000      	movcs	r0, #0
 800e72e:	2001      	movcc	r0, #1
	}
 800e730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e732:	4770      	bx	lr
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e734:	1d07      	adds	r7, r0, #4
 800e736:	4606      	mov	r6, r0
 800e738:	4638      	mov	r0, r7
 800e73a:	f7fe fe6d 	bl	800d418 <uxListRemove>
 800e73e:	bb08      	cbnz	r0, 800e784 <xTaskPriorityInherit+0x9c>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e740:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800e742:	4a13      	ldr	r2, [pc, #76]	; (800e790 <xTaskPriorityInherit+0xa8>)
 800e744:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	58eb      	ldr	r3, [r5, r3]
 800e74c:	b933      	cbnz	r3, 800e75c <xTaskPriorityInherit+0x74>
 800e74e:	6813      	ldr	r3, [r2, #0]
 800e750:	2001      	movs	r0, #1
 800e752:	fa00 f101 	lsl.w	r1, r0, r1
 800e756:	ea23 0101 	bic.w	r1, r3, r1
 800e75a:	6011      	str	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e75c:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e75e:	f8d2 c000 	ldr.w	ip, [r2]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e762:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e764:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e766:	2401      	movs	r4, #1
 800e768:	fa04 f300 	lsl.w	r3, r4, r0
 800e76c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e770:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800e774:	ea43 030c 	orr.w	r3, r3, ip
 800e778:	4639      	mov	r1, r7
 800e77a:	6013      	str	r3, [r2, #0]
 800e77c:	f7fe fe22 	bl	800d3c4 <vListInsertEnd>
				xReturn = pdTRUE;
 800e780:	4620      	mov	r0, r4
	}
 800e782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e784:	4a02      	ldr	r2, [pc, #8]	; (800e790 <xTaskPriorityInherit+0xa8>)
 800e786:	e7e9      	b.n	800e75c <xTaskPriorityInherit+0x74>
 800e788:	200073b4 	.word	0x200073b4
 800e78c:	200073c0 	.word	0x200073c0
 800e790:	20007460 	.word	0x20007460

0800e794 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800e794:	b168      	cbz	r0, 800e7b2 <xTaskPriorityDisinherit+0x1e>
	{
 800e796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800e798:	4b27      	ldr	r3, [pc, #156]	; (800e838 <xTaskPriorityDisinherit+0xa4>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4283      	cmp	r3, r0
 800e79e:	d00a      	beq.n	800e7b6 <xTaskPriorityDisinherit+0x22>
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	e7fe      	b.n	800e7b0 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800e7b2:	2000      	movs	r0, #0
	}
 800e7b4:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800e7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7b8:	b943      	cbnz	r3, 800e7cc <xTaskPriorityDisinherit+0x38>
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	e7fe      	b.n	800e7ca <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800e7ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800e7d0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7d2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800e7d4:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7d6:	d000      	beq.n	800e7da <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7d8:	b10b      	cbz	r3, 800e7de <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800e7da:	2000      	movs	r0, #0
	}
 800e7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7de:	1d06      	adds	r6, r0, #4
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7fe fe18 	bl	800d418 <uxListRemove>
 800e7e8:	b1a8      	cbz	r0, 800e816 <xTaskPriorityDisinherit+0x82>
 800e7ea:	4814      	ldr	r0, [pc, #80]	; (800e83c <xTaskPriorityDisinherit+0xa8>)
 800e7ec:	4b14      	ldr	r3, [pc, #80]	; (800e840 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800e7f0:	681f      	ldr	r7, [r3, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7f2:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e7f4:	2501      	movs	r5, #1
 800e7f6:	f04f 0c14 	mov.w	ip, #20
 800e7fa:	fb0c 0002 	mla	r0, ip, r2, r0
 800e7fe:	4631      	mov	r1, r6
 800e800:	fa05 f602 	lsl.w	r6, r5, r2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e804:	f1c2 0207 	rsb	r2, r2, #7
 800e808:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e80a:	433e      	orrs	r6, r7
 800e80c:	601e      	str	r6, [r3, #0]
 800e80e:	f7fe fdd9 	bl	800d3c4 <vListInsertEnd>
					xReturn = pdTRUE;
 800e812:	4628      	mov	r0, r5
	}
 800e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e816:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e818:	4808      	ldr	r0, [pc, #32]	; (800e83c <xTaskPriorityDisinherit+0xa8>)
 800e81a:	2314      	movs	r3, #20
 800e81c:	fb03 f301 	mul.w	r3, r3, r1
 800e820:	58c3      	ldr	r3, [r0, r3]
 800e822:	b10b      	cbz	r3, 800e828 <xTaskPriorityDisinherit+0x94>
 800e824:	4b06      	ldr	r3, [pc, #24]	; (800e840 <xTaskPriorityDisinherit+0xac>)
 800e826:	e7e2      	b.n	800e7ee <xTaskPriorityDisinherit+0x5a>
 800e828:	4b05      	ldr	r3, [pc, #20]	; (800e840 <xTaskPriorityDisinherit+0xac>)
 800e82a:	2501      	movs	r5, #1
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	408d      	lsls	r5, r1
 800e830:	ea22 0205 	bic.w	r2, r2, r5
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	e7da      	b.n	800e7ee <xTaskPriorityDisinherit+0x5a>
 800e838:	200073b4 	.word	0x200073b4
 800e83c:	200073c0 	.word	0x200073c0
 800e840:	20007460 	.word	0x20007460

0800e844 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800e844:	b1a8      	cbz	r0, 800e872 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 800e846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800e848:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800e84a:	b944      	cbnz	r4, 800e85e <vTaskPriorityDisinheritAfterTimeout+0x1a>
 800e84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e850:	f383 8811 	msr	BASEPRI, r3
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	e7fe      	b.n	800e85c <vTaskPriorityDisinheritAfterTimeout+0x18>
 800e85e:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e860:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e862:	428b      	cmp	r3, r1
 800e864:	bf38      	it	cc
 800e866:	460b      	movcc	r3, r1
 800e868:	429a      	cmp	r2, r3
 800e86a:	d001      	beq.n	800e870 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e86c:	2c01      	cmp	r4, #1
 800e86e:	d001      	beq.n	800e874 <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 800e870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e872:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 800e874:	4920      	ldr	r1, [pc, #128]	; (800e8f8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800e876:	6809      	ldr	r1, [r1, #0]
 800e878:	4281      	cmp	r1, r0
 800e87a:	d023      	beq.n	800e8c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e87c:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800e87e:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e880:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e882:	bfa8      	it	ge
 800e884:	f1c3 0307 	rsbge	r3, r3, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e888:	4e1c      	ldr	r6, [pc, #112]	; (800e8fc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e88a:	bfa8      	it	ge
 800e88c:	6183      	strge	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e88e:	2514      	movs	r5, #20
 800e890:	6943      	ldr	r3, [r0, #20]
 800e892:	fb05 6202 	mla	r2, r5, r2, r6
 800e896:	4293      	cmp	r3, r2
 800e898:	d1ea      	bne.n	800e870 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e89a:	1d07      	adds	r7, r0, #4
 800e89c:	4604      	mov	r4, r0
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f7fe fdba 	bl	800d418 <uxListRemove>
 800e8a4:	b1b8      	cbz	r0, 800e8d6 <vTaskPriorityDisinheritAfterTimeout+0x92>
 800e8a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e8a8:	4b15      	ldr	r3, [pc, #84]	; (800e900 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
						prvAddTaskToReadyList( pxTCB );
 800e8aa:	681d      	ldr	r5, [r3, #0]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	4082      	lsls	r2, r0
 800e8b0:	2414      	movs	r4, #20
 800e8b2:	432a      	orrs	r2, r5
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	fb04 6000 	mla	r0, r4, r0, r6
 800e8ba:	601a      	str	r2, [r3, #0]
	}
 800e8bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800e8c0:	f7fe bd80 	b.w	800d3c4 <vListInsertEnd>
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	e7fe      	b.n	800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x90>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e8d8:	fb05 f500 	mul.w	r5, r5, r0
 800e8dc:	2201      	movs	r2, #1
 800e8de:	5973      	ldr	r3, [r6, r5]
 800e8e0:	fa02 f100 	lsl.w	r1, r2, r0
 800e8e4:	b10b      	cbz	r3, 800e8ea <vTaskPriorityDisinheritAfterTimeout+0xa6>
 800e8e6:	4b06      	ldr	r3, [pc, #24]	; (800e900 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800e8e8:	e7df      	b.n	800e8aa <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e8ea:	4b05      	ldr	r3, [pc, #20]	; (800e900 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	ea22 0201 	bic.w	r2, r2, r1
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	e7d9      	b.n	800e8aa <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e8f6:	bf00      	nop
 800e8f8:	200073b4 	.word	0x200073b4
 800e8fc:	200073c0 	.word	0x200073c0
 800e900:	20007460 	.word	0x20007460

0800e904 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e904:	4b04      	ldr	r3, [pc, #16]	; (800e918 <pvTaskIncrementMutexHeldCount+0x14>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	b11a      	cbz	r2, 800e912 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e90a:	6819      	ldr	r1, [r3, #0]
 800e90c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800e90e:	3201      	adds	r2, #1
 800e910:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800e912:	6818      	ldr	r0, [r3, #0]
	}
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	200073b4 	.word	0x200073b4

0800e91c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e91c:	4b0e      	ldr	r3, [pc, #56]	; (800e958 <prvTaskExitError+0x3c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
{
 800e920:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e922:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800e924:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800e926:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e928:	d008      	beq.n	800e93c <prvTaskExitError+0x20>
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	e7fe      	b.n	800e93a <prvTaskExitError+0x1e>
 800e93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e940:	f383 8811 	msr	BASEPRI, r3
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e94c:	9b01      	ldr	r3, [sp, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d0fc      	beq.n	800e94c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e952:	b002      	add	sp, #8
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	20000090 	.word	0x20000090

0800e95c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e95c:	4808      	ldr	r0, [pc, #32]	; (800e980 <prvPortStartFirstTask+0x24>)
 800e95e:	6800      	ldr	r0, [r0, #0]
 800e960:	6800      	ldr	r0, [r0, #0]
 800e962:	f380 8808 	msr	MSP, r0
 800e966:	f04f 0000 	mov.w	r0, #0
 800e96a:	f380 8814 	msr	CONTROL, r0
 800e96e:	b662      	cpsie	i
 800e970:	b661      	cpsie	f
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	df00      	svc	0
 800e97c:	bf00      	nop
 800e97e:	0000      	.short	0x0000
 800e980:	e000ed08 	.word	0xe000ed08

0800e984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e994 <vPortEnableVFP+0x10>
 800e988:	6801      	ldr	r1, [r0, #0]
 800e98a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e98e:	6001      	str	r1, [r0, #0]
 800e990:	4770      	bx	lr
 800e992:	0000      	.short	0x0000
 800e994:	e000ed88 	.word	0xe000ed88

0800e998 <pxPortInitialiseStack>:
{
 800e998:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e99a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e99e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9a2:	4c07      	ldr	r4, [pc, #28]	; (800e9c0 <pxPortInitialiseStack+0x28>)
 800e9a4:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e9a8:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9ac:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9b0:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e9b4:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e9b8:	bc30      	pop	{r4, r5}
 800e9ba:	3844      	subs	r0, #68	; 0x44
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	0800e91d 	.word	0x0800e91d
	...

0800e9d0 <SVC_Handler>:
	__asm volatile (
 800e9d0:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <pxCurrentTCBConst2>)
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	6808      	ldr	r0, [r1, #0]
 800e9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9da:	f380 8809 	msr	PSP, r0
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f04f 0000 	mov.w	r0, #0
 800e9e6:	f380 8811 	msr	BASEPRI, r0
 800e9ea:	4770      	bx	lr
 800e9ec:	f3af 8000 	nop.w

0800e9f0 <pxCurrentTCBConst2>:
 800e9f0:	200073b4 	.word	0x200073b4

0800e9f4 <vPortEnterCritical>:
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ea04:	4a0a      	ldr	r2, [pc, #40]	; (800ea30 <vPortEnterCritical+0x3c>)
 800ea06:	6813      	ldr	r3, [r2, #0]
 800ea08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ea0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ea0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ea0e:	d000      	beq.n	800ea12 <vPortEnterCritical+0x1e>
}
 800ea10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea12:	4b08      	ldr	r3, [pc, #32]	; (800ea34 <vPortEnterCritical+0x40>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ea1a:	d0f9      	beq.n	800ea10 <vPortEnterCritical+0x1c>
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	e7fe      	b.n	800ea2c <vPortEnterCritical+0x38>
 800ea2e:	bf00      	nop
 800ea30:	20000090 	.word	0x20000090
 800ea34:	e000ed04 	.word	0xe000ed04

0800ea38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ea38:	4a08      	ldr	r2, [pc, #32]	; (800ea5c <vPortExitCritical+0x24>)
 800ea3a:	6813      	ldr	r3, [r2, #0]
 800ea3c:	b943      	cbnz	r3, 800ea50 <vPortExitCritical+0x18>
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	e7fe      	b.n	800ea4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ea50:	3b01      	subs	r3, #1
 800ea52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea54:	b90b      	cbnz	r3, 800ea5a <vPortExitCritical+0x22>
	__asm volatile
 800ea56:	f383 8811 	msr	BASEPRI, r3
}
 800ea5a:	4770      	bx	lr
 800ea5c:	20000090 	.word	0x20000090

0800ea60 <PendSV_Handler>:
	__asm volatile
 800ea60:	f3ef 8009 	mrs	r0, PSP
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	4b15      	ldr	r3, [pc, #84]	; (800eac0 <pxCurrentTCBConst>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	f01e 0f10 	tst.w	lr, #16
 800ea70:	bf08      	it	eq
 800ea72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7a:	6010      	str	r0, [r2, #0]
 800ea7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea84:	f380 8811 	msr	BASEPRI, r0
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f7ff fd26 	bl	800e4e0 <vTaskSwitchContext>
 800ea94:	f04f 0000 	mov.w	r0, #0
 800ea98:	f380 8811 	msr	BASEPRI, r0
 800ea9c:	bc09      	pop	{r0, r3}
 800ea9e:	6819      	ldr	r1, [r3, #0]
 800eaa0:	6808      	ldr	r0, [r1, #0]
 800eaa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa6:	f01e 0f10 	tst.w	lr, #16
 800eaaa:	bf08      	it	eq
 800eaac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eab0:	f380 8809 	msr	PSP, r0
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst>:
 800eac0:	200073b4 	.word	0x200073b4

0800eac4 <SysTick_Handler>:
{
 800eac4:	b508      	push	{r3, lr}
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ead6:	f7ff fbb3 	bl	800e240 <xTaskIncrementTick>
 800eada:	b118      	cbz	r0, 800eae4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eadc:	4b03      	ldr	r3, [pc, #12]	; (800eaec <SysTick_Handler+0x28>)
 800eade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800eae4:	2300      	movs	r3, #0
 800eae6:	f383 8811 	msr	BASEPRI, r3
}
 800eaea:	bd08      	pop	{r3, pc}
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <vPortSetupTimerInterrupt>:
{
 800eaf0:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eaf2:	4a09      	ldr	r2, [pc, #36]	; (800eb18 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eaf4:	4d09      	ldr	r5, [pc, #36]	; (800eb1c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <vPortSetupTimerInterrupt+0x30>)
 800eaf8:	4c0a      	ldr	r4, [pc, #40]	; (800eb24 <vPortSetupTimerInterrupt+0x34>)
 800eafa:	480b      	ldr	r0, [pc, #44]	; (800eb28 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eafc:	2100      	movs	r1, #0
 800eafe:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb00:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	fba4 1303 	umull	r1, r3, r4, r3
 800eb08:	099b      	lsrs	r3, r3, #6
 800eb0a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb0c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb0e:	6003      	str	r3, [r0, #0]
}
 800eb10:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb12:	6011      	str	r1, [r2, #0]
}
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	e000e010 	.word	0xe000e010
 800eb1c:	e000e018 	.word	0xe000e018
 800eb20:	20000004 	.word	0x20000004
 800eb24:	10624dd3 	.word	0x10624dd3
 800eb28:	e000e014 	.word	0xe000e014

0800eb2c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb2c:	4b3a      	ldr	r3, [pc, #232]	; (800ec18 <xPortStartScheduler+0xec>)
 800eb2e:	4a3b      	ldr	r2, [pc, #236]	; (800ec1c <xPortStartScheduler+0xf0>)
 800eb30:	6819      	ldr	r1, [r3, #0]
 800eb32:	4291      	cmp	r1, r2
 800eb34:	d040      	beq.n	800ebb8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	4b39      	ldr	r3, [pc, #228]	; (800ec20 <xPortStartScheduler+0xf4>)
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d033      	beq.n	800eba6 <xPortStartScheduler+0x7a>
{
 800eb3e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb40:	4b38      	ldr	r3, [pc, #224]	; (800ec24 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb42:	4839      	ldr	r0, [pc, #228]	; (800ec28 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb44:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb46:	4c39      	ldr	r4, [pc, #228]	; (800ec2c <xPortStartScheduler+0x100>)
{
 800eb48:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb4a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb4c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb4e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb50:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb62:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb64:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb68:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb6a:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb6c:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb6e:	d511      	bpl.n	800eb94 <xPortStartScheduler+0x68>
 800eb70:	2306      	movs	r3, #6
 800eb72:	e000      	b.n	800eb76 <xPortStartScheduler+0x4a>
 800eb74:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb76:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eb7a:	0052      	lsls	r2, r2, #1
 800eb7c:	b2d2      	uxtb	r2, r2
 800eb7e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eb86:	0612      	lsls	r2, r2, #24
 800eb88:	f103 31ff 	add.w	r1, r3, #4294967295
 800eb8c:	d4f2      	bmi.n	800eb74 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	6003      	str	r3, [r0, #0]
 800eb92:	d01a      	beq.n	800ebca <xPortStartScheduler+0x9e>
	__asm volatile
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	e7fe      	b.n	800eba4 <xPortStartScheduler+0x78>
 800eba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	e7fe      	b.n	800ebb6 <xPortStartScheduler+0x8a>
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	e7fe      	b.n	800ebc8 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebca:	9901      	ldr	r1, [sp, #4]
 800ebcc:	4c15      	ldr	r4, [pc, #84]	; (800ec24 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebce:	4a18      	ldr	r2, [pc, #96]	; (800ec30 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebd0:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebd2:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebd8:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebda:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebdc:	6813      	ldr	r3, [r2, #0]
 800ebde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebe2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebe4:	6813      	ldr	r3, [r2, #0]
 800ebe6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebea:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800ebec:	f7ff ff80 	bl	800eaf0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ebf0:	4b10      	ldr	r3, [pc, #64]	; (800ec34 <xPortStartScheduler+0x108>)
 800ebf2:	2400      	movs	r4, #0
 800ebf4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800ebf6:	f7ff fec5 	bl	800e984 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebfa:	4a0f      	ldr	r2, [pc, #60]	; (800ec38 <xPortStartScheduler+0x10c>)
 800ebfc:	6813      	ldr	r3, [r2, #0]
 800ebfe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec02:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800ec04:	f7ff feaa 	bl	800e95c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ec08:	f7ff fc6a 	bl	800e4e0 <vTaskSwitchContext>
	prvTaskExitError();
 800ec0c:	f7ff fe86 	bl	800e91c <prvTaskExitError>
}
 800ec10:	4620      	mov	r0, r4
 800ec12:	b002      	add	sp, #8
 800ec14:	bd10      	pop	{r4, pc}
 800ec16:	bf00      	nop
 800ec18:	e000ed00 	.word	0xe000ed00
 800ec1c:	410fc271 	.word	0x410fc271
 800ec20:	410fc270 	.word	0x410fc270
 800ec24:	e000e400 	.word	0xe000e400
 800ec28:	200074e0 	.word	0x200074e0
 800ec2c:	200074dc 	.word	0x200074dc
 800ec30:	e000ed20 	.word	0xe000ed20
 800ec34:	20000090 	.word	0x20000090
 800ec38:	e000ef34 	.word	0xe000ef34

0800ec3c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec3c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec40:	2b0f      	cmp	r3, #15
 800ec42:	d90e      	bls.n	800ec62 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec44:	4910      	ldr	r1, [pc, #64]	; (800ec88 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec46:	4a11      	ldr	r2, [pc, #68]	; (800ec8c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec48:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec4a:	7812      	ldrb	r2, [r2, #0]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d908      	bls.n	800ec62 <vPortValidateInterruptPriority+0x26>
 800ec50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	e7fe      	b.n	800ec60 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec62:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <vPortValidateInterruptPriority+0x54>)
 800ec64:	4a0b      	ldr	r2, [pc, #44]	; (800ec94 <vPortValidateInterruptPriority+0x58>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6812      	ldr	r2, [r2, #0]
 800ec6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d908      	bls.n	800ec84 <vPortValidateInterruptPriority+0x48>
 800ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	e7fe      	b.n	800ec82 <vPortValidateInterruptPriority+0x46>
	}
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	e000e3f0 	.word	0xe000e3f0
 800ec8c:	200074dc 	.word	0x200074dc
 800ec90:	e000ed0c 	.word	0xe000ed0c
 800ec94:	200074e0 	.word	0x200074e0

0800ec98 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec98:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec9a:	4b11      	ldr	r3, [pc, #68]	; (800ece0 <prvInsertBlockIntoFreeList+0x48>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	4282      	cmp	r2, r0
 800eca0:	d201      	bcs.n	800eca6 <prvInsertBlockIntoFreeList+0xe>
 800eca2:	4613      	mov	r3, r2
 800eca4:	e7fa      	b.n	800ec9c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eca6:	685c      	ldr	r4, [r3, #4]
 800eca8:	1919      	adds	r1, r3, r4
 800ecaa:	4288      	cmp	r0, r1
 800ecac:	d103      	bne.n	800ecb6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecae:	6841      	ldr	r1, [r0, #4]
 800ecb0:	4421      	add	r1, r4
 800ecb2:	6059      	str	r1, [r3, #4]
 800ecb4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecb6:	6844      	ldr	r4, [r0, #4]
 800ecb8:	1901      	adds	r1, r0, r4
 800ecba:	428a      	cmp	r2, r1
 800ecbc:	d109      	bne.n	800ecd2 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecbe:	4909      	ldr	r1, [pc, #36]	; (800ece4 <prvInsertBlockIntoFreeList+0x4c>)
 800ecc0:	6809      	ldr	r1, [r1, #0]
 800ecc2:	428a      	cmp	r2, r1
 800ecc4:	d005      	beq.n	800ecd2 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecc6:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecca:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eccc:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecce:	6041      	str	r1, [r0, #4]
 800ecd0:	e000      	b.n	800ecd4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecd2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecd4:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecd6:	bf18      	it	ne
 800ecd8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	2000d69c 	.word	0x2000d69c
 800ece4:	200074e4 	.word	0x200074e4

0800ece8 <pvPortMalloc>:
{
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800ecee:	f7ff fa9f 	bl	800e230 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ecf2:	483f      	ldr	r0, [pc, #252]	; (800edf0 <pvPortMalloc+0x108>)
 800ecf4:	6803      	ldr	r3, [r0, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d05c      	beq.n	800edb4 <pvPortMalloc+0xcc>
 800ecfa:	4b3e      	ldr	r3, [pc, #248]	; (800edf4 <pvPortMalloc+0x10c>)
 800ecfc:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecfe:	422c      	tst	r4, r5
 800ed00:	d151      	bne.n	800eda6 <pvPortMalloc+0xbe>
			if( xWantedSize > 0 )
 800ed02:	2c00      	cmp	r4, #0
 800ed04:	d04f      	beq.n	800eda6 <pvPortMalloc+0xbe>
				xWantedSize += xHeapStructSize;
 800ed06:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed0a:	0759      	lsls	r1, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed0c:	bf1c      	itt	ne
 800ed0e:	f023 0307 	bicne.w	r3, r3, #7
 800ed12:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d046      	beq.n	800eda6 <pvPortMalloc+0xbe>
 800ed18:	4f37      	ldr	r7, [pc, #220]	; (800edf8 <pvPortMalloc+0x110>)
 800ed1a:	683e      	ldr	r6, [r7, #0]
 800ed1c:	429e      	cmp	r6, r3
 800ed1e:	d342      	bcc.n	800eda6 <pvPortMalloc+0xbe>
				pxBlock = xStart.pxNextFreeBlock;
 800ed20:	4936      	ldr	r1, [pc, #216]	; (800edfc <pvPortMalloc+0x114>)
 800ed22:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed24:	e006      	b.n	800ed34 <pvPortMalloc+0x4c>
 800ed26:	f8d4 c000 	ldr.w	ip, [r4]
 800ed2a:	f1bc 0f00 	cmp.w	ip, #0
 800ed2e:	d004      	beq.n	800ed3a <pvPortMalloc+0x52>
 800ed30:	4621      	mov	r1, r4
 800ed32:	4664      	mov	r4, ip
 800ed34:	6862      	ldr	r2, [r4, #4]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d3f5      	bcc.n	800ed26 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800ed3a:	6800      	ldr	r0, [r0, #0]
 800ed3c:	42a0      	cmp	r0, r4
 800ed3e:	d032      	beq.n	800eda6 <pvPortMalloc+0xbe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed40:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed42:	f8d1 8000 	ldr.w	r8, [r1]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed46:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed48:	1ad1      	subs	r1, r2, r3
 800ed4a:	2910      	cmp	r1, #16
 800ed4c:	d910      	bls.n	800ed70 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed4e:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed50:	0742      	lsls	r2, r0, #29
 800ed52:	d008      	beq.n	800ed66 <pvPortMalloc+0x7e>
 800ed54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed58:	f383 8811 	msr	BASEPRI, r3
 800ed5c:	f3bf 8f6f 	isb	sy
 800ed60:	f3bf 8f4f 	dsb	sy
 800ed64:	e7fe      	b.n	800ed64 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed66:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed68:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed6a:	f7ff ff95 	bl	800ec98 <prvInsertBlockIntoFreeList>
 800ed6e:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed70:	4823      	ldr	r0, [pc, #140]	; (800ee00 <pvPortMalloc+0x118>)
 800ed72:	6801      	ldr	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed74:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 800ed76:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed78:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed7a:	428e      	cmp	r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed7c:	6062      	str	r2, [r4, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed7e:	f108 0808 	add.w	r8, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 800ed82:	6023      	str	r3, [r4, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed84:	bf38      	it	cc
 800ed86:	6006      	strcc	r6, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed88:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800ed8a:	f7ff faff 	bl	800e38c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed8e:	f018 0f07 	tst.w	r8, #7
 800ed92:	d00c      	beq.n	800edae <pvPortMalloc+0xc6>
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	e7fe      	b.n	800eda4 <pvPortMalloc+0xbc>
	( void ) xTaskResumeAll();
 800eda6:	f7ff faf1 	bl	800e38c <xTaskResumeAll>
 800edaa:	f04f 0800 	mov.w	r8, #0
}
 800edae:	4640      	mov	r0, r8
 800edb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 800edb4:	4b13      	ldr	r3, [pc, #76]	; (800ee04 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 800edb6:	4a14      	ldr	r2, [pc, #80]	; (800ee08 <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edb8:	4f11      	ldr	r7, [pc, #68]	; (800ee00 <pvPortMalloc+0x118>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edba:	4e10      	ldr	r6, [pc, #64]	; (800edfc <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edbc:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edbe:	bf18      	it	ne
 800edc0:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edc2:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edc6:	bf18      	it	ne
 800edc8:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edcc:	4d0a      	ldr	r5, [pc, #40]	; (800edf8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800edce:	6002      	str	r2, [r0, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edd0:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edd2:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edd4:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edd6:	602b      	str	r3, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edd8:	4f06      	ldr	r7, [pc, #24]	; (800edf4 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800edda:	2500      	movs	r5, #0
	pxEnd->pxNextFreeBlock = NULL;
 800eddc:	e9c2 5500 	strd	r5, r5, [r2]
	xStart.xBlockSize = ( size_t ) 0;
 800ede0:	6075      	str	r5, [r6, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ede2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ede6:	600a      	str	r2, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ede8:	604b      	str	r3, [r1, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edea:	6031      	str	r1, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edec:	603d      	str	r5, [r7, #0]
 800edee:	e786      	b.n	800ecfe <pvPortMalloc+0x16>
 800edf0:	200074e4 	.word	0x200074e4
 800edf4:	2000d690 	.word	0x2000d690
 800edf8:	2000d694 	.word	0x2000d694
 800edfc:	2000d69c 	.word	0x2000d69c
 800ee00:	2000d698 	.word	0x2000d698
 800ee04:	200074e8 	.word	0x200074e8
 800ee08:	2000d688 	.word	0x2000d688

0800ee0c <vPortFree>:
	if( pv != NULL )
 800ee0c:	b1d0      	cbz	r0, 800ee44 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee0e:	4a19      	ldr	r2, [pc, #100]	; (800ee74 <vPortFree+0x68>)
 800ee10:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ee14:	6812      	ldr	r2, [r2, #0]
 800ee16:	4213      	tst	r3, r2
 800ee18:	d108      	bne.n	800ee2c <vPortFree+0x20>
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	e7fe      	b.n	800ee2a <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee2c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ee30:	b149      	cbz	r1, 800ee46 <vPortFree+0x3a>
 800ee32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee36:	f383 8811 	msr	BASEPRI, r3
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	e7fe      	b.n	800ee42 <vPortFree+0x36>
 800ee44:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee46:	ea23 0302 	bic.w	r3, r3, r2
{
 800ee4a:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee4c:	f840 3c04 	str.w	r3, [r0, #-4]
 800ee50:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800ee52:	f7ff f9ed 	bl	800e230 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee56:	4a08      	ldr	r2, [pc, #32]	; (800ee78 <vPortFree+0x6c>)
 800ee58:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ee5c:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee5e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee62:	440b      	add	r3, r1
 800ee64:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee66:	f7ff ff17 	bl	800ec98 <prvInsertBlockIntoFreeList>
}
 800ee6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800ee6e:	f7ff ba8d 	b.w	800e38c <xTaskResumeAll>
 800ee72:	bf00      	nop
 800ee74:	2000d690 	.word	0x2000d690
 800ee78:	2000d694 	.word	0x2000d694

0800ee7c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ee7c:	2904      	cmp	r1, #4
 800ee7e:	d00b      	beq.n	800ee98 <USBH_UserProcess+0x1c>
 800ee80:	2905      	cmp	r1, #5
 800ee82:	d005      	beq.n	800ee90 <USBH_UserProcess+0x14>
 800ee84:	2902      	cmp	r1, #2
 800ee86:	d000      	beq.n	800ee8a <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ee88:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 800ee8a:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <USBH_UserProcess+0x24>)
 800ee8c:	7019      	strb	r1, [r3, #0]
  break;
 800ee8e:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800ee90:	4b03      	ldr	r3, [pc, #12]	; (800eea0 <USBH_UserProcess+0x24>)
 800ee92:	2203      	movs	r2, #3
 800ee94:	701a      	strb	r2, [r3, #0]
  break;
 800ee96:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800ee98:	4b01      	ldr	r3, [pc, #4]	; (800eea0 <USBH_UserProcess+0x24>)
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	701a      	strb	r2, [r3, #0]
}
 800ee9e:	4770      	bx	lr
 800eea0:	2000d6a4 	.word	0x2000d6a4

0800eea4 <MX_USB_HOST_Init>:
{
 800eea4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eea6:	2201      	movs	r2, #1
 800eea8:	490c      	ldr	r1, [pc, #48]	; (800eedc <MX_USB_HOST_Init+0x38>)
 800eeaa:	480d      	ldr	r0, [pc, #52]	; (800eee0 <MX_USB_HOST_Init+0x3c>)
 800eeac:	f7fa ffd6 	bl	8009e5c <USBH_Init>
 800eeb0:	b980      	cbnz	r0, 800eed4 <MX_USB_HOST_Init+0x30>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800eeb2:	490c      	ldr	r1, [pc, #48]	; (800eee4 <MX_USB_HOST_Init+0x40>)
 800eeb4:	480a      	ldr	r0, [pc, #40]	; (800eee0 <MX_USB_HOST_Init+0x3c>)
 800eeb6:	f7fb f82d 	bl	8009f14 <USBH_RegisterClass>
 800eeba:	b940      	cbnz	r0, 800eece <MX_USB_HOST_Init+0x2a>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eebc:	4808      	ldr	r0, [pc, #32]	; (800eee0 <MX_USB_HOST_Init+0x3c>)
 800eebe:	f7fb f861 	bl	8009f84 <USBH_Start>
 800eec2:	b900      	cbnz	r0, 800eec6 <MX_USB_HOST_Init+0x22>
}
 800eec4:	bd08      	pop	{r3, pc}
 800eec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800eeca:	f7f1 bcb3 	b.w	8000834 <Error_Handler>
    Error_Handler();
 800eece:	f7f1 fcb1 	bl	8000834 <Error_Handler>
 800eed2:	e7f3      	b.n	800eebc <MX_USB_HOST_Init+0x18>
    Error_Handler();
 800eed4:	f7f1 fcae 	bl	8000834 <Error_Handler>
 800eed8:	e7eb      	b.n	800eeb2 <MX_USB_HOST_Init+0xe>
 800eeda:	bf00      	nop
 800eedc:	0800ee7d 	.word	0x0800ee7d
 800eee0:	2000f924 	.word	0x2000f924
 800eee4:	20000070 	.word	0x20000070

0800eee8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eee8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 800eeea:	6803      	ldr	r3, [r0, #0]
{
 800eeec:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eeee:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 800eef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eef4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800eef8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800eefc:	9407      	str	r4, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 800eefe:	d001      	beq.n	800ef04 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ef00:	b009      	add	sp, #36	; 0x24
 800ef02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef04:	4d1b      	ldr	r5, [pc, #108]	; (800ef74 <HAL_HCD_MspInit+0x8c>)
 800ef06:	9401      	str	r4, [sp, #4]
 800ef08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ef0a:	481b      	ldr	r0, [pc, #108]	; (800ef78 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef0c:	f043 0301 	orr.w	r3, r3, #1
 800ef10:	632b      	str	r3, [r5, #48]	; 0x30
 800ef12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ef14:	f003 0301 	and.w	r3, r3, #1
 800ef18:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ef1a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ef1c:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef20:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ef22:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ef24:	f7f6 ffc4 	bl	8005eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ef28:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef2e:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef30:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ef32:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef34:	4810      	ldr	r0, [pc, #64]	; (800ef78 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef36:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef38:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef3a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef3e:	f7f6 ffb7 	bl	8005eb0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ef44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef48:	636b      	str	r3, [r5, #52]	; 0x34
 800ef4a:	9402      	str	r4, [sp, #8]
 800ef4c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ef4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef52:	646b      	str	r3, [r5, #68]	; 0x44
 800ef54:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ef56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ef5a:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef5c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ef5e:	2105      	movs	r1, #5
 800ef60:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef62:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ef64:	f7f6 fd28 	bl	80059b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ef68:	2043      	movs	r0, #67	; 0x43
 800ef6a:	f7f6 fd5b 	bl	8005a24 <HAL_NVIC_EnableIRQ>
}
 800ef6e:	b009      	add	sp, #36	; 0x24
 800ef70:	bd30      	pop	{r4, r5, pc}
 800ef72:	bf00      	nop
 800ef74:	40023800 	.word	0x40023800
 800ef78:	40020000 	.word	0x40020000

0800ef7c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800ef7c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ef80:	f7fb ba7a 	b.w	800a478 <USBH_LL_IncTimer>

0800ef84 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800ef84:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ef88:	f7fb ba94 	b.w	800a4b4 <USBH_LL_Connect>

0800ef8c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800ef8c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ef90:	f7fb baa4 	b.w	800a4dc <USBH_LL_Disconnect>

0800ef94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ef94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ef98:	f7fb babe 	b.w	800a518 <USBH_LL_NotifyURBChange>

0800ef9c <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800ef9c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800efa0:	f7fb ba7a 	b.w	800a498 <USBH_LL_PortEnabled>

0800efa4 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800efa4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800efa8:	f7fb ba80 	b.w	800a4ac <USBH_LL_PortDisabled>

0800efac <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800efac:	f890 23cc 	ldrb.w	r2, [r0, #972]	; 0x3cc
 800efb0:	2a01      	cmp	r2, #1
 800efb2:	d001      	beq.n	800efb8 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800efb4:	2000      	movs	r0, #0
 800efb6:	4770      	bx	lr
  hhcd_USB_OTG_FS.pData = phost;
 800efb8:	4b10      	ldr	r3, [pc, #64]	; (800effc <USBH_LL_Init+0x50>)
{
 800efba:	b570      	push	{r4, r5, r6, lr}
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800efbc:	2102      	movs	r1, #2
 800efbe:	4604      	mov	r4, r0
  phost->pData = &hhcd_USB_OTG_FS;
 800efc0:	f8c0 33d0 	str.w	r3, [r0, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efc4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800efc8:	2508      	movs	r5, #8
  hhcd_USB_OTG_FS.pData = phost;
 800efca:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800efce:	60da      	str	r2, [r3, #12]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800efd0:	4618      	mov	r0, r3
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efd2:	2200      	movs	r2, #0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efd4:	601e      	str	r6, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800efd6:	609d      	str	r5, [r3, #8]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800efd8:	6199      	str	r1, [r3, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efda:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800efdc:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800efde:	f7f7 f977 	bl	80062d0 <HAL_HCD_Init>
 800efe2:	b940      	cbnz	r0, 800eff6 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800efe4:	4805      	ldr	r0, [pc, #20]	; (800effc <USBH_LL_Init+0x50>)
 800efe6:	f7f7 fe57 	bl	8006c98 <HAL_HCD_GetCurrentFrame>
 800efea:	4601      	mov	r1, r0
 800efec:	4620      	mov	r0, r4
 800efee:	f7fb fa3f 	bl	800a470 <USBH_LL_SetTimer>
}
 800eff2:	2000      	movs	r0, #0
 800eff4:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 800eff6:	f7f1 fc1d 	bl	8000834 <Error_Handler>
 800effa:	e7f3      	b.n	800efe4 <USBH_LL_Init+0x38>
 800effc:	2000fd08 	.word	0x2000fd08

0800f000 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f000:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800f002:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f006:	f7f7 fe0d 	bl	8006c24 <HAL_HCD_Start>
 800f00a:	2803      	cmp	r0, #3
 800f00c:	bf96      	itet	ls
 800f00e:	4b02      	ldrls	r3, [pc, #8]	; (800f018 <USBH_LL_Start+0x18>)
 800f010:	2002      	movhi	r0, #2
 800f012:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800f014:	bd08      	pop	{r3, pc}
 800f016:	bf00      	nop
 800f018:	08011f58 	.word	0x08011f58

0800f01c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f01c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800f01e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f022:	f7f7 fe15 	bl	8006c50 <HAL_HCD_Stop>
 800f026:	2803      	cmp	r0, #3
 800f028:	bf96      	itet	ls
 800f02a:	4b02      	ldrls	r3, [pc, #8]	; (800f034 <USBH_LL_Stop+0x18>)
 800f02c:	2002      	movhi	r0, #2
 800f02e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800f030:	bd08      	pop	{r3, pc}
 800f032:	bf00      	nop
 800f034:	08011f58 	.word	0x08011f58

0800f038 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f038:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f03a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f03e:	f7f7 fe2f 	bl	8006ca0 <HAL_HCD_GetCurrentSpeed>
 800f042:	2802      	cmp	r0, #2
 800f044:	bf96      	itet	ls
 800f046:	4b02      	ldrls	r3, [pc, #8]	; (800f050 <USBH_LL_GetSpeed+0x18>)
 800f048:	2001      	movhi	r0, #1
 800f04a:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800f04c:	bd08      	pop	{r3, pc}
 800f04e:	bf00      	nop
 800f050:	08011f54 	.word	0x08011f54

0800f054 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f054:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f056:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f05a:	f7f7 fe0b 	bl	8006c74 <HAL_HCD_ResetPort>
 800f05e:	2803      	cmp	r0, #3
 800f060:	bf96      	itet	ls
 800f062:	4b02      	ldrls	r3, [pc, #8]	; (800f06c <USBH_LL_ResetPort+0x18>)
 800f064:	2002      	movhi	r0, #2
 800f066:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800f068:	bd08      	pop	{r3, pc}
 800f06a:	bf00      	nop
 800f06c:	08011f58 	.word	0x08011f58

0800f070 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f070:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f074:	f7f7 be0a 	b.w	8006c8c <HAL_HCD_HC_GetXferCount>

0800f078 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f078:	b530      	push	{r4, r5, lr}
 800f07a:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f07c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
{
 800f080:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800f084:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f088:	9400      	str	r4, [sp, #0]
{
 800f08a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f08e:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800f092:	f7f7 f8cd 	bl	8006230 <HAL_HCD_HC_Init>
 800f096:	2803      	cmp	r0, #3
 800f098:	bf9a      	itte	ls
 800f09a:	4b02      	ldrls	r3, [pc, #8]	; (800f0a4 <USBH_LL_OpenPipe+0x2c>)
 800f09c:	5c18      	ldrbls	r0, [r3, r0]
 800f09e:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800f0a0:	b005      	add	sp, #20
 800f0a2:	bd30      	pop	{r4, r5, pc}
 800f0a4:	08011f58 	.word	0x08011f58

0800f0a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f0aa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f0ae:	f7f7 f8fd 	bl	80062ac <HAL_HCD_HC_Halt>
 800f0b2:	2803      	cmp	r0, #3
 800f0b4:	bf96      	itet	ls
 800f0b6:	4b02      	ldrls	r3, [pc, #8]	; (800f0c0 <USBH_LL_ClosePipe+0x18>)
 800f0b8:	2002      	movhi	r0, #2
 800f0ba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800f0bc:	bd08      	pop	{r3, pc}
 800f0be:	bf00      	nop
 800f0c0:	08011f58 	.word	0x08011f58

0800f0c4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f0c4:	b530      	push	{r4, r5, lr}
 800f0c6:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f0c8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
{
 800f0cc:	f89d 5020 	ldrb.w	r5, [sp, #32]
 800f0d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f0d2:	9500      	str	r5, [sp, #0]
 800f0d4:	9401      	str	r4, [sp, #4]
{
 800f0d6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800f0da:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f0de:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800f0e2:	f7f7 f945 	bl	8006370 <HAL_HCD_HC_SubmitRequest>
 800f0e6:	2803      	cmp	r0, #3
 800f0e8:	bf9a      	itte	ls
 800f0ea:	4b02      	ldrls	r3, [pc, #8]	; (800f0f4 <USBH_LL_SubmitURB+0x30>)
 800f0ec:	5c18      	ldrbls	r0, [r3, r0]
 800f0ee:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800f0f0:	b005      	add	sp, #20
 800f0f2:	bd30      	pop	{r4, r5, pc}
 800f0f4:	08011f58 	.word	0x08011f58

0800f0f8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f0f8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800f0fc:	f7f7 bdbe 	b.w	8006c7c <HAL_HCD_HC_GetURBState>

0800f100 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f100:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800f102:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 800f106:	2b01      	cmp	r3, #1
 800f108:	d004      	beq.n	800f114 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f10a:	20c8      	movs	r0, #200	; 0xc8
 800f10c:	f7f6 fa04 	bl	8005518 <HAL_Delay>
  return USBH_OK;
}
 800f110:	2000      	movs	r0, #0
 800f112:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800f114:	4608      	mov	r0, r1
 800f116:	f000 f829 	bl	800f16c <MX_DriverVbusFS>
  HAL_Delay(200);
 800f11a:	20c8      	movs	r0, #200	; 0xc8
 800f11c:	f7f6 f9fc 	bl	8005518 <HAL_Delay>
}
 800f120:	2000      	movs	r0, #0
 800f122:	bd08      	pop	{r3, pc}

0800f124 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f124:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800f128:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f12c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f130:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800f134:	b91b      	cbnz	r3, 800f13e <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f136:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 800f13a:	2000      	movs	r0, #0
 800f13c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 800f13e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 800f142:	2000      	movs	r0, #0
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop

0800f148 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f148:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800f14c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f150:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f154:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800f158:	b913      	cbnz	r3, 800f160 <USBH_LL_GetToggle+0x18>
  {
    toggle = pHandle->hc[pipe].toggle_in;
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f15a:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 800f15e:	4770      	bx	lr
    toggle = pHandle->hc[pipe].toggle_in;
 800f160:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop

0800f168 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800f168:	f7f6 b9d6 	b.w	8005518 <HAL_Delay>

0800f16c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f16c:	fab0 f280 	clz	r2, r0
 800f170:	0952      	lsrs	r2, r2, #5
 800f172:	2101      	movs	r1, #1
 800f174:	4801      	ldr	r0, [pc, #4]	; (800f17c <MX_DriverVbusFS+0x10>)
 800f176:	f7f7 b84f 	b.w	8006218 <HAL_GPIO_WritePin>
 800f17a:	bf00      	nop
 800f17c:	40020800 	.word	0x40020800

0800f180 <__errno>:
 800f180:	4b01      	ldr	r3, [pc, #4]	; (800f188 <__errno+0x8>)
 800f182:	6818      	ldr	r0, [r3, #0]
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	20000094 	.word	0x20000094

0800f18c <__libc_init_array>:
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	4e0d      	ldr	r6, [pc, #52]	; (800f1c4 <__libc_init_array+0x38>)
 800f190:	4c0d      	ldr	r4, [pc, #52]	; (800f1c8 <__libc_init_array+0x3c>)
 800f192:	1ba4      	subs	r4, r4, r6
 800f194:	10a4      	asrs	r4, r4, #2
 800f196:	2500      	movs	r5, #0
 800f198:	42a5      	cmp	r5, r4
 800f19a:	d109      	bne.n	800f1b0 <__libc_init_array+0x24>
 800f19c:	4e0b      	ldr	r6, [pc, #44]	; (800f1cc <__libc_init_array+0x40>)
 800f19e:	4c0c      	ldr	r4, [pc, #48]	; (800f1d0 <__libc_init_array+0x44>)
 800f1a0:	f000 fc86 	bl	800fab0 <_init>
 800f1a4:	1ba4      	subs	r4, r4, r6
 800f1a6:	10a4      	asrs	r4, r4, #2
 800f1a8:	2500      	movs	r5, #0
 800f1aa:	42a5      	cmp	r5, r4
 800f1ac:	d105      	bne.n	800f1ba <__libc_init_array+0x2e>
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1b4:	4798      	blx	r3
 800f1b6:	3501      	adds	r5, #1
 800f1b8:	e7ee      	b.n	800f198 <__libc_init_array+0xc>
 800f1ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1be:	4798      	blx	r3
 800f1c0:	3501      	adds	r5, #1
 800f1c2:	e7f2      	b.n	800f1aa <__libc_init_array+0x1e>
 800f1c4:	08011ff8 	.word	0x08011ff8
 800f1c8:	08011ff8 	.word	0x08011ff8
 800f1cc:	08011ff8 	.word	0x08011ff8
 800f1d0:	08011ffc 	.word	0x08011ffc

0800f1d4 <malloc>:
 800f1d4:	4b02      	ldr	r3, [pc, #8]	; (800f1e0 <malloc+0xc>)
 800f1d6:	4601      	mov	r1, r0
 800f1d8:	6818      	ldr	r0, [r3, #0]
 800f1da:	f000 b895 	b.w	800f308 <_malloc_r>
 800f1de:	bf00      	nop
 800f1e0:	20000094 	.word	0x20000094

0800f1e4 <free>:
 800f1e4:	4b02      	ldr	r3, [pc, #8]	; (800f1f0 <free+0xc>)
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	f000 b83f 	b.w	800f26c <_free_r>
 800f1ee:	bf00      	nop
 800f1f0:	20000094 	.word	0x20000094

0800f1f4 <memcmp>:
 800f1f4:	b530      	push	{r4, r5, lr}
 800f1f6:	2400      	movs	r4, #0
 800f1f8:	42a2      	cmp	r2, r4
 800f1fa:	d101      	bne.n	800f200 <memcmp+0xc>
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	e007      	b.n	800f210 <memcmp+0x1c>
 800f200:	5d03      	ldrb	r3, [r0, r4]
 800f202:	3401      	adds	r4, #1
 800f204:	190d      	adds	r5, r1, r4
 800f206:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f20a:	42ab      	cmp	r3, r5
 800f20c:	d0f4      	beq.n	800f1f8 <memcmp+0x4>
 800f20e:	1b58      	subs	r0, r3, r5
 800f210:	bd30      	pop	{r4, r5, pc}

0800f212 <memcpy>:
 800f212:	b510      	push	{r4, lr}
 800f214:	1e43      	subs	r3, r0, #1
 800f216:	440a      	add	r2, r1
 800f218:	4291      	cmp	r1, r2
 800f21a:	d100      	bne.n	800f21e <memcpy+0xc>
 800f21c:	bd10      	pop	{r4, pc}
 800f21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f226:	e7f7      	b.n	800f218 <memcpy+0x6>

0800f228 <memmove>:
 800f228:	4288      	cmp	r0, r1
 800f22a:	b510      	push	{r4, lr}
 800f22c:	eb01 0302 	add.w	r3, r1, r2
 800f230:	d807      	bhi.n	800f242 <memmove+0x1a>
 800f232:	1e42      	subs	r2, r0, #1
 800f234:	4299      	cmp	r1, r3
 800f236:	d00a      	beq.n	800f24e <memmove+0x26>
 800f238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f23c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f240:	e7f8      	b.n	800f234 <memmove+0xc>
 800f242:	4283      	cmp	r3, r0
 800f244:	d9f5      	bls.n	800f232 <memmove+0xa>
 800f246:	1881      	adds	r1, r0, r2
 800f248:	1ad2      	subs	r2, r2, r3
 800f24a:	42d3      	cmn	r3, r2
 800f24c:	d100      	bne.n	800f250 <memmove+0x28>
 800f24e:	bd10      	pop	{r4, pc}
 800f250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f254:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f258:	e7f7      	b.n	800f24a <memmove+0x22>

0800f25a <memset>:
 800f25a:	4402      	add	r2, r0
 800f25c:	4603      	mov	r3, r0
 800f25e:	4293      	cmp	r3, r2
 800f260:	d100      	bne.n	800f264 <memset+0xa>
 800f262:	4770      	bx	lr
 800f264:	f803 1b01 	strb.w	r1, [r3], #1
 800f268:	e7f9      	b.n	800f25e <memset+0x4>
	...

0800f26c <_free_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4605      	mov	r5, r0
 800f270:	2900      	cmp	r1, #0
 800f272:	d045      	beq.n	800f300 <_free_r+0x94>
 800f274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f278:	1f0c      	subs	r4, r1, #4
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	bfb8      	it	lt
 800f27e:	18e4      	addlt	r4, r4, r3
 800f280:	f000 f8fd 	bl	800f47e <__malloc_lock>
 800f284:	4a1f      	ldr	r2, [pc, #124]	; (800f304 <_free_r+0x98>)
 800f286:	6813      	ldr	r3, [r2, #0]
 800f288:	4610      	mov	r0, r2
 800f28a:	b933      	cbnz	r3, 800f29a <_free_r+0x2e>
 800f28c:	6063      	str	r3, [r4, #4]
 800f28e:	6014      	str	r4, [r2, #0]
 800f290:	4628      	mov	r0, r5
 800f292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f296:	f000 b8f3 	b.w	800f480 <__malloc_unlock>
 800f29a:	42a3      	cmp	r3, r4
 800f29c:	d90c      	bls.n	800f2b8 <_free_r+0x4c>
 800f29e:	6821      	ldr	r1, [r4, #0]
 800f2a0:	1862      	adds	r2, r4, r1
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	bf04      	itt	eq
 800f2a6:	681a      	ldreq	r2, [r3, #0]
 800f2a8:	685b      	ldreq	r3, [r3, #4]
 800f2aa:	6063      	str	r3, [r4, #4]
 800f2ac:	bf04      	itt	eq
 800f2ae:	1852      	addeq	r2, r2, r1
 800f2b0:	6022      	streq	r2, [r4, #0]
 800f2b2:	6004      	str	r4, [r0, #0]
 800f2b4:	e7ec      	b.n	800f290 <_free_r+0x24>
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	b10a      	cbz	r2, 800f2c0 <_free_r+0x54>
 800f2bc:	42a2      	cmp	r2, r4
 800f2be:	d9fa      	bls.n	800f2b6 <_free_r+0x4a>
 800f2c0:	6819      	ldr	r1, [r3, #0]
 800f2c2:	1858      	adds	r0, r3, r1
 800f2c4:	42a0      	cmp	r0, r4
 800f2c6:	d10b      	bne.n	800f2e0 <_free_r+0x74>
 800f2c8:	6820      	ldr	r0, [r4, #0]
 800f2ca:	4401      	add	r1, r0
 800f2cc:	1858      	adds	r0, r3, r1
 800f2ce:	4282      	cmp	r2, r0
 800f2d0:	6019      	str	r1, [r3, #0]
 800f2d2:	d1dd      	bne.n	800f290 <_free_r+0x24>
 800f2d4:	6810      	ldr	r0, [r2, #0]
 800f2d6:	6852      	ldr	r2, [r2, #4]
 800f2d8:	605a      	str	r2, [r3, #4]
 800f2da:	4401      	add	r1, r0
 800f2dc:	6019      	str	r1, [r3, #0]
 800f2de:	e7d7      	b.n	800f290 <_free_r+0x24>
 800f2e0:	d902      	bls.n	800f2e8 <_free_r+0x7c>
 800f2e2:	230c      	movs	r3, #12
 800f2e4:	602b      	str	r3, [r5, #0]
 800f2e6:	e7d3      	b.n	800f290 <_free_r+0x24>
 800f2e8:	6820      	ldr	r0, [r4, #0]
 800f2ea:	1821      	adds	r1, r4, r0
 800f2ec:	428a      	cmp	r2, r1
 800f2ee:	bf04      	itt	eq
 800f2f0:	6811      	ldreq	r1, [r2, #0]
 800f2f2:	6852      	ldreq	r2, [r2, #4]
 800f2f4:	6062      	str	r2, [r4, #4]
 800f2f6:	bf04      	itt	eq
 800f2f8:	1809      	addeq	r1, r1, r0
 800f2fa:	6021      	streq	r1, [r4, #0]
 800f2fc:	605c      	str	r4, [r3, #4]
 800f2fe:	e7c7      	b.n	800f290 <_free_r+0x24>
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	bf00      	nop
 800f304:	2000d6a8 	.word	0x2000d6a8

0800f308 <_malloc_r>:
 800f308:	b570      	push	{r4, r5, r6, lr}
 800f30a:	1ccd      	adds	r5, r1, #3
 800f30c:	f025 0503 	bic.w	r5, r5, #3
 800f310:	3508      	adds	r5, #8
 800f312:	2d0c      	cmp	r5, #12
 800f314:	bf38      	it	cc
 800f316:	250c      	movcc	r5, #12
 800f318:	2d00      	cmp	r5, #0
 800f31a:	4606      	mov	r6, r0
 800f31c:	db01      	blt.n	800f322 <_malloc_r+0x1a>
 800f31e:	42a9      	cmp	r1, r5
 800f320:	d903      	bls.n	800f32a <_malloc_r+0x22>
 800f322:	230c      	movs	r3, #12
 800f324:	6033      	str	r3, [r6, #0]
 800f326:	2000      	movs	r0, #0
 800f328:	bd70      	pop	{r4, r5, r6, pc}
 800f32a:	f000 f8a8 	bl	800f47e <__malloc_lock>
 800f32e:	4a21      	ldr	r2, [pc, #132]	; (800f3b4 <_malloc_r+0xac>)
 800f330:	6814      	ldr	r4, [r2, #0]
 800f332:	4621      	mov	r1, r4
 800f334:	b991      	cbnz	r1, 800f35c <_malloc_r+0x54>
 800f336:	4c20      	ldr	r4, [pc, #128]	; (800f3b8 <_malloc_r+0xb0>)
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	b91b      	cbnz	r3, 800f344 <_malloc_r+0x3c>
 800f33c:	4630      	mov	r0, r6
 800f33e:	f000 f845 	bl	800f3cc <_sbrk_r>
 800f342:	6020      	str	r0, [r4, #0]
 800f344:	4629      	mov	r1, r5
 800f346:	4630      	mov	r0, r6
 800f348:	f000 f840 	bl	800f3cc <_sbrk_r>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d124      	bne.n	800f39a <_malloc_r+0x92>
 800f350:	230c      	movs	r3, #12
 800f352:	6033      	str	r3, [r6, #0]
 800f354:	4630      	mov	r0, r6
 800f356:	f000 f893 	bl	800f480 <__malloc_unlock>
 800f35a:	e7e4      	b.n	800f326 <_malloc_r+0x1e>
 800f35c:	680b      	ldr	r3, [r1, #0]
 800f35e:	1b5b      	subs	r3, r3, r5
 800f360:	d418      	bmi.n	800f394 <_malloc_r+0x8c>
 800f362:	2b0b      	cmp	r3, #11
 800f364:	d90f      	bls.n	800f386 <_malloc_r+0x7e>
 800f366:	600b      	str	r3, [r1, #0]
 800f368:	50cd      	str	r5, [r1, r3]
 800f36a:	18cc      	adds	r4, r1, r3
 800f36c:	4630      	mov	r0, r6
 800f36e:	f000 f887 	bl	800f480 <__malloc_unlock>
 800f372:	f104 000b 	add.w	r0, r4, #11
 800f376:	1d23      	adds	r3, r4, #4
 800f378:	f020 0007 	bic.w	r0, r0, #7
 800f37c:	1ac3      	subs	r3, r0, r3
 800f37e:	d0d3      	beq.n	800f328 <_malloc_r+0x20>
 800f380:	425a      	negs	r2, r3
 800f382:	50e2      	str	r2, [r4, r3]
 800f384:	e7d0      	b.n	800f328 <_malloc_r+0x20>
 800f386:	428c      	cmp	r4, r1
 800f388:	684b      	ldr	r3, [r1, #4]
 800f38a:	bf16      	itet	ne
 800f38c:	6063      	strne	r3, [r4, #4]
 800f38e:	6013      	streq	r3, [r2, #0]
 800f390:	460c      	movne	r4, r1
 800f392:	e7eb      	b.n	800f36c <_malloc_r+0x64>
 800f394:	460c      	mov	r4, r1
 800f396:	6849      	ldr	r1, [r1, #4]
 800f398:	e7cc      	b.n	800f334 <_malloc_r+0x2c>
 800f39a:	1cc4      	adds	r4, r0, #3
 800f39c:	f024 0403 	bic.w	r4, r4, #3
 800f3a0:	42a0      	cmp	r0, r4
 800f3a2:	d005      	beq.n	800f3b0 <_malloc_r+0xa8>
 800f3a4:	1a21      	subs	r1, r4, r0
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f000 f810 	bl	800f3cc <_sbrk_r>
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	d0cf      	beq.n	800f350 <_malloc_r+0x48>
 800f3b0:	6025      	str	r5, [r4, #0]
 800f3b2:	e7db      	b.n	800f36c <_malloc_r+0x64>
 800f3b4:	2000d6a8 	.word	0x2000d6a8
 800f3b8:	2000d6ac 	.word	0x2000d6ac

0800f3bc <realloc>:
 800f3bc:	4b02      	ldr	r3, [pc, #8]	; (800f3c8 <realloc+0xc>)
 800f3be:	460a      	mov	r2, r1
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	f000 b85d 	b.w	800f482 <_realloc_r>
 800f3c8:	20000094 	.word	0x20000094

0800f3cc <_sbrk_r>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	4c06      	ldr	r4, [pc, #24]	; (800f3e8 <_sbrk_r+0x1c>)
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	4608      	mov	r0, r1
 800f3d6:	6023      	str	r3, [r4, #0]
 800f3d8:	f7f5 f81e 	bl	8004418 <_sbrk>
 800f3dc:	1c43      	adds	r3, r0, #1
 800f3de:	d102      	bne.n	800f3e6 <_sbrk_r+0x1a>
 800f3e0:	6823      	ldr	r3, [r4, #0]
 800f3e2:	b103      	cbz	r3, 800f3e6 <_sbrk_r+0x1a>
 800f3e4:	602b      	str	r3, [r5, #0]
 800f3e6:	bd38      	pop	{r3, r4, r5, pc}
 800f3e8:	2000ffcc 	.word	0x2000ffcc

0800f3ec <siprintf>:
 800f3ec:	b40e      	push	{r1, r2, r3}
 800f3ee:	b500      	push	{lr}
 800f3f0:	b09c      	sub	sp, #112	; 0x70
 800f3f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f3f4:	9002      	str	r0, [sp, #8]
 800f3f6:	9006      	str	r0, [sp, #24]
 800f3f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3fc:	4809      	ldr	r0, [pc, #36]	; (800f424 <siprintf+0x38>)
 800f3fe:	9107      	str	r1, [sp, #28]
 800f400:	9104      	str	r1, [sp, #16]
 800f402:	4909      	ldr	r1, [pc, #36]	; (800f428 <siprintf+0x3c>)
 800f404:	f853 2b04 	ldr.w	r2, [r3], #4
 800f408:	9105      	str	r1, [sp, #20]
 800f40a:	6800      	ldr	r0, [r0, #0]
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	a902      	add	r1, sp, #8
 800f410:	f000 f8b8 	bl	800f584 <_svfiprintf_r>
 800f414:	9b02      	ldr	r3, [sp, #8]
 800f416:	2200      	movs	r2, #0
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	b01c      	add	sp, #112	; 0x70
 800f41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f420:	b003      	add	sp, #12
 800f422:	4770      	bx	lr
 800f424:	20000094 	.word	0x20000094
 800f428:	ffff0208 	.word	0xffff0208

0800f42c <strncpy>:
 800f42c:	b570      	push	{r4, r5, r6, lr}
 800f42e:	3901      	subs	r1, #1
 800f430:	4604      	mov	r4, r0
 800f432:	b902      	cbnz	r2, 800f436 <strncpy+0xa>
 800f434:	bd70      	pop	{r4, r5, r6, pc}
 800f436:	4623      	mov	r3, r4
 800f438:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800f43c:	f803 5b01 	strb.w	r5, [r3], #1
 800f440:	1e56      	subs	r6, r2, #1
 800f442:	b92d      	cbnz	r5, 800f450 <strncpy+0x24>
 800f444:	4414      	add	r4, r2
 800f446:	42a3      	cmp	r3, r4
 800f448:	d0f4      	beq.n	800f434 <strncpy+0x8>
 800f44a:	f803 5b01 	strb.w	r5, [r3], #1
 800f44e:	e7fa      	b.n	800f446 <strncpy+0x1a>
 800f450:	461c      	mov	r4, r3
 800f452:	4632      	mov	r2, r6
 800f454:	e7ed      	b.n	800f432 <strncpy+0x6>

0800f456 <strrchr>:
 800f456:	b538      	push	{r3, r4, r5, lr}
 800f458:	4603      	mov	r3, r0
 800f45a:	460d      	mov	r5, r1
 800f45c:	b969      	cbnz	r1, 800f47a <strrchr+0x24>
 800f45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f462:	f000 bb0f 	b.w	800fa84 <strchr>
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	4604      	mov	r4, r0
 800f46a:	4629      	mov	r1, r5
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 fb09 	bl	800fa84 <strchr>
 800f472:	2800      	cmp	r0, #0
 800f474:	d1f7      	bne.n	800f466 <strrchr+0x10>
 800f476:	4620      	mov	r0, r4
 800f478:	bd38      	pop	{r3, r4, r5, pc}
 800f47a:	2400      	movs	r4, #0
 800f47c:	e7f5      	b.n	800f46a <strrchr+0x14>

0800f47e <__malloc_lock>:
 800f47e:	4770      	bx	lr

0800f480 <__malloc_unlock>:
 800f480:	4770      	bx	lr

0800f482 <_realloc_r>:
 800f482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f484:	4607      	mov	r7, r0
 800f486:	4614      	mov	r4, r2
 800f488:	460e      	mov	r6, r1
 800f48a:	b921      	cbnz	r1, 800f496 <_realloc_r+0x14>
 800f48c:	4611      	mov	r1, r2
 800f48e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f492:	f7ff bf39 	b.w	800f308 <_malloc_r>
 800f496:	b922      	cbnz	r2, 800f4a2 <_realloc_r+0x20>
 800f498:	f7ff fee8 	bl	800f26c <_free_r>
 800f49c:	4625      	mov	r5, r4
 800f49e:	4628      	mov	r0, r5
 800f4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4a2:	f000 fafc 	bl	800fa9e <_malloc_usable_size_r>
 800f4a6:	42a0      	cmp	r0, r4
 800f4a8:	d20f      	bcs.n	800f4ca <_realloc_r+0x48>
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	4638      	mov	r0, r7
 800f4ae:	f7ff ff2b 	bl	800f308 <_malloc_r>
 800f4b2:	4605      	mov	r5, r0
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d0f2      	beq.n	800f49e <_realloc_r+0x1c>
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	4622      	mov	r2, r4
 800f4bc:	f7ff fea9 	bl	800f212 <memcpy>
 800f4c0:	4631      	mov	r1, r6
 800f4c2:	4638      	mov	r0, r7
 800f4c4:	f7ff fed2 	bl	800f26c <_free_r>
 800f4c8:	e7e9      	b.n	800f49e <_realloc_r+0x1c>
 800f4ca:	4635      	mov	r5, r6
 800f4cc:	e7e7      	b.n	800f49e <_realloc_r+0x1c>

0800f4ce <__ssputs_r>:
 800f4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d2:	688e      	ldr	r6, [r1, #8]
 800f4d4:	429e      	cmp	r6, r3
 800f4d6:	4682      	mov	sl, r0
 800f4d8:	460c      	mov	r4, r1
 800f4da:	4690      	mov	r8, r2
 800f4dc:	4699      	mov	r9, r3
 800f4de:	d837      	bhi.n	800f550 <__ssputs_r+0x82>
 800f4e0:	898a      	ldrh	r2, [r1, #12]
 800f4e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4e6:	d031      	beq.n	800f54c <__ssputs_r+0x7e>
 800f4e8:	6825      	ldr	r5, [r4, #0]
 800f4ea:	6909      	ldr	r1, [r1, #16]
 800f4ec:	1a6f      	subs	r7, r5, r1
 800f4ee:	6965      	ldr	r5, [r4, #20]
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4f6:	fb95 f5f3 	sdiv	r5, r5, r3
 800f4fa:	f109 0301 	add.w	r3, r9, #1
 800f4fe:	443b      	add	r3, r7
 800f500:	429d      	cmp	r5, r3
 800f502:	bf38      	it	cc
 800f504:	461d      	movcc	r5, r3
 800f506:	0553      	lsls	r3, r2, #21
 800f508:	d530      	bpl.n	800f56c <__ssputs_r+0x9e>
 800f50a:	4629      	mov	r1, r5
 800f50c:	f7ff fefc 	bl	800f308 <_malloc_r>
 800f510:	4606      	mov	r6, r0
 800f512:	b950      	cbnz	r0, 800f52a <__ssputs_r+0x5c>
 800f514:	230c      	movs	r3, #12
 800f516:	f8ca 3000 	str.w	r3, [sl]
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f520:	81a3      	strh	r3, [r4, #12]
 800f522:	f04f 30ff 	mov.w	r0, #4294967295
 800f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52a:	463a      	mov	r2, r7
 800f52c:	6921      	ldr	r1, [r4, #16]
 800f52e:	f7ff fe70 	bl	800f212 <memcpy>
 800f532:	89a3      	ldrh	r3, [r4, #12]
 800f534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f53c:	81a3      	strh	r3, [r4, #12]
 800f53e:	6126      	str	r6, [r4, #16]
 800f540:	6165      	str	r5, [r4, #20]
 800f542:	443e      	add	r6, r7
 800f544:	1bed      	subs	r5, r5, r7
 800f546:	6026      	str	r6, [r4, #0]
 800f548:	60a5      	str	r5, [r4, #8]
 800f54a:	464e      	mov	r6, r9
 800f54c:	454e      	cmp	r6, r9
 800f54e:	d900      	bls.n	800f552 <__ssputs_r+0x84>
 800f550:	464e      	mov	r6, r9
 800f552:	4632      	mov	r2, r6
 800f554:	4641      	mov	r1, r8
 800f556:	6820      	ldr	r0, [r4, #0]
 800f558:	f7ff fe66 	bl	800f228 <memmove>
 800f55c:	68a3      	ldr	r3, [r4, #8]
 800f55e:	1b9b      	subs	r3, r3, r6
 800f560:	60a3      	str	r3, [r4, #8]
 800f562:	6823      	ldr	r3, [r4, #0]
 800f564:	441e      	add	r6, r3
 800f566:	6026      	str	r6, [r4, #0]
 800f568:	2000      	movs	r0, #0
 800f56a:	e7dc      	b.n	800f526 <__ssputs_r+0x58>
 800f56c:	462a      	mov	r2, r5
 800f56e:	f7ff ff88 	bl	800f482 <_realloc_r>
 800f572:	4606      	mov	r6, r0
 800f574:	2800      	cmp	r0, #0
 800f576:	d1e2      	bne.n	800f53e <__ssputs_r+0x70>
 800f578:	6921      	ldr	r1, [r4, #16]
 800f57a:	4650      	mov	r0, sl
 800f57c:	f7ff fe76 	bl	800f26c <_free_r>
 800f580:	e7c8      	b.n	800f514 <__ssputs_r+0x46>
	...

0800f584 <_svfiprintf_r>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	461d      	mov	r5, r3
 800f58a:	898b      	ldrh	r3, [r1, #12]
 800f58c:	061f      	lsls	r7, r3, #24
 800f58e:	b09d      	sub	sp, #116	; 0x74
 800f590:	4680      	mov	r8, r0
 800f592:	460c      	mov	r4, r1
 800f594:	4616      	mov	r6, r2
 800f596:	d50f      	bpl.n	800f5b8 <_svfiprintf_r+0x34>
 800f598:	690b      	ldr	r3, [r1, #16]
 800f59a:	b96b      	cbnz	r3, 800f5b8 <_svfiprintf_r+0x34>
 800f59c:	2140      	movs	r1, #64	; 0x40
 800f59e:	f7ff feb3 	bl	800f308 <_malloc_r>
 800f5a2:	6020      	str	r0, [r4, #0]
 800f5a4:	6120      	str	r0, [r4, #16]
 800f5a6:	b928      	cbnz	r0, 800f5b4 <_svfiprintf_r+0x30>
 800f5a8:	230c      	movs	r3, #12
 800f5aa:	f8c8 3000 	str.w	r3, [r8]
 800f5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b2:	e0c8      	b.n	800f746 <_svfiprintf_r+0x1c2>
 800f5b4:	2340      	movs	r3, #64	; 0x40
 800f5b6:	6163      	str	r3, [r4, #20]
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f5bc:	2320      	movs	r3, #32
 800f5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5c2:	2330      	movs	r3, #48	; 0x30
 800f5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5c8:	9503      	str	r5, [sp, #12]
 800f5ca:	f04f 0b01 	mov.w	fp, #1
 800f5ce:	4637      	mov	r7, r6
 800f5d0:	463d      	mov	r5, r7
 800f5d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5d6:	b10b      	cbz	r3, 800f5dc <_svfiprintf_r+0x58>
 800f5d8:	2b25      	cmp	r3, #37	; 0x25
 800f5da:	d13e      	bne.n	800f65a <_svfiprintf_r+0xd6>
 800f5dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f5e0:	d00b      	beq.n	800f5fa <_svfiprintf_r+0x76>
 800f5e2:	4653      	mov	r3, sl
 800f5e4:	4632      	mov	r2, r6
 800f5e6:	4621      	mov	r1, r4
 800f5e8:	4640      	mov	r0, r8
 800f5ea:	f7ff ff70 	bl	800f4ce <__ssputs_r>
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	f000 80a4 	beq.w	800f73c <_svfiprintf_r+0x1b8>
 800f5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f6:	4453      	add	r3, sl
 800f5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5fa:	783b      	ldrb	r3, [r7, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f000 809d 	beq.w	800f73c <_svfiprintf_r+0x1b8>
 800f602:	2300      	movs	r3, #0
 800f604:	f04f 32ff 	mov.w	r2, #4294967295
 800f608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f60c:	9304      	str	r3, [sp, #16]
 800f60e:	9307      	str	r3, [sp, #28]
 800f610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f614:	931a      	str	r3, [sp, #104]	; 0x68
 800f616:	462f      	mov	r7, r5
 800f618:	2205      	movs	r2, #5
 800f61a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f61e:	4850      	ldr	r0, [pc, #320]	; (800f760 <_svfiprintf_r+0x1dc>)
 800f620:	f7f0 fdee 	bl	8000200 <memchr>
 800f624:	9b04      	ldr	r3, [sp, #16]
 800f626:	b9d0      	cbnz	r0, 800f65e <_svfiprintf_r+0xda>
 800f628:	06d9      	lsls	r1, r3, #27
 800f62a:	bf44      	itt	mi
 800f62c:	2220      	movmi	r2, #32
 800f62e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f632:	071a      	lsls	r2, r3, #28
 800f634:	bf44      	itt	mi
 800f636:	222b      	movmi	r2, #43	; 0x2b
 800f638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f63c:	782a      	ldrb	r2, [r5, #0]
 800f63e:	2a2a      	cmp	r2, #42	; 0x2a
 800f640:	d015      	beq.n	800f66e <_svfiprintf_r+0xea>
 800f642:	9a07      	ldr	r2, [sp, #28]
 800f644:	462f      	mov	r7, r5
 800f646:	2000      	movs	r0, #0
 800f648:	250a      	movs	r5, #10
 800f64a:	4639      	mov	r1, r7
 800f64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f650:	3b30      	subs	r3, #48	; 0x30
 800f652:	2b09      	cmp	r3, #9
 800f654:	d94d      	bls.n	800f6f2 <_svfiprintf_r+0x16e>
 800f656:	b1b8      	cbz	r0, 800f688 <_svfiprintf_r+0x104>
 800f658:	e00f      	b.n	800f67a <_svfiprintf_r+0xf6>
 800f65a:	462f      	mov	r7, r5
 800f65c:	e7b8      	b.n	800f5d0 <_svfiprintf_r+0x4c>
 800f65e:	4a40      	ldr	r2, [pc, #256]	; (800f760 <_svfiprintf_r+0x1dc>)
 800f660:	1a80      	subs	r0, r0, r2
 800f662:	fa0b f000 	lsl.w	r0, fp, r0
 800f666:	4318      	orrs	r0, r3
 800f668:	9004      	str	r0, [sp, #16]
 800f66a:	463d      	mov	r5, r7
 800f66c:	e7d3      	b.n	800f616 <_svfiprintf_r+0x92>
 800f66e:	9a03      	ldr	r2, [sp, #12]
 800f670:	1d11      	adds	r1, r2, #4
 800f672:	6812      	ldr	r2, [r2, #0]
 800f674:	9103      	str	r1, [sp, #12]
 800f676:	2a00      	cmp	r2, #0
 800f678:	db01      	blt.n	800f67e <_svfiprintf_r+0xfa>
 800f67a:	9207      	str	r2, [sp, #28]
 800f67c:	e004      	b.n	800f688 <_svfiprintf_r+0x104>
 800f67e:	4252      	negs	r2, r2
 800f680:	f043 0302 	orr.w	r3, r3, #2
 800f684:	9207      	str	r2, [sp, #28]
 800f686:	9304      	str	r3, [sp, #16]
 800f688:	783b      	ldrb	r3, [r7, #0]
 800f68a:	2b2e      	cmp	r3, #46	; 0x2e
 800f68c:	d10c      	bne.n	800f6a8 <_svfiprintf_r+0x124>
 800f68e:	787b      	ldrb	r3, [r7, #1]
 800f690:	2b2a      	cmp	r3, #42	; 0x2a
 800f692:	d133      	bne.n	800f6fc <_svfiprintf_r+0x178>
 800f694:	9b03      	ldr	r3, [sp, #12]
 800f696:	1d1a      	adds	r2, r3, #4
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	9203      	str	r2, [sp, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	bfb8      	it	lt
 800f6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6a4:	3702      	adds	r7, #2
 800f6a6:	9305      	str	r3, [sp, #20]
 800f6a8:	4d2e      	ldr	r5, [pc, #184]	; (800f764 <_svfiprintf_r+0x1e0>)
 800f6aa:	7839      	ldrb	r1, [r7, #0]
 800f6ac:	2203      	movs	r2, #3
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f7f0 fda6 	bl	8000200 <memchr>
 800f6b4:	b138      	cbz	r0, 800f6c6 <_svfiprintf_r+0x142>
 800f6b6:	2340      	movs	r3, #64	; 0x40
 800f6b8:	1b40      	subs	r0, r0, r5
 800f6ba:	fa03 f000 	lsl.w	r0, r3, r0
 800f6be:	9b04      	ldr	r3, [sp, #16]
 800f6c0:	4303      	orrs	r3, r0
 800f6c2:	3701      	adds	r7, #1
 800f6c4:	9304      	str	r3, [sp, #16]
 800f6c6:	7839      	ldrb	r1, [r7, #0]
 800f6c8:	4827      	ldr	r0, [pc, #156]	; (800f768 <_svfiprintf_r+0x1e4>)
 800f6ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6ce:	2206      	movs	r2, #6
 800f6d0:	1c7e      	adds	r6, r7, #1
 800f6d2:	f7f0 fd95 	bl	8000200 <memchr>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d038      	beq.n	800f74c <_svfiprintf_r+0x1c8>
 800f6da:	4b24      	ldr	r3, [pc, #144]	; (800f76c <_svfiprintf_r+0x1e8>)
 800f6dc:	bb13      	cbnz	r3, 800f724 <_svfiprintf_r+0x1a0>
 800f6de:	9b03      	ldr	r3, [sp, #12]
 800f6e0:	3307      	adds	r3, #7
 800f6e2:	f023 0307 	bic.w	r3, r3, #7
 800f6e6:	3308      	adds	r3, #8
 800f6e8:	9303      	str	r3, [sp, #12]
 800f6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ec:	444b      	add	r3, r9
 800f6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f6f0:	e76d      	b.n	800f5ce <_svfiprintf_r+0x4a>
 800f6f2:	fb05 3202 	mla	r2, r5, r2, r3
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	460f      	mov	r7, r1
 800f6fa:	e7a6      	b.n	800f64a <_svfiprintf_r+0xc6>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	3701      	adds	r7, #1
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	4619      	mov	r1, r3
 800f704:	250a      	movs	r5, #10
 800f706:	4638      	mov	r0, r7
 800f708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f70c:	3a30      	subs	r2, #48	; 0x30
 800f70e:	2a09      	cmp	r2, #9
 800f710:	d903      	bls.n	800f71a <_svfiprintf_r+0x196>
 800f712:	2b00      	cmp	r3, #0
 800f714:	d0c8      	beq.n	800f6a8 <_svfiprintf_r+0x124>
 800f716:	9105      	str	r1, [sp, #20]
 800f718:	e7c6      	b.n	800f6a8 <_svfiprintf_r+0x124>
 800f71a:	fb05 2101 	mla	r1, r5, r1, r2
 800f71e:	2301      	movs	r3, #1
 800f720:	4607      	mov	r7, r0
 800f722:	e7f0      	b.n	800f706 <_svfiprintf_r+0x182>
 800f724:	ab03      	add	r3, sp, #12
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	4622      	mov	r2, r4
 800f72a:	4b11      	ldr	r3, [pc, #68]	; (800f770 <_svfiprintf_r+0x1ec>)
 800f72c:	a904      	add	r1, sp, #16
 800f72e:	4640      	mov	r0, r8
 800f730:	f3af 8000 	nop.w
 800f734:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f738:	4681      	mov	r9, r0
 800f73a:	d1d6      	bne.n	800f6ea <_svfiprintf_r+0x166>
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	065b      	lsls	r3, r3, #25
 800f740:	f53f af35 	bmi.w	800f5ae <_svfiprintf_r+0x2a>
 800f744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f746:	b01d      	add	sp, #116	; 0x74
 800f748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74c:	ab03      	add	r3, sp, #12
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	4622      	mov	r2, r4
 800f752:	4b07      	ldr	r3, [pc, #28]	; (800f770 <_svfiprintf_r+0x1ec>)
 800f754:	a904      	add	r1, sp, #16
 800f756:	4640      	mov	r0, r8
 800f758:	f000 f882 	bl	800f860 <_printf_i>
 800f75c:	e7ea      	b.n	800f734 <_svfiprintf_r+0x1b0>
 800f75e:	bf00      	nop
 800f760:	08011fbc 	.word	0x08011fbc
 800f764:	08011fc2 	.word	0x08011fc2
 800f768:	08011fc6 	.word	0x08011fc6
 800f76c:	00000000 	.word	0x00000000
 800f770:	0800f4cf 	.word	0x0800f4cf

0800f774 <_printf_common>:
 800f774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f778:	4691      	mov	r9, r2
 800f77a:	461f      	mov	r7, r3
 800f77c:	688a      	ldr	r2, [r1, #8]
 800f77e:	690b      	ldr	r3, [r1, #16]
 800f780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f784:	4293      	cmp	r3, r2
 800f786:	bfb8      	it	lt
 800f788:	4613      	movlt	r3, r2
 800f78a:	f8c9 3000 	str.w	r3, [r9]
 800f78e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f792:	4606      	mov	r6, r0
 800f794:	460c      	mov	r4, r1
 800f796:	b112      	cbz	r2, 800f79e <_printf_common+0x2a>
 800f798:	3301      	adds	r3, #1
 800f79a:	f8c9 3000 	str.w	r3, [r9]
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	0699      	lsls	r1, r3, #26
 800f7a2:	bf42      	ittt	mi
 800f7a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f7a8:	3302      	addmi	r3, #2
 800f7aa:	f8c9 3000 	strmi.w	r3, [r9]
 800f7ae:	6825      	ldr	r5, [r4, #0]
 800f7b0:	f015 0506 	ands.w	r5, r5, #6
 800f7b4:	d107      	bne.n	800f7c6 <_printf_common+0x52>
 800f7b6:	f104 0a19 	add.w	sl, r4, #25
 800f7ba:	68e3      	ldr	r3, [r4, #12]
 800f7bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f7c0:	1a9b      	subs	r3, r3, r2
 800f7c2:	42ab      	cmp	r3, r5
 800f7c4:	dc28      	bgt.n	800f818 <_printf_common+0xa4>
 800f7c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f7ca:	6822      	ldr	r2, [r4, #0]
 800f7cc:	3300      	adds	r3, #0
 800f7ce:	bf18      	it	ne
 800f7d0:	2301      	movne	r3, #1
 800f7d2:	0692      	lsls	r2, r2, #26
 800f7d4:	d42d      	bmi.n	800f832 <_printf_common+0xbe>
 800f7d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7da:	4639      	mov	r1, r7
 800f7dc:	4630      	mov	r0, r6
 800f7de:	47c0      	blx	r8
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d020      	beq.n	800f826 <_printf_common+0xb2>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	68e5      	ldr	r5, [r4, #12]
 800f7e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f7ec:	f003 0306 	and.w	r3, r3, #6
 800f7f0:	2b04      	cmp	r3, #4
 800f7f2:	bf08      	it	eq
 800f7f4:	1aad      	subeq	r5, r5, r2
 800f7f6:	68a3      	ldr	r3, [r4, #8]
 800f7f8:	6922      	ldr	r2, [r4, #16]
 800f7fa:	bf0c      	ite	eq
 800f7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f800:	2500      	movne	r5, #0
 800f802:	4293      	cmp	r3, r2
 800f804:	bfc4      	itt	gt
 800f806:	1a9b      	subgt	r3, r3, r2
 800f808:	18ed      	addgt	r5, r5, r3
 800f80a:	f04f 0900 	mov.w	r9, #0
 800f80e:	341a      	adds	r4, #26
 800f810:	454d      	cmp	r5, r9
 800f812:	d11a      	bne.n	800f84a <_printf_common+0xd6>
 800f814:	2000      	movs	r0, #0
 800f816:	e008      	b.n	800f82a <_printf_common+0xb6>
 800f818:	2301      	movs	r3, #1
 800f81a:	4652      	mov	r2, sl
 800f81c:	4639      	mov	r1, r7
 800f81e:	4630      	mov	r0, r6
 800f820:	47c0      	blx	r8
 800f822:	3001      	adds	r0, #1
 800f824:	d103      	bne.n	800f82e <_printf_common+0xba>
 800f826:	f04f 30ff 	mov.w	r0, #4294967295
 800f82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f82e:	3501      	adds	r5, #1
 800f830:	e7c3      	b.n	800f7ba <_printf_common+0x46>
 800f832:	18e1      	adds	r1, r4, r3
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	2030      	movs	r0, #48	; 0x30
 800f838:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f83c:	4422      	add	r2, r4
 800f83e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f842:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f846:	3302      	adds	r3, #2
 800f848:	e7c5      	b.n	800f7d6 <_printf_common+0x62>
 800f84a:	2301      	movs	r3, #1
 800f84c:	4622      	mov	r2, r4
 800f84e:	4639      	mov	r1, r7
 800f850:	4630      	mov	r0, r6
 800f852:	47c0      	blx	r8
 800f854:	3001      	adds	r0, #1
 800f856:	d0e6      	beq.n	800f826 <_printf_common+0xb2>
 800f858:	f109 0901 	add.w	r9, r9, #1
 800f85c:	e7d8      	b.n	800f810 <_printf_common+0x9c>
	...

0800f860 <_printf_i>:
 800f860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f864:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f868:	460c      	mov	r4, r1
 800f86a:	7e09      	ldrb	r1, [r1, #24]
 800f86c:	b085      	sub	sp, #20
 800f86e:	296e      	cmp	r1, #110	; 0x6e
 800f870:	4617      	mov	r7, r2
 800f872:	4606      	mov	r6, r0
 800f874:	4698      	mov	r8, r3
 800f876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f878:	f000 80b3 	beq.w	800f9e2 <_printf_i+0x182>
 800f87c:	d822      	bhi.n	800f8c4 <_printf_i+0x64>
 800f87e:	2963      	cmp	r1, #99	; 0x63
 800f880:	d036      	beq.n	800f8f0 <_printf_i+0x90>
 800f882:	d80a      	bhi.n	800f89a <_printf_i+0x3a>
 800f884:	2900      	cmp	r1, #0
 800f886:	f000 80b9 	beq.w	800f9fc <_printf_i+0x19c>
 800f88a:	2958      	cmp	r1, #88	; 0x58
 800f88c:	f000 8083 	beq.w	800f996 <_printf_i+0x136>
 800f890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f894:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f898:	e032      	b.n	800f900 <_printf_i+0xa0>
 800f89a:	2964      	cmp	r1, #100	; 0x64
 800f89c:	d001      	beq.n	800f8a2 <_printf_i+0x42>
 800f89e:	2969      	cmp	r1, #105	; 0x69
 800f8a0:	d1f6      	bne.n	800f890 <_printf_i+0x30>
 800f8a2:	6820      	ldr	r0, [r4, #0]
 800f8a4:	6813      	ldr	r3, [r2, #0]
 800f8a6:	0605      	lsls	r5, r0, #24
 800f8a8:	f103 0104 	add.w	r1, r3, #4
 800f8ac:	d52a      	bpl.n	800f904 <_printf_i+0xa4>
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6011      	str	r1, [r2, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	da03      	bge.n	800f8be <_printf_i+0x5e>
 800f8b6:	222d      	movs	r2, #45	; 0x2d
 800f8b8:	425b      	negs	r3, r3
 800f8ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f8be:	486f      	ldr	r0, [pc, #444]	; (800fa7c <_printf_i+0x21c>)
 800f8c0:	220a      	movs	r2, #10
 800f8c2:	e039      	b.n	800f938 <_printf_i+0xd8>
 800f8c4:	2973      	cmp	r1, #115	; 0x73
 800f8c6:	f000 809d 	beq.w	800fa04 <_printf_i+0x1a4>
 800f8ca:	d808      	bhi.n	800f8de <_printf_i+0x7e>
 800f8cc:	296f      	cmp	r1, #111	; 0x6f
 800f8ce:	d020      	beq.n	800f912 <_printf_i+0xb2>
 800f8d0:	2970      	cmp	r1, #112	; 0x70
 800f8d2:	d1dd      	bne.n	800f890 <_printf_i+0x30>
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	f043 0320 	orr.w	r3, r3, #32
 800f8da:	6023      	str	r3, [r4, #0]
 800f8dc:	e003      	b.n	800f8e6 <_printf_i+0x86>
 800f8de:	2975      	cmp	r1, #117	; 0x75
 800f8e0:	d017      	beq.n	800f912 <_printf_i+0xb2>
 800f8e2:	2978      	cmp	r1, #120	; 0x78
 800f8e4:	d1d4      	bne.n	800f890 <_printf_i+0x30>
 800f8e6:	2378      	movs	r3, #120	; 0x78
 800f8e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f8ec:	4864      	ldr	r0, [pc, #400]	; (800fa80 <_printf_i+0x220>)
 800f8ee:	e055      	b.n	800f99c <_printf_i+0x13c>
 800f8f0:	6813      	ldr	r3, [r2, #0]
 800f8f2:	1d19      	adds	r1, r3, #4
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6011      	str	r1, [r2, #0]
 800f8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f900:	2301      	movs	r3, #1
 800f902:	e08c      	b.n	800fa1e <_printf_i+0x1be>
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	6011      	str	r1, [r2, #0]
 800f908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f90c:	bf18      	it	ne
 800f90e:	b21b      	sxthne	r3, r3
 800f910:	e7cf      	b.n	800f8b2 <_printf_i+0x52>
 800f912:	6813      	ldr	r3, [r2, #0]
 800f914:	6825      	ldr	r5, [r4, #0]
 800f916:	1d18      	adds	r0, r3, #4
 800f918:	6010      	str	r0, [r2, #0]
 800f91a:	0628      	lsls	r0, r5, #24
 800f91c:	d501      	bpl.n	800f922 <_printf_i+0xc2>
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	e002      	b.n	800f928 <_printf_i+0xc8>
 800f922:	0668      	lsls	r0, r5, #25
 800f924:	d5fb      	bpl.n	800f91e <_printf_i+0xbe>
 800f926:	881b      	ldrh	r3, [r3, #0]
 800f928:	4854      	ldr	r0, [pc, #336]	; (800fa7c <_printf_i+0x21c>)
 800f92a:	296f      	cmp	r1, #111	; 0x6f
 800f92c:	bf14      	ite	ne
 800f92e:	220a      	movne	r2, #10
 800f930:	2208      	moveq	r2, #8
 800f932:	2100      	movs	r1, #0
 800f934:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f938:	6865      	ldr	r5, [r4, #4]
 800f93a:	60a5      	str	r5, [r4, #8]
 800f93c:	2d00      	cmp	r5, #0
 800f93e:	f2c0 8095 	blt.w	800fa6c <_printf_i+0x20c>
 800f942:	6821      	ldr	r1, [r4, #0]
 800f944:	f021 0104 	bic.w	r1, r1, #4
 800f948:	6021      	str	r1, [r4, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d13d      	bne.n	800f9ca <_printf_i+0x16a>
 800f94e:	2d00      	cmp	r5, #0
 800f950:	f040 808e 	bne.w	800fa70 <_printf_i+0x210>
 800f954:	4665      	mov	r5, ip
 800f956:	2a08      	cmp	r2, #8
 800f958:	d10b      	bne.n	800f972 <_printf_i+0x112>
 800f95a:	6823      	ldr	r3, [r4, #0]
 800f95c:	07db      	lsls	r3, r3, #31
 800f95e:	d508      	bpl.n	800f972 <_printf_i+0x112>
 800f960:	6923      	ldr	r3, [r4, #16]
 800f962:	6862      	ldr	r2, [r4, #4]
 800f964:	429a      	cmp	r2, r3
 800f966:	bfde      	ittt	le
 800f968:	2330      	movle	r3, #48	; 0x30
 800f96a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f96e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f972:	ebac 0305 	sub.w	r3, ip, r5
 800f976:	6123      	str	r3, [r4, #16]
 800f978:	f8cd 8000 	str.w	r8, [sp]
 800f97c:	463b      	mov	r3, r7
 800f97e:	aa03      	add	r2, sp, #12
 800f980:	4621      	mov	r1, r4
 800f982:	4630      	mov	r0, r6
 800f984:	f7ff fef6 	bl	800f774 <_printf_common>
 800f988:	3001      	adds	r0, #1
 800f98a:	d14d      	bne.n	800fa28 <_printf_i+0x1c8>
 800f98c:	f04f 30ff 	mov.w	r0, #4294967295
 800f990:	b005      	add	sp, #20
 800f992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f996:	4839      	ldr	r0, [pc, #228]	; (800fa7c <_printf_i+0x21c>)
 800f998:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f99c:	6813      	ldr	r3, [r2, #0]
 800f99e:	6821      	ldr	r1, [r4, #0]
 800f9a0:	1d1d      	adds	r5, r3, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	6015      	str	r5, [r2, #0]
 800f9a6:	060a      	lsls	r2, r1, #24
 800f9a8:	d50b      	bpl.n	800f9c2 <_printf_i+0x162>
 800f9aa:	07ca      	lsls	r2, r1, #31
 800f9ac:	bf44      	itt	mi
 800f9ae:	f041 0120 	orrmi.w	r1, r1, #32
 800f9b2:	6021      	strmi	r1, [r4, #0]
 800f9b4:	b91b      	cbnz	r3, 800f9be <_printf_i+0x15e>
 800f9b6:	6822      	ldr	r2, [r4, #0]
 800f9b8:	f022 0220 	bic.w	r2, r2, #32
 800f9bc:	6022      	str	r2, [r4, #0]
 800f9be:	2210      	movs	r2, #16
 800f9c0:	e7b7      	b.n	800f932 <_printf_i+0xd2>
 800f9c2:	064d      	lsls	r5, r1, #25
 800f9c4:	bf48      	it	mi
 800f9c6:	b29b      	uxthmi	r3, r3
 800f9c8:	e7ef      	b.n	800f9aa <_printf_i+0x14a>
 800f9ca:	4665      	mov	r5, ip
 800f9cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9d0:	fb02 3311 	mls	r3, r2, r1, r3
 800f9d4:	5cc3      	ldrb	r3, [r0, r3]
 800f9d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f9da:	460b      	mov	r3, r1
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	d1f5      	bne.n	800f9cc <_printf_i+0x16c>
 800f9e0:	e7b9      	b.n	800f956 <_printf_i+0xf6>
 800f9e2:	6813      	ldr	r3, [r2, #0]
 800f9e4:	6825      	ldr	r5, [r4, #0]
 800f9e6:	6961      	ldr	r1, [r4, #20]
 800f9e8:	1d18      	adds	r0, r3, #4
 800f9ea:	6010      	str	r0, [r2, #0]
 800f9ec:	0628      	lsls	r0, r5, #24
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	d501      	bpl.n	800f9f6 <_printf_i+0x196>
 800f9f2:	6019      	str	r1, [r3, #0]
 800f9f4:	e002      	b.n	800f9fc <_printf_i+0x19c>
 800f9f6:	066a      	lsls	r2, r5, #25
 800f9f8:	d5fb      	bpl.n	800f9f2 <_printf_i+0x192>
 800f9fa:	8019      	strh	r1, [r3, #0]
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	6123      	str	r3, [r4, #16]
 800fa00:	4665      	mov	r5, ip
 800fa02:	e7b9      	b.n	800f978 <_printf_i+0x118>
 800fa04:	6813      	ldr	r3, [r2, #0]
 800fa06:	1d19      	adds	r1, r3, #4
 800fa08:	6011      	str	r1, [r2, #0]
 800fa0a:	681d      	ldr	r5, [r3, #0]
 800fa0c:	6862      	ldr	r2, [r4, #4]
 800fa0e:	2100      	movs	r1, #0
 800fa10:	4628      	mov	r0, r5
 800fa12:	f7f0 fbf5 	bl	8000200 <memchr>
 800fa16:	b108      	cbz	r0, 800fa1c <_printf_i+0x1bc>
 800fa18:	1b40      	subs	r0, r0, r5
 800fa1a:	6060      	str	r0, [r4, #4]
 800fa1c:	6863      	ldr	r3, [r4, #4]
 800fa1e:	6123      	str	r3, [r4, #16]
 800fa20:	2300      	movs	r3, #0
 800fa22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa26:	e7a7      	b.n	800f978 <_printf_i+0x118>
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	462a      	mov	r2, r5
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	4630      	mov	r0, r6
 800fa30:	47c0      	blx	r8
 800fa32:	3001      	adds	r0, #1
 800fa34:	d0aa      	beq.n	800f98c <_printf_i+0x12c>
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	079b      	lsls	r3, r3, #30
 800fa3a:	d413      	bmi.n	800fa64 <_printf_i+0x204>
 800fa3c:	68e0      	ldr	r0, [r4, #12]
 800fa3e:	9b03      	ldr	r3, [sp, #12]
 800fa40:	4298      	cmp	r0, r3
 800fa42:	bfb8      	it	lt
 800fa44:	4618      	movlt	r0, r3
 800fa46:	e7a3      	b.n	800f990 <_printf_i+0x130>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	464a      	mov	r2, r9
 800fa4c:	4639      	mov	r1, r7
 800fa4e:	4630      	mov	r0, r6
 800fa50:	47c0      	blx	r8
 800fa52:	3001      	adds	r0, #1
 800fa54:	d09a      	beq.n	800f98c <_printf_i+0x12c>
 800fa56:	3501      	adds	r5, #1
 800fa58:	68e3      	ldr	r3, [r4, #12]
 800fa5a:	9a03      	ldr	r2, [sp, #12]
 800fa5c:	1a9b      	subs	r3, r3, r2
 800fa5e:	42ab      	cmp	r3, r5
 800fa60:	dcf2      	bgt.n	800fa48 <_printf_i+0x1e8>
 800fa62:	e7eb      	b.n	800fa3c <_printf_i+0x1dc>
 800fa64:	2500      	movs	r5, #0
 800fa66:	f104 0919 	add.w	r9, r4, #25
 800fa6a:	e7f5      	b.n	800fa58 <_printf_i+0x1f8>
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1ac      	bne.n	800f9ca <_printf_i+0x16a>
 800fa70:	7803      	ldrb	r3, [r0, #0]
 800fa72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa7a:	e76c      	b.n	800f956 <_printf_i+0xf6>
 800fa7c:	08011fcd 	.word	0x08011fcd
 800fa80:	08011fde 	.word	0x08011fde

0800fa84 <strchr>:
 800fa84:	b2c9      	uxtb	r1, r1
 800fa86:	4603      	mov	r3, r0
 800fa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa8c:	b11a      	cbz	r2, 800fa96 <strchr+0x12>
 800fa8e:	428a      	cmp	r2, r1
 800fa90:	d1f9      	bne.n	800fa86 <strchr+0x2>
 800fa92:	4618      	mov	r0, r3
 800fa94:	4770      	bx	lr
 800fa96:	2900      	cmp	r1, #0
 800fa98:	bf18      	it	ne
 800fa9a:	2300      	movne	r3, #0
 800fa9c:	e7f9      	b.n	800fa92 <strchr+0xe>

0800fa9e <_malloc_usable_size_r>:
 800fa9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa2:	1f18      	subs	r0, r3, #4
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	bfbc      	itt	lt
 800faa8:	580b      	ldrlt	r3, [r1, r0]
 800faaa:	18c0      	addlt	r0, r0, r3
 800faac:	4770      	bx	lr
	...

0800fab0 <_init>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	bf00      	nop
 800fab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fab6:	bc08      	pop	{r3}
 800fab8:	469e      	mov	lr, r3
 800faba:	4770      	bx	lr

0800fabc <_fini>:
 800fabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fabe:	bf00      	nop
 800fac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fac2:	bc08      	pop	{r3}
 800fac4:	469e      	mov	lr, r3
 800fac6:	4770      	bx	lr
