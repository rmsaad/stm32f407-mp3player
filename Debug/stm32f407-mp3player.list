
stm32f407-mp3player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010674  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b4  08010804  08010804  00020804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012db8  08012db8  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012db8  08012db8  00022db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012dc0  08012dc0  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012dc0  08012dc0  00022dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012dc4  08012dc4  00022dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08012dc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fea8  200000f8  08012ec0  000300f8  2**3
                  ALLOC
 10 ._user_heap_stack 00010000  2000ffa0  08012ec0  0003ffa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005fcd9  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a7a9  00000000  00000000  0008fe01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  0009a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000069d0  00000000  00000000  0009c850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000303ec  00000000  00000000  000a3220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00031897  00000000  00000000  000d360c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed029  00000000  00000000  00104ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f1ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d70  00000000  00000000  001f1f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00033a0b  00000000  00000000  001f9cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107ec 	.word	0x080107ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080107ec 	.word	0x080107ec

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2000f84c 	.word	0x2000f84c

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <vApplicationGetIdleTaskMemory+0x14>)
 8000632:	6003      	str	r3, [r0, #0]
{
 8000634:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000636:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000638:	4c03      	ldr	r4, [pc, #12]	; (8000648 <vApplicationGetIdleTaskMemory+0x18>)
 800063a:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800063c:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800063e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20000314 	.word	0x20000314
 8000648:	20000114 	.word	0x20000114

0800064c <vUpdateLCD_TaskHandler>:
/**
  * @brief  Task: Updates LCD Screen
  * @param  params: Not used
  * @retval None
  */
void vUpdateLCD_TaskHandler(void *params){
 800064c:	b508      	push	{r3, lr}
    for(;;){
        vUpdateLCDScreen();                                                                                                        /*Update LCD Screen With New Information*/
 800064e:	f004 f803 	bl	8004658 <vUpdateLCDScreen>
        vTaskDelay(500);                                                                                                           /*Block Task for 500 ms*/                                                                                                          /*Yield Task*/
 8000652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000656:	f00e f81b 	bl	800e690 <vTaskDelay>
 800065a:	e7f8      	b.n	800064e <vUpdateLCD_TaskHandler+0x2>

0800065c <vReadADC_TaskHandler>:
/**
  * @brief  Poll ADC
  * @param  params: Not used
  * @retval None
  */
void vReadADC_TaskHandler(void *params){
 800065c:	b508      	push	{r3, lr}
    for(;;){
        HAL_ADC_Start(&hadc1);                                                                                                     /*start ADC conversion*/
 800065e:	4c0e      	ldr	r4, [pc, #56]	; (8000698 <vReadADC_TaskHandler+0x3c>)
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);                                                                          /*poll ADC*/
        vUpdateLCDSetVolume(REMAP(HAL_ADC_GetValue(&hadc1)));                                                                      /*get the ADC value*/
 8000660:	4d0e      	ldr	r5, [pc, #56]	; (800069c <vReadADC_TaskHandler+0x40>)
        HAL_ADC_Start(&hadc1);                                                                                                     /*start ADC conversion*/
 8000662:	4620      	mov	r0, r4
 8000664:	f005 f896 	bl	8005794 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);                                                                          /*poll ADC*/
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	4620      	mov	r0, r4
 800066e:	f005 f90f 	bl	8005890 <HAL_ADC_PollForConversion>
        vUpdateLCDSetVolume(REMAP(HAL_ADC_GetValue(&hadc1)));                                                                      /*get the ADC value*/
 8000672:	4620      	mov	r0, r4
 8000674:	f005 f95c 	bl	8005930 <HAL_ADC_GetValue>
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	fb03 f000 	mul.w	r0, r3, r0
 800067e:	fba5 2300 	umull	r2, r3, r5, r0
 8000682:	1ac0      	subs	r0, r0, r3
 8000684:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8000688:	0ac0      	lsrs	r0, r0, #11
 800068a:	f003 ffc5 	bl	8004618 <vUpdateLCDSetVolume>
        vTaskDelay(500);                                                                                                           /*Block Task for 500 ms*/
 800068e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000692:	f00d fffd 	bl	800e690 <vTaskDelay>
 8000696:	e7e4      	b.n	8000662 <vReadADC_TaskHandler+0x6>
 8000698:	2000d5d8 	.word	0x2000d5d8
 800069c:	00100101 	.word	0x00100101

080006a0 <vReadInputButtons_TaskHandler>:
/**
  * @brief  Poll Buttons
  * @param  params: Not used
  * @retval None
  */
void vReadInputButtons_TaskHandler(void *params){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	4d20      	ldr	r5, [pc, #128]	; (8000724 <vReadInputButtons_TaskHandler+0x84>)
 80006a4:	4f20      	ldr	r7, [pc, #128]	; (8000728 <vReadInputButtons_TaskHandler+0x88>)
 80006a6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8000734 <vReadInputButtons_TaskHandler+0x94>
    /* Infinite loop */
    for(;;){
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == 0){                                                                             /*if Prev button is pressed*/
 80006aa:	4c20      	ldr	r4, [pc, #128]	; (800072c <vReadInputButtons_TaskHandler+0x8c>)
            ucNewSongFlag = 1;                                                                                                         /*Set the New Song Flag*/
            pxCurrent = pxCurrent->pxPrev;                                                                                             /*Set LL Previous Node*/
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/

        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                       /*if Pause button is pressed*/
 80006ac:	4e20      	ldr	r6, [pc, #128]	; (8000730 <vReadInputButtons_TaskHandler+0x90>)
 80006ae:	e00a      	b.n	80006c6 <vReadInputButtons_TaskHandler+0x26>
            pxCurrent = pxCurrent->pxPrev;                                                                                             /*Set LL Previous Node*/
 80006b0:	682a      	ldr	r2, [r5, #0]
            ucNewSongFlag = 1;                                                                                                         /*Set the New Song Flag*/
 80006b2:	703b      	strb	r3, [r7, #0]
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/
 80006b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
            pxCurrent = pxCurrent->pxPrev;                                                                                             /*Set LL Previous Node*/
 80006b8:	6893      	ldr	r3, [r2, #8]
 80006ba:	602b      	str	r3, [r5, #0]
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/
 80006bc:	f00d ffe8 	bl	800e690 <vTaskDelay>
        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){                                                                       /*if Next button is pressed*/
            ucNewSongFlag = 1;                                                                                                         /*Set the New Song Flag*/
            pxCurrent = pxCurrent->pxNext;                                                                                             /*Set LL to Next Node*/
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/
        }
        vTaskDelay(50);                                                                                                            /*Block Task for 50 ms*/
 80006c0:	2032      	movs	r0, #50	; 0x32
 80006c2:	f00d ffe5 	bl	800e690 <vTaskDelay>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == 0){                                                                             /*if Prev button is pressed*/
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	4620      	mov	r0, r4
 80006cc:	f005 fe18 	bl	8006300 <HAL_GPIO_ReadPin>
        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                       /*if Pause button is pressed*/
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
            ucNewSongFlag = 1;                                                                                                         /*Set the New Song Flag*/
 80006d4:	2301      	movs	r3, #1
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == 0){                                                                             /*if Prev button is pressed*/
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d0ea      	beq.n	80006b0 <vReadInputButtons_TaskHandler+0x10>
        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                       /*if Pause button is pressed*/
 80006da:	4630      	mov	r0, r6
 80006dc:	f005 fe10 	bl	8006300 <HAL_GPIO_ReadPin>
        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){                                                                       /*if Next button is pressed*/
 80006e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){                                                                       /*if Pause button is pressed*/
 80006e4:	b978      	cbnz	r0, 8000706 <vReadInputButtons_TaskHandler+0x66>
            ucPauseStateFlag = ucPauseStateFlag ^ 1;                                                                                   /*invert Pause State Flag*/
 80006e6:	f898 3000 	ldrb.w	r3, [r8]
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006ea:	4620      	mov	r0, r4
            ucPauseStateFlag = ucPauseStateFlag ^ 1;                                                                                   /*invert Pause State Flag*/
 80006ec:	f083 0301 	eor.w	r3, r3, #1
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
            ucPauseStateFlag = ucPauseStateFlag ^ 1;                                                                                   /*invert Pause State Flag*/
 80006f4:	f888 3000 	strb.w	r3, [r8]
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006f8:	f005 fe0c 	bl	8006314 <HAL_GPIO_TogglePin>
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/
 80006fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000700:	f00d ffc6 	bl	800e690 <vTaskDelay>
 8000704:	e7dc      	b.n	80006c0 <vReadInputButtons_TaskHandler+0x20>
        }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){                                                                       /*if Next button is pressed*/
 8000706:	4630      	mov	r0, r6
 8000708:	f005 fdfa 	bl	8006300 <HAL_GPIO_ReadPin>
 800070c:	2800      	cmp	r0, #0
 800070e:	d1d7      	bne.n	80006c0 <vReadInputButtons_TaskHandler+0x20>
            pxCurrent = pxCurrent->pxNext;                                                                                             /*Set LL to Next Node*/
 8000710:	682a      	ldr	r2, [r5, #0]
            ucNewSongFlag = 1;                                                                                                         /*Set the New Song Flag*/
 8000712:	2301      	movs	r3, #1
            pxCurrent = pxCurrent->pxNext;                                                                                             /*Set LL to Next Node*/
 8000714:	6852      	ldr	r2, [r2, #4]
 8000716:	602a      	str	r2, [r5, #0]
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/
 8000718:	f44f 70c8 	mov.w	r0, #400	; 0x190
            ucNewSongFlag = 1;                                                                                                         /*Set the New Song Flag*/
 800071c:	703b      	strb	r3, [r7, #0]
            vTaskDelay(400);                                                                                                           /*Block Task Button Debouncing*/
 800071e:	f00d ffb7 	bl	800e690 <vTaskDelay>
 8000722:	e7cd      	b.n	80006c0 <vReadInputButtons_TaskHandler+0x20>
 8000724:	20000368 	.word	0x20000368
 8000728:	20000001 	.word	0x20000001
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40020400 	.word	0x40020400
 8000734:	20000371 	.word	0x20000371

08000738 <vBuildMp3List>:
void vBuildMp3List(){
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	b0d5      	sub	sp, #340	; 0x154
    if(f_opendir(&xDirectory, "0:/") == FR_OK){                                                                                     /*get the read out protection status*/
 800073c:	a801      	add	r0, sp, #4
 800073e:	4917      	ldr	r1, [pc, #92]	; (800079c <vBuildMp3List+0x64>)
 8000740:	f00c fb62 	bl	800ce08 <f_opendir>
 8000744:	bb40      	cbnz	r0, 8000798 <vBuildMp3List+0x60>
            if(strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                            /*make sure file extension is .mp3*/
 8000746:	4d16      	ldr	r5, [pc, #88]	; (80007a0 <vBuildMp3List+0x68>)
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 8000748:	f10d 044e 	add.w	r4, sp, #78	; 0x4e
        while(f_readdir(&xDirectory, &xFinf) == FR_OK){                                                                             /*start reading directory entries*/
 800074c:	a90e      	add	r1, sp, #56	; 0x38
 800074e:	a801      	add	r0, sp, #4
 8000750:	f00c fbce 	bl	800cef0 <f_readdir>
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 8000754:	212e      	movs	r1, #46	; 0x2e
        while(f_readdir(&xDirectory, &xFinf) == FR_OK){                                                                             /*start reading directory entries*/
 8000756:	b9c0      	cbnz	r0, 800078a <vBuildMp3List+0x52>
            if(xFinf.fname[0] == 0)                                                                                                 /*exit loop when finished*/
 8000758:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 800075c:	4620      	mov	r0, r4
            if(xFinf.fname[0] == 0)                                                                                                 /*exit loop when finished*/
 800075e:	b1a3      	cbz	r3, 800078a <vBuildMp3List+0x52>
    const char *pcPeriod = strrchr(pcFile, '.');                                                                                    /*pointer to last occurrence of "."*/
 8000760:	f00f fd17 	bl	8010192 <strrchr>
    if(!pcPeriod || pcPeriod == pcFile) return "";                                                                                  /*return "" if no "."*/
 8000764:	4603      	mov	r3, r0
            if(strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                            /*make sure file extension is .mp3*/
 8000766:	1c41      	adds	r1, r0, #1
    if(!pcPeriod || pcPeriod == pcFile) return "";                                                                                  /*return "" if no "."*/
 8000768:	2800      	cmp	r0, #0
 800076a:	d0ef      	beq.n	800074c <vBuildMp3List+0x14>
 800076c:	42a3      	cmp	r3, r4
            if(strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                            /*make sure file extension is .mp3*/
 800076e:	4628      	mov	r0, r5
    if(!pcPeriod || pcPeriod == pcFile) return "";                                                                                  /*return "" if no "."*/
 8000770:	d0ec      	beq.n	800074c <vBuildMp3List+0x14>
            if(strcmp("mp3", pcGetExtension((char*) xFinf.fname)) == 0){                                                            /*make sure file extension is .mp3*/
 8000772:	f7ff fd77 	bl	8000264 <strcmp>
 8000776:	2800      	cmp	r0, #0
 8000778:	d1e8      	bne.n	800074c <vBuildMp3List+0x14>
                vSongLLAddEnd(&pxStart, pxSongLLNewElement((char*) xFinf.fname));                                                       /*add file to linked list of mp3s*/
 800077a:	4620      	mov	r0, r4
 800077c:	f003 fd56 	bl	800422c <pxSongLLNewElement>
 8000780:	4601      	mov	r1, r0
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <vBuildMp3List+0x6c>)
 8000784:	f003 fd6a 	bl	800425c <vSongLLAddEnd>
 8000788:	e7e0      	b.n	800074c <vBuildMp3List+0x14>
        vSongLLCircularizeList(pxStart);                                                                                            /*head and tail of LL point to each other*/
 800078a:	4c06      	ldr	r4, [pc, #24]	; (80007a4 <vBuildMp3List+0x6c>)
 800078c:	6820      	ldr	r0, [r4, #0]
 800078e:	f003 fd71 	bl	8004274 <vSongLLCircularizeList>
        pxCurrent = pxStart;                                                                                                        /*current music track is at head of LL*/
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <vBuildMp3List+0x70>)
 8000794:	6822      	ldr	r2, [r4, #0]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	b055      	add	sp, #340	; 0x154
 800079a:	bd30      	pop	{r4, r5, pc}
 800079c:	08010880 	.word	0x08010880
 80007a0:	08010884 	.word	0x08010884
 80007a4:	2000036c 	.word	0x2000036c
 80007a8:	20000368 	.word	0x20000368

080007ac <vMP3Playback_TaskHandler>:
{
 80007ac:	4e28      	ldr	r6, [pc, #160]	; (8000850 <vMP3Playback_TaskHandler+0xa4>)
 80007ae:	4c29      	ldr	r4, [pc, #164]	; (8000854 <vMP3Playback_TaskHandler+0xa8>)
                taskYIELD();                                                                                                           /*Yield Task*/
 80007b0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8000860 <vMP3Playback_TaskHandler+0xb4>
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80007b4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8000864 <vMP3Playback_TaskHandler+0xb8>
            if(f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0) == FR_OK){                                                               /*Mount USB drive*/
 80007b8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000868 <vMP3Playback_TaskHandler+0xbc>
{
 80007bc:	b580      	push	{r7, lr}
    MX_USB_HOST_Init();                                                                                                            /*init code for USB_HOST*/
 80007be:	f00f fa0f 	bl	800fbe0 <MX_USB_HOST_Init>
 80007c2:	4f25      	ldr	r7, [pc, #148]	; (8000858 <vMP3Playback_TaskHandler+0xac>)
 80007c4:	7833      	ldrb	r3, [r6, #0]
        if(Appli_state == APPLICATION_READY && !ucDriveMountedFlag){                                                                   /*if Ready and Drive is not Mounted*/
 80007c6:	783a      	ldrb	r2, [r7, #0]
 80007c8:	2a02      	cmp	r2, #2
 80007ca:	d029      	beq.n	8000820 <vMP3Playback_TaskHandler+0x74>
        if(ucFindInfoFlag && ucDriveMountedFlag){                                                                                  /*if New Song Flag Set and Drive Mounted Set*/
 80007cc:	7822      	ldrb	r2, [r4, #0]
 80007ce:	b1aa      	cbz	r2, 80007fc <vMP3Playback_TaskHandler+0x50>
 80007d0:	bb5b      	cbnz	r3, 800082a <vMP3Playback_TaskHandler+0x7e>
        if(Appli_state == APPLICATION_READY && !ucDriveMountedFlag){                                                                   /*if Ready and Drive is not Mounted*/
 80007d2:	783a      	ldrb	r2, [r7, #0]
 80007d4:	2a02      	cmp	r2, #2
 80007d6:	d1f9      	bne.n	80007cc <vMP3Playback_TaskHandler+0x20>
            ucDriveMountedFlag = 1;                                                                                                    /*Set the Drive Mounted Flag*/
 80007d8:	2301      	movs	r3, #1
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80007da:	461a      	mov	r2, r3
 80007dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e0:	4650      	mov	r0, sl
            ucDriveMountedFlag = 1;                                                                                                    /*Set the Drive Mounted Flag*/
 80007e2:	7033      	strb	r3, [r6, #0]
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80007e4:	f005 fd92 	bl	800630c <HAL_GPIO_WritePin>
            if(f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0) == FR_OK){                                                               /*Mount USB drive*/
 80007e8:	2200      	movs	r2, #0
 80007ea:	4649      	mov	r1, r9
 80007ec:	481b      	ldr	r0, [pc, #108]	; (800085c <vMP3Playback_TaskHandler+0xb0>)
 80007ee:	f00b fd77 	bl	800c2e0 <f_mount>
 80007f2:	b348      	cbz	r0, 8000848 <vMP3Playback_TaskHandler+0x9c>
        if(ucFindInfoFlag && ucDriveMountedFlag){                                                                                  /*if New Song Flag Set and Drive Mounted Set*/
 80007f4:	7822      	ldrb	r2, [r4, #0]
 80007f6:	7833      	ldrb	r3, [r6, #0]
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d1e9      	bne.n	80007d0 <vMP3Playback_TaskHandler+0x24>
            if(!ucFindInfoFlag && ucDriveMountedFlag){                                                                             /*if New Song Flag Not Set and Drive Mounted Set*/
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e8      	beq.n	80007d2 <vMP3Playback_TaskHandler+0x26>
                taskYIELD();                                                                                                           /*Yield Task*/
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
                vMp3PlayerDecodeFrames();                                                                                              /*Decode and Play a couple Mp3 Frasmes*/
 8000804:	f003 fbc0 	bl	8003f88 <vMp3PlayerDecodeFrames>
                taskYIELD();                                                                                                           /*Yield Task*/
 8000808:	f8c8 5000 	str.w	r5, [r8]
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	f3bf 8f6f 	isb	sy
            if(!ucFindInfoFlag && ucDriveMountedFlag){                                                                             /*if New Song Flag Not Set and Drive Mounted Set*/
 8000814:	7823      	ldrb	r3, [r4, #0]
 8000816:	b19b      	cbz	r3, 8000840 <vMP3Playback_TaskHandler+0x94>
        if(Appli_state == APPLICATION_READY && !ucDriveMountedFlag){                                                                   /*if Ready and Drive is not Mounted*/
 8000818:	783a      	ldrb	r2, [r7, #0]
 800081a:	7833      	ldrb	r3, [r6, #0]
 800081c:	2a02      	cmp	r2, #2
 800081e:	d1d5      	bne.n	80007cc <vMP3Playback_TaskHandler+0x20>
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0d9      	beq.n	80007d8 <vMP3Playback_TaskHandler+0x2c>
        if(ucFindInfoFlag && ucDriveMountedFlag){                                                                                  /*if New Song Flag Set and Drive Mounted Set*/
 8000824:	7823      	ldrb	r3, [r4, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0ea      	beq.n	8000800 <vMP3Playback_TaskHandler+0x54>
            ucFindInfoFlag = 0;                                                                                                        /*Un-Set New Song Flag*/
 800082a:	2300      	movs	r3, #0
 800082c:	7023      	strb	r3, [r4, #0]
            vMp3PlayerFindInfo();                                                                                                      /*Find Mp3 Track info*/
 800082e:	f003 fc7d 	bl	800412c <vMp3PlayerFindInfo>
            vMp3PlayerInit();                                                                                                          /*init Mp3 Playback*/
 8000832:	f003 fb63 	bl	8003efc <vMp3PlayerInit>
            if(!ucFindInfoFlag && ucDriveMountedFlag){                                                                             /*if New Song Flag Not Set and Drive Mounted Set*/
 8000836:	7822      	ldrb	r2, [r4, #0]
 8000838:	7833      	ldrb	r3, [r6, #0]
 800083a:	2a00      	cmp	r2, #0
 800083c:	d1c3      	bne.n	80007c6 <vMP3Playback_TaskHandler+0x1a>
 800083e:	e7dd      	b.n	80007fc <vMP3Playback_TaskHandler+0x50>
 8000840:	7833      	ldrb	r3, [r6, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1de      	bne.n	8000804 <vMP3Playback_TaskHandler+0x58>
 8000846:	e7c4      	b.n	80007d2 <vMP3Playback_TaskHandler+0x26>
                vBuildMp3List();                                                                                                       /*Build Mp3 LL*/
 8000848:	f7ff ff76 	bl	8000738 <vBuildMp3List>
 800084c:	e7d2      	b.n	80007f4 <vMP3Playback_TaskHandler+0x48>
 800084e:	bf00      	nop
 8000850:	20000370 	.word	0x20000370
 8000854:	20000000 	.word	0x20000000
 8000858:	2000d5cc 	.word	0x2000d5cc
 800085c:	2000e7cc 	.word	0x2000e7cc
 8000860:	e000ed04 	.word	0xe000ed04
 8000864:	40020c00 	.word	0x40020c00
 8000868:	2000d798 	.word	0x2000d798

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM7) {
 800086c:	6802      	ldr	r2, [r0, #0]
 800086e:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000870:	429a      	cmp	r2, r3
 8000872:	d000      	beq.n	8000876 <HAL_TIM_PeriodElapsedCallback+0xa>
        HAL_IncTick();
    }
}
 8000874:	4770      	bx	lr
        HAL_IncTick();
 8000876:	f004 beb7 	b.w	80055e8 <HAL_IncTick>
 800087a:	bf00      	nop
 800087c:	40001400 	.word	0x40001400

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b508      	push	{r3, lr}
  /* User can add his own implementation to report the HAL error return state */
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000888:	4801      	ldr	r0, [pc, #4]	; (8000890 <Error_Handler+0x10>)
 800088a:	f005 fd3f 	bl	800630c <HAL_GPIO_WritePin>
 800088e:	e7fe      	b.n	800088e <Error_Handler+0xe>
 8000890:	40020c00 	.word	0x40020c00

08000894 <SystemClock_Config>:
{
 8000894:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	2300      	movs	r3, #0
{
 8000898:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800089e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80008a6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008aa:	e9cd 3304 	strd	r3, r3, [sp, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4924      	ldr	r1, [pc, #144]	; (8000940 <SystemClock_Config+0xac>)
 80008b0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b2:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80008c0:	6408      	str	r0, [r1, #64]	; 0x40
 80008c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008c4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80008c8:	9101      	str	r1, [sp, #4]
 80008ca:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f0:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008f4:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f6:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fa:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000900:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000902:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f007 faf4 	bl	8007ef0 <HAL_RCC_OscConfig>
 8000908:	b9b8      	cbnz	r0, 800093a <SystemClock_Config+0xa6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800090c:	2280      	movs	r2, #128	; 0x80
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800091a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	f007 fcfa 	bl	8008318 <HAL_RCC_ClockConfig>
 8000924:	b948      	cbnz	r0, 800093a <SystemClock_Config+0xa6>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000926:	2332      	movs	r3, #50	; 0x32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800092a:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800092c:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	f007 fdc2 	bl	80084b8 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	b908      	cbnz	r0, 800093a <SystemClock_Config+0xa6>
}
 8000936:	b019      	add	sp, #100	; 0x64
 8000938:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800093a:	f7ff ffa1 	bl	8000880 <Error_Handler>
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <main>:
{
 8000948:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	2400      	movs	r4, #0
{
 800094c:	b094      	sub	sp, #80	; 0x50
    HAL_Init();
 800094e:	f004 fe31 	bl	80055b4 <HAL_Init>
    SystemClock_Config();
 8000952:	f7ff ff9f 	bl	8000894 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800095a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	4b91      	ldr	r3, [pc, #580]	; (8000ba4 <main+0x25c>)
 8000960:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000966:	4890      	ldr	r0, [pc, #576]	; (8000ba8 <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000968:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8000bf8 <main+0x2b0>
  hadc1.Instance = ADC1;
 800096c:	4d8f      	ldr	r5, [pc, #572]	; (8000bac <main+0x264>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	f042 0210 	orr.w	r2, r2, #16
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
 8000974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000976:	f002 0210 	and.w	r2, r2, #16
 800097a:	9203      	str	r2, [sp, #12]
 800097c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	9404      	str	r4, [sp, #16]
 8000980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000982:	f042 0204 	orr.w	r2, r2, #4
 8000986:	631a      	str	r2, [r3, #48]	; 0x30
 8000988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800098a:	f002 0204 	and.w	r2, r2, #4
 800098e:	9204      	str	r2, [sp, #16]
 8000990:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	9405      	str	r4, [sp, #20]
 8000994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800099a:	631a      	str	r2, [r3, #48]	; 0x30
 800099c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800099e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80009a2:	9205      	str	r2, [sp, #20]
 80009a4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	9406      	str	r4, [sp, #24]
 80009a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009aa:	f042 0201 	orr.w	r2, r2, #1
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
 80009b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b2:	f002 0201 	and.w	r2, r2, #1
 80009b6:	9206      	str	r2, [sp, #24]
 80009b8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	9407      	str	r4, [sp, #28]
 80009bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009be:	f042 0202 	orr.w	r2, r2, #2
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
 80009c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c6:	f002 0202 	and.w	r2, r2, #2
 80009ca:	9207      	str	r2, [sp, #28]
 80009cc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	9408      	str	r4, [sp, #32]
 80009d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d2:	f042 0208 	orr.w	r2, r2, #8
 80009d6:	631a      	str	r2, [r3, #48]	; 0x30
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009e0:	4622      	mov	r2, r4
 80009e2:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009e6:	f005 fc91 	bl	800630c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	4611      	mov	r1, r2
 80009ee:	4870      	ldr	r0, [pc, #448]	; (8000bb0 <main+0x268>)
 80009f0:	f005 fc8c 	bl	800630c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f4:	4622      	mov	r2, r4
 80009f6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009fa:	486e      	ldr	r0, [pc, #440]	; (8000bb4 <main+0x26c>)
 80009fc:	f005 fc86 	bl	800630c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a02:	f04f 0a08 	mov.w	sl, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a06:	a90f      	add	r1, sp, #60	; 0x3c
 8000a08:	4867      	ldr	r0, [pc, #412]	; (8000ba8 <main+0x260>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f005 fac7 	bl	8005fa4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a16:	a90f      	add	r1, sp, #60	; 0x3c
 8000a18:	4865      	ldr	r0, [pc, #404]	; (8000bb0 <main+0x268>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1c:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f005 fabc 	bl	8005fa4 <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	a90f      	add	r1, sp, #60	; 0x3c
 8000a2e:	4860      	ldr	r0, [pc, #384]	; (8000bb0 <main+0x268>)
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a30:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f005 fab1 	bl	8005fa4 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	a90f      	add	r1, sp, #60	; 0x3c
 8000a44:	485c      	ldr	r0, [pc, #368]	; (8000bb8 <main+0x270>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000a46:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a48:	e9cd 8410 	strd	r8, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f005 faaa 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_12|GPIO_PIN_14;
 8000a50:	f245 0304 	movw	r3, #20484	; 0x5004
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	a90f      	add	r1, sp, #60	; 0x3c
 8000a56:	4859      	ldr	r0, [pc, #356]	; (8000bbc <main+0x274>)
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_12|GPIO_PIN_14;
 8000a58:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f005 faa1 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a66:	a90f      	add	r1, sp, #60	; 0x3c
 8000a68:	4854      	ldr	r0, [pc, #336]	; (8000bbc <main+0x274>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a6a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f005 fa95 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7a:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7e:	a90f      	add	r1, sp, #60	; 0x3c
 8000a80:	484c      	ldr	r0, [pc, #304]	; (8000bb4 <main+0x26c>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a82:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f005 fa8b 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
 8000a8e:	f44f 6384 	mov.w	r3, #1056	; 0x420
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a92:	a90f      	add	r1, sp, #60	; 0x3c
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
 8000a96:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f005 fa82 	bl	8005fa4 <HAL_GPIO_Init>
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	a90f      	add	r1, sp, #60	; 0x3c
 8000aa2:	4841      	ldr	r0, [pc, #260]	; (8000ba8 <main+0x260>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aa6:	e9cd 780f 	strd	r7, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f005 fa7b 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000aae:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	a90f      	add	r1, sp, #60	; 0x3c
 8000ab4:	483c      	ldr	r0, [pc, #240]	; (8000ba8 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ab6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abe:	f005 fa71 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000ac2:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	a90f      	add	r1, sp, #60	; 0x3c
 8000ac6:	483a      	ldr	r0, [pc, #232]	; (8000bb0 <main+0x268>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000ac8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f005 fa68 	bl	8005fa4 <HAL_GPIO_Init>
  uint16_t data_pins[8] = {GPIO_PIN_7, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_8, GPIO_PIN_10, GPIO_PIN_12, GPIO_PIN_14};
 8000ad4:	f8df c124 	ldr.w	ip, [pc, #292]	; 8000bfc <main+0x2b4>
 8000ad8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000adc:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
  uint16_t control_pins[3] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_4};
 8000ae0:	f10c 0c10 	add.w	ip, ip, #16
  uint16_t data_pins[8] = {GPIO_PIN_7, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_8, GPIO_PIN_10, GPIO_PIN_12, GPIO_PIN_14};
 8000ae4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  uint16_t control_pins[3] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_4};
 8000ae8:	e89c 0003 	ldmia.w	ip, {r0, r1}
  LCM1602a_Set_DATA8(GPIOE, data_pins, GPIOC, control_pins);
 8000aec:	ab09      	add	r3, sp, #36	; 0x24
 8000aee:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <main+0x268>)
  uint16_t control_pins[3] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_4};
 8000af0:	9009      	str	r0, [sp, #36]	; 0x24
 8000af2:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  LCM1602a_Set_DATA8(GPIOE, data_pins, GPIOC, control_pins);
 8000af6:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <main+0x260>)
 8000af8:	4671      	mov	r1, lr
 8000afa:	f004 fc0b 	bl	8005314 <LCM1602a_Set_DATA8>
    MX_FATFS_Init();
 8000afe:	f008 fad9 	bl	80090b4 <MX_FATFS_Init>
  hadc1.Instance = ADC1;
 8000b02:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <main+0x278>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <main+0x27c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b08:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000b0e:	9412      	str	r4, [sp, #72]	; 0x48
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b10:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b14:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b16:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b18:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1c:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1e:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b20:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b22:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b26:	616e      	str	r6, [r5, #20]
  hadc1.Instance = ADC1;
 8000b28:	602a      	str	r2, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b2a:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b2c:	f004 fd80 	bl	8005630 <HAL_ADC_Init>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d135      	bne.n	8000ba0 <main+0x258>
 8000b34:	4603      	mov	r3, r0
  sConfig.Channel = ADC_CHANNEL_3;
 8000b36:	2203      	movs	r2, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	a90f      	add	r1, sp, #60	; 0x3c
 8000b3a:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b3c:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_3;
 8000b40:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	f004 fef9 	bl	8005938 <HAL_ADC_ConfigChannel>
 8000b46:	4604      	mov	r4, r0
 8000b48:	bb50      	cbnz	r0, 8000ba0 <main+0x258>
    LCM1602a_init(TWO_LINE_DISPLAY);
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	f004 fc5a 	bl	8005404 <LCM1602a_init>
    xTaskCreate(vMP3Playback_TaskHandler,      "Mp3 Play-back", 4500,                     NULL, 2, &xMP3TaskHandle);
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <main+0x280>)
 8000b52:	491e      	ldr	r1, [pc, #120]	; (8000bcc <main+0x284>)
 8000b54:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <main+0x288>)
 8000b56:	e9cd 7300 	strd	r7, r3, [sp]
 8000b5a:	f241 1294 	movw	r2, #4500	; 0x1194
 8000b5e:	4623      	mov	r3, r4
 8000b60:	f00d fbe2 	bl	800e328 <xTaskCreate>
    xTaskCreate(vUpdateLCD_TaskHandler,        "Update LCD",    250,                      NULL, 2, &xUpdateLCDTaskHandle);
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <main+0x28c>)
 8000b66:	491c      	ldr	r1, [pc, #112]	; (8000bd8 <main+0x290>)
 8000b68:	481c      	ldr	r0, [pc, #112]	; (8000bdc <main+0x294>)
 8000b6a:	e9cd 7300 	strd	r7, r3, [sp]
 8000b6e:	22fa      	movs	r2, #250	; 0xfa
 8000b70:	4623      	mov	r3, r4
 8000b72:	f00d fbd9 	bl	800e328 <xTaskCreate>
    xTaskCreate(vReadADC_TaskHandler,          "Read ADC",      configMINIMAL_STACK_SIZE, NULL, 2, &xADCTaskHandle);
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <main+0x298>)
 8000b78:	491a      	ldr	r1, [pc, #104]	; (8000be4 <main+0x29c>)
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <main+0x2a0>)
 8000b7c:	e9cd 7300 	strd	r7, r3, [sp]
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	4623      	mov	r3, r4
 8000b84:	f00d fbd0 	bl	800e328 <xTaskCreate>
    xTaskCreate(vReadInputButtons_TaskHandler, "Read Buttons",  configMINIMAL_STACK_SIZE, NULL, 2, &xButtonsTaskHandle);
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <main+0x2a4>)
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	4917      	ldr	r1, [pc, #92]	; (8000bf0 <main+0x2a8>)
 8000b92:	9700      	str	r7, [sp, #0]
 8000b94:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <main+0x2ac>)
 8000b96:	f00d fbc7 	bl	800e328 <xTaskCreate>
    vTaskStartScheduler();
 8000b9a:	f00d fbf9 	bl	800e390 <vTaskStartScheduler>
 8000b9e:	e7fe      	b.n	8000b9e <main+0x256>
    Error_Handler();
 8000ba0:	f7ff fe6e 	bl	8000880 <Error_Handler>
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	2000d5d8 	.word	0x2000d5d8
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40012000 	.word	0x40012000
 8000bc4:	0f000001 	.word	0x0f000001
 8000bc8:	2000037c 	.word	0x2000037c
 8000bcc:	08010848 	.word	0x08010848
 8000bd0:	080007ad 	.word	0x080007ad
 8000bd4:	20000380 	.word	0x20000380
 8000bd8:	08010858 	.word	0x08010858
 8000bdc:	0800064d 	.word	0x0800064d
 8000be0:	20000374 	.word	0x20000374
 8000be4:	08010864 	.word	0x08010864
 8000be8:	0800065d 	.word	0x0800065d
 8000bec:	20000378 	.word	0x20000378
 8000bf0:	08010870 	.word	0x08010870
 8000bf4:	080006a1 	.word	0x080006a1
 8000bf8:	10120000 	.word	0x10120000
 8000bfc:	08010804 	.word	0x08010804

08000c00 <get_bits>:
static uint32_t get_bits(bs_t *bs, int n)
{
    uint32_t next, cache = 0, s = bs->pos & 7;
    int shl = n + s;
    const uint8_t *p = bs->buf + (bs->pos >> 3);
    if ((bs->pos += n) > bs->limit)
 8000c00:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{
 8000c04:	b470      	push	{r4, r5, r6}
    if ((bs->pos += n) > bs->limit)
 8000c06:	185d      	adds	r5, r3, r1
 8000c08:	4295      	cmp	r5, r2
    const uint8_t *p = bs->buf + (bs->pos >> 3);
 8000c0a:	6804      	ldr	r4, [r0, #0]
    if ((bs->pos += n) > bs->limit)
 8000c0c:	6045      	str	r5, [r0, #4]
 8000c0e:	dc24      	bgt.n	8000c5a <get_bits+0x5a>
    const uint8_t *p = bs->buf + (bs->pos >> 3);
 8000c10:	10dd      	asrs	r5, r3, #3
    uint32_t next, cache = 0, s = bs->pos & 7;
 8000c12:	f003 0207 	and.w	r2, r3, #7
    int shl = n + s;
 8000c16:	4411      	add	r1, r2
        return 0;
    next = *p++ & (255 >> s);
 8000c18:	5d63      	ldrb	r3, [r4, r5]
 8000c1a:	20ff      	movs	r0, #255	; 0xff
    while ((shl -= 8) > 0)
 8000c1c:	f1a1 0608 	sub.w	r6, r1, #8
    next = *p++ & (255 >> s);
 8000c20:	fa40 f202 	asr.w	r2, r0, r2
    while ((shl -= 8) > 0)
 8000c24:	2e00      	cmp	r6, #0
    const uint8_t *p = bs->buf + (bs->pos >> 3);
 8000c26:	442c      	add	r4, r5
    next = *p++ & (255 >> s);
 8000c28:	ea03 0302 	and.w	r3, r3, r2
    int shl = n + s;
 8000c2c:	460d      	mov	r5, r1
    while ((shl -= 8) > 0)
 8000c2e:	dd17      	ble.n	8000c60 <get_bits+0x60>
 8000c30:	4632      	mov	r2, r6
    uint32_t next, cache = 0, s = bs->pos & 7;
 8000c32:	2000      	movs	r0, #0
    {
        cache |= next << shl;
 8000c34:	4093      	lsls	r3, r2
    while ((shl -= 8) > 0)
 8000c36:	3a08      	subs	r2, #8
 8000c38:	2a00      	cmp	r2, #0
        cache |= next << shl;
 8000c3a:	ea40 0003 	orr.w	r0, r0, r3
        next = *p++;
 8000c3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    while ((shl -= 8) > 0)
 8000c42:	dcf7      	bgt.n	8000c34 <get_bits+0x34>
 8000c44:	f1a1 0209 	sub.w	r2, r1, #9
 8000c48:	f022 0207 	bic.w	r2, r2, #7
 8000c4c:	1ab5      	subs	r5, r6, r2
    }
    return cache | (next >> -shl);
 8000c4e:	f1c5 0208 	rsb	r2, r5, #8
 8000c52:	40d3      	lsrs	r3, r2
 8000c54:	4318      	orrs	r0, r3
}
 8000c56:	bc70      	pop	{r4, r5, r6}
 8000c58:	4770      	bx	lr
        return 0;
 8000c5a:	2000      	movs	r0, #0
}
 8000c5c:	bc70      	pop	{r4, r5, r6}
 8000c5e:	4770      	bx	lr
    uint32_t next, cache = 0, s = bs->pos & 7;
 8000c60:	2000      	movs	r0, #0
 8000c62:	e7f4      	b.n	8000c4e <get_bits+0x4e>

08000c64 <hdr_valid>:
static int hdr_valid(const uint8_t *h)
{
    return h[0] == 0xff &&
        ((h[1] & 0xF0) == 0xf0 || (h[1] & 0xFE) == 0xe2) &&
        (HDR_GET_LAYER(h) != 0) &&
        (HDR_GET_BITRATE(h) != 15) &&
 8000c64:	7803      	ldrb	r3, [r0, #0]
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d001      	beq.n	8000c6e <hdr_valid+0xa>
 8000c6a:	2000      	movs	r0, #0
        (HDR_GET_SAMPLE_RATE(h) != 3);
}
 8000c6c:	4770      	bx	lr
        ((h[1] & 0xF0) == 0xf0 || (h[1] & 0xFE) == 0xe2) &&
 8000c6e:	7843      	ldrb	r3, [r0, #1]
    return h[0] == 0xff &&
 8000c70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c74:	2af0      	cmp	r2, #240	; 0xf0
 8000c76:	d003      	beq.n	8000c80 <hdr_valid+0x1c>
        ((h[1] & 0xF0) == 0xf0 || (h[1] & 0xFE) == 0xe2) &&
 8000c78:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8000c7c:	2ae2      	cmp	r2, #226	; 0xe2
 8000c7e:	d1f4      	bne.n	8000c6a <hdr_valid+0x6>
 8000c80:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <hdr_valid+0x6>
        (HDR_GET_BITRATE(h) != 15) &&
 8000c88:	7880      	ldrb	r0, [r0, #2]
        (HDR_GET_LAYER(h) != 0) &&
 8000c8a:	0903      	lsrs	r3, r0, #4
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d0ec      	beq.n	8000c6a <hdr_valid+0x6>
        (HDR_GET_BITRATE(h) != 15) &&
 8000c90:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8000c94:	3803      	subs	r0, #3
 8000c96:	bf18      	it	ne
 8000c98:	2001      	movne	r0, #1
 8000c9a:	4770      	bx	lr

08000c9c <hdr_compare>:

static int hdr_compare(const uint8_t *h1, const uint8_t *h2)
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	4604      	mov	r4, r0
    return hdr_valid(h2) &&
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	f7ff ffdf 	bl	8000c64 <hdr_valid>
        ((h1[1] ^ h2[1]) & 0xFE) == 0 &&
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000ca6:	b1c8      	cbz	r0, 8000cdc <hdr_compare+0x40>
        ((h1[1] ^ h2[1]) & 0xFE) == 0 &&
 8000ca8:	7860      	ldrb	r0, [r4, #1]
 8000caa:	784b      	ldrb	r3, [r1, #1]
 8000cac:	4058      	eors	r0, r3
    return hdr_valid(h2) &&
 8000cae:	f010 00fe 	ands.w	r0, r0, #254	; 0xfe
 8000cb2:	d114      	bne.n	8000cde <hdr_compare+0x42>
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000cb4:	78a2      	ldrb	r2, [r4, #2]
 8000cb6:	788b      	ldrb	r3, [r1, #2]
 8000cb8:	ea82 0103 	eor.w	r1, r2, r3
        ((h1[1] ^ h2[1]) & 0xFE) == 0 &&
 8000cbc:	f011 0f0c 	tst.w	r1, #12
 8000cc0:	d10c      	bne.n	8000cdc <hdr_compare+0x40>
        !(HDR_IS_FREE_FORMAT(h1) ^ HDR_IS_FREE_FORMAT(h2));
 8000cc2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000cc6:	bf14      	ite	ne
 8000cc8:	2001      	movne	r0, #1
 8000cca:	2000      	moveq	r0, #0
 8000ccc:	f013 0ff0 	tst.w	r3, #240	; 0xf0
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	1ac0      	subs	r0, r0, r3
 8000cd8:	bf18      	it	ne
 8000cda:	2001      	movne	r0, #1
}
 8000cdc:	bd10      	pop	{r4, pc}
        ((h1[2] ^ h2[2]) & 0x0C) == 0 &&
 8000cde:	2000      	movs	r0, #0
}
 8000ce0:	bd10      	pop	{r4, pc}
 8000ce2:	bf00      	nop

08000ce4 <hdr_frame_bytes>:
{
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
}

static int hdr_frame_bytes(const uint8_t *h, int free_format_size)
{
 8000ce4:	b4f0      	push	{r4, r5, r6, r7}
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8000ce6:	7843      	ldrb	r3, [r0, #1]
 8000ce8:	f003 0606 	and.w	r6, r3, #6
 8000cec:	2e06      	cmp	r6, #6
 8000cee:	d03b      	beq.n	8000d68 <hdr_frame_bytes+0x84>
 8000cf0:	f003 020e 	and.w	r2, r3, #14
 8000cf4:	2a02      	cmp	r2, #2
 8000cf6:	bf0c      	ite	eq
 8000cf8:	f44f 7410 	moveq.w	r4, #576	; 0x240
 8000cfc:	f44f 6490 	movne.w	r4, #1152	; 0x480
 8000d00:	f003 0708 	and.w	r7, r3, #8
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8000d04:	f3c3 0241 	ubfx	r2, r3, #1, #2
 8000d08:	2f00      	cmp	r7, #0
 8000d0a:	7880      	ldrb	r0, [r0, #2]
 8000d0c:	4d18      	ldr	r5, [pc, #96]	; (8000d70 <hdr_frame_bytes+0x8c>)
 8000d0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8000d12:	bf14      	ite	ne
 8000d14:	272d      	movne	r7, #45	; 0x2d
 8000d16:	2700      	moveq	r7, #0
 8000d18:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d1c:	eb05 1510 	add.w	r5, r5, r0, lsr #4
 8000d20:	443a      	add	r2, r7
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000d22:	f3c0 0081 	ubfx	r0, r0, #2, #2
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8000d26:	5caf      	ldrb	r7, [r5, r2]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <hdr_frame_bytes+0x90>)
 8000d2a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8000d2e:	ea4f 0247 	mov.w	r2, r7, lsl #1
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000d32:	bf0c      	ite	eq
 8000d34:	2001      	moveq	r0, #1
 8000d36:	2000      	movne	r0, #0
    int frame_bytes = hdr_frame_samples(h)*hdr_bitrate_kbps(h)*125/hdr_sample_rate_hz(h);
 8000d38:	ebc2 1787 	rsb	r7, r2, r7, lsl #6
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000d3c:	f083 0310 	eor.w	r3, r3, #16
 8000d40:	40c5      	lsrs	r5, r0
    if (HDR_IS_LAYER_1(h))
 8000d42:	2e06      	cmp	r6, #6
    int frame_bytes = hdr_frame_samples(h)*hdr_bitrate_kbps(h)*125/hdr_sample_rate_hz(h);
 8000d44:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8000d48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d4c:	fa25 f303 	lsr.w	r3, r5, r3
    int frame_bytes = hdr_frame_samples(h)*hdr_bitrate_kbps(h)*125/hdr_sample_rate_hz(h);
 8000d50:	fb04 f202 	mul.w	r2, r4, r2
 8000d54:	fbb2 f0f3 	udiv	r0, r2, r3
    {
        frame_bytes &= ~3; /* slot align */
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0003 	biceq.w	r0, r0, #3
    }
    return frame_bytes ? frame_bytes : free_format_size;
}
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	bf08      	it	eq
 8000d62:	4608      	moveq	r0, r1
 8000d64:	bcf0      	pop	{r4, r5, r6, r7}
 8000d66:	4770      	bx	lr
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8000d68:	f44f 74c0 	mov.w	r4, #384	; 0x180
 8000d6c:	e7c8      	b.n	8000d00 <hdr_frame_bytes+0x1c>
 8000d6e:	bf00      	nop
 8000d70:	080115b0 	.word	0x080115b0
 8000d74:	08010a30 	.word	0x08010a30

08000d78 <L3_read_side_info>:
    }
}
#endif /* MINIMP3_ONLY_MP3 */

static int L3_read_side_info(bs_t *bs, L3_gr_info_t *gr, const uint8_t *hdr)
{
 8000d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { 4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,0 }
    };

    unsigned tables, scfsi = 0;
    int main_data_begin, part_23_sum = 0;
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d7c:	7855      	ldrb	r5, [r2, #1]
 8000d7e:	f892 9002 	ldrb.w	r9, [r2, #2]
    int gr_count = HDR_IS_MONO(hdr) ? 1 : 2;
 8000d82:	78d3      	ldrb	r3, [r2, #3]
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d84:	f3c5 07c0 	ubfx	r7, r5, #3, #1
{
 8000d88:	4616      	mov	r6, r2
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000d8a:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000d8e:	4417      	add	r7, r2
 8000d90:	f3c9 0981 	ubfx	r9, r9, #2, #2
 8000d94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8000d98:	eb17 0709 	adds.w	r7, r7, r9
    int gr_count = HDR_IS_MONO(hdr) ? 1 : 2;
 8000d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000da0:	bf14      	ite	ne
 8000da2:	f04f 0901 	movne.w	r9, #1
 8000da6:	f04f 0900 	moveq.w	r9, #0
    int gr_count = HDR_IS_MONO(hdr) ? 1 : 2;
 8000daa:	2bc0      	cmp	r3, #192	; 0xc0
 8000dac:	bf14      	ite	ne
 8000dae:	f04f 0a02 	movne.w	sl, #2
 8000db2:	f04f 0a01 	moveq.w	sl, #1

    if (HDR_TEST_MPEG1(hdr))
 8000db6:	f015 0508 	ands.w	r5, r5, #8
{
 8000dba:	b085      	sub	sp, #20
 8000dbc:	468b      	mov	fp, r1
    int sr_idx = HDR_GET_MY_SAMPLE_RATE(hdr); sr_idx -= (sr_idx != 0);
 8000dbe:	eba7 0709 	sub.w	r7, r7, r9
{
 8000dc2:	4604      	mov	r4, r0
    if (HDR_TEST_MPEG1(hdr))
 8000dc4:	f000 8112 	beq.w	8000fec <L3_read_side_info+0x274>
    {
        gr_count *= 2;
        main_data_begin = get_bits(bs, 9);
 8000dc8:	2109      	movs	r1, #9
 8000dca:	f7ff ff19 	bl	8000c00 <get_bits>
        gr_count *= 2;
 8000dce:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        main_data_begin = get_bits(bs, 9);
 8000dd2:	9001      	str	r0, [sp, #4]
        scfsi = get_bits(bs, 7 + gr_count);
 8000dd4:	f10a 0107 	add.w	r1, sl, #7
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff ff11 	bl	8000c00 <get_bits>
 8000dde:	4605      	mov	r5, r0
 8000de0:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
                    gr->sfbtab = g_scf_short[sr_idx];
                    gr->n_long_sfb = 0;
                    gr->n_short_sfb = 39;
                } else
                {
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000de4:	4985      	ldr	r1, [pc, #532]	; (8000ffc <L3_read_side_info+0x284>)
                    gr->sfbtab = g_scf_short[sr_idx];
 8000de6:	4a86      	ldr	r2, [pc, #536]	; (8001000 <L3_read_side_info+0x288>)
        gr->sfbtab = g_scf_long[sr_idx];
 8000de8:	4886      	ldr	r0, [pc, #536]	; (8001004 <L3_read_side_info+0x28c>)
 8000dea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000dee:	eb07 0947 	add.w	r9, r7, r7, lsl #1
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000df2:	eb01 030c 	add.w	r3, r1, ip
        gr->sfbtab = g_scf_long[sr_idx];
 8000df6:	ebc7 07c9 	rsb	r7, r7, r9, lsl #3
 8000dfa:	f10b 0b1c 	add.w	fp, fp, #28
 8000dfe:	ebca 08ca 	rsb	r8, sl, sl, lsl #3
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000e02:	9303      	str	r3, [sp, #12]
                    gr->sfbtab = g_scf_short[sr_idx];
 8000e04:	eb02 030c 	add.w	r3, r2, ip
        gr->sfbtab = g_scf_long[sr_idx];
 8000e08:	eb00 0907 	add.w	r9, r0, r7
 8000e0c:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
                    gr->sfbtab = g_scf_short[sr_idx];
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2700      	movs	r7, #0
 8000e14:	e062      	b.n	8000edc <L3_read_side_info+0x164>
            gr->block_type = (uint8_t)get_bits(bs, 2);
 8000e16:	2102      	movs	r1, #2
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff fef1 	bl	8000c00 <get_bits>
 8000e1e:	b2c0      	uxtb	r0, r0
 8000e20:	f80b 0c11 	strb.w	r0, [fp, #-17]
            if (!gr->block_type)
 8000e24:	2800      	cmp	r0, #0
 8000e26:	f000 80da 	beq.w	8000fde <L3_read_side_info+0x266>
            gr->mixed_block_flag = (uint8_t)get_bits(bs, 1);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fee7 	bl	8000c00 <get_bits>
            if (gr->block_type == SHORT_BLOCK_TYPE)
 8000e32:	f81b 3c11 	ldrb.w	r3, [fp, #-17]
            gr->region_count[0] = 7;
 8000e36:	2207      	movs	r2, #7
            gr->mixed_block_flag = (uint8_t)get_bits(bs, 1);
 8000e38:	b2c0      	uxtb	r0, r0
            gr->region_count[0] = 7;
 8000e3a:	f80b 2c0a 	strb.w	r2, [fp, #-10]
            if (gr->block_type == SHORT_BLOCK_TYPE)
 8000e3e:	2b02      	cmp	r3, #2
            gr->region_count[1] = 255;
 8000e40:	f04f 02ff 	mov.w	r2, #255	; 0xff
            gr->mixed_block_flag = (uint8_t)get_bits(bs, 1);
 8000e44:	f80b 0c10 	strb.w	r0, [fp, #-16]
            gr->region_count[1] = 255;
 8000e48:	f80b 2c09 	strb.w	r2, [fp, #-9]
            if (gr->block_type == SHORT_BLOCK_TYPE)
 8000e4c:	f000 809f 	beq.w	8000f8e <L3_read_side_info+0x216>
                    gr->n_long_sfb = HDR_TEST_MPEG1(hdr) ? 8 : 6;
                    gr->n_short_sfb = 30;
                }
            }
            tables = get_bits(bs, 10);
 8000e50:	210a      	movs	r1, #10
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff fed4 	bl	8000c00 <get_bits>
            tables <<= 5;
            gr->subblock_gain[0] = (uint8_t)get_bits(bs, 3);
 8000e58:	2103      	movs	r1, #3
            tables <<= 5;
 8000e5a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
            gr->subblock_gain[0] = (uint8_t)get_bits(bs, 3);
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff fece 	bl	8000c00 <get_bits>
            gr->subblock_gain[1] = (uint8_t)get_bits(bs, 3);
 8000e64:	2103      	movs	r1, #3
            gr->subblock_gain[0] = (uint8_t)get_bits(bs, 3);
 8000e66:	f80b 0c07 	strb.w	r0, [fp, #-7]
            gr->subblock_gain[1] = (uint8_t)get_bits(bs, 3);
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff fec8 	bl	8000c00 <get_bits>
            gr->subblock_gain[2] = (uint8_t)get_bits(bs, 3);
 8000e70:	2103      	movs	r1, #3
            gr->subblock_gain[1] = (uint8_t)get_bits(bs, 3);
 8000e72:	f80b 0c06 	strb.w	r0, [fp, #-6]
            gr->subblock_gain[2] = (uint8_t)get_bits(bs, 3);
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff fec2 	bl	8000c00 <get_bits>
 8000e7c:	f80b 0c05 	strb.w	r0, [fp, #-5]
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
            gr->region_count[2] = 255;
        }
        gr->table_select[0] = (uint8_t)(tables >> 10);
        gr->table_select[1] = (uint8_t)((tables >> 5) & 31);
 8000e80:	f3ca 1344 	ubfx	r3, sl, #5, #5
        gr->table_select[0] = (uint8_t)(tables >> 10);
 8000e84:	ea4f 229a 	mov.w	r2, sl, lsr #10
        gr->table_select[2] = (uint8_t)((tables) & 31);
 8000e88:	f00a 0a1f 	and.w	sl, sl, #31
        gr->table_select[0] = (uint8_t)(tables >> 10);
 8000e8c:	f80b 2c0d 	strb.w	r2, [fp, #-13]
        gr->table_select[1] = (uint8_t)((tables >> 5) & 31);
 8000e90:	f80b 3c0c 	strb.w	r3, [fp, #-12]
        gr->table_select[2] = (uint8_t)((tables) & 31);
 8000e94:	f80b ac0b 	strb.w	sl, [fp, #-11]
        gr->preflag = HDR_TEST_MPEG1(hdr) ? get_bits(bs, 1) : (gr->scalefac_compress >= 500);
 8000e98:	7873      	ldrb	r3, [r6, #1]
 8000e9a:	071b      	lsls	r3, r3, #28
 8000e9c:	d471      	bmi.n	8000f82 <L3_read_side_info+0x20a>
 8000e9e:	f83b 0c14 	ldrh.w	r0, [fp, #-20]
 8000ea2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000ea6:	bf34      	ite	cc
 8000ea8:	2000      	movcc	r0, #0
 8000eaa:	2001      	movcs	r0, #1
 8000eac:	f80b 0c04 	strb.w	r0, [fp, #-4]
        gr->scalefac_scale = (uint8_t)get_bits(bs, 1);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fea4 	bl	8000c00 <get_bits>
        gr->count1_table = (uint8_t)get_bits(bs, 1);
 8000eb8:	2101      	movs	r1, #1
        gr->scalefac_scale = (uint8_t)get_bits(bs, 1);
 8000eba:	f80b 0c03 	strb.w	r0, [fp, #-3]
        gr->count1_table = (uint8_t)get_bits(bs, 1);
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff fe9e 	bl	8000c00 <get_bits>
        gr->scfsi = (uint8_t)((scfsi >> 12) & 15);
 8000ec4:	f3c5 3303 	ubfx	r3, r5, #12, #4
        gr->count1_table = (uint8_t)get_bits(bs, 1);
 8000ec8:	f80b 0c02 	strb.w	r0, [fp, #-2]
        gr->scfsi = (uint8_t)((scfsi >> 12) & 15);
 8000ecc:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8000ed0:	f10b 0b1c 	add.w	fp, fp, #28
        scfsi <<= 4;
        gr++;
    } while(--gr_count);
 8000ed4:	45c3      	cmp	fp, r8
        scfsi <<= 4;
 8000ed6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    } while(--gr_count);
 8000eda:	d078      	beq.n	8000fce <L3_read_side_info+0x256>
        if (HDR_IS_MONO(hdr))
 8000edc:	78f3      	ldrb	r3, [r6, #3]
 8000ede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000ee2:	2bc0      	cmp	r3, #192	; 0xc0
        gr->part_23_length = (uint16_t)get_bits(bs, 12);
 8000ee4:	f04f 010c 	mov.w	r1, #12
 8000ee8:	4620      	mov	r0, r4
            scfsi <<= 4;
 8000eea:	bf08      	it	eq
 8000eec:	012d      	lsleq	r5, r5, #4
        gr->part_23_length = (uint16_t)get_bits(bs, 12);
 8000eee:	f7ff fe87 	bl	8000c00 <get_bits>
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000ef2:	2109      	movs	r1, #9
        gr->part_23_length = (uint16_t)get_bits(bs, 12);
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f82b 0c18 	strh.w	r0, [fp, #-24]
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000efa:	4620      	mov	r0, r4
        part_23_sum += gr->part_23_length;
 8000efc:	fa17 f783 	uxtah	r7, r7, r3
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000f00:	f7ff fe7e 	bl	8000c00 <get_bits>
 8000f04:	b280      	uxth	r0, r0
        if (gr->big_values > 288)
 8000f06:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
        gr->big_values = (uint16_t)get_bits(bs,  9);
 8000f0a:	f82b 0c16 	strh.w	r0, [fp, #-22]
        if (gr->big_values > 288)
 8000f0e:	d866      	bhi.n	8000fde <L3_read_side_info+0x266>
        gr->global_gain = (uint8_t)get_bits(bs, 8);
 8000f10:	2108      	movs	r1, #8
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff fe74 	bl	8000c00 <get_bits>
 8000f18:	f80b 0c12 	strb.w	r0, [fp, #-18]
        gr->scalefac_compress = (uint16_t)get_bits(bs, HDR_TEST_MPEG1(hdr) ? 4 : 9);
 8000f1c:	7873      	ldrb	r3, [r6, #1]
 8000f1e:	f013 0f08 	tst.w	r3, #8
 8000f22:	bf0c      	ite	eq
 8000f24:	2109      	moveq	r1, #9
 8000f26:	2104      	movne	r1, #4
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff fe69 	bl	8000c00 <get_bits>
        gr->n_long_sfb  = 22;
 8000f2e:	2216      	movs	r2, #22
        gr->n_short_sfb = 0;
 8000f30:	2300      	movs	r3, #0
        gr->scalefac_compress = (uint16_t)get_bits(bs, HDR_TEST_MPEG1(hdr) ? 4 : 9);
 8000f32:	f82b 0c14 	strh.w	r0, [fp, #-20]
        gr->sfbtab = g_scf_long[sr_idx];
 8000f36:	f84b 9c1c 	str.w	r9, [fp, #-28]
        gr->n_long_sfb  = 22;
 8000f3a:	f80b 2c0f 	strb.w	r2, [fp, #-15]
        gr->n_short_sfb = 0;
 8000f3e:	f80b 3c0e 	strb.w	r3, [fp, #-14]
        if (get_bits(bs, 1))
 8000f42:	2101      	movs	r1, #1
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff fe5b 	bl	8000c00 <get_bits>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	f47f af63 	bne.w	8000e16 <L3_read_side_info+0x9e>
            gr->block_type = 0;
 8000f50:	f80b 0c11 	strb.w	r0, [fp, #-17]
            gr->mixed_block_flag = 0;
 8000f54:	f80b 0c10 	strb.w	r0, [fp, #-16]
            tables = get_bits(bs, 15);
 8000f58:	210f      	movs	r1, #15
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff fe50 	bl	8000c00 <get_bits>
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
 8000f60:	2104      	movs	r1, #4
            tables = get_bits(bs, 15);
 8000f62:	4682      	mov	sl, r0
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff fe4b 	bl	8000c00 <get_bits>
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
 8000f6a:	2103      	movs	r1, #3
            gr->region_count[0] = (uint8_t)get_bits(bs, 4);
 8000f6c:	f80b 0c0a 	strb.w	r0, [fp, #-10]
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff fe45 	bl	8000c00 <get_bits>
            gr->region_count[2] = 255;
 8000f76:	23ff      	movs	r3, #255	; 0xff
            gr->region_count[1] = (uint8_t)get_bits(bs, 3);
 8000f78:	f80b 0c09 	strb.w	r0, [fp, #-9]
            gr->region_count[2] = 255;
 8000f7c:	f80b 3c08 	strb.w	r3, [fp, #-8]
 8000f80:	e77e      	b.n	8000e80 <L3_read_side_info+0x108>
        gr->preflag = HDR_TEST_MPEG1(hdr) ? get_bits(bs, 1) : (gr->scalefac_compress >= 500);
 8000f82:	2101      	movs	r1, #1
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fe3b 	bl	8000c00 <get_bits>
 8000f8a:	b2c0      	uxtb	r0, r0
 8000f8c:	e78e      	b.n	8000eac <L3_read_side_info+0x134>
                scfsi &= 0x0F0F;
 8000f8e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000f92:	401d      	ands	r5, r3
                if (!gr->mixed_block_flag)
 8000f94:	b960      	cbnz	r0, 8000fb0 <L3_read_side_info+0x238>
                    gr->region_count[0] = 8;
 8000f96:	f04f 0208 	mov.w	r2, #8
                    gr->n_short_sfb = 39;
 8000f9a:	2327      	movs	r3, #39	; 0x27
                    gr->region_count[0] = 8;
 8000f9c:	f80b 2c0a 	strb.w	r2, [fp, #-10]
                    gr->sfbtab = g_scf_short[sr_idx];
 8000fa0:	9a02      	ldr	r2, [sp, #8]
 8000fa2:	f84b 2c1c 	str.w	r2, [fp, #-28]
                    gr->n_long_sfb = 0;
 8000fa6:	f80b 0c0f 	strb.w	r0, [fp, #-15]
                    gr->n_short_sfb = 39;
 8000faa:	f80b 3c0e 	strb.w	r3, [fp, #-14]
 8000fae:	e74f      	b.n	8000e50 <L3_read_side_info+0xd8>
                    gr->sfbtab = g_scf_mixed[sr_idx];
 8000fb0:	9b03      	ldr	r3, [sp, #12]
 8000fb2:	f84b 3c1c 	str.w	r3, [fp, #-28]
                    gr->n_long_sfb = HDR_TEST_MPEG1(hdr) ? 8 : 6;
 8000fb6:	7873      	ldrb	r3, [r6, #1]
 8000fb8:	f013 0f08 	tst.w	r3, #8
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2206      	moveq	r2, #6
 8000fc0:	2208      	movne	r2, #8
                    gr->n_short_sfb = 30;
 8000fc2:	231e      	movs	r3, #30
                    gr->n_long_sfb = HDR_TEST_MPEG1(hdr) ? 8 : 6;
 8000fc4:	f80b 2c0f 	strb.w	r2, [fp, #-15]
                    gr->n_short_sfb = 30;
 8000fc8:	f80b 3c0e 	strb.w	r3, [fp, #-14]
 8000fcc:	e740      	b.n	8000e50 <L3_read_side_info+0xd8>

    if (part_23_sum + bs->pos > bs->limit + main_data_begin*8)
 8000fce:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000fd2:	4417      	add	r7, r2
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fda:	429f      	cmp	r7, r3
 8000fdc:	dd02      	ble.n	8000fe4 <L3_read_side_info+0x26c>
            return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9301      	str	r3, [sp, #4]
    {
        return -1;
    }

    return main_data_begin;
}
 8000fe4:	9801      	ldr	r0, [sp, #4]
 8000fe6:	b005      	add	sp, #20
 8000fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        main_data_begin = get_bits(bs, 8 + gr_count) >> gr_count;
 8000fec:	f10a 0108 	add.w	r1, sl, #8
 8000ff0:	f7ff fe06 	bl	8000c00 <get_bits>
 8000ff4:	fa20 f30a 	lsr.w	r3, r0, sl
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	e6f1      	b.n	8000de0 <L3_read_side_info+0x68>
 8000ffc:	08010e48 	.word	0x08010e48
 8001000:	08010fdc 	.word	0x08010fdc
 8001004:	08010d90 	.word	0x08010d90

08001008 <L3_dct3_9>:
    y[4] = s4 + s0;
    s8 = t0 - t2 + s6;
    s0 = t0 - t4 + t2;
    s4 = t0 + t4 - s6;

    s1 = y[1]; s3 = y[3]; s5 = y[5]; s7 = y[7];
 8001008:	ed90 6a01 	vldr	s12, [r0, #4]
 800100c:	edd0 6a05 	vldr	s13, [r0, #20]
 8001010:	ed90 3a07 	vldr	s6, [r0, #28]
    s0 = y[0]; s2 = y[2]; s4 = y[4]; s6 = y[6]; s8 = y[8];
 8001014:	ed90 5a02 	vldr	s10, [r0, #8]
 8001018:	edd0 2a08 	vldr	s5, [r0, #32]
 800101c:	ed90 1a00 	vldr	s2, [r0]

    s3 *= 0.86602540f;
    t0 = (s5 + s1)*0.98480775f;
 8001020:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001138 <L3_dct3_9+0x130>
    s0 = y[0]; s2 = y[2]; s4 = y[4]; s6 = y[6]; s8 = y[8];
 8001024:	ed90 2a06 	vldr	s4, [r0, #24]
 8001028:	edd0 4a04 	vldr	s9, [r0, #16]
    t4 = (s5 - s7)*0.34202014f;
 800102c:	eddf 0a43 	vldr	s1, [pc, #268]	; 800113c <L3_dct3_9+0x134>
    t2 = (s1 + s7)*0.64278761f;
    s1 = (s1 - s5 - s7)*0.86602540f;

    s5 = t0 - s3 - t2;
 8001030:	eddf 1a43 	vldr	s3, [pc, #268]	; 8001140 <L3_dct3_9+0x138>
    s1 = y[1]; s3 = y[3]; s5 = y[5]; s7 = y[7];
 8001034:	ed90 4a03 	vldr	s8, [r0, #12]
{
 8001038:	ed2d 8b04 	vpush	{d8-d9}
    t0 = (s5 + s1)*0.98480775f;
 800103c:	ee36 8a26 	vadd.f32	s16, s12, s13
    s4 += s8 - s2;
 8001040:	ee72 5ac5 	vsub.f32	s11, s5, s10
    t0 = (s5 + s1)*0.98480775f;
 8001044:	ee28 8a07 	vmul.f32	s16, s16, s14
    t0 = s0 + s6*0.5f;
 8001048:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    t4 = (s5 - s7)*0.34202014f;
 800104c:	ee36 7ac3 	vsub.f32	s14, s13, s6
    t0 = s0 + s6*0.5f;
 8001050:	eef0 7a41 	vmov.f32	s15, s2
 8001054:	eee2 7a23 	vfma.f32	s15, s4, s7
    s4 += s8 - s2;
 8001058:	ee35 0aa4 	vadd.f32	s0, s11, s9
    t4 = (s5 - s7)*0.34202014f;
 800105c:	ee27 7a20 	vmul.f32	s14, s14, s1
    s0 -= s6;
 8001060:	ee71 5a42 	vsub.f32	s11, s2, s4
    t4 = (s4 + s2)*0.93969262f;
 8001064:	ee75 9a24 	vadd.f32	s19, s10, s9
    t2 = (s8 + s2)*0.76604444f;
 8001068:	ee35 2a22 	vadd.f32	s4, s10, s5
    s0 = t0 - t4 + t2;
 800106c:	ed9f 9a35 	vldr	s18, [pc, #212]	; 8001144 <L3_dct3_9+0x13c>
    s8 = t0 - t2 + s6;
 8001070:	eddf 8a35 	vldr	s17, [pc, #212]	; 8001148 <L3_dct3_9+0x140>
    s2 = s0 - s4*0.5f;
 8001074:	eeb0 1a65 	vmov.f32	s2, s11
    s7 = t4 - s3 - t0;
    s3 = t4 + s3 - t2;
 8001078:	eef0 0a47 	vmov.f32	s1, s14
    s5 = t0 - s3 - t2;
 800107c:	eeb1 5a44 	vneg.f32	s10, s8
    s2 = s0 - s4*0.5f;
 8001080:	eea0 1a63 	vfms.f32	s2, s0, s7
    s3 = t4 + s3 - t2;
 8001084:	eee4 0a21 	vfma.f32	s1, s8, s3
    s5 = t0 - s3 - t2;
 8001088:	eef0 3a48 	vmov.f32	s7, s16
    s6 = (s4 - s8)*0.17364818f;
 800108c:	ee34 4ae2 	vsub.f32	s8, s9, s5
    s4 = t0 + t4 - s6;
 8001090:	eef0 4a67 	vmov.f32	s9, s15
    s1 = (s1 - s5 - s7)*0.86602540f;
 8001094:	ee76 6a66 	vsub.f32	s13, s12, s13
    s7 = t4 - s3 - t0;
 8001098:	eea5 7a21 	vfma.f32	s14, s10, s3
    s5 = t0 - s3 - t2;
 800109c:	eee5 3a21 	vfma.f32	s7, s10, s3
    s4 = t0 + t4 - s6;
 80010a0:	eee9 4a89 	vfma.f32	s9, s19, s18
    s0 = t0 - t4 + t2;
 80010a4:	eeb0 5a67 	vmov.f32	s10, s15
    s8 = t0 - t2 + s6;
 80010a8:	eee2 7a68 	vfms.f32	s15, s4, s17
    t2 = (s1 + s7)*0.64278761f;
 80010ac:	ee36 6a03 	vadd.f32	s12, s12, s6
    s0 = t0 - t4 + t2;
 80010b0:	eea9 5ac9 	vfms.f32	s10, s19, s18
    s1 = (s1 - s5 - s7)*0.86602540f;
 80010b4:	ee76 6ac3 	vsub.f32	s13, s13, s6
    s8 = t0 - t2 + s6;
 80010b8:	eddf 2a24 	vldr	s5, [pc, #144]	; 800114c <L3_dct3_9+0x144>
    s5 = t0 - s3 - t2;
 80010bc:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8001150 <L3_dct3_9+0x148>
 80010c0:	eeb1 6a46 	vneg.f32	s12, s12
    s4 = t0 + t4 - s6;
 80010c4:	eee4 4a62 	vfms.f32	s9, s8, s5
    s8 = t0 - t2 + s6;
 80010c8:	eee4 7a22 	vfma.f32	s15, s8, s5
    s5 = t0 - s3 - t2;
 80010cc:	eee6 3a03 	vfma.f32	s7, s12, s6
    s3 = t4 + s3 - t2;
 80010d0:	eeb0 4a60 	vmov.f32	s8, s1
 80010d4:	eea6 4a03 	vfma.f32	s8, s12, s6
    s0 = t0 - t4 + t2;
 80010d8:	eea2 5a28 	vfma.f32	s10, s4, s17

    y[0] = s4 - s7;
    y[1] = s2 + s1;
 80010dc:	eeb0 3a41 	vmov.f32	s6, s2
    s7 = t4 - s3 - t0;
 80010e0:	ee37 7a48 	vsub.f32	s14, s14, s16
    y[1] = s2 + s1;
 80010e4:	eea6 3aa1 	vfma.f32	s6, s13, s3
    y[3] = s8 + s5;
    y[5] = s8 - s5;
    y[6] = s0 + s3;
    y[7] = s2 - s1;
    y[8] = s4 + s7;
}
 80010e8:	ecbd 8b04 	vpop	{d8-d9}
    y[7] = s2 - s1;
 80010ec:	eea6 1ae1 	vfms.f32	s2, s13, s3
    s5 = t0 - s3 - t2;
 80010f0:	eeb0 6a63 	vmov.f32	s12, s7
    y[0] = s4 - s7;
 80010f4:	ee74 2ac7 	vsub.f32	s5, s9, s14
    y[2] = s0 - s3;
 80010f8:	ee75 3a44 	vsub.f32	s7, s10, s8
    y[8] = s4 + s7;
 80010fc:	ee34 7a87 	vadd.f32	s14, s9, s14
    y[4] = s4 + s0;
 8001100:	ee75 5a80 	vadd.f32	s11, s11, s0
    y[3] = s8 + s5;
 8001104:	ee77 4a86 	vadd.f32	s9, s15, s12
    y[6] = s0 + s3;
 8001108:	ee35 5a04 	vadd.f32	s10, s10, s8
    y[5] = s8 - s5;
 800110c:	ee77 7ac6 	vsub.f32	s15, s15, s12
    y[4] = s4 + s0;
 8001110:	edc0 5a04 	vstr	s11, [r0, #16]
    y[0] = s4 - s7;
 8001114:	edc0 2a00 	vstr	s5, [r0]
    y[8] = s4 + s7;
 8001118:	ed80 7a08 	vstr	s14, [r0, #32]
    y[1] = s2 + s1;
 800111c:	ed80 3a01 	vstr	s6, [r0, #4]
    y[7] = s2 - s1;
 8001120:	ed80 1a07 	vstr	s2, [r0, #28]
    y[2] = s0 - s3;
 8001124:	edc0 3a02 	vstr	s7, [r0, #8]
    y[6] = s0 + s3;
 8001128:	ed80 5a06 	vstr	s10, [r0, #24]
    y[3] = s8 + s5;
 800112c:	edc0 4a03 	vstr	s9, [r0, #12]
    y[5] = s8 - s5;
 8001130:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	3f7c1c5c 	.word	0x3f7c1c5c
 800113c:	3eaf1d44 	.word	0x3eaf1d44
 8001140:	3f5db3d7 	.word	0x3f5db3d7
 8001144:	3f708fb2 	.word	0x3f708fb2
 8001148:	3f441b7d 	.word	0x3f441b7d
 800114c:	3e31d0d4 	.word	0x3e31d0d4
 8001150:	3f248dbb 	.word	0x3f248dbb

08001154 <L3_imdct36>:

static void L3_imdct36(float *grbuf, float *overlap, const float *window, int nbands)
{
 8001154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001158:	ed2d 8b02 	vpush	{d8}
 800115c:	b095      	sub	sp, #84	; 0x54
    int i, j;
    static const float g_twid9[18] = {
        0.73727734f,0.79335334f,0.84339145f,0.88701083f,0.92387953f,0.95371695f,0.97629601f,0.99144486f,0.99904822f,0.67559021f,0.60876143f,0.53729961f,0.46174861f,0.38268343f,0.30070580f,0.21643961f,0.13052619f,0.04361938f
    };

    for (j = 0; j < nbands; j++, grbuf += 18, overlap += 9)
 800115e:	2b00      	cmp	r3, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f340 809d 	ble.w	80012a0 <L3_imdct36+0x14c>
 8001166:	f102 0324 	add.w	r3, r2, #36	; 0x24
        L3_dct3_9(si);

        si[1] = -si[1];
        si[3] = -si[3];
        si[5] = -si[5];
        si[7] = -si[7];
 800116a:	eddf 8a50 	vldr	s17, [pc, #320]	; 80012ac <L3_imdct36+0x158>
 800116e:	ed9f 8a50 	vldr	s16, [pc, #320]	; 80012b0 <L3_imdct36+0x15c>
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	4683      	mov	fp, r0
    for (j = 0; j < nbands; j++, grbuf += 18, overlap += 9)
 8001176:	f04f 0a00 	mov.w	sl, #0
 800117a:	460b      	mov	r3, r1
        co[0] = -grbuf[0];
 800117c:	eddb 7a00 	vldr	s15, [fp]
        si[0] = grbuf[17];
 8001180:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8001184:	910b      	str	r1, [sp, #44]	; 0x2c
        co[0] = -grbuf[0];
 8001186:	eef1 7a67 	vneg.f32	s15, s15
 800118a:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 800118e:	f10d 0908 	add.w	r9, sp, #8
 8001192:	edcd 7a02 	vstr	s15, [sp, #8]
 8001196:	465f      	mov	r7, fp
 8001198:	f10b 0540 	add.w	r5, fp, #64	; 0x40
        si[0] = grbuf[17];
 800119c:	464c      	mov	r4, r9
 800119e:	4641      	mov	r1, r8
 80011a0:	4658      	mov	r0, fp
            si[7 - 2*i] =   grbuf[4*i + 4] - grbuf[4*i + 3];
 80011a2:	ed90 6a04 	vldr	s12, [r0, #16]
 80011a6:	edd0 6a03 	vldr	s13, [r0, #12]
            si[8 - 2*i] =   grbuf[4*i + 1] - grbuf[4*i + 2];
 80011aa:	ed90 7a01 	vldr	s14, [r0, #4]
 80011ae:	edd0 7a02 	vldr	s15, [r0, #8]
            co[2 + 2*i] = -(grbuf[4*i + 3] + grbuf[4*i + 4]);
 80011b2:	ee76 5a26 	vadd.f32	s11, s12, s13
            si[7 - 2*i] =   grbuf[4*i + 4] - grbuf[4*i + 3];
 80011b6:	ee76 6a66 	vsub.f32	s13, s12, s13
            co[1 + 2*i] =   grbuf[4*i + 1] + grbuf[4*i + 2];
 80011ba:	ee37 6a27 	vadd.f32	s12, s14, s15
            si[8 - 2*i] =   grbuf[4*i + 1] - grbuf[4*i + 2];
 80011be:	ee77 7a67 	vsub.f32	s15, s14, s15
            co[2 + 2*i] = -(grbuf[4*i + 3] + grbuf[4*i + 4]);
 80011c2:	eeb1 7a65 	vneg.f32	s14, s11
 80011c6:	3010      	adds	r0, #16
 80011c8:	ee17 6a10 	vmov	r6, s14
        for (i = 0; i < 4; i++)
 80011cc:	4285      	cmp	r5, r0
            si[7 - 2*i] =   grbuf[4*i + 4] - grbuf[4*i + 3];
 80011ce:	edc1 6a07 	vstr	s13, [r1, #28]
            co[1 + 2*i] =   grbuf[4*i + 1] + grbuf[4*i + 2];
 80011d2:	ed84 6a01 	vstr	s12, [r4, #4]
            si[8 - 2*i] =   grbuf[4*i + 1] - grbuf[4*i + 2];
 80011d6:	edc1 7a08 	vstr	s15, [r1, #32]
            co[2 + 2*i] = -(grbuf[4*i + 3] + grbuf[4*i + 4]);
 80011da:	f844 6f08 	str.w	r6, [r4, #8]!
 80011de:	f1a1 0108 	sub.w	r1, r1, #8
        for (i = 0; i < 4; i++)
 80011e2:	d1de      	bne.n	80011a2 <L3_imdct36+0x4e>
        L3_dct3_9(co);
 80011e4:	a802      	add	r0, sp, #8
 80011e6:	f7ff ff0f 	bl	8001008 <L3_dct3_9>
        L3_dct3_9(si);
 80011ea:	a80b      	add	r0, sp, #44	; 0x2c
 80011ec:	f7ff ff0c 	bl	8001008 <L3_dct3_9>
        si[1] = -si[1];
 80011f0:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
        si[3] = -si[3];
 80011f4:	eddd 5a0e 	vldr	s11, [sp, #56]	; 0x38
        si[5] = -si[5];
 80011f8:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
        si[7] = -si[7];
 80011fc:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001200:	4d2c      	ldr	r5, [pc, #176]	; (80012b4 <L3_imdct36+0x160>)
 8001202:	9801      	ldr	r0, [sp, #4]
 8001204:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
        si[1] = -si[1];
 8001208:	eeb1 5a45 	vneg.f32	s10, s10
        si[3] = -si[3];
 800120c:	eef1 5a65 	vneg.f32	s11, s11
        si[5] = -si[5];
 8001210:	eeb1 7a47 	vneg.f32	s14, s14
        si[7] = -si[7];
 8001214:	eef1 7a67 	vneg.f32	s15, s15
 8001218:	eeb0 6a68 	vmov.f32	s12, s17
 800121c:	eef0 6a48 	vmov.f32	s13, s16
        si[1] = -si[1];
 8001220:	ed8d 5a0c 	vstr	s10, [sp, #48]	; 0x30
        si[3] = -si[3];
 8001224:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
        si[5] = -si[5];
 8001228:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
        si[7] = -si[7];
 800122c:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 8001230:	465e      	mov	r6, fp
 8001232:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001236:	4614      	mov	r4, r2
 8001238:	e003      	b.n	8001242 <L3_imdct36+0xee>
 800123a:	edd5 6a09 	vldr	s13, [r5, #36]	; 0x24
 800123e:	ecb5 6a01 	vldmia	r5!, {s12}
        }
#endif /* HAVE_SIMD */
        for (; i < 9; i++)
        {
            float ovl  = overlap[i];
            float sum  = co[i]*g_twid9[9 + i] + si[i]*g_twid9[0 + i];
 8001242:	ecf8 7a01 	vldmia	r8!, {s15}
 8001246:	ecb9 5a01 	vldmia	r9!, {s10}
            float ovl  = overlap[i];
 800124a:	edd3 5a00 	vldr	s11, [r3]
            overlap[i] = co[i]*g_twid9[0 + i] - si[i]*g_twid9[9 + i];
 800124e:	ee26 7ae7 	vnmul.f32	s14, s13, s15
            float sum  = co[i]*g_twid9[9 + i] + si[i]*g_twid9[0 + i];
 8001252:	ee67 7a86 	vmul.f32	s15, s15, s12
            overlap[i] = co[i]*g_twid9[0 + i] - si[i]*g_twid9[9 + i];
 8001256:	eea5 7a06 	vfma.f32	s14, s10, s12
 800125a:	4684      	mov	ip, r0
 800125c:	46a6      	mov	lr, r4
            float sum  = co[i]*g_twid9[9 + i] + si[i]*g_twid9[0 + i];
 800125e:	eee5 7a26 	vfma.f32	s15, s10, s13
            overlap[i] = co[i]*g_twid9[0 + i] - si[i]*g_twid9[9 + i];
 8001262:	eca3 7a01 	vstmia	r3!, {s14}
            grbuf[i]      = ovl*window[0 + i] - sum*window[9 + i];
 8001266:	ecb0 7a01 	vldmia	r0!, {s14}
 800126a:	ecf4 6a01 	vldmia	r4!, {s13}
 800126e:	ee27 7a67 	vnmul.f32	s14, s14, s15
        for (; i < 9; i++)
 8001272:	4299      	cmp	r1, r3
            grbuf[i]      = ovl*window[0 + i] - sum*window[9 + i];
 8001274:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8001278:	eca7 7a01 	vstmia	r7!, {s14}
            grbuf[17 - i] = ovl*window[9 + i] + sum*window[0 + i];
 800127c:	ed9e 7a00 	vldr	s14, [lr]
 8001280:	eddc 6a00 	vldr	s13, [ip]
 8001284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001288:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800128c:	ed66 7a01 	vstmdb	r6!, {s15}
        for (; i < 9; i++)
 8001290:	d1d3      	bne.n	800123a <L3_imdct36+0xe6>
    for (j = 0; j < nbands; j++, grbuf += 18, overlap += 9)
 8001292:	460b      	mov	r3, r1
 8001294:	9900      	ldr	r1, [sp, #0]
 8001296:	f10a 0a01 	add.w	sl, sl, #1
 800129a:	4551      	cmp	r1, sl
 800129c:	f47f af6e 	bne.w	800117c <L3_imdct36+0x28>
        }
    }
}
 80012a0:	b015      	add	sp, #84	; 0x54
 80012a2:	ecbd 8b02 	vpop	{d8}
 80012a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012aa:	bf00      	nop
 80012ac:	3f3cbe35 	.word	0x3f3cbe35
 80012b0:	3f2cf37b 	.word	0x3f2cf37b
 80012b4:	080111a8 	.word	0x080111a8

080012b8 <L3_imdct12>:
{
    static const float g_twid3[6] = { 0.79335334f,0.92387953f,0.99144486f, 0.60876143f,0.38268343f,0.13052619f };
    float co[3], si[3];
    int i;

    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 80012b8:	ed90 6a03 	vldr	s12, [r0, #12]
 80012bc:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 80012c0:	ed90 4a06 	vldr	s8, [r0, #24]
 80012c4:	edd0 3a0c 	vldr	s7, [r0, #48]	; 0x30
    L3_idct3(x[15], x[12] - x[9], x[6] - x[3], si);
 80012c8:	edd0 7a0f 	vldr	s15, [r0, #60]	; 0x3c
    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 80012cc:	ed90 1a00 	vldr	s2, [r0]
    dst[0] = a1 + m1;
 80012d0:	eddf 1a37 	vldr	s3, [pc, #220]	; 80013b0 <L3_imdct12+0xf8>
 80012d4:	4837      	ldr	r0, [pc, #220]	; (80013b4 <L3_imdct12+0xfc>)
    si[1] = -si[1];
 80012d6:	eddf 4a38 	vldr	s9, [pc, #224]	; 80013b8 <L3_imdct12+0x100>
 80012da:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80013bc <L3_imdct12+0x104>
 80012de:	eddf 5a38 	vldr	s11, [pc, #224]	; 80013c0 <L3_imdct12+0x108>
 80012e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80013c4 <L3_imdct12+0x10c>
    L3_idct3(x[15], x[12] - x[9], x[6] - x[3], si);
 80012e6:	ee74 0a46 	vsub.f32	s1, s8, s12
    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 80012ea:	ee73 2a87 	vadd.f32	s5, s7, s14
    float a1 = x0 - x2*0.5f;
 80012ee:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80012f2:	eeb0 2a67 	vmov.f32	s4, s15
 80012f6:	eeb0 0a41 	vmov.f32	s0, s2
 80012fa:	eea0 2ac3 	vfms.f32	s4, s1, s6
{
 80012fe:	b4f0      	push	{r4, r5, r6, r7}
    float a1 = x0 - x2*0.5f;
 8001300:	ee92 0ac3 	vfnma.f32	s0, s5, s6
{
 8001304:	b086      	sub	sp, #24
 8001306:	f101 0418 	add.w	r4, r1, #24
    L3_idct3(-x[0], x[6] + x[3], x[12] + x[9], co);
 800130a:	ee34 4a06 	vadd.f32	s8, s8, s12
    L3_idct3(x[15], x[12] - x[9], x[6] - x[3], si);
 800130e:	ee73 3ac7 	vsub.f32	s7, s7, s14
    float a1 = x0 - x2*0.5f;
 8001312:	eeb0 3a40 	vmov.f32	s6, s0
    dst[0] = a1 + m1;
 8001316:	eeb0 7a42 	vmov.f32	s14, s4
 800131a:	eeb0 6a40 	vmov.f32	s12, s0
 800131e:	eea4 6a21 	vfma.f32	s12, s8, s3
 8001322:	1d03      	adds	r3, r0, #4
 8001324:	1f07      	subs	r7, r0, #4
 8001326:	eea3 7aa1 	vfma.f32	s14, s7, s3
 800132a:	ae01      	add	r6, sp, #4
 800132c:	ad04      	add	r5, sp, #16
    dst[2] = a1 - m1;
 800132e:	eea3 2ae1 	vfms.f32	s4, s7, s3
 8001332:	eea4 3a61 	vfms.f32	s6, s8, s3
    dst[1] = x0 + x2;
 8001336:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800133a:	ee72 2ac1 	vsub.f32	s5, s5, s2
    si[1] = -si[1];
 800133e:	eef1 7a67 	vneg.f32	s15, s15
    dst[0] = a1 + m1;
 8001342:	ed8d 6a00 	vstr	s12, [sp]
 8001346:	ed8d 7a03 	vstr	s14, [sp, #12]
    dst[2] = a1 - m1;
 800134a:	ed8d 2a05 	vstr	s4, [sp, #20]
    si[1] = -si[1];
 800134e:	edcd 7a04 	vstr	s15, [sp, #16]
    dst[1] = x0 + x2;
 8001352:	edcd 2a01 	vstr	s5, [sp, #4]
    dst[2] = a1 - m1;
 8001356:	ed8d 3a02 	vstr	s6, [sp, #8]

    for (i = 0; i < 3; i++)
    {
        float ovl  = overlap[i];
        float sum  = co[i]*g_twid3[3 + i] + si[i]*g_twid3[0 + i];
 800135a:	ee67 7a25 	vmul.f32	s15, s14, s11
        float ovl  = overlap[i];
 800135e:	ed92 4a00 	vldr	s8, [r2]
        float sum  = co[i]*g_twid3[3 + i] + si[i]*g_twid3[0 + i];
 8001362:	eee6 7a26 	vfma.f32	s15, s12, s13
    for (i = 0; i < 3; i++)
 8001366:	429f      	cmp	r7, r3
        overlap[i] = co[i]*g_twid3[0 + i] - si[i]*g_twid3[3 + i];
 8001368:	ee27 7a66 	vnmul.f32	s14, s14, s13
        dst[i]     = ovl*g_twid3[2 - i] - sum*g_twid3[5 - i];
 800136c:	ee64 6ae7 	vnmul.f32	s13, s9, s15
        dst[5 - i] = ovl*g_twid3[5 - i] + sum*g_twid3[2 - i];
 8001370:	ee67 7a85 	vmul.f32	s15, s15, s10
        overlap[i] = co[i]*g_twid3[0 + i] - si[i]*g_twid3[3 + i];
 8001374:	eea6 7a25 	vfma.f32	s14, s12, s11
        dst[i]     = ovl*g_twid3[2 - i] - sum*g_twid3[5 - i];
 8001378:	eee4 6a05 	vfma.f32	s13, s8, s10
        dst[5 - i] = ovl*g_twid3[5 - i] + sum*g_twid3[2 - i];
 800137c:	eee4 7a24 	vfma.f32	s15, s8, s9
        overlap[i] = co[i]*g_twid3[0 + i] - si[i]*g_twid3[3 + i];
 8001380:	eca2 7a01 	vstmia	r2!, {s14}
        dst[i]     = ovl*g_twid3[2 - i] - sum*g_twid3[5 - i];
 8001384:	ece1 6a01 	vstmia	r1!, {s13}
        dst[5 - i] = ovl*g_twid3[5 - i] + sum*g_twid3[2 - i];
 8001388:	ed64 7a01 	vstmdb	r4!, {s15}
    for (i = 0; i < 3; i++)
 800138c:	d00c      	beq.n	80013a8 <L3_imdct12+0xf0>
 800138e:	ed33 5a01 	vldmdb	r3!, {s10}
 8001392:	edd0 6a03 	vldr	s13, [r0, #12]
 8001396:	edd3 4a03 	vldr	s9, [r3, #12]
 800139a:	ecb6 6a01 	vldmia	r6!, {s12}
 800139e:	ecb5 7a01 	vldmia	r5!, {s14}
 80013a2:	ecf0 5a01 	vldmia	r0!, {s11}
 80013a6:	e7d8      	b.n	800135a <L3_imdct12+0xa2>
    }
}
 80013a8:	b006      	add	sp, #24
 80013aa:	bcf0      	pop	{r4, r5, r6, r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	3f5db3d7 	.word	0x3f5db3d7
 80013b4:	08011190 	.word	0x08011190
 80013b8:	3e05a8a8 	.word	0x3e05a8a8
 80013bc:	3f7dcf55 	.word	0x3f7dcf55
 80013c0:	3f4b1934 	.word	0x3f4b1934
 80013c4:	3f1bd7ca 	.word	0x3f1bd7ca

080013c8 <mp3d_synth_pair>:
    return sample*(1.f/32768.f);
}
#endif /* MINIMP3_FLOAT_OUTPUT */

static void mp3d_synth_pair(mp3d_sample_t *pcm, int nch, const float *z)
{
 80013c8:	b430      	push	{r4, r5}
    float a;
    a  = (z[14*64] - z[    0]) * 29;
    a += (z[ 1*64] + z[13*64]) * 213;
 80013ca:	f502 6350 	add.w	r3, r2, #3328	; 0xd00
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	edd2 7a40 	vldr	s15, [r2, #256]	; 0x100
    a  = (z[14*64] - z[    0]) * 29;
 80013d6:	edd2 3a00 	vldr	s7, [r2]
    a +=  z[ 7*64]             * 75038;
    pcm[0] = mp3d_scale_pcm(a);

    z += 2;
    a  = z[14*64] * 104;
    a += z[12*64] * 1567;
 80013da:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001544 <mp3d_synth_pair+0x17c>
    a += (z[12*64] - z[ 2*64]) * 459;
 80013de:	ed92 3a80 	vldr	s6, [r2, #512]	; 0x200
    a += z[12*64] * 1567;
 80013e2:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8001548 <mp3d_synth_pair+0x180>
    a += (z[12*64] - z[ 2*64]) * 459;
 80013e6:	eddf 0a59 	vldr	s1, [pc, #356]	; 800154c <mp3d_synth_pair+0x184>
    a += (z[ 3*64] + z[11*64]) * 2037;
 80013ea:	ed92 6ac0 	vldr	s12, [r2, #768]	; 0x300
    a += z[10*64] * 9727;
 80013ee:	ed9f 5a58 	vldr	s10, [pc, #352]	; 8001550 <mp3d_synth_pair+0x188>
    a += z[ 8*64] * 64019;
 80013f2:	eddf 4a58 	vldr	s9, [pc, #352]	; 8001554 <mp3d_synth_pair+0x18c>
    a += (z[10*64] - z[ 4*64]) * 5153;
 80013f6:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001558 <mp3d_synth_pair+0x190>
    a += z[ 6*64] * -9975;
 80013fa:	eddf 1a58 	vldr	s3, [pc, #352]	; 800155c <mp3d_synth_pair+0x194>
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80013fe:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8001560 <mp3d_synth_pair+0x198>
    a += z[ 4*64] * -45;
 8001402:	eddf 2a58 	vldr	s5, [pc, #352]	; 8001564 <mp3d_synth_pair+0x19c>
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 8001406:	ed9f 4a58 	vldr	s8, [pc, #352]	; 8001568 <mp3d_synth_pair+0x1a0>
    a  = (z[14*64] - z[    0]) * 29;
 800140a:	f502 6460 	add.w	r4, r2, #3584	; 0xe00
{
 800140e:	ed2d 8b02 	vpush	{d8}
    a  = (z[14*64] - z[    0]) * 29;
 8001412:	edd4 5a00 	vldr	s11, [r4]
    a += (z[ 1*64] + z[13*64]) * 213;
 8001416:	eddf 8a55 	vldr	s17, [pc, #340]	; 800156c <mp3d_synth_pair+0x1a4>
    a += (z[ 3*64] + z[11*64]) * 2037;
 800141a:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8001570 <mp3d_synth_pair+0x1a8>
    a += z[12*64] * 1567;
 800141e:	f602 4308 	addw	r3, r2, #3080	; 0xc08
    a += (z[ 1*64] + z[13*64]) * 213;
 8001422:	ee77 7a87 	vadd.f32	s15, s15, s14
    a += z[12*64] * 1567;
 8001426:	ed93 7a00 	vldr	s14, [r3]
    a  = (z[14*64] - z[    0]) * 29;
 800142a:	ee75 5ae3 	vsub.f32	s11, s11, s7
    a += (z[ 1*64] + z[13*64]) * 213;
 800142e:	ee67 7aa8 	vmul.f32	s15, s15, s17
    a  = z[14*64] * 104;
 8001432:	f602 6308 	addw	r3, r2, #3592	; 0xe08
    a += (z[12*64] - z[ 2*64]) * 459;
 8001436:	f502 6440 	add.w	r4, r2, #3072	; 0xc00
    a += z[12*64] * 1567;
 800143a:	ee27 7a26 	vmul.f32	s14, s14, s13
    a += (z[ 1*64] + z[13*64]) * 213;
 800143e:	eef3 6a0d 	vmov.f32	s13, #61	; 0x41e80000  29.0
    a += z[12*64] * 1567;
 8001442:	edd3 8a00 	vldr	s17, [r3]
    a += (z[ 1*64] + z[13*64]) * 213;
 8001446:	eee5 7aa6 	vfma.f32	s15, s11, s13
    a += z[10*64] * 9727;
 800144a:	f602 2308 	addw	r3, r2, #2568	; 0xa08
    a += (z[10*64] - z[ 4*64]) * 5153;
 800144e:	f502 6520 	add.w	r5, r2, #2560	; 0xa00
    a += (z[12*64] - z[ 2*64]) * 459;
 8001452:	edd4 6a00 	vldr	s13, [r4]
    a += z[10*64] * 9727;
 8001456:	edd3 3a00 	vldr	s7, [r3]
    a += z[12*64] * 1567;
 800145a:	eea8 7a81 	vfma.f32	s14, s17, s2
    a += (z[ 3*64] + z[11*64]) * 2037;
 800145e:	f502 6430 	add.w	r4, r2, #2816	; 0xb00
    a += z[ 8*64] * 64019;
 8001462:	f602 0308 	addw	r3, r2, #2056	; 0x808
    a += (z[12*64] - z[ 2*64]) * 459;
 8001466:	ee76 6ac3 	vsub.f32	s13, s13, s6
    a += (z[ 3*64] + z[11*64]) * 2037;
 800146a:	edd4 5a00 	vldr	s11, [r4]
    a += z[ 8*64] * 64019;
 800146e:	ed93 1a00 	vldr	s2, [r3]
    a += z[ 2*64] * 146;
 8001472:	ed92 3a82 	vldr	s6, [r2, #520]	; 0x208
    a += (z[12*64] - z[ 2*64]) * 459;
 8001476:	eee6 7aa0 	vfma.f32	s15, s13, s1
    a += (z[10*64] - z[ 4*64]) * 5153;
 800147a:	f502 6480 	add.w	r4, r2, #1024	; 0x400
    a += z[ 6*64] * -9975;
 800147e:	f502 63c1 	add.w	r3, r2, #1544	; 0x608
    a += z[10*64] * 9727;
 8001482:	eea3 7a85 	vfma.f32	s14, s7, s10
    a += z[ 0*64] * -5;
    pcm[16*nch] = mp3d_scale_pcm(a);
 8001486:	0149      	lsls	r1, r1, #5
    a += (z[ 3*64] + z[11*64]) * 2037;
 8001488:	ee36 6a25 	vadd.f32	s12, s12, s11
    a += (z[10*64] - z[ 4*64]) * 5153;
 800148c:	edd5 6a00 	vldr	s13, [r5]
 8001490:	edd4 5a00 	vldr	s11, [r4]
    a += z[ 6*64] * -9975;
 8001494:	edd3 0a00 	vldr	s1, [r3]
    a += z[ 2*64] * 146;
 8001498:	eddf 3a36 	vldr	s7, [pc, #216]	; 8001574 <mp3d_synth_pair+0x1ac>
    a +=  z[ 7*64]             * 75038;
 800149c:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8001578 <mp3d_synth_pair+0x1b0>
    a += (z[ 3*64] + z[11*64]) * 2037;
 80014a0:	eee6 7a08 	vfma.f32	s15, s12, s16
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80014a4:	f502 65a0 	add.w	r5, r2, #1280	; 0x500
 80014a8:	f502 6410 	add.w	r4, r2, #2304	; 0x900
    a += z[ 8*64] * 64019;
 80014ac:	eea1 7a24 	vfma.f32	s14, s2, s9
    a += z[ 4*64] * -45;
 80014b0:	f502 6381 	add.w	r3, r2, #1032	; 0x408
}
 80014b4:	ecbd 8b02 	vpop	{d8}
    a += (z[10*64] - z[ 4*64]) * 5153;
 80014b8:	ee76 6ae5 	vsub.f32	s13, s13, s11
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80014bc:	edd4 4a00 	vldr	s9, [r4]
 80014c0:	ed95 6a00 	vldr	s12, [r5]
    a += z[ 4*64] * -45;
 80014c4:	ed93 1a00 	vldr	s2, [r3]
    a += z[ 0*64] * -5;
 80014c8:	edd2 5a02 	vldr	s11, [r2, #8]
    a += (z[10*64] - z[ 4*64]) * 5153;
 80014cc:	eee6 7a80 	vfma.f32	s15, s13, s0
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80014d0:	f502 6400 	add.w	r4, r2, #2048	; 0x800
 80014d4:	f502 63c0 	add.w	r3, r2, #1536	; 0x600
    a += z[ 6*64] * -9975;
 80014d8:	eea0 7aa1 	vfma.f32	s14, s1, s3
    a +=  z[ 7*64]             * 75038;
 80014dc:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80014e0:	ee36 6a24 	vadd.f32	s12, s12, s9
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80014e4:	edd4 6a00 	vldr	s13, [r4]
 80014e8:	edd3 1a00 	vldr	s3, [r3]
    a +=  z[ 7*64]             * 75038;
 80014ec:	edd2 4a00 	vldr	s9, [r2]
    a += (z[ 5*64] + z[ 9*64]) * 6574;
 80014f0:	eee6 7a02 	vfma.f32	s15, s12, s4
}
 80014f4:	bc30      	pop	{r4, r5}
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80014f6:	ee76 6ae1 	vsub.f32	s13, s13, s3
    a += z[ 4*64] * -45;
 80014fa:	eea1 7a22 	vfma.f32	s14, s2, s5
    a += (z[ 8*64] - z[ 6*64]) * 37489;
 80014fe:	eee6 7a84 	vfma.f32	s15, s13, s8
    a += z[ 2*64] * 146;
 8001502:	eea3 7a23 	vfma.f32	s14, s6, s7
    a +=  z[ 7*64]             * 75038;
 8001506:	eee4 7a85 	vfma.f32	s15, s9, s10
    a += z[ 0*64] * -5;
 800150a:	eef9 6a04 	vmov.f32	s13, #148	; 0xc0a00000 -5.0
 800150e:	eea5 7aa6 	vfma.f32	s14, s11, s13
    int32_t s32 = (int32_t)(sample + .5f);
 8001512:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800151a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800151e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001522:	ee17 3a90 	vmov	r3, s15
 8001526:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    s32 -= (s32 < 0);
 800152a:	eba3 73d3 	sub.w	r3, r3, r3, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 800152e:	ee17 2a90 	vmov	r2, s15
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001532:	f303 030f 	ssat	r3, #16, r3
    s32 -= (s32 < 0);
 8001536:	eba2 72d2 	sub.w	r2, r2, r2, lsr #31
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 800153a:	8003      	strh	r3, [r0, #0]
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 800153c:	f302 020f 	ssat	r2, #16, r2
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001540:	5242      	strh	r2, [r0, r1]
}
 8001542:	4770      	bx	lr
 8001544:	44c3e000 	.word	0x44c3e000
 8001548:	42d00000 	.word	0x42d00000
 800154c:	43e58000 	.word	0x43e58000
 8001550:	4617fc00 	.word	0x4617fc00
 8001554:	477a1300 	.word	0x477a1300
 8001558:	45a10800 	.word	0x45a10800
 800155c:	c61bdc00 	.word	0xc61bdc00
 8001560:	45cd7000 	.word	0x45cd7000
 8001564:	c2340000 	.word	0xc2340000
 8001568:	47127100 	.word	0x47127100
 800156c:	43550000 	.word	0x43550000
 8001570:	44fea000 	.word	0x44fea000
 8001574:	43120000 	.word	0x43120000
 8001578:	47928f00 	.word	0x47928f00

0800157c <mp3d_synth_granule>:
    }
#endif /* MINIMP3_ONLY_SIMD */
}

static void mp3d_synth_granule(float *qmf_state, float *grbuf, int nbands, int nch, mp3d_sample_t *pcm, float *lins)
{
 800157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001580:	ed2d 8b0a 	vpush	{d8-d12}
 8001584:	b0c1      	sub	sp, #260	; 0x104
    int i;
    for (i = 0; i < nch; i++)
 8001586:	2b00      	cmp	r3, #0
{
 8001588:	921a      	str	r2, [sp, #104]	; 0x68
 800158a:	9a54      	ldr	r2, [sp, #336]	; 0x150
 800158c:	9202      	str	r2, [sp, #8]
 800158e:	9a55      	ldr	r2, [sp, #340]	; 0x154
 8001590:	901b      	str	r0, [sp, #108]	; 0x6c
 8001592:	9101      	str	r1, [sp, #4]
 8001594:	9219      	str	r2, [sp, #100]	; 0x64
    for (i = 0; i < nch; i++)
 8001596:	9312      	str	r3, [sp, #72]	; 0x48
 8001598:	f340 843c 	ble.w	8001e14 <mp3d_synth_granule+0x898>
 800159c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800159e:	9a01      	ldr	r2, [sp, #4]
        float t[4][8], *x, *y = grbuf + k;
 80015a0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001614 <mp3d_synth_granule+0x98>
 80015a4:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8001618 <mp3d_synth_granule+0x9c>
 80015a8:	eddf 1a1c 	vldr	s3, [pc, #112]	; 800161c <mp3d_synth_granule+0xa0>
            x[4] = (x0 - x1)*0.70710677f;
 80015ac:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8001620 <mp3d_synth_granule+0xa4>
            x5 -= x7*0.198912367f;  /* rotate by PI/8 */
 80015b0:	ed9f 4a1c 	vldr	s8, [pc, #112]	; 8001624 <mp3d_synth_granule+0xa8>
            x7 += x5*0.382683432f;
 80015b4:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8001628 <mp3d_synth_granule+0xac>
            x[1] = (xt + x7)*0.50979561f;
 80015b8:	eddf 2a1c 	vldr	s5, [pc, #112]	; 800162c <mp3d_synth_granule+0xb0>
            x[2] = (x4 + x3)*0.54119611f;
 80015bc:	ed9f 3a1c 	vldr	s6, [pc, #112]	; 8001630 <mp3d_synth_granule+0xb4>
            x[3] = (x0 - x5)*0.60134488f;
 80015c0:	eddf 3a1c 	vldr	s7, [pc, #112]	; 8001634 <mp3d_synth_granule+0xb8>
 80015c4:	eb03 0ac3 	add.w	sl, r3, r3, lsl #3
 80015c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80015ca:	ebc3 7983 	rsb	r9, r3, r3, lsl #30
 80015ce:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80015d2:	eb03 1a8a 	add.w	sl, r3, sl, lsl #6
 80015d6:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 80015da:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80015de:	9100      	str	r1, [sp, #0]
 80015e0:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80015e4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 80015e8:	f50d 7e90 	add.w	lr, sp, #288	; 0x120
 80015ec:	9b00      	ldr	r3, [sp, #0]
 80015ee:	eb0b 0c08 	add.w	ip, fp, r8
 80015f2:	eb03 0608 	add.w	r6, r3, r8
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <mp3d_synth_granule+0xbc>)
        float t[4][8], *x, *y = grbuf + k;
 80015f8:	eeb0 0a60 	vmov.f32	s0, s1
 80015fc:	eeb0 5a41 	vmov.f32	s10, s2
 8001600:	eeb0 8a61 	vmov.f32	s16, s3
 8001604:	4662      	mov	r2, ip
 8001606:	f5a6 716a 	sub.w	r1, r6, #936	; 0x3a8
 800160a:	f5a6 67bd 	sub.w	r7, r6, #1512	; 0x5e8
 800160e:	4664      	mov	r4, ip
        for (x = t[0], i = 0; i < 8; i++, x++)
 8001610:	464b      	mov	r3, r9
 8001612:	e01f      	b.n	8001654 <mp3d_synth_granule+0xd8>
 8001614:	3f009e8d 	.word	0x3f009e8d
 8001618:	3f002785 	.word	0x3f002785
 800161c:	41230a46 	.word	0x41230a46
 8001620:	3f3504f3 	.word	0x3f3504f3
 8001624:	3e4bafaf 	.word	0x3e4bafaf
 8001628:	3ec3ef15 	.word	0x3ec3ef15
 800162c:	3f0281f7 	.word	0x3f0281f7
 8001630:	3f0a8bd4 	.word	0x3f0a8bd4
 8001634:	3f19f1bd 	.word	0x3f19f1bd
 8001638:	08011138 	.word	0x08011138
 800163c:	3f6664d7 	.word	0x3f6664d7
 8001640:	3fa73d75 	.word	0x3fa73d75
 8001644:	402406cf 	.word	0x402406cf
 8001648:	ed10 8a03 	vldr	s16, [r0, #-12]
 800164c:	ed10 5a02 	vldr	s10, [r0, #-8]
 8001650:	ed10 0a01 	vldr	s0, [r0, #-4]
            float x0 = y[i*18];
 8001654:	ed94 6a00 	vldr	s12, [r4]
            float x1 = y[(15 - i)*18];
 8001658:	edd1 7a00 	vldr	s15, [r1]
            float x3 = y[(31 - i)*18];
 800165c:	f501 6590 	add.w	r5, r1, #1152	; 0x480
 8001660:	ed95 7a00 	vldr	s14, [r5]
            float x2 = y[(16 + i)*18];
 8001664:	f504 6590 	add.w	r5, r4, #1152	; 0x480
            float t3 = (x0 - x3)*g_sec[3*i + 1];
 8001668:	ee76 5a47 	vsub.f32	s11, s12, s14
            float x2 = y[(16 + i)*18];
 800166c:	edd5 6a00 	vldr	s13, [r5]
            float t3 = (x0 - x3)*g_sec[3*i + 1];
 8001670:	ee65 5a85 	vmul.f32	s11, s11, s10
            float t2 = (x1 - x2)*g_sec[3*i + 0];
 8001674:	ee37 5ae6 	vsub.f32	s10, s15, s13
            float t0 = x0 + x3;
 8001678:	ee36 7a07 	vadd.f32	s14, s12, s14
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 800167c:	eeb0 6a65 	vmov.f32	s12, s11
            float t1 = x1 + x2;
 8001680:	ee77 7aa6 	vadd.f32	s15, s15, s13
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 8001684:	eea5 6a48 	vfms.f32	s12, s10, s16
 8001688:	3948      	subs	r1, #72	; 0x48
        for (x = t[0], i = 0; i < 8; i++, x++)
 800168a:	428f      	cmp	r7, r1
            x[8] = (t0 - t1)*g_sec[3*i + 2];
 800168c:	ee77 6a67 	vsub.f32	s13, s14, s15
            x[16] = t3 + t2;
 8001690:	eee5 5a08 	vfma.f32	s11, s10, s16
 8001694:	f100 000c 	add.w	r0, r0, #12
 8001698:	f104 0448 	add.w	r4, r4, #72	; 0x48
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 800169c:	ee26 6a00 	vmul.f32	s12, s12, s0
            x[0] = t0 + t1;
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
            x[8] = (t0 - t1)*g_sec[3*i + 2];
 80016a4:	ee26 0a80 	vmul.f32	s0, s13, s0
            x[24] = (t3 - t2)*g_sec[3*i + 2];
 80016a8:	ed83 6a18 	vstr	s12, [r3, #96]	; 0x60
            x[16] = t3 + t2;
 80016ac:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40
            x[8] = (t0 - t1)*g_sec[3*i + 2];
 80016b0:	ed83 0a08 	vstr	s0, [r3, #32]
            x[0] = t0 + t1;
 80016b4:	edc3 7a00 	vstr	s15, [r3]
        for (x = t[0], i = 0; i < 8; i++, x++)
 80016b8:	f103 0304 	add.w	r3, r3, #4
 80016bc:	d1c4      	bne.n	8001648 <mp3d_synth_granule+0xcc>
            x[5] = (x0 + x5)*0.89997619f;
 80016be:	ed1f aa21 	vldr	s20, [pc, #-132]	; 800163c <mp3d_synth_granule+0xc0>
            x[6] = (x4 - x3)*1.30656302f;
 80016c2:	ed5f 9a21 	vldr	s19, [pc, #-132]	; 8001640 <mp3d_synth_granule+0xc4>
            x[7] = (xt - x7)*2.56291556f;
 80016c6:	ed1f 9a21 	vldr	s18, [pc, #-132]	; 8001644 <mp3d_synth_granule+0xc8>
 80016ca:	ab28      	add	r3, sp, #160	; 0xa0
 80016cc:	4649      	mov	r1, r9
            float x0 = x[0], x1 = x[1], x2 = x[2], x3 = x[3], x4 = x[4], x5 = x[5], x6 = x[6], x7 = x[7], xt;
 80016ce:	ed13 7a01 	vldr	s14, [r3, #-4]
 80016d2:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 80016d6:	ed53 6a03 	vldr	s13, [r3, #-12]
 80016da:	ed53 aa05 	vldr	s21, [r3, #-20]	; 0xffffffec
 80016de:	ed53 8a04 	vldr	s17, [r3, #-16]
 80016e2:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 80016e6:	ed13 0a02 	vldr	s0, [r3, #-8]
 80016ea:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
            xt = x0 - x7; x0 += x7;
 80016ee:	ee78 5a47 	vsub.f32	s11, s16, s14
            x7 = x1 - x6; x1 += x6;
 80016f2:	ee77 bac0 	vsub.f32	s23, s15, s0
            x6 = x2 - x5; x2 += x5;
 80016f6:	ee35 ba66 	vsub.f32	s22, s10, s13
            x5 = x3 - x4; x3 += x4;
 80016fa:	ee3a 6ae8 	vsub.f32	s12, s21, s17
            x7 =  x7 + xt;
 80016fe:	ee35 caab 	vadd.f32	s24, s11, s23
            x5 =  x5 + x6;
 8001702:	ee3b 6a06 	vadd.f32	s12, s22, s12
            xt = x0 - x7; x0 += x7;
 8001706:	ee38 8a07 	vadd.f32	s16, s16, s14
            x5 -= x7*0.198912367f;  /* rotate by PI/8 */
 800170a:	eeac 6a44 	vfms.f32	s12, s24, s8
 800170e:	3320      	adds	r3, #32
            x7 = x1 - x6; x1 += x6;
 8001710:	ee37 0a80 	vadd.f32	s0, s15, s0
            x6 = x2 - x5; x2 += x5;
 8001714:	ee35 5a26 	vadd.f32	s10, s10, s13
            x5 = x3 - x4; x3 += x4;
 8001718:	ee7a 7aa8 	vadd.f32	s15, s21, s17
            x7 += x5*0.382683432f;
 800171c:	eea6 ca02 	vfma.f32	s24, s12, s4
            x4 = x0 - x3; x0 += x3;
 8001720:	ee78 8a67 	vsub.f32	s17, s16, s15
            x6 = (x6 + x7)*0.70710677f;
 8001724:	ee3b 7a8b 	vadd.f32	s14, s23, s22
            x3 = x1 - x2; x1 += x2;
 8001728:	ee70 aa45 	vsub.f32	s21, s0, s10
            x0 = xt - x6; xt += x6;
 800172c:	eef0 6a65 	vmov.f32	s13, s11
            x5 -= x7*0.198912367f;
 8001730:	eeac 6a44 	vfms.f32	s12, s24, s8
            x0 = xt - x6; xt += x6;
 8001734:	eee7 6a64 	vfms.f32	s13, s14, s9
 8001738:	eee7 5a24 	vfma.f32	s11, s14, s9
            x3 = (x3 + x4)*0.70710677f;
 800173c:	ee7a aaa8 	vadd.f32	s21, s21, s17
            x4 = x0 - x3; x0 += x3;
 8001740:	ee38 7a27 	vadd.f32	s14, s16, s15
            x3 = x1 - x2; x1 += x2;
 8001744:	ee70 7a05 	vadd.f32	s15, s0, s10
            x[2] = (x4 + x3)*0.54119611f;
 8001748:	eeb0 5a68 	vmov.f32	s10, s17
 800174c:	eeaa 5aa4 	vfma.f32	s10, s21, s9
            x[6] = (x4 - x3)*1.30656302f;
 8001750:	eeea 8ae4 	vfms.f32	s17, s21, s9
            x[3] = (x0 - x5)*0.60134488f;
 8001754:	ee36 8ac6 	vsub.f32	s16, s13, s12
            x[1] = (xt + x7)*0.50979561f;
 8001758:	ee3c 0a25 	vadd.f32	s0, s24, s11
            x[5] = (x0 + x5)*0.89997619f;
 800175c:	ee76 6a26 	vadd.f32	s13, s12, s13
            x[7] = (xt - x7)*2.56291556f;
 8001760:	ee75 5acc 	vsub.f32	s11, s11, s24
            x[4] = (x0 - x1)*0.70710677f;
 8001764:	ee37 6a67 	vsub.f32	s12, s14, s15
            x[3] = (x0 - x5)*0.60134488f;
 8001768:	ee28 8a23 	vmul.f32	s16, s16, s7
            x[5] = (x0 + x5)*0.89997619f;
 800176c:	ee66 6a8a 	vmul.f32	s13, s13, s20
            x[1] = (xt + x7)*0.50979561f;
 8001770:	ee20 0a22 	vmul.f32	s0, s0, s5
            x[7] = (xt - x7)*2.56291556f;
 8001774:	ee65 5a89 	vmul.f32	s11, s11, s18
            x[2] = (x4 + x3)*0.54119611f;
 8001778:	ee25 5a03 	vmul.f32	s10, s10, s6
            x[6] = (x4 - x3)*1.30656302f;
 800177c:	ee68 8aa9 	vmul.f32	s17, s17, s19
            x[4] = (x0 - x1)*0.70710677f;
 8001780:	ee26 6a24 	vmul.f32	s12, s12, s9
            x[0] = x0 + x1;
 8001784:	ee77 7a27 	vadd.f32	s15, s14, s15
            x[3] = (x0 - x5)*0.60134488f;
 8001788:	ed03 8a0d 	vstr	s16, [r3, #-52]	; 0xffffffcc
            x[5] = (x0 + x5)*0.89997619f;
 800178c:	ed43 6a0b 	vstr	s13, [r3, #-44]	; 0xffffffd4
            x[1] = (xt + x7)*0.50979561f;
 8001790:	ed03 0a0f 	vstr	s0, [r3, #-60]	; 0xffffffc4
            x[7] = (xt - x7)*2.56291556f;
 8001794:	ed43 5a09 	vstr	s11, [r3, #-36]	; 0xffffffdc
            x[2] = (x4 + x3)*0.54119611f;
 8001798:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
            x[6] = (x4 - x3)*1.30656302f;
 800179c:	ed43 8a0a 	vstr	s17, [r3, #-40]	; 0xffffffd8
            x[4] = (x0 - x1)*0.70710677f;
 80017a0:	ed03 6a0c 	vstr	s12, [r3, #-48]	; 0xffffffd0
            x[0] = x0 + x1;
 80017a4:	ed43 7a10 	vstr	s15, [r3, #-64]	; 0xffffffc0
        for (x = t[0], i = 0; i < 4; i++, x += 8)
 80017a8:	459e      	cmp	lr, r3
 80017aa:	d190      	bne.n	80016ce <mp3d_synth_granule+0x152>
 80017ac:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 80017b0:	eddd 7a38 	vldr	s15, [sp, #224]	; 0xe0
 80017b4:	ed9d 7a28 	vldr	s14, [sp, #160]	; 0xa0
            y[0*18] = t[0][i];
 80017b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017bc:	6013      	str	r3, [r2, #0]
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 80017be:	ee35 6aa7 	vadd.f32	s12, s11, s15
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 80017c2:	edd1 5a10 	vldr	s11, [r1, #64]	; 0x40
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 80017c6:	edd1 6a18 	vldr	s13, [r1, #96]	; 0x60
            y[2*18] = t[1][i] + t[1][i + 1];
 80017ca:	ed91 5a08 	vldr	s10, [r1, #32]
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 80017ce:	ee75 7aa7 	vadd.f32	s15, s11, s15
            y[2*18] = t[1][i] + t[1][i + 1];
 80017d2:	ee35 7a07 	vadd.f32	s14, s10, s14
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 80017d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 80017da:	ee36 6a26 	vadd.f32	s12, s12, s13
            y[3*18] = t[2][i + 1] + t[3][i] + t[3][i + 1];
 80017de:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
            y[2*18] = t[1][i] + t[1][i + 1];
 80017e2:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
            y[1*18] = t[2][i] + t[3][i] + t[3][i + 1];
 80017e6:	ed82 6a12 	vstr	s12, [r2, #72]	; 0x48
        for (i = 0; i < 7; i++, y += 4*18)
 80017ea:	f502 7290 	add.w	r2, r2, #288	; 0x120
 80017ee:	42b2      	cmp	r2, r6
 80017f0:	eef0 7a66 	vmov.f32	s15, s13
 80017f4:	eeb0 7a45 	vmov.f32	s14, s10
 80017f8:	d1de      	bne.n	80017b8 <mp3d_synth_granule+0x23c>
        y[0*18] = t[0][7];
 80017fa:	4616      	mov	r6, r2
        y[1*18] = t[2][7] + t[3][7];
 80017fc:	ed9d 7a3f 	vldr	s14, [sp, #252]	; 0xfc
 8001800:	eddd 7a37 	vldr	s15, [sp, #220]	; 0xdc
        y[0*18] = t[0][7];
 8001804:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8001806:	f846 1b04 	str.w	r1, [r6], #4
        y[1*18] = t[2][7] + t[3][7];
 800180a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800180e:	f10c 0c04 	add.w	ip, ip, #4
        y[2*18] = t[1][7];
 8001812:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
        y[3*18] = t[3][7];
 8001814:	ed86 7a35 	vstr	s14, [r6, #212]	; 0xd4
    for (; k < n; k++)
 8001818:	45c4      	cmp	ip, r8
        y[1*18] = t[2][7] + t[3][7];
 800181a:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
        y[2*18] = t[1][7];
 800181e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    for (; k < n; k++)
 8001822:	f47f aee8 	bne.w	80015f6 <mp3d_synth_granule+0x7a>
 8001826:	f508 6810 	add.w	r8, r8, #2304	; 0x900
    for (i = 0; i < nch; i++)
 800182a:	45c2      	cmp	sl, r8
 800182c:	f47f aede 	bne.w	80015ec <mp3d_synth_granule+0x70>
    {
        mp3d_DCT_II(grbuf + 576*i, nbands);
    }

    memcpy(lins, qmf_state, sizeof(float)*15*64);
 8001830:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8001834:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001836:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800183a:	4640      	mov	r0, r8
 800183c:	f00e fb87 	bl	800ff4e <memcpy>
    mp3d_sample_t *dstr = dstl + (nch - 1);
 8001840:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001842:	9802      	ldr	r0, [sp, #8]
 8001844:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8001848:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 800184c:	3a01      	subs	r2, #1
 800184e:	0052      	lsls	r2, r2, #1
 8001850:	1c94      	adds	r4, r2, #2
 8001852:	1907      	adds	r7, r0, r4
 8001854:	463e      	mov	r6, r7
 8001856:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 800185a:	9709      	str	r7, [sp, #36]	; 0x24
 800185c:	9f01      	ldr	r7, [sp, #4]
 800185e:	970d      	str	r7, [sp, #52]	; 0x34
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4637      	mov	r7, r6
 8001864:	eb02 0b04 	add.w	fp, r2, r4
 8001868:	441f      	add	r7, r3
 800186a:	eb03 050b 	add.w	r5, r3, fp
 800186e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8001872:	940c      	str	r4, [sp, #48]	; 0x30
 8001874:	4638      	mov	r0, r7
 8001876:	eb05 040c 	add.w	r4, r5, ip
 800187a:	4484      	add	ip, r0
 800187c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800187e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8001880:	f8cd c010 	str.w	ip, [sp, #16]
 8001884:	4684      	mov	ip, r0
 8001886:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001888:	9708      	str	r7, [sp, #32]
 800188a:	4682      	mov	sl, r0
 800188c:	ebcc 1c80 	rsb	ip, ip, r0, lsl #6
 8001890:	1e77      	subs	r7, r6, #1
 8001892:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001894:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8001898:	f508 5687 	add.w	r6, r8, #4320	; 0x10e0
    float *xr = xl + 576*(nch - 1);
 800189c:	3901      	subs	r1, #1
 800189e:	9600      	str	r6, [sp, #0]
 80018a0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80018a4:	eb00 2101 	add.w	r1, r0, r1, lsl #8
 80018a8:	9800      	ldr	r0, [sp, #0]
 80018aa:	3008      	adds	r0, #8
 80018ac:	9000      	str	r0, [sp, #0]
 80018ae:	9802      	ldr	r0, [sp, #8]
 80018b0:	1945      	adds	r5, r0, r5
 80018b2:	950a      	str	r5, [sp, #40]	; 0x28
 80018b4:	4605      	mov	r5, r0
 80018b6:	eb03 0e04 	add.w	lr, r3, r4
 80018ba:	4425      	add	r5, r4
 80018bc:	9c04      	ldr	r4, [sp, #16]
 80018be:	9507      	str	r5, [sp, #28]
 80018c0:	18e5      	adds	r5, r4, r3
 80018c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80018c4:	9505      	str	r5, [sp, #20]
 80018c6:	eb00 060b 	add.w	r6, r0, fp
 80018ca:	4486      	add	lr, r0
 80018cc:	1aa2      	subs	r2, r4, r2
 80018ce:	9800      	ldr	r0, [sp, #0]
 80018d0:	9216      	str	r2, [sp, #88]	; 0x58
 80018d2:	087f      	lsrs	r7, r7, #1
 80018d4:	f501 6299 	add.w	r2, r1, #1224	; 0x4c8
 80018d8:	920e      	str	r2, [sp, #56]	; 0x38
 80018da:	eb00 2247 	add.w	r2, r0, r7, lsl #9
 80018de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80018e0:	9215      	str	r2, [sp, #84]	; 0x54
 80018e2:	ebca 7cca 	rsb	ip, sl, sl, lsl #31
 80018e6:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80018ea:	9210      	str	r2, [sp, #64]	; 0x40
 80018ec:	f06f 0881 	mvn.w	r8, #129	; 0x81
 80018f0:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80018f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80018f6:	fb08 f20a 	mul.w	r2, r8, sl
 80018fa:	9603      	str	r6, [sp, #12]
 80018fc:	f8cd e018 	str.w	lr, [sp, #24]
 8001900:	4653      	mov	r3, sl
 8001902:	9218      	str	r2, [sp, #96]	; 0x60
 8001904:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	9317      	str	r3, [sp, #92]	; 0x5c
 800190a:	f606 63e8 	addw	r3, r6, #3816	; 0xee8
 800190e:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t s32 = (int32_t)(sample + .5f);
 8001910:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    zlin[4*15]     = xl[18*16];
 8001914:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001916:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001918:	f856 3c48 	ldr.w	r3, [r6, #-72]
    zlin[4*15 + 1] = xr[18*16];
 800191c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    zlin[4*15]     = xl[18*16];
 800191e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    zlin[4*15 + 1] = xr[18*16];
 8001922:	f855 3c48 	ldr.w	r3, [r5, #-72]
    zlin[4*15 + 2] = xl[0];
 8001926:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    zlin[4*15 + 1] = xr[18*16];
 8001928:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
    zlin[4*15 + 2] = xl[0];
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
    zlin[4*15 + 3] = xr[0];
 8001932:	f5a5 6399 	sub.w	r3, r5, #1224	; 0x4c8
    mp3d_synth_pair(dstr, nch, lins + 4*15 + 1);
 8001936:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    zlin[4*15 + 3] = xr[0];
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    zlin[4*31]     = xl[1 + 18*16];
 8001940:	f856 3c44 	ldr.w	r3, [r6, #-68]
 8001944:	f8c1 3208 	str.w	r3, [r1, #520]	; 0x208
    zlin[4*31 + 1] = xr[1 + 18*16];
 8001948:	f855 3c44 	ldr.w	r3, [r5, #-68]
 800194c:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    zlin[4*31 + 2] = xl[1];
 8001950:	6862      	ldr	r2, [r4, #4]
 8001952:	f8c1 2210 	str.w	r2, [r1, #528]	; 0x210
    zlin[4*31 + 3] = xr[1];
 8001956:	f2a5 43c4 	subw	r3, r5, #1220	; 0x4c4
 800195a:	9a03      	ldr	r2, [sp, #12]
 800195c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
    zlin[4*31 + 2] = xl[1];
 8001964:	460c      	mov	r4, r1
 8001966:	4410      	add	r0, r2
    mp3d_synth_pair(dstr, nch, lins + 4*15 + 1);
 8001968:	f6a1 52f4 	subw	r2, r1, #3572	; 0xdf4
 800196c:	4641      	mov	r1, r8
 800196e:	9013      	str	r0, [sp, #76]	; 0x4c
 8001970:	f7ff fd2a 	bl	80013c8 <mp3d_synth_pair>
 8001974:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001976:	9909      	ldr	r1, [sp, #36]	; 0x24
    mp3d_synth_pair(dstr + 32*nch, nch, lins + 4*15 + 64 + 1);
 8001978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800197a:	9f03      	ldr	r7, [sp, #12]
 800197c:	1841      	adds	r1, r0, r1
 800197e:	f6a4 42f4 	subw	r2, r4, #3316	; 0xcf4
 8001982:	19d8      	adds	r0, r3, r7
 8001984:	9111      	str	r1, [sp, #68]	; 0x44
 8001986:	4641      	mov	r1, r8
 8001988:	f7ff fd1e 	bl	80013c8 <mp3d_synth_pair>
    mp3d_synth_pair(dstl, nch, lins + 4*15);
 800198c:	f6a4 52f8 	subw	r2, r4, #3576	; 0xdf8
 8001990:	4641      	mov	r1, r8
 8001992:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001994:	f7ff fd18 	bl	80013c8 <mp3d_synth_pair>
    mp3d_synth_pair(dstl + 32*nch, nch, lins + 4*15 + 64);
 8001998:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800199a:	9803      	ldr	r0, [sp, #12]
 800199c:	f6a4 42f8 	subw	r2, r4, #3320	; 0xcf8
 80019a0:	4641      	mov	r1, r8
 80019a2:	1818      	adds	r0, r3, r0
 80019a4:	f7ff fd10 	bl	80013c8 <mp3d_synth_pair>
 80019a8:	f1a5 0190 	sub.w	r1, r5, #144	; 0x90
    mp3d_synth_pair(dstl, nch, lins + 4*15);
 80019ac:	4627      	mov	r7, r4
 80019ae:	f6a4 63e8 	subw	r3, r4, #3816	; 0xee8
    mp3d_synth_pair(dstl + 32*nch, nch, lins + 4*15 + 64);
 80019b2:	e9cd 1500 	strd	r1, r5, [sp]
 80019b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80019b8:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <mp3d_synth_granule+0x6a0>)
 80019ba:	9602      	str	r6, [sp, #8]
 80019bc:	f04f 0c00 	mov.w	ip, #0
 80019c0:	46e6      	mov	lr, ip
 80019c2:	f504 6887 	add.w	r8, r4, #1080	; 0x438
        zlin[4*i]     = xl[18*(31 - i)];
 80019c6:	9802      	ldr	r0, [sp, #8]
        zlin[4*i + 1] = xr[18*(31 - i)];
 80019c8:	9c01      	ldr	r4, [sp, #4]
        zlin[4*i]     = xl[18*(31 - i)];
 80019ca:	6801      	ldr	r1, [r0, #0]
 80019cc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
        zlin[4*i + 1] = xr[18*(31 - i)];
 80019d0:	6821      	ldr	r1, [r4, #0]
 80019d2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
        zlin[4*i + 2] = xl[1 + 18*(31 - i)];
 80019d6:	6841      	ldr	r1, [r0, #4]
 80019d8:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
        zlin[4*i + 3] = xr[1 + 18*(31 - i)];
 80019dc:	6861      	ldr	r1, [r4, #4]
 80019de:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
        zlin[4*(i + 16)]   = xl[1 + 18*(1 + i)];
 80019e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
        zlin[4*(i + 16) + 1] = xr[1 + 18*(1 + i)];
 80019e6:	9800      	ldr	r0, [sp, #0]
        zlin[4*(i + 16)]   = xl[1 + 18*(1 + i)];
 80019e8:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
        zlin[4*(i + 16) + 1] = xr[1 + 18*(1 + i)];
 80019ec:	6841      	ldr	r1, [r0, #4]
 80019ee:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
        zlin[4*(i - 16) + 2] = xl[18*(1 + i)];
 80019f2:	f8d8 1000 	ldr.w	r1, [r8]
 80019f6:	6039      	str	r1, [r7, #0]
        zlin[4*(i - 16) + 3] = xr[18*(1 + i)];
 80019f8:	6801      	ldr	r1, [r0, #0]
 80019fa:	6079      	str	r1, [r7, #4]
        S0(0) S2(1) S1(2) S2(3) S1(4) S2(5) S1(6) S2(7)
 80019fc:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8001a00:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 8001a04:	a91c      	add	r1, sp, #112	; 0x70
 8001a06:	f503 647e 	add.w	r4, r3, #4064	; 0xfe0
 8001a0a:	f103 0ae0 	add.w	sl, r3, #224	; 0xe0
 8001a0e:	4648      	mov	r0, r9
 8001a10:	f503 6b7f 	add.w	fp, r3, #4080	; 0xff0
 8001a14:	460e      	mov	r6, r1
 8001a16:	464d      	mov	r5, r9
 8001a18:	ecfa 7a01 	vldmia	sl!, {s15}
 8001a1c:	ecf4 6a01 	vldmia	r4!, {s13}
 8001a20:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8001a24:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8001a28:	eea6 7a26 	vfma.f32	s14, s12, s13
 8001a2c:	45a3      	cmp	fp, r4
 8001a2e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8001a32:	eca5 7a01 	vstmia	r5!, {s14}
 8001a36:	ece6 7a01 	vstmia	r6!, {s15}
 8001a3a:	d1ed      	bne.n	8001a18 <mp3d_synth_granule+0x49c>
 8001a3c:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 8001a40:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8001a44:	f503 666e 	add.w	r6, r3, #3808	; 0xee0
 8001a48:	f503 7af0 	add.w	sl, r3, #480	; 0x1e0
 8001a4c:	f503 6b6f 	add.w	fp, r3, #3824	; 0xef0
 8001a50:	ad1c      	add	r5, sp, #112	; 0x70
 8001a52:	464c      	mov	r4, r9
 8001a54:	ecf6 5a01 	vldmia	r6!, {s11}
 8001a58:	ecba 5a01 	vldmia	sl!, {s10}
 8001a5c:	ed94 7a00 	vldr	s14, [r4]
 8001a60:	ed95 6a00 	vldr	s12, [r5]
 8001a64:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001a68:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001a6c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001a70:	45b3      	cmp	fp, r6
 8001a72:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001a76:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a7e:	ece5 6a01 	vstmia	r5!, {s13}
 8001a82:	ece4 7a01 	vstmia	r4!, {s15}
 8001a86:	d1e5      	bne.n	8001a54 <mp3d_synth_granule+0x4d8>
 8001a88:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8001a8c:	ed12 5a0b 	vldr	s10, [r2, #-44]	; 0xffffffd4
 8001a90:	f503 665e 	add.w	r6, r3, #3552	; 0xde0
 8001a94:	f503 7a38 	add.w	sl, r3, #736	; 0x2e0
 8001a98:	f503 6b5f 	add.w	fp, r3, #3568	; 0xdf0
 8001a9c:	ad1c      	add	r5, sp, #112	; 0x70
 8001a9e:	464c      	mov	r4, r9
 8001aa0:	ecfa 7a01 	vldmia	sl!, {s15}
 8001aa4:	ecf6 5a01 	vldmia	r6!, {s11}
 8001aa8:	ed94 6a00 	vldr	s12, [r4]
 8001aac:	ed95 7a00 	vldr	s14, [r5]
 8001ab0:	ee64 6aa7 	vmul.f32	s13, s9, s15
 8001ab4:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8001ab8:	eee5 6a25 	vfma.f32	s13, s10, s11
 8001abc:	45b3      	cmp	fp, r6
 8001abe:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001ac2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aca:	ece4 6a01 	vstmia	r4!, {s13}
 8001ace:	ece5 7a01 	vstmia	r5!, {s15}
 8001ad2:	d1e5      	bne.n	8001aa0 <mp3d_synth_granule+0x524>
 8001ad4:	ed12 4a0a 	vldr	s8, [r2, #-40]	; 0xffffffd8
 8001ad8:	ed52 4a09 	vldr	s9, [r2, #-36]	; 0xffffffdc
 8001adc:	f503 664e 	add.w	r6, r3, #3296	; 0xce0
 8001ae0:	f503 7a78 	add.w	sl, r3, #992	; 0x3e0
 8001ae4:	f503 6b4f 	add.w	fp, r3, #3312	; 0xcf0
 8001ae8:	ad1c      	add	r5, sp, #112	; 0x70
 8001aea:	464c      	mov	r4, r9
 8001aec:	ecf6 5a01 	vldmia	r6!, {s11}
 8001af0:	ecba 5a01 	vldmia	sl!, {s10}
 8001af4:	ed94 7a00 	vldr	s14, [r4]
 8001af8:	ed95 6a00 	vldr	s12, [r5]
 8001afc:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001b00:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001b04:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001b08:	45b3      	cmp	fp, r6
 8001b0a:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001b0e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b16:	ece5 6a01 	vstmia	r5!, {s13}
 8001b1a:	ece4 7a01 	vstmia	r4!, {s15}
 8001b1e:	d1e5      	bne.n	8001aec <mp3d_synth_granule+0x570>
 8001b20:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8001b24:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 8001b28:	f503 663e 	add.w	r6, r3, #3040	; 0xbe0
 8001b2c:	f503 6a9c 	add.w	sl, r3, #1248	; 0x4e0
 8001b30:	f503 6b3f 	add.w	fp, r3, #3056	; 0xbf0
 8001b34:	ad1c      	add	r5, sp, #112	; 0x70
 8001b36:	464c      	mov	r4, r9
 8001b38:	ecfa 7a01 	vldmia	sl!, {s15}
 8001b3c:	ecf6 5a01 	vldmia	r6!, {s11}
 8001b40:	ed94 6a00 	vldr	s12, [r4]
 8001b44:	ed95 7a00 	vldr	s14, [r5]
 8001b48:	ee64 6aa7 	vmul.f32	s13, s9, s15
 8001b4c:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8001b50:	eee5 6a25 	vfma.f32	s13, s10, s11
 8001b54:	45b3      	cmp	fp, r6
 8001b56:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001b5a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001b5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b62:	ece4 6a01 	vstmia	r4!, {s13}
 8001b66:	ece5 7a01 	vstmia	r5!, {s15}
 8001b6a:	d1e5      	bne.n	8001b38 <mp3d_synth_granule+0x5bc>
 8001b6c:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8001b70:	ed52 4a05 	vldr	s9, [r2, #-20]	; 0xffffffec
 8001b74:	f503 662e 	add.w	r6, r3, #2784	; 0xae0
 8001b78:	f503 6abc 	add.w	sl, r3, #1504	; 0x5e0
 8001b7c:	f503 6b2f 	add.w	fp, r3, #2800	; 0xaf0
 8001b80:	ad1c      	add	r5, sp, #112	; 0x70
 8001b82:	464c      	mov	r4, r9
 8001b84:	ecf6 5a01 	vldmia	r6!, {s11}
 8001b88:	ecba 5a01 	vldmia	sl!, {s10}
 8001b8c:	ed94 7a00 	vldr	s14, [r4]
 8001b90:	ed95 6a00 	vldr	s12, [r5]
 8001b94:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001b98:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001b9c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001ba0:	45b3      	cmp	fp, r6
 8001ba2:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001ba6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bae:	ece5 6a01 	vstmia	r5!, {s13}
 8001bb2:	ece4 7a01 	vstmia	r4!, {s15}
 8001bb6:	d1e5      	bne.n	8001b84 <mp3d_synth_granule+0x608>
 8001bb8:	ed52 4a04 	vldr	s9, [r2, #-16]
 8001bbc:	ed12 5a03 	vldr	s10, [r2, #-12]
 8001bc0:	f503 661e 	add.w	r6, r3, #2528	; 0x9e0
 8001bc4:	f503 6adc 	add.w	sl, r3, #1760	; 0x6e0
 8001bc8:	f503 6b1f 	add.w	fp, r3, #2544	; 0x9f0
 8001bcc:	ad1c      	add	r5, sp, #112	; 0x70
 8001bce:	464c      	mov	r4, r9
 8001bd0:	ecfa 7a01 	vldmia	sl!, {s15}
 8001bd4:	ecf6 5a01 	vldmia	r6!, {s11}
 8001bd8:	ed94 6a00 	vldr	s12, [r4]
 8001bdc:	ed95 7a00 	vldr	s14, [r5]
 8001be0:	ee64 6aa7 	vmul.f32	s13, s9, s15
 8001be4:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8001be8:	eee5 6a25 	vfma.f32	s13, s10, s11
 8001bec:	45b3      	cmp	fp, r6
 8001bee:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001bf2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bfa:	ece4 6a01 	vstmia	r4!, {s13}
 8001bfe:	ece5 7a01 	vstmia	r5!, {s15}
 8001c02:	d1e5      	bne.n	8001bd0 <mp3d_synth_granule+0x654>
 8001c04:	ed12 4a02 	vldr	s8, [r2, #-8]
 8001c08:	ed52 4a01 	vldr	s9, [r2, #-4]
 8001c0c:	f503 640e 	add.w	r4, r3, #2272	; 0x8e0
 8001c10:	f503 65fc 	add.w	r5, r3, #2016	; 0x7e0
 8001c14:	f503 660f 	add.w	r6, r3, #2288	; 0x8f0
 8001c18:	e002      	b.n	8001c20 <mp3d_synth_granule+0x6a4>
 8001c1a:	bf00      	nop
 8001c1c:	0801122c 	.word	0x0801122c
 8001c20:	ecf4 5a01 	vldmia	r4!, {s11}
 8001c24:	ecb5 5a01 	vldmia	r5!, {s10}
 8001c28:	ed90 7a00 	vldr	s14, [r0]
 8001c2c:	ed91 6a00 	vldr	s12, [r1]
 8001c30:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8001c34:	ee64 7a05 	vmul.f32	s15, s8, s10
 8001c38:	eee4 6a85 	vfma.f32	s13, s9, s10
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8001c42:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c4a:	ece1 6a01 	vstmia	r1!, {s13}
 8001c4e:	ece0 7a01 	vstmia	r0!, {s15}
 8001c52:	d1e5      	bne.n	8001c20 <mp3d_synth_granule+0x6a4>
 8001c54:	9d02      	ldr	r5, [sp, #8]
    int32_t s32 = (int32_t)(sample + .5f);
 8001c56:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 8001c5a:	eddd 4a21 	vldr	s9, [sp, #132]	; 0x84
 8001c5e:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8001c62:	eddd 5a20 	vldr	s11, [sp, #128]	; 0x80
 8001c66:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 8001c6a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8001c6e:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 8001c72:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 8001c76:	3548      	adds	r5, #72	; 0x48
 8001c78:	9502      	str	r5, [sp, #8]
 8001c7a:	9d01      	ldr	r5, [sp, #4]
 8001c7c:	ee34 4a08 	vadd.f32	s8, s8, s16
 8001c80:	3548      	adds	r5, #72	; 0x48
 8001c82:	9501      	str	r5, [sp, #4]
 8001c84:	9d00      	ldr	r5, [sp, #0]
 8001c86:	ee74 4a88 	vadd.f32	s9, s9, s16
 8001c8a:	eebd 4ac4 	vcvt.s32.f32	s8, s8
 8001c8e:	3d48      	subs	r5, #72	; 0x48
 8001c90:	ee35 5a08 	vadd.f32	s10, s10, s16
 8001c94:	ee75 5a88 	vadd.f32	s11, s11, s16
 8001c98:	ee14 4a10 	vmov	r4, s8
 8001c9c:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 8001ca0:	9500      	str	r5, [sp, #0]
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001ca2:	9d03      	ldr	r5, [sp, #12]
    int32_t s32 = (int32_t)(sample + .5f);
 8001ca4:	ee36 6a08 	vadd.f32	s12, s12, s16
 8001ca8:	ee14 0a90 	vmov	r0, s9
 8001cac:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    s32 -= (s32 < 0);
 8001cb0:	eba4 74d4 	sub.w	r4, r4, r4, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001cb4:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001cb8:	f304 040f 	ssat	r4, #16, r4
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cbc:	f825 400c 	strh.w	r4, [r5, ip]
 8001cc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001cc2:	9d08      	ldr	r5, [sp, #32]
    int32_t s32 = (int32_t)(sample + .5f);
 8001cc4:	ee76 6a88 	vadd.f32	s13, s13, s16
 8001cc8:	ee15 1a10 	vmov	r1, s10
    s32 -= (s32 < 0);
 8001ccc:	eba0 70d0 	sub.w	r0, r0, r0, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001cd0:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001cd4:	f300 000f 	ssat	r0, #16, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cd8:	f824 000e 	strh.w	r0, [r4, lr]
 8001cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    int32_t s32 = (int32_t)(sample + .5f);
 8001cde:	ee15 4a90 	vmov	r4, s11
 8001ce2:	ee37 7a08 	vadd.f32	s14, s14, s16
    s32 -= (s32 < 0);
 8001ce6:	eba1 71d1 	sub.w	r1, r1, r1, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001cea:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001cee:	f301 010f 	ssat	r1, #16, r1
    s32 -= (s32 < 0);
 8001cf2:	eba4 74d4 	sub.w	r4, r4, r4, lsr #31
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001cf6:	f820 100c 	strh.w	r1, [r0, ip]
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001cfa:	f304 040f 	ssat	r4, #16, r4
    int32_t s32 = (int32_t)(sample + .5f);
 8001cfe:	ee16 0a10 	vmov	r0, s12
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d02:	f825 400e 	strh.w	r4, [r5, lr]
 8001d06:	9c07      	ldr	r4, [sp, #28]
    int32_t s32 = (int32_t)(sample + .5f);
 8001d08:	ee16 1a90 	vmov	r1, s13
    s32 -= (s32 < 0);
 8001d0c:	eba0 70d0 	sub.w	r0, r0, r0, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001d10:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001d14:	f300 000f 	ssat	r0, #16, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d18:	f824 000c 	strh.w	r0, [r4, ip]
 8001d1c:	9c06      	ldr	r4, [sp, #24]
    int32_t s32 = (int32_t)(sample + .5f);
 8001d1e:	ee77 7a88 	vadd.f32	s15, s15, s16
    s32 -= (s32 < 0);
 8001d22:	eba1 71d1 	sub.w	r1, r1, r1, lsr #31
    int32_t s32 = (int32_t)(sample + .5f);
 8001d26:	ee17 0a10 	vmov	r0, s14
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001d2a:	f301 010f 	ssat	r1, #16, r1
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d2e:	f824 100e 	strh.w	r1, [r4, lr]
 8001d32:	9c04      	ldr	r4, [sp, #16]
    int32_t s32 = (int32_t)(sample + .5f);
 8001d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    s32 -= (s32 < 0);
 8001d38:	eba0 70d0 	sub.w	r0, r0, r0, lsr #31
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001d3c:	f300 000f 	ssat	r0, #16, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d40:	f824 000c 	strh.w	r0, [r4, ip]
 8001d44:	980c      	ldr	r0, [sp, #48]	; 0x30
    int32_t s32 = (int32_t)(sample + .5f);
 8001d46:	ee17 1a90 	vmov	r1, s15
 8001d4a:	4484      	add	ip, r0
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d4c:	9805      	ldr	r0, [sp, #20]
    s32 -= (s32 < 0);
 8001d4e:	eba1 71d1 	sub.w	r1, r1, r1, lsr #31
    __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
 8001d52:	f301 010f 	ssat	r1, #16, r1
    int16_t s = (int16_t)minimp3_clip_int16_arm(s32);
 8001d56:	f820 100e 	strh.w	r1, [r0, lr]
 8001d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d5c:	448e      	add	lr, r1
    for (i = 14; i >= 0; i--)
 8001d5e:	492f      	ldr	r1, [pc, #188]	; (8001e1c <mp3d_synth_granule+0x8a0>)
 8001d60:	3240      	adds	r2, #64	; 0x40
 8001d62:	4291      	cmp	r1, r2
 8001d64:	f1a7 0710 	sub.w	r7, r7, #16
 8001d68:	f1a3 0310 	sub.w	r3, r3, #16
 8001d6c:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8001d70:	f47f ae29 	bne.w	80019c6 <mp3d_synth_granule+0x44a>
 8001d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d78:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001d7a:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8001d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d80:	910f      	str	r1, [sp, #60]	; 0x3c
 8001d82:	3308      	adds	r3, #8
 8001d84:	930d      	str	r3, [sp, #52]	; 0x34
 8001d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001d88:	4614      	mov	r4, r2
 8001d8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d8c:	1a1b      	subs	r3, r3, r0
 8001d8e:	1a12      	subs	r2, r2, r0
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001d94:	9209      	str	r2, [sp, #36]	; 0x24
 8001d96:	4628      	mov	r0, r5
 8001d98:	9a07      	ldr	r2, [sp, #28]
 8001d9a:	4418      	add	r0, r3
 8001d9c:	9008      	str	r0, [sp, #32]
 8001d9e:	4610      	mov	r0, r2
 8001da0:	9a06      	ldr	r2, [sp, #24]
 8001da2:	4418      	add	r0, r3
 8001da4:	9007      	str	r0, [sp, #28]
 8001da6:	4610      	mov	r0, r2
 8001da8:	9a04      	ldr	r2, [sp, #16]
 8001daa:	4418      	add	r0, r3
 8001dac:	9006      	str	r0, [sp, #24]
 8001dae:	4610      	mov	r0, r2
 8001db0:	9a05      	ldr	r2, [sp, #20]
 8001db2:	441c      	add	r4, r3
 8001db4:	4418      	add	r0, r3
 8001db6:	441a      	add	r2, r3
 8001db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001dba:	940a      	str	r4, [sp, #40]	; 0x28
 8001dbc:	3308      	adds	r3, #8
 8001dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8001dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dc2:	9004      	str	r0, [sp, #16]
 8001dc4:	3308      	adds	r3, #8
 8001dc6:	930e      	str	r3, [sp, #56]	; 0x38

    for (i = 0; i < nbands; i += 2)
 8001dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001dca:	9205      	str	r2, [sp, #20]
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	f47f ada1 	bne.w	8001914 <mp3d_synth_granule+0x398>
    {
        mp3d_synth(grbuf + i, pcm + 32*nch*i, nch, lins + i*64);
    }
#ifndef MINIMP3_NONSTANDARD_BUT_LOGICAL
    if (nch == 1)
 8001dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 8001dda:	d10f      	bne.n	8001dfc <mp3d_synth_granule+0x880>
 8001ddc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001de0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001de2:	f503 6070 	add.w	r0, r3, #3840	; 0xf00
    {
        for (i = 0; i < 15*64; i += 2)
        {
            qmf_state[i] = lins[nbands*64 + i];
 8001de6:	f853 1b08 	ldr.w	r1, [r3], #8
 8001dea:	f842 1b08 	str.w	r1, [r2], #8
        for (i = 0; i < 15*64; i += 2)
 8001dee:	4298      	cmp	r0, r3
 8001df0:	d1f9      	bne.n	8001de6 <mp3d_synth_granule+0x86a>
    } else
#endif /* MINIMP3_NONSTANDARD_BUT_LOGICAL */
    {
        memcpy(qmf_state, lins + nbands*64, sizeof(float)*15*64);
    }
}
 8001df2:	b041      	add	sp, #260	; 0x104
 8001df4:	ecbd 8b0a 	vpop	{d8-d12}
 8001df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(qmf_state, lins + nbands*64, sizeof(float)*15*64);
 8001dfc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001dfe:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 8001e02:	f44f 6270 	mov.w	r2, #3840	; 0xf00
}
 8001e06:	b041      	add	sp, #260	; 0x104
 8001e08:	ecbd 8b0a 	vpop	{d8-d12}
 8001e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memcpy(qmf_state, lins + nbands*64, sizeof(float)*15*64);
 8001e10:	f00e b89d 	b.w	800ff4e <memcpy>
 8001e14:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 8001e18:	e50a      	b.n	8001830 <mp3d_synth_granule+0x2b4>
 8001e1a:	bf00      	nop
 8001e1c:	080115ec 	.word	0x080115ec

08001e20 <mp3dec_skip_id3v1>:

#ifdef MINIMP3_IMPLEMENTATION
#include <limits.h>

static void mp3dec_skip_id3v1(const uint8_t *buf, size_t *pbuf_size)
{
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t buf_size = *pbuf_size;
 8001e22:	680c      	ldr	r4, [r1, #0]
#ifndef MINIMP3_NOSKIP_ID3V1
    if (buf_size >= 128 && !memcmp(buf + buf_size - 128, "TAG", 3))
 8001e24:	2c7f      	cmp	r4, #127	; 0x7f
{
 8001e26:	460e      	mov	r6, r1
 8001e28:	4607      	mov	r7, r0
    if (buf_size >= 128 && !memcmp(buf + buf_size - 128, "TAG", 3))
 8001e2a:	d917      	bls.n	8001e5c <mp3dec_skip_id3v1+0x3c>
 8001e2c:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8001e30:	18c2      	adds	r2, r0, r3
 8001e32:	5cc1      	ldrb	r1, [r0, r3]
 8001e34:	2954      	cmp	r1, #84	; 0x54
 8001e36:	d015      	beq.n	8001e64 <mp3dec_skip_id3v1+0x44>
        if (buf_size >= 227 && !memcmp(buf + buf_size - 227, "TAG+", 4))
            buf_size -= 227;
    }
#endif
#ifndef MINIMP3_NOSKIP_APEV2
    if (buf_size > 32 && !memcmp(buf + buf_size - 32, "APETAGEX", 8))
 8001e38:	f1a4 0520 	sub.w	r5, r4, #32
 8001e3c:	1978      	adds	r0, r7, r5
 8001e3e:	2208      	movs	r2, #8
 8001e40:	4919      	ldr	r1, [pc, #100]	; (8001ea8 <mp3dec_skip_id3v1+0x88>)
 8001e42:	f00e f875 	bl	800ff30 <memcmp>
 8001e46:	b930      	cbnz	r0, 8001e56 <mp3dec_skip_id3v1+0x36>
    {
        buf_size -= 32;
        const uint8_t *tag = buf + buf_size + 8 + 4;
        uint32_t tag_size = (uint32_t)(tag[3] << 24) | (tag[2] << 16) | (tag[1] << 8) | tag[0];
 8001e48:	443c      	add	r4, r7
 8001e4a:	f854 4c14 	ldr.w	r4, [r4, #-20]
        if (buf_size >= tag_size)
 8001e4e:	42a5      	cmp	r5, r4
            buf_size -= tag_size;
 8001e50:	bf2c      	ite	cs
 8001e52:	1b2c      	subcs	r4, r5, r4
 8001e54:	462c      	movcc	r4, r5
    }
#endif
    *pbuf_size = buf_size;
 8001e56:	6034      	str	r4, [r6, #0]
}
 8001e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e5a:	461c      	mov	r4, r3
    if (buf_size > 32 && !memcmp(buf + buf_size - 32, "APETAGEX", 8))
 8001e5c:	2c20      	cmp	r4, #32
 8001e5e:	d8eb      	bhi.n	8001e38 <mp3dec_skip_id3v1+0x18>
    *pbuf_size = buf_size;
 8001e60:	6034      	str	r4, [r6, #0]
}
 8001e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (buf_size >= 128 && !memcmp(buf + buf_size - 128, "TAG", 3))
 8001e64:	7851      	ldrb	r1, [r2, #1]
 8001e66:	2941      	cmp	r1, #65	; 0x41
 8001e68:	f102 0201 	add.w	r2, r2, #1
 8001e6c:	d1e4      	bne.n	8001e38 <mp3dec_skip_id3v1+0x18>
 8001e6e:	7852      	ldrb	r2, [r2, #1]
 8001e70:	2a47      	cmp	r2, #71	; 0x47
 8001e72:	d1e1      	bne.n	8001e38 <mp3dec_skip_id3v1+0x18>
        if (buf_size >= 227 && !memcmp(buf + buf_size - 227, "TAG+", 4))
 8001e74:	2be2      	cmp	r3, #226	; 0xe2
 8001e76:	d9f0      	bls.n	8001e5a <mp3dec_skip_id3v1+0x3a>
 8001e78:	f46f 72b1 	mvn.w	r2, #354	; 0x162
 8001e7c:	4414      	add	r4, r2
 8001e7e:	1902      	adds	r2, r0, r4
 8001e80:	5d01      	ldrb	r1, [r0, r4]
 8001e82:	2954      	cmp	r1, #84	; 0x54
 8001e84:	d001      	beq.n	8001e8a <mp3dec_skip_id3v1+0x6a>
 8001e86:	461c      	mov	r4, r3
 8001e88:	e7d6      	b.n	8001e38 <mp3dec_skip_id3v1+0x18>
 8001e8a:	7851      	ldrb	r1, [r2, #1]
 8001e8c:	2941      	cmp	r1, #65	; 0x41
 8001e8e:	f102 0201 	add.w	r2, r2, #1
 8001e92:	d1f8      	bne.n	8001e86 <mp3dec_skip_id3v1+0x66>
 8001e94:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001e98:	2947      	cmp	r1, #71	; 0x47
 8001e9a:	d1f4      	bne.n	8001e86 <mp3dec_skip_id3v1+0x66>
 8001e9c:	7852      	ldrb	r2, [r2, #1]
 8001e9e:	2a2b      	cmp	r2, #43	; 0x2b
 8001ea0:	d0dc      	beq.n	8001e5c <mp3dec_skip_id3v1+0x3c>
 8001ea2:	461c      	mov	r4, r3
 8001ea4:	e7c8      	b.n	8001e38 <mp3dec_skip_id3v1+0x18>
 8001ea6:	bf00      	nop
 8001ea8:	08011618 	.word	0x08011618

08001eac <mp3dec_check_vbrtag>:
    *pbuf = (const uint8_t *)buf;
    *pbuf_size = buf_size;
}

static int mp3dec_check_vbrtag(const uint8_t *frame, int frame_size, uint32_t *frames, int *delay, int *padding)
{
 8001eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb0:	4604      	mov	r4, r0
    /  MPEG1          17     32
    /  MPEG2 & 2.5     9     17*/
    bs_t bs[1];
    L3_gr_info_t gr_info[4];
    bs_init(bs, frame + HDR_SIZE, frame_size - HDR_SIZE);
    if (HDR_IS_CRC(frame))
 8001eb2:	7840      	ldrb	r0, [r0, #1]
{
 8001eb4:	b0a0      	sub	sp, #128	; 0x80
 8001eb6:	460d      	mov	r5, r1
    bs_init(bs, frame + HDR_SIZE, frame_size - HDR_SIZE);
 8001eb8:	3904      	subs	r1, #4
    bs->limit = bytes*8;
 8001eba:	00c9      	lsls	r1, r1, #3
 8001ebc:	f104 0c04 	add.w	ip, r4, #4
{
 8001ec0:	461e      	mov	r6, r3
    if (HDR_IS_CRC(frame))
 8001ec2:	07c0      	lsls	r0, r0, #31
    bs->pos   = 0;
 8001ec4:	f04f 0300 	mov.w	r3, #0
{
 8001ec8:	4617      	mov	r7, r2
    bs->limit = bytes*8;
 8001eca:	9103      	str	r1, [sp, #12]
    bs->pos   = 0;
 8001ecc:	e9cd c301 	strd	ip, r3, [sp, #4]
        get_bits(bs, 16);
 8001ed0:	f10d 0804 	add.w	r8, sp, #4
    if (HDR_IS_CRC(frame))
 8001ed4:	d52c      	bpl.n	8001f30 <mp3dec_check_vbrtag+0x84>
    if (L3_read_side_info(bs, gr_info, frame) < 0)
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	4622      	mov	r2, r4
 8001eda:	a904      	add	r1, sp, #16
 8001edc:	f7fe ff4c 	bl	8000d78 <L3_read_side_info>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	db0f      	blt.n	8001f04 <mp3dec_check_vbrtag+0x58>
        return 0; /* side info corrupted */

    const uint8_t *tag = frame + HDR_SIZE + bs->pos/8;
 8001ee4:	9b02      	ldr	r3, [sp, #8]
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001ee6:	4939      	ldr	r1, [pc, #228]	; (8001fcc <mp3dec_check_vbrtag+0x120>)
    const uint8_t *tag = frame + HDR_SIZE + bs->pos/8;
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bfb8      	it	lt
 8001eec:	3307      	addlt	r3, #7
 8001eee:	10db      	asrs	r3, r3, #3
 8001ef0:	3304      	adds	r3, #4
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001ef2:	7808      	ldrb	r0, [r1, #0]
 8001ef4:	5ce2      	ldrb	r2, [r4, r3]
 8001ef6:	4290      	cmp	r0, r2
    const uint8_t *tag = frame + HDR_SIZE + bs->pos/8;
 8001ef8:	4423      	add	r3, r4
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001efa:	d007      	beq.n	8001f0c <mp3dec_check_vbrtag+0x60>
 8001efc:	4934      	ldr	r1, [pc, #208]	; (8001fd0 <mp3dec_check_vbrtag+0x124>)
 8001efe:	7808      	ldrb	r0, [r1, #0]
 8001f00:	4290      	cmp	r0, r2
 8001f02:	d01a      	beq.n	8001f3a <mp3dec_check_vbrtag+0x8e>
        return 0; /* side info corrupted */
 8001f04:	2000      	movs	r0, #0
            return 0;
        *delay   = ((tag[0] << 4) | (tag[1] >> 4)) + (528 + 1);
        *padding = (((tag[1] & 0xF) << 8) | tag[2]) - (528 + 1);
    }
    return 1;
}
 8001f06:	b020      	add	sp, #128	; 0x80
 8001f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001f0c:	7848      	ldrb	r0, [r1, #1]
 8001f0e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f12:	4560      	cmp	r0, ip
 8001f14:	f103 0e01 	add.w	lr, r3, #1
 8001f18:	d1f0      	bne.n	8001efc <mp3dec_check_vbrtag+0x50>
 8001f1a:	7888      	ldrb	r0, [r1, #2]
 8001f1c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
 8001f20:	4560      	cmp	r0, ip
 8001f22:	d1eb      	bne.n	8001efc <mp3dec_check_vbrtag+0x50>
 8001f24:	78c8      	ldrb	r0, [r1, #3]
 8001f26:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8001f2a:	4288      	cmp	r0, r1
 8001f2c:	d1e6      	bne.n	8001efc <mp3dec_check_vbrtag+0x50>
 8001f2e:	e014      	b.n	8001f5a <mp3dec_check_vbrtag+0xae>
        get_bits(bs, 16);
 8001f30:	4640      	mov	r0, r8
 8001f32:	2110      	movs	r1, #16
 8001f34:	f7fe fe64 	bl	8000c00 <get_bits>
 8001f38:	e7cd      	b.n	8001ed6 <mp3dec_check_vbrtag+0x2a>
    if (memcmp(g_xing_tag, tag, 4) && memcmp(g_info_tag, tag, 4))
 8001f3a:	784a      	ldrb	r2, [r1, #1]
 8001f3c:	7858      	ldrb	r0, [r3, #1]
 8001f3e:	4282      	cmp	r2, r0
 8001f40:	f103 0c01 	add.w	ip, r3, #1
 8001f44:	d1de      	bne.n	8001f04 <mp3dec_check_vbrtag+0x58>
 8001f46:	788a      	ldrb	r2, [r1, #2]
 8001f48:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8001f4c:	4282      	cmp	r2, r0
 8001f4e:	d1d9      	bne.n	8001f04 <mp3dec_check_vbrtag+0x58>
 8001f50:	78c9      	ldrb	r1, [r1, #3]
 8001f52:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8001f56:	4291      	cmp	r1, r2
 8001f58:	d1d4      	bne.n	8001f04 <mp3dec_check_vbrtag+0x58>
    int flags = tag[7];
 8001f5a:	79da      	ldrb	r2, [r3, #7]
    if (!((flags & FRAMES_FLAG)))
 8001f5c:	07d1      	lsls	r1, r2, #31
 8001f5e:	d532      	bpl.n	8001fc6 <mp3dec_check_vbrtag+0x11a>
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	ba09      	rev	r1, r1
    *frames = (uint32_t)(tag[0] << 24) | (tag[1] << 16) | (tag[2] << 8) | tag[3];
 8001f64:	6039      	str	r1, [r7, #0]
    if (flags & BYTES_FLAG)
 8001f66:	0797      	lsls	r7, r2, #30
        tag += 4;
 8001f68:	bf4c      	ite	mi
 8001f6a:	3310      	addmi	r3, #16
    tag += 4;
 8001f6c:	330c      	addpl	r3, #12
    if (flags & TOC_FLAG)
 8001f6e:	0750      	lsls	r0, r2, #29
        tag += 100;
 8001f70:	bf48      	it	mi
 8001f72:	3364      	addmi	r3, #100	; 0x64
    if (flags & VBR_SCALE_FLAG)
 8001f74:	0711      	lsls	r1, r2, #28
    *delay = *padding = 0;
 8001f76:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001f78:	f04f 0200 	mov.w	r2, #0
        tag += 4;
 8001f7c:	bf48      	it	mi
 8001f7e:	3304      	addmi	r3, #4
    *delay = *padding = 0;
 8001f80:	600a      	str	r2, [r1, #0]
 8001f82:	6032      	str	r2, [r6, #0]
    if (*tag)
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	b1d2      	cbz	r2, 8001fbe <mp3dec_check_vbrtag+0x112>
        if (tag - frame + 14 >= frame_size)
 8001f88:	1b18      	subs	r0, r3, r4
 8001f8a:	3023      	adds	r0, #35	; 0x23
 8001f8c:	42a8      	cmp	r0, r5
 8001f8e:	dab9      	bge.n	8001f04 <mp3dec_check_vbrtag+0x58>
        *delay   = ((tag[0] << 4) | (tag[1] >> 4)) + (528 + 1);
 8001f90:	7d9a      	ldrb	r2, [r3, #22]
 8001f92:	7d59      	ldrb	r1, [r3, #21]
 8001f94:	0912      	lsrs	r2, r2, #4
 8001f96:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8001f9a:	f202 2211 	addw	r2, r2, #529	; 0x211
 8001f9e:	6032      	str	r2, [r6, #0]
        *padding = (((tag[1] & 0xF) << 8) | tag[2]) - (528 + 1);
 8001fa0:	7d9a      	ldrb	r2, [r3, #22]
 8001fa2:	7dd9      	ldrb	r1, [r3, #23]
 8001fa4:	0213      	lsls	r3, r2, #8
 8001fa6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001faa:	430b      	orrs	r3, r1
 8001fac:	f46f 7204 	mvn.w	r2, #528	; 0x210
 8001fb0:	4413      	add	r3, r2
 8001fb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    return 1;
 8001fb4:	2001      	movs	r0, #1
        *padding = (((tag[1] & 0xF) << 8) | tag[2]) - (528 + 1);
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	b020      	add	sp, #128	; 0x80
 8001fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 1;
 8001fbe:	2001      	movs	r0, #1
}
 8001fc0:	b020      	add	sp, #128	; 0x80
 8001fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
 8001fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fca:	e79c      	b.n	8001f06 <mp3dec_check_vbrtag+0x5a>
 8001fcc:	080115ac 	.word	0x080115ac
 8001fd0:	08010a3c 	.word	0x08010a3c

08001fd4 <prvMp3PlayerMiniIoSeek>:
  * @brief  custom minimp3 io seek function
  * @param  seek position
  * @param  mp3 file pointer
  * @retval FRESULT code
  */
static int prvMp3PlayerMiniIoSeek(uint64_t ullPosition, void* pvUserData){
 8001fd4:	b508      	push	{r3, lr}
    return f_lseek((FIL*) pvUserData, ullPosition);
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f00a fd71 	bl	800cac0 <f_lseek>
}
 8001fde:	bd08      	pop	{r3, pc}

08001fe0 <prvMp3PlayerMiniIoRead>:
static size_t prvMp3PlayerMiniIoRead(void* pvBuf, size_t xSize, void* pvUserData){
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	b082      	sub	sp, #8
    f_read((FIL*) pvUserData, pvBuf, (unsigned int) xSize, (unsigned int*) &uxBytesRead);
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	ab01      	add	r3, sp, #4
 8001fea:	4601      	mov	r1, r0
 8001fec:	4620      	mov	r0, r4
 8001fee:	f00a fb91 	bl	800c714 <f_read>
}
 8001ff2:	9801      	ldr	r0, [sp, #4]
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <prvMp3PlayerResume>:
static void prvMp3PlayerResume(){
 8001ff8:	b510      	push	{r4, lr}
    if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, ulUpdateLCDGetVolume(), ulUpdateLCDGetSampleRate()) != 0){                    /* Initialize MP3 player (Codec, DMA, I2C) */
 8001ffa:	f002 fb13 	bl	8004624 <ulUpdateLCDGetVolume>
 8001ffe:	4604      	mov	r4, r0
 8002000:	f002 fb1c 	bl	800463c <ulUpdateLCDGetSampleRate>
 8002004:	b2e1      	uxtb	r1, r4
 8002006:	4602      	mov	r2, r0
 8002008:	2004      	movs	r0, #4
 800200a:	f002 ff39 	bl	8004e80 <BSP_AUDIO_OUT_Init>
 800200e:	b958      	cbnz	r0, 8002028 <prvMp3PlayerResume+0x30>
    if (BSP_AUDIO_OUT_Play((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE) != 0){                                          /*start playing MP3*/
 8002010:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <prvMp3PlayerResume+0x38>)
 8002016:	f002 fe19 	bl	8004c4c <BSP_AUDIO_OUT_Play>
 800201a:	b108      	cbz	r0, 8002020 <prvMp3PlayerResume+0x28>
        Error_Handler();
 800201c:	f7fe fc30 	bl	8000880 <Error_Handler>
    ucOldPauseStateFlag = 0;                                                                                                /*de-assert ucOldPauseStateFlag*/
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <prvMp3PlayerResume+0x3c>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	bd10      	pop	{r4, pc}
        Error_Handler();                                                                                                        /*error if mp3 player initialization fails*/
 8002028:	f7fe fc2a 	bl	8000880 <Error_Handler>
 800202c:	e7f0      	b.n	8002010 <prvMp3PlayerResume+0x18>
 800202e:	bf00      	nop
 8002030:	20002388 	.word	0x20002388
 8002034:	20004788 	.word	0x20004788

08002038 <mp3dec_skip_id3v2>:
    if (buf_size >= MINIMP3_ID3_DETECT_SIZE && !memcmp(buf, "ID3", 3) && !((buf[5] & 15) || (buf[6] & 0x80) || (buf[7] & 0x80) || (buf[8] & 0x80) || (buf[9] & 0x80)))
 8002038:	2909      	cmp	r1, #9
 800203a:	d902      	bls.n	8002042 <mp3dec_skip_id3v2+0xa>
 800203c:	7803      	ldrb	r3, [r0, #0]
 800203e:	2b49      	cmp	r3, #73	; 0x49
 8002040:	d001      	beq.n	8002046 <mp3dec_skip_id3v2+0xe>
    return 0;
 8002042:	2000      	movs	r0, #0
}
 8002044:	4770      	bx	lr
    if (buf_size >= MINIMP3_ID3_DETECT_SIZE && !memcmp(buf, "ID3", 3) && !((buf[5] & 15) || (buf[6] & 0x80) || (buf[7] & 0x80) || (buf[8] & 0x80) || (buf[9] & 0x80)))
 8002046:	7843      	ldrb	r3, [r0, #1]
 8002048:	2b44      	cmp	r3, #68	; 0x44
 800204a:	d1fa      	bne.n	8002042 <mp3dec_skip_id3v2+0xa>
 800204c:	7883      	ldrb	r3, [r0, #2]
 800204e:	2b33      	cmp	r3, #51	; 0x33
 8002050:	d1f7      	bne.n	8002042 <mp3dec_skip_id3v2+0xa>
{
 8002052:	b430      	push	{r4, r5}
    if (buf_size >= MINIMP3_ID3_DETECT_SIZE && !memcmp(buf, "ID3", 3) && !((buf[5] & 15) || (buf[6] & 0x80) || (buf[7] & 0x80) || (buf[8] & 0x80) || (buf[9] & 0x80)))
 8002054:	7945      	ldrb	r5, [r0, #5]
 8002056:	f015 030f 	ands.w	r3, r5, #15
 800205a:	d11b      	bne.n	8002094 <mp3dec_skip_id3v2+0x5c>
 800205c:	7981      	ldrb	r1, [r0, #6]
 800205e:	060a      	lsls	r2, r1, #24
 8002060:	d418      	bmi.n	8002094 <mp3dec_skip_id3v2+0x5c>
 8002062:	79c2      	ldrb	r2, [r0, #7]
 8002064:	0614      	lsls	r4, r2, #24
 8002066:	d415      	bmi.n	8002094 <mp3dec_skip_id3v2+0x5c>
 8002068:	7a04      	ldrb	r4, [r0, #8]
 800206a:	f014 0f80 	tst.w	r4, #128	; 0x80
 800206e:	d114      	bne.n	800209a <mp3dec_skip_id3v2+0x62>
 8002070:	7a40      	ldrb	r0, [r0, #9]
 8002072:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002076:	d110      	bne.n	800209a <mp3dec_skip_id3v2+0x62>
        size_t id3v2size = (((buf[6] & 0x7f) << 21) | ((buf[7] & 0x7f) << 14) | ((buf[8] & 0x7f) << 7) | (buf[9] & 0x7f)) + 10;
 8002078:	0393      	lsls	r3, r2, #14
 800207a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800207e:	4303      	orrs	r3, r0
 8002080:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
        if ((buf[5] & 16))
 8002084:	06ea      	lsls	r2, r5, #27
        size_t id3v2size = (((buf[6] & 0x7f) << 21) | ((buf[7] & 0x7f) << 14) | ((buf[8] & 0x7f) << 7) | (buf[9] & 0x7f)) + 10;
 8002086:	f103 000a 	add.w	r0, r3, #10
        if ((buf[5] & 16))
 800208a:	d501      	bpl.n	8002090 <mp3dec_skip_id3v2+0x58>
            id3v2size += 10; /* footer */
 800208c:	f103 0014 	add.w	r0, r3, #20
}
 8002090:	bc30      	pop	{r4, r5}
 8002092:	4770      	bx	lr
    return 0;
 8002094:	2000      	movs	r0, #0
}
 8002096:	bc30      	pop	{r4, r5}
 8002098:	4770      	bx	lr
    return 0;
 800209a:	4618      	mov	r0, r3
 800209c:	e7f8      	b.n	8002090 <mp3dec_skip_id3v2+0x58>
 800209e:	bf00      	nop

080020a0 <mp3d_find_frame>:
    }
    return 1;
}

static int mp3d_find_frame(const uint8_t *mp3, int mp3_bytes, int *free_format_bytes, int *ptr_frame_bytes)
{
 80020a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i, k;
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 80020a4:	f1a1 0904 	sub.w	r9, r1, #4
{
 80020a8:	b087      	sub	sp, #28
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 80020aa:	f1b9 0f00 	cmp.w	r9, #0
{
 80020ae:	9101      	str	r1, [sp, #4]
 80020b0:	9202      	str	r2, [sp, #8]
 80020b2:	9305      	str	r3, [sp, #20]
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 80020b4:	dd65      	ble.n	8002182 <mp3d_find_frame+0xe2>
 80020b6:	4605      	mov	r5, r0
 80020b8:	f04f 0800 	mov.w	r8, #0
 80020bc:	e005      	b.n	80020ca <mp3d_find_frame+0x2a>
 80020be:	f108 0801 	add.w	r8, r8, #1
 80020c2:	45c8      	cmp	r8, r9
 80020c4:	f105 0501 	add.w	r5, r5, #1
 80020c8:	d05b      	beq.n	8002182 <mp3d_find_frame+0xe2>
    {
        if (hdr_valid(mp3))
 80020ca:	4628      	mov	r0, r5
 80020cc:	f7fe fdca 	bl	8000c64 <hdr_valid>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d0f4      	beq.n	80020be <mp3d_find_frame+0x1e>
        {
            int frame_bytes = hdr_frame_bytes(mp3, *free_format_bytes);
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4628      	mov	r0, r5
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	f7fe fe03 	bl	8000ce4 <hdr_frame_bytes>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80020de:	78aa      	ldrb	r2, [r5, #2]
            int frame_bytes = hdr_frame_bytes(mp3, *free_format_bytes);
 80020e0:	4683      	mov	fp, r0
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80020e2:	0790      	lsls	r0, r2, #30
 80020e4:	d556      	bpl.n	8002194 <mp3d_find_frame+0xf4>
 80020e6:	786a      	ldrb	r2, [r5, #1]
 80020e8:	f002 0206 	and.w	r2, r2, #6
 80020ec:	2a06      	cmp	r2, #6
 80020ee:	bf0c      	ite	eq
 80020f0:	f10b 0304 	addeq.w	r3, fp, #4
 80020f4:	f10b 0301 	addne.w	r3, fp, #1
 80020f8:	9304      	str	r3, [sp, #16]
            int frame_and_padding = frame_bytes + hdr_padding(mp3);

            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 80020fa:	f1bb 0f00 	cmp.w	fp, #0
 80020fe:	d04e      	beq.n	800219e <mp3d_find_frame+0xfe>
 8002100:	9f04      	ldr	r7, [sp, #16]
 8002102:	eb07 0a08 	add.w	sl, r7, r8
                    frame_and_padding = k;
                    frame_bytes = fb;
                    *free_format_bytes = fb;
                }
            }
            if ((frame_bytes && i + frame_and_padding <= mp3_bytes &&
 8002106:	9b01      	ldr	r3, [sp, #4]
 8002108:	4553      	cmp	r3, sl
 800210a:	db2c      	blt.n	8002166 <mp3d_find_frame+0xc6>
 800210c:	9b01      	ldr	r3, [sp, #4]
 800210e:	f8cd 900c 	str.w	r9, [sp, #12]
    for (i = 0, nmatch = 0; nmatch < MAX_FRAME_SYNC_MATCHES; nmatch++)
 8002112:	2400      	movs	r4, #0
 8002114:	eba3 0308 	sub.w	r3, r3, r8
 8002118:	462e      	mov	r6, r5
 800211a:	46a1      	mov	r9, r4
 800211c:	469a      	mov	sl, r3
        i += hdr_frame_bytes(hdr + i, frame_bytes) + hdr_padding(hdr + i);
 800211e:	4659      	mov	r1, fp
 8002120:	4630      	mov	r0, r6
 8002122:	f7fe fddf 	bl	8000ce4 <hdr_frame_bytes>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 8002126:	78b1      	ldrb	r1, [r6, #2]
 8002128:	078b      	lsls	r3, r1, #30
        i += hdr_frame_bytes(hdr + i, frame_bytes) + hdr_padding(hdr + i);
 800212a:	4602      	mov	r2, r0
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 800212c:	d506      	bpl.n	800213c <mp3d_find_frame+0x9c>
 800212e:	7871      	ldrb	r1, [r6, #1]
 8002130:	f001 0106 	and.w	r1, r1, #6
 8002134:	2906      	cmp	r1, #6
 8002136:	bf0c      	ite	eq
 8002138:	3204      	addeq	r2, #4
 800213a:	3201      	addne	r2, #1
        i += hdr_frame_bytes(hdr + i, frame_bytes) + hdr_padding(hdr + i);
 800213c:	4491      	add	r9, r2
        if (i + HDR_SIZE > mp3_bytes)
 800213e:	f109 0203 	add.w	r2, r9, #3
        if (!hdr_compare(hdr, hdr + i))
 8002142:	eb05 0609 	add.w	r6, r5, r9
        if (i + HDR_SIZE > mp3_bytes)
 8002146:	4592      	cmp	sl, r2
        if (!hdr_compare(hdr, hdr + i))
 8002148:	4628      	mov	r0, r5
 800214a:	4631      	mov	r1, r6
        if (i + HDR_SIZE > mp3_bytes)
 800214c:	f340 8088 	ble.w	8002260 <mp3d_find_frame+0x1c0>
        if (!hdr_compare(hdr, hdr + i))
 8002150:	f7fe fda4 	bl	8000c9c <hdr_compare>
    for (i = 0, nmatch = 0; nmatch < MAX_FRAME_SYNC_MATCHES; nmatch++)
 8002154:	3401      	adds	r4, #1
        if (!hdr_compare(hdr, hdr + i))
 8002156:	b120      	cbz	r0, 8002162 <mp3d_find_frame+0xc2>
    for (i = 0, nmatch = 0; nmatch < MAX_FRAME_SYNC_MATCHES; nmatch++)
 8002158:	2c03      	cmp	r4, #3
 800215a:	d1e0      	bne.n	800211e <mp3d_find_frame+0x7e>
                mp3d_match_frame(mp3, mp3_bytes - i, frame_bytes)) ||
                (!i && frame_and_padding == mp3_bytes))
            {
                *ptr_frame_bytes = frame_and_padding;
 800215c:	9b05      	ldr	r3, [sp, #20]
 800215e:	601f      	str	r7, [r3, #0]
                return i;
 8002160:	e014      	b.n	800218c <mp3d_find_frame+0xec>
 8002162:	f8dd 900c 	ldr.w	r9, [sp, #12]
                mp3d_match_frame(mp3, mp3_bytes - i, frame_bytes)) ||
 8002166:	f1b8 0f00 	cmp.w	r8, #0
 800216a:	d067      	beq.n	800223c <mp3d_find_frame+0x19c>
            }
            *free_format_bytes = 0;
 800216c:	9b02      	ldr	r3, [sp, #8]
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 800216e:	f108 0801 	add.w	r8, r8, #1
            *free_format_bytes = 0;
 8002172:	461a      	mov	r2, r3
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 8002174:	45c8      	cmp	r8, r9
            *free_format_bytes = 0;
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	6013      	str	r3, [r2, #0]
    for (i = 0; i < mp3_bytes - HDR_SIZE; i++, mp3++)
 800217c:	f105 0501 	add.w	r5, r5, #1
 8002180:	d1a3      	bne.n	80020ca <mp3d_find_frame+0x2a>
        }
    }
    *ptr_frame_bytes = 0;
 8002182:	9a05      	ldr	r2, [sp, #20]
    return mp3_bytes;
 8002184:	f8dd 8004 	ldr.w	r8, [sp, #4]
    *ptr_frame_bytes = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	4640      	mov	r0, r8
 800218e:	b007      	add	sp, #28
 8002190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int frame_bytes = hdr_frame_bytes(mp3, *free_format_bytes);
 8002194:	f8cd b010 	str.w	fp, [sp, #16]
            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 8002198:	f1bb 0f00 	cmp.w	fp, #0
 800219c:	d1b0      	bne.n	8002100 <mp3d_find_frame+0x60>
 800219e:	f108 33ff 	add.w	r3, r8, #4294967295
 80021a2:	2404      	movs	r4, #4
 80021a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80021a8:	469b      	mov	fp, r3
 80021aa:	9b03      	ldr	r3, [sp, #12]
 80021ac:	eb03 0644 	add.w	r6, r3, r4, lsl #1
 80021b0:	45b1      	cmp	r9, r6
 80021b2:	dd52      	ble.n	800225a <mp3d_find_frame+0x1ba>
 80021b4:	4627      	mov	r7, r4
                if (hdr_compare(mp3, mp3 + k))
 80021b6:	1929      	adds	r1, r5, r4
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7fe fd6f 	bl	8000c9c <hdr_compare>
 80021be:	3401      	adds	r4, #1
 80021c0:	b380      	cbz	r0, 8002224 <mp3d_find_frame+0x184>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80021c2:	78ab      	ldrb	r3, [r5, #2]
 80021c4:	0799      	lsls	r1, r3, #30
 80021c6:	d53f      	bpl.n	8002248 <mp3d_find_frame+0x1a8>
 80021c8:	786b      	ldrb	r3, [r5, #1]
 80021ca:	f003 0306 	and.w	r3, r3, #6
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	bf0c      	ite	eq
 80021d2:	f1a7 0804 	subeq.w	r8, r7, #4
 80021d6:	f107 38ff 	addne.w	r8, r7, #4294967295
 80021da:	192a      	adds	r2, r5, r4
 80021dc:	7852      	ldrb	r2, [r2, #1]
 80021de:	0792      	lsls	r2, r2, #30
 80021e0:	d530      	bpl.n	8002244 <mp3d_find_frame+0x1a4>
 80021e2:	5d2a      	ldrb	r2, [r5, r4]
 80021e4:	f002 0206 	and.w	r2, r2, #6
 80021e8:	2a06      	cmp	r2, #6
 80021ea:	bf0c      	ite	eq
 80021ec:	f108 0104 	addeq.w	r1, r8, #4
 80021f0:	f108 0101 	addne.w	r1, r8, #1
 80021f4:	eb0b 0a04 	add.w	sl, fp, r4
                    if (i + k + nextfb + HDR_SIZE > mp3_bytes || !hdr_compare(mp3, mp3 + k + nextfb))
 80021f8:	eb0a 0201 	add.w	r2, sl, r1
 80021fc:	9b01      	ldr	r3, [sp, #4]
 80021fe:	3203      	adds	r2, #3
 8002200:	429a      	cmp	r2, r3
 8002202:	da0f      	bge.n	8002224 <mp3d_find_frame+0x184>
 8002204:	4439      	add	r1, r7
 8002206:	4429      	add	r1, r5
 8002208:	4628      	mov	r0, r5
 800220a:	f7fe fd47 	bl	8000c9c <hdr_compare>
 800220e:	b148      	cbz	r0, 8002224 <mp3d_find_frame+0x184>
                    *free_format_bytes = fb;
 8002210:	9b02      	ldr	r3, [sp, #8]
 8002212:	f8c3 8000 	str.w	r8, [r3]
            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 8002216:	f1b8 0f00 	cmp.w	r8, #0
 800221a:	d017      	beq.n	800224c <mp3d_find_frame+0x1ac>
 800221c:	46c3      	mov	fp, r8
 800221e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002222:	e770      	b.n	8002106 <mp3d_find_frame+0x66>
 8002224:	f5b4 6f10 	cmp.w	r4, #2304	; 0x900
 8002228:	d003      	beq.n	8002232 <mp3d_find_frame+0x192>
 800222a:	3602      	adds	r6, #2
 800222c:	454e      	cmp	r6, r9
 800222e:	4627      	mov	r7, r4
 8002230:	dbc1      	blt.n	80021b6 <mp3d_find_frame+0x116>
 8002232:	e9dd 8703 	ldrd	r8, r7, [sp, #12]
                mp3d_match_frame(mp3, mp3_bytes - i, frame_bytes)) ||
 8002236:	f1b8 0f00 	cmp.w	r8, #0
 800223a:	d197      	bne.n	800216c <mp3d_find_frame+0xcc>
                (!i && frame_and_padding == mp3_bytes))
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	42bb      	cmp	r3, r7
 8002240:	d194      	bne.n	800216c <mp3d_find_frame+0xcc>
 8002242:	e78b      	b.n	800215c <mp3d_find_frame+0xbc>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 8002244:	4641      	mov	r1, r8
 8002246:	e7d5      	b.n	80021f4 <mp3d_find_frame+0x154>
 8002248:	46b8      	mov	r8, r7
 800224a:	e7c6      	b.n	80021da <mp3d_find_frame+0x13a>
            for (k = HDR_SIZE; !frame_bytes && k < MAX_FREE_FORMAT_FRAME_SIZE && i + 2*k < mp3_bytes - HDR_SIZE; k++)
 800224c:	f5b4 6f10 	cmp.w	r4, #2304	; 0x900
 8002250:	9704      	str	r7, [sp, #16]
 8002252:	d1aa      	bne.n	80021aa <mp3d_find_frame+0x10a>
 8002254:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002258:	e785      	b.n	8002166 <mp3d_find_frame+0xc6>
 800225a:	4698      	mov	r8, r3
 800225c:	9f04      	ldr	r7, [sp, #16]
 800225e:	e782      	b.n	8002166 <mp3d_find_frame+0xc6>
 8002260:	f8dd 900c 	ldr.w	r9, [sp, #12]
            if ((frame_bytes && i + frame_and_padding <= mp3_bytes &&
 8002264:	2c00      	cmp	r4, #0
 8002266:	f43f af7e 	beq.w	8002166 <mp3d_find_frame+0xc6>
 800226a:	e777      	b.n	800215c <mp3d_find_frame+0xbc>

0800226c <mp3dec_decode_frame>:
{
    dec->header[0] = 0;
}

int mp3dec_decode_frame(mp3dec_t *dec, const uint8_t *mp3, int mp3_bytes, mp3d_sample_t *pcm, mp3dec_frame_info_t *info)
{
 800226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002270:	ed2d 8b04 	vpush	{d8-d9}
 8002274:	f5ad 4d87 	sub.w	sp, sp, #17280	; 0x4380
 8002278:	b085      	sub	sp, #20
 800227a:	4615      	mov	r5, r2
    int i = 0, igr, frame_size = 0, success = 1;
    const uint8_t *hdr;
    bs_t bs_frame[1];
    mp3dec_scratch_t scratch;

    if (mp3_bytes > 4 && dec->header[0] == 0xff && hdr_compare(dec->header, mp3))
 800227c:	2d04      	cmp	r5, #4
    int i = 0, igr, frame_size = 0, success = 1;
 800227e:	f04f 0200 	mov.w	r2, #0
{
 8002282:	900d      	str	r0, [sp, #52]	; 0x34
 8002284:	9312      	str	r3, [sp, #72]	; 0x48
    int i = 0, igr, frame_size = 0, success = 1;
 8002286:	9223      	str	r2, [sp, #140]	; 0x8c
{
 8002288:	910e      	str	r1, [sp, #56]	; 0x38
    if (mp3_bytes > 4 && dec->header[0] == 0xff && hdr_compare(dec->header, mp3))
 800228a:	dd07      	ble.n	800229c <mp3dec_decode_frame+0x30>
 800228c:	f641 0308 	movw	r3, #6152	; 0x1808
 8002290:	4602      	mov	r2, r0
 8002292:	4418      	add	r0, r3
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	2bff      	cmp	r3, #255	; 0xff
 8002298:	f000 8202 	beq.w	80026a0 <mp3dec_decode_frame+0x434>
            frame_size = 0;
        }
    }
    if (!frame_size)
    {
        memset(dec, 0, sizeof(mp3dec_t));
 800229c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800229e:	f641 220c 	movw	r2, #6668	; 0x1a0c
 80022a2:	2100      	movs	r1, #0
 80022a4:	4620      	mov	r0, r4
 80022a6:	f00d fe76 	bl	800ff96 <memset>
        i = mp3d_find_frame(mp3, mp3_bytes, &dec->free_format_bytes, &frame_size);
 80022aa:	f504 52c0 	add.w	r2, r4, #6144	; 0x1800
 80022ae:	3204      	adds	r2, #4
 80022b0:	ab23      	add	r3, sp, #140	; 0x8c
 80022b2:	4629      	mov	r1, r5
 80022b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80022b6:	f7ff fef3 	bl	80020a0 <mp3d_find_frame>
        if (!frame_size || i + frame_size > mp3_bytes)
 80022ba:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80022bc:	2c00      	cmp	r4, #0
 80022be:	f000 81e2 	beq.w	8002686 <mp3dec_decode_frame+0x41a>
 80022c2:	1823      	adds	r3, r4, r0
 80022c4:	42ab      	cmp	r3, r5
 80022c6:	f300 81de 	bgt.w	8002686 <mp3dec_decode_frame+0x41a>
 80022ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80022cc:	4402      	add	r2, r0
 80022ce:	920e      	str	r2, [sp, #56]	; 0x38
            return 0;
        }
    }

    hdr = mp3 + i;
    memcpy(dec->header, hdr, HDR_SIZE);
 80022d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80022d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80022d4:	6829      	ldr	r1, [r5, #0]
 80022d6:	f641 0208 	movw	r2, #6152	; 0x1808
 80022da:	50b1      	str	r1, [r6, r2]
    info->frame_bytes = i + frame_size;
 80022dc:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 80022e0:	3248      	adds	r2, #72	; 0x48
    info->frame_offset = i;
    info->channels = HDR_IS_MONO(hdr) ? 1 : 2;
 80022e2:	f50d 4187 	add.w	r1, sp, #17280	; 0x4380
    info->frame_bytes = i + frame_size;
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	6013      	str	r3, [r2, #0]
    info->frame_offset = i;
 80022ea:	6050      	str	r0, [r2, #4]
    info->channels = HDR_IS_MONO(hdr) ? 1 : 2;
 80022ec:	78eb      	ldrb	r3, [r5, #3]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 80022ee:	4864      	ldr	r0, [pc, #400]	; (8002480 <mp3dec_decode_frame+0x214>)
    info->channels = HDR_IS_MONO(hdr) ? 1 : 2;
 80022f0:	3148      	adds	r1, #72	; 0x48
 80022f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022f6:	2bc0      	cmp	r3, #192	; 0xc0
 80022f8:	6809      	ldr	r1, [r1, #0]
 80022fa:	462a      	mov	r2, r5
 80022fc:	bf14      	ite	ne
 80022fe:	2302      	movne	r3, #2
 8002300:	2301      	moveq	r3, #1
 8002302:	608b      	str	r3, [r1, #8]
 8002304:	462e      	mov	r6, r5
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8002306:	7892      	ldrb	r2, [r2, #2]
 8002308:	7873      	ldrb	r3, [r6, #1]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 800230a:	4d5e      	ldr	r5, [pc, #376]	; (8002484 <mp3dec_decode_frame+0x218>)
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 800230c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002310:	f083 0108 	eor.w	r1, r3, #8
 8002314:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002318:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800231c:	f083 0310 	eor.w	r3, r3, #16
 8002320:	40ca      	lsrs	r2, r1
 8002322:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
    info->hz = hdr_sample_rate_hz(hdr);
 800232a:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 800232e:	3248      	adds	r2, #72	; 0x48
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	60d3      	str	r3, [r2, #12]
    info->layer = 4 - HDR_GET_LAYER(hdr);
 8002334:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 8002338:	7872      	ldrb	r2, [r6, #1]
 800233a:	3348      	adds	r3, #72	; 0x48
 800233c:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1c2 0204 	rsb	r2, r2, #4
 8002346:	611a      	str	r2, [r3, #16]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8002348:	7873      	ldrb	r3, [r6, #1]
 800234a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 800234e:	0041      	lsls	r1, r0, #1
 8002350:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002354:	4401      	add	r1, r0
 8002356:	3b01      	subs	r3, #1
 8002358:	78b0      	ldrb	r0, [r6, #2]
 800235a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800235e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002362:	440b      	add	r3, r1
 8002364:	eb05 1110 	add.w	r1, r5, r0, lsr #4
 8002368:	5ccb      	ldrb	r3, [r1, r3]
    info->bitrate_kbps = hdr_bitrate_kbps(hdr);
 800236a:	f50d 4187 	add.w	r1, sp, #17280	; 0x4380
 800236e:	3148      	adds	r1, #72	; 0x48
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8002370:	005b      	lsls	r3, r3, #1
    info->bitrate_kbps = hdr_bitrate_kbps(hdr);
 8002372:	6809      	ldr	r1, [r1, #0]
 8002374:	614b      	str	r3, [r1, #20]

    if (!pcm)
 8002376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8203 	beq.w	8002784 <mp3dec_decode_frame+0x518>
    {
        return hdr_frame_samples(hdr);
    }

    bs_init(bs_frame, hdr + HDR_SIZE, frame_size - HDR_SIZE);
    if (HDR_IS_CRC(hdr))
 800237e:	980e      	ldr	r0, [sp, #56]	; 0x38
    bs_init(bs_frame, hdr + HDR_SIZE, frame_size - HDR_SIZE);
 8002380:	1f23      	subs	r3, r4, #4
    bs->limit = bytes*8;
 8002382:	00db      	lsls	r3, r3, #3
    if (HDR_IS_CRC(hdr))
 8002384:	7841      	ldrb	r1, [r0, #1]
    bs->limit = bytes*8;
 8002386:	9327      	str	r3, [sp, #156]	; 0x9c
    bs->pos   = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	9326      	str	r3, [sp, #152]	; 0x98
    if (HDR_IS_CRC(hdr))
 800238c:	07c9      	lsls	r1, r1, #31
    bs_init(bs_frame, hdr + HDR_SIZE, frame_size - HDR_SIZE);
 800238e:	f100 0304 	add.w	r3, r0, #4
    bs->buf   = data;
 8002392:	9325      	str	r3, [sp, #148]	; 0x94
    if (HDR_IS_CRC(hdr))
 8002394:	f140 8222 	bpl.w	80027dc <mp3dec_decode_frame+0x570>
    {
        get_bits(bs_frame, 16);
    }

    if (info->layer == 3)
 8002398:	2a03      	cmp	r2, #3
 800239a:	f000 822b 	beq.w	80027f4 <mp3dec_decode_frame+0x588>
    int mode = HDR_GET_STEREO_MODE(hdr);
 800239e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023a0:	78db      	ldrb	r3, [r3, #3]
 80023a2:	0999      	lsrs	r1, r3, #6
    int nbands, stereo_bands = (mode == MODE_MONO) ? 0 : (mode == MODE_JOINT_STEREO) ? (HDR_GET_STEREO_MODE_EXT(hdr) << 2) + 4 : 32;
 80023a4:	2903      	cmp	r1, #3
 80023a6:	f000 82e3 	beq.w	8002970 <mp3dec_decode_frame+0x704>
 80023aa:	2901      	cmp	r1, #1
 80023ac:	f000 82ec 	beq.w	8002988 <mp3dec_decode_frame+0x71c>
 80023b0:	2320      	movs	r3, #32
    if (HDR_IS_LAYER_1(hdr))
 80023b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80023b4:	7862      	ldrb	r2, [r4, #1]
 80023b6:	f002 0006 	and.w	r0, r2, #6
 80023ba:	2806      	cmp	r0, #6
 80023bc:	f000 8203 	beq.w	80027c6 <mp3dec_decode_frame+0x55a>
    } else if (!HDR_TEST_MPEG1(hdr))
 80023c0:	0710      	lsls	r0, r2, #28
 80023c2:	f140 82d7 	bpl.w	8002974 <mp3dec_decode_frame+0x708>
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 80023c6:	f3c2 0241 	ubfx	r2, r2, #1, #2
 80023ca:	3a01      	subs	r2, #1
        int sample_rate_idx = HDR_GET_SAMPLE_RATE(hdr);
 80023cc:	78a0      	ldrb	r0, [r4, #2]
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 80023ce:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80023d2:	442a      	add	r2, r5
 80023d4:	eb02 1210 	add.w	r2, r2, r0, lsr #4
        unsigned kbps = hdr_bitrate_kbps(hdr) >> (int)(mode != MODE_MONO);
 80023d8:	3903      	subs	r1, #3
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 80023da:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
        unsigned kbps = hdr_bitrate_kbps(hdr) >> (int)(mode != MODE_MONO);
 80023de:	bf18      	it	ne
 80023e0:	2101      	movne	r1, #1
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 80023e2:	0052      	lsls	r2, r2, #1
        if (!kbps) /* free-format */
 80023e4:	40ca      	lsrs	r2, r1
 80023e6:	f3c0 0081 	ubfx	r0, r0, #2, #2
 80023ea:	f040 82d9 	bne.w	80029a0 <mp3dec_decode_frame+0x734>
        } else if (kbps >= 96 && sample_rate_idx != 1)
 80023ee:	2801      	cmp	r0, #1
 80023f0:	f001 81e5 	beq.w	80037be <mp3dec_decode_frame+0x1552>
 80023f4:	f04f 0b1e 	mov.w	fp, #30
        alloc = g_alloc_L2M1;
 80023f8:	4e23      	ldr	r6, [pc, #140]	; (8002488 <mp3dec_decode_frame+0x21c>)
            nbands = 30;
 80023fa:	465d      	mov	r5, fp
        } else if (kbps >= 96 && sample_rate_idx != 1)
 80023fc:	f04f 093c 	mov.w	r9, #60	; 0x3c
    sci->total_bands = (uint8_t)nbands;
 8002400:	aa28      	add	r2, sp, #160	; 0xa0
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 8002402:	429d      	cmp	r5, r3
    sci->total_bands = (uint8_t)nbands;
 8002404:	9207      	str	r2, [sp, #28]
 8002406:	f882 b300 	strb.w	fp, [r2, #768]	; 0x300
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 800240a:	f280 81e4 	bge.w	80027d6 <mp3dec_decode_frame+0x56a>
 800240e:	9b07      	ldr	r3, [sp, #28]
    const uint8_t *ba_code_tab = g_bitalloc_code_tab;
 8002410:	4f1e      	ldr	r7, [pc, #120]	; (800248c <mp3dec_decode_frame+0x220>)
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 8002412:	f883 b301 	strb.w	fp, [r3, #769]	; 0x301
    int i, k = 0, ba_bits = 0;
 8002416:	2300      	movs	r3, #0
    for (i = 0; i < sci->total_bands; i++)
 8002418:	f8cd 900c 	str.w	r9, [sp, #12]
    int i, k = 0, ba_bits = 0;
 800241c:	469a      	mov	sl, r3
    for (i = 0; i < sci->total_bands; i++)
 800241e:	4698      	mov	r8, r3
 8002420:	4699      	mov	r9, r3
 8002422:	9b07      	ldr	r3, [sp, #28]
        if (i == k)
 8002424:	45d1      	cmp	r9, sl
        ba = ba_code_tab[get_bits(bs, ba_bits)];
 8002426:	a825      	add	r0, sp, #148	; 0x94
 8002428:	eb03 0449 	add.w	r4, r3, r9, lsl #1
        if (i == k)
 800242c:	d108      	bne.n	8002440 <mp3dec_decode_frame+0x1d4>
            k += subband_alloc->band_count;
 800242e:	f896 a002 	ldrb.w	sl, [r6, #2]
            ba_bits = subband_alloc->code_tab_width;
 8002432:	f896 8001 	ldrb.w	r8, [r6, #1]
            ba_code_tab = g_bitalloc_code_tab + subband_alloc->tab_offset;
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <mp3dec_decode_frame+0x220>)
 8002438:	f816 7b03 	ldrb.w	r7, [r6], #3
            k += subband_alloc->band_count;
 800243c:	44ca      	add	sl, r9
            ba_code_tab = g_bitalloc_code_tab + subband_alloc->tab_offset;
 800243e:	441f      	add	r7, r3
        ba = ba_code_tab[get_bits(bs, ba_bits)];
 8002440:	4641      	mov	r1, r8
 8002442:	f7fe fbdd 	bl	8000c00 <get_bits>
        if (i < sci->stereo_bands)
 8002446:	45d9      	cmp	r9, fp
        ba = ba_code_tab[get_bits(bs, ba_bits)];
 8002448:	5c39      	ldrb	r1, [r7, r0]
        sci->bitalloc[2*i] = ba;
 800244a:	f884 1302 	strb.w	r1, [r4, #770]	; 0x302
    for (i = 0; i < sci->total_bands; i++)
 800244e:	f109 0901 	add.w	r9, r9, #1
        if (i < sci->stereo_bands)
 8002452:	da04      	bge.n	800245e <mp3dec_decode_frame+0x1f2>
            ba = ba_code_tab[get_bits(bs, ba_bits)];
 8002454:	4641      	mov	r1, r8
 8002456:	a825      	add	r0, sp, #148	; 0x94
 8002458:	f7fe fbd2 	bl	8000c00 <get_bits>
 800245c:	5c39      	ldrb	r1, [r7, r0]
        sci->bitalloc[2*i + 1] = sci->stereo_bands ? ba : 0;
 800245e:	f1bb 0f00 	cmp.w	fp, #0
 8002462:	bf08      	it	eq
 8002464:	2100      	moveq	r1, #0
    for (i = 0; i < sci->total_bands; i++)
 8002466:	45a9      	cmp	r9, r5
        sci->bitalloc[2*i + 1] = sci->stereo_bands ? ba : 0;
 8002468:	f884 1303 	strb.w	r1, [r4, #771]	; 0x303
    for (i = 0; i < sci->total_bands; i++)
 800246c:	d1d9      	bne.n	8002422 <mp3dec_decode_frame+0x1b6>
 800246e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002472:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002474:	f20d 34a1 	addw	r4, sp, #929	; 0x3a1
 8002478:	eb04 0509 	add.w	r5, r4, r9
 800247c:	e01a      	b.n	80024b4 <mp3dec_decode_frame+0x248>
 800247e:	bf00      	nop
 8002480:	08010a30 	.word	0x08010a30
 8002484:	080115b0 	.word	0x080115b0
 8002488:	080108cc 	.word	0x080108cc
 800248c:	080108ec 	.word	0x080108ec
 8002490:	00000000 	.word	0x00000000
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 8002494:	7873      	ldrb	r3, [r6, #1]
 8002496:	f003 0306 	and.w	r3, r3, #6
 800249a:	2b06      	cmp	r3, #6
 800249c:	f04f 0102 	mov.w	r1, #2
 80024a0:	a825      	add	r0, sp, #148	; 0x94
 80024a2:	f000 812a 	beq.w	80026fa <mp3dec_decode_frame+0x48e>
 80024a6:	f7fe fbab 	bl	8000c00 <get_bits>
 80024aa:	b2c0      	uxtb	r0, r0
    for (i = 0; i < 2*sci->total_bands; i++)
 80024ac:	42a5      	cmp	r5, r4
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 80024ae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    for (i = 0; i < 2*sci->total_bands; i++)
 80024b2:	d008      	beq.n	80024c6 <mp3dec_decode_frame+0x25a>
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 80024b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1eb      	bne.n	8002494 <mp3dec_decode_frame+0x228>
 80024bc:	2006      	movs	r0, #6
    for (i = 0; i < 2*sci->total_bands; i++)
 80024be:	42a5      	cmp	r5, r4
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 80024c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    for (i = 0; i < 2*sci->total_bands; i++)
 80024c4:	d1f6      	bne.n	80024b4 <mp3dec_decode_frame+0x248>
 80024c6:	f8dd 801c 	ldr.w	r8, [sp, #28]
        float s = 0;
 80024ca:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8002490 <mp3dec_decode_frame+0x224>
    for (i = 0; i < bands; i++)
 80024ce:	f04f 0b00 	mov.w	fp, #0
    for (i = 0; i < 2*sci->total_bands; i++)
 80024d2:	f20d 3aa2 	addw	sl, sp, #930	; 0x3a2
        int ba = *pba++;
 80024d6:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80024da:	4645      	mov	r5, r8
 80024dc:	461e      	mov	r6, r3
        int mask = ba ? 4 + ((19 >> scfcod[i]) & 3) : 0;
 80024de:	b13b      	cbz	r3, 80024f0 <mp3dec_decode_frame+0x284>
 80024e0:	f89a 603f 	ldrb.w	r6, [sl, #63]	; 0x3f
 80024e4:	2213      	movs	r2, #19
 80024e6:	fa42 f606 	asr.w	r6, r2, r6
 80024ea:	f006 0603 	and.w	r6, r6, #3
 80024ee:	3604      	adds	r6, #4
                s = g_deq_L12[ba*3 - 6 + b % 3]*(1 << 21 >> b/3);
 80024f0:	2703      	movs	r7, #3
 80024f2:	f06f 0205 	mvn.w	r2, #5
        float s = 0;
 80024f6:	eef0 7a66 	vmov.f32	s15, s13
 80024fa:	f108 080c 	add.w	r8, r8, #12
                s = g_deq_L12[ba*3 - 6 + b % 3]*(1 << 21 >> b/3);
 80024fe:	fb17 2703 	smlabb	r7, r7, r3, r2
        for (m = 4; m; m >>= 1)
 8002502:	2404      	movs	r4, #4
            if (mask & m)
 8002504:	4226      	tst	r6, r4
        for (m = 4; m; m >>= 1)
 8002506:	ea4f 0464 	mov.w	r4, r4, asr #1
            if (mask & m)
 800250a:	f040 811e 	bne.w	800274a <mp3dec_decode_frame+0x4de>
            *scf++ = s;
 800250e:	ece5 7a01 	vstmia	r5!, {s15}
        for (m = 4; m; m >>= 1)
 8002512:	4545      	cmp	r5, r8
 8002514:	d1f6      	bne.n	8002504 <mp3dec_decode_frame+0x298>
    for (i = 0; i < bands; i++)
 8002516:	f10b 0b01 	add.w	fp, fp, #1
 800251a:	45cb      	cmp	fp, r9
 800251c:	dbdb      	blt.n	80024d6 <mp3dec_decode_frame+0x26a>
    for (i = sci->stereo_bands; i < sci->total_bands; i++)
 800251e:	9b07      	ldr	r3, [sp, #28]
 8002520:	f893 5301 	ldrb.w	r5, [r3, #769]	; 0x301
 8002524:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8002528:	930a      	str	r3, [sp, #40]	; 0x28
 800252a:	429d      	cmp	r5, r3
 800252c:	f080 8231 	bcs.w	8002992 <mp3dec_decode_frame+0x726>
 8002530:	9a07      	ldr	r2, [sp, #28]
 8002532:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8002536:	b22e      	sxth	r6, r5
 8002538:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 800253c:	eb02 0144 	add.w	r1, r2, r4, lsl #1
        sci->bitalloc[2*i + 1] = 0;
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8002546:	3302      	adds	r3, #2
    for (i = sci->stereo_bands; i < sci->total_bands; i++)
 8002548:	4299      	cmp	r1, r3
 800254a:	d1fa      	bne.n	8002542 <mp3dec_decode_frame+0x2d6>
        return 0;
#else /* MINIMP3_ONLY_MP3 */
        L12_scale_info sci[1];
        L12_read_scale_info(hdr, bs_frame, sci);

        memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 800254c:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 8002550:	9310      	str	r3, [sp, #64]	; 0x40
 8002552:	f50d 637a 	add.w	r3, sp, #4000	; 0xfa0
 8002556:	4618      	mov	r0, r3
 8002558:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800255c:	2100      	movs	r1, #0
 800255e:	f00d fd1a 	bl	800ff96 <memset>
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 8002562:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 8002566:	00f2      	lsls	r2, r6, #3
        memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 8002568:	4603      	mov	r3, r0
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 800256a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800256c:	f502 6010 	add.w	r0, r2, #2304	; 0x900
 8002570:	1818      	adds	r0, r3, r0
 8002572:	4413      	add	r3, r2
 8002574:	1b4d      	subs	r5, r1, r5
 8002576:	930f      	str	r3, [sp, #60]	; 0x3c
 8002578:	9907      	ldr	r1, [sp, #28]
 800257a:	900e      	str	r0, [sp, #56]	; 0x38
 800257c:	2303      	movs	r3, #3
 800257e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8002582:	930c      	str	r3, [sp, #48]	; 0x30
        for (i = 0, igr = 0; igr < 3; igr++)
 8002584:	2300      	movs	r3, #0
        for (i = 0; i < 2*sci->total_bands; i++)
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	f201 3101 	addw	r1, r1, #769	; 0x301
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 800258c:	00ed      	lsls	r5, r5, #3
        for (i = 0, igr = 0; igr < 3; igr++)
 800258e:	9309      	str	r3, [sp, #36]	; 0x24
 8002590:	f20d 4324 	addw	r3, sp, #1060	; 0x424
        for (i = 0; i < 2*sci->total_bands; i++)
 8002594:	9408      	str	r4, [sp, #32]
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 8002596:	9511      	str	r5, [sp, #68]	; 0x44
 8002598:	eb01 0b04 	add.w	fp, r1, r4
 800259c:	930b      	str	r3, [sp, #44]	; 0x2c
        {
            if (12 == (i += L12_dequantize_granule(scratch.grbuf[0] + i, bs_frame, sci, info->layer | 1)))
 800259e:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80025a2:	3348      	adds	r3, #72	; 0x48
 80025a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80025b8:	9205      	str	r2, [sp, #20]
 80025ba:	9304      	str	r3, [sp, #16]
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	2304      	movs	r3, #4
 80025c0:	9203      	str	r2, [sp, #12]
 80025c2:	9306      	str	r3, [sp, #24]
    int i, j, k, choff = 576;
 80025c4:	f44f 7610 	mov.w	r6, #576	; 0x240
        for (i = 0; i < 2*sci->total_bands; i++)
 80025c8:	9b08      	ldr	r3, [sp, #32]
        float *dst = grbuf + group_size*j;
 80025ca:	9f04      	ldr	r7, [sp, #16]
        for (i = 0; i < 2*sci->total_bands; i++)
 80025cc:	b34b      	cbz	r3, 8002622 <mp3dec_decode_frame+0x3b6>
 80025ce:	f20d 35a1 	addw	r5, sp, #929	; 0x3a1
            int ba = sci->bitalloc[i];
 80025d2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
            if (ba != 0)
 80025d6:	b1f4      	cbz	r4, 8002616 <mp3dec_decode_frame+0x3aa>
                if (ba < 17)
 80025d8:	2c10      	cmp	r4, #16
 80025da:	f300 8090 	bgt.w	80026fe <mp3dec_decode_frame+0x492>
                    int half = (1 << (ba - 1)) - 1;
 80025de:	2301      	movs	r3, #1
 80025e0:	f104 39ff 	add.w	r9, r4, #4294967295
 80025e4:	fa03 f909 	lsl.w	r9, r3, r9
                    for (k = 0; k < group_size; k++)
 80025e8:	9b05      	ldr	r3, [sp, #20]
 80025ea:	2b00      	cmp	r3, #0
                    int half = (1 << (ba - 1)) - 1;
 80025ec:	f109 39ff 	add.w	r9, r9, #4294967295
                    for (k = 0; k < group_size; k++)
 80025f0:	dd11      	ble.n	8002616 <mp3dec_decode_frame+0x3aa>
 80025f2:	9b03      	ldr	r3, [sp, #12]
 80025f4:	46b8      	mov	r8, r7
 80025f6:	eb07 0a03 	add.w	sl, r7, r3
                        dst[k] = (float)((int)get_bits(bs, ba) - half);
 80025fa:	4621      	mov	r1, r4
 80025fc:	a825      	add	r0, sp, #148	; 0x94
 80025fe:	f7fe faff 	bl	8000c00 <get_bits>
 8002602:	eba0 0009 	sub.w	r0, r0, r9
 8002606:	ee07 0a90 	vmov	s15, r0
 800260a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260e:	ece8 7a01 	vstmia	r8!, {s15}
                    for (k = 0; k < group_size; k++)
 8002612:	45c2      	cmp	sl, r8
 8002614:	d1f1      	bne.n	80025fa <mp3dec_decode_frame+0x38e>
        for (i = 0; i < 2*sci->total_bands; i++)
 8002616:	45ab      	cmp	fp, r5
            dst += choff;
 8002618:	eb07 0786 	add.w	r7, r7, r6, lsl #2
            choff = 18 - choff;
 800261c:	f1c6 0612 	rsb	r6, r6, #18
        for (i = 0; i < 2*sci->total_bands; i++)
 8002620:	d1d7      	bne.n	80025d2 <mp3dec_decode_frame+0x366>
 8002622:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8002626:	4413      	add	r3, r2
 8002628:	9304      	str	r3, [sp, #16]
    for (j = 0; j < 4; j++)
 800262a:	9b06      	ldr	r3, [sp, #24]
 800262c:	3b01      	subs	r3, #1
 800262e:	9306      	str	r3, [sp, #24]
 8002630:	d1ca      	bne.n	80025c8 <mp3dec_decode_frame+0x35c>
            if (12 == (i += L12_dequantize_granule(scratch.grbuf[0] + i, bs_frame, sci, info->layer | 1)))
 8002632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002634:	4413      	add	r3, r2
 8002636:	2b0c      	cmp	r3, #12
 8002638:	9309      	str	r3, [sp, #36]	; 0x24
 800263a:	f000 8140 	beq.w	80028be <mp3dec_decode_frame+0x652>
                L12_apply_scf_384(sci, sci->scf + igr, scratch.grbuf[0]);
                mp3d_synth_granule(dec->qmf_state, scratch.grbuf[0], 12, info->channels, pcm, scratch.syn[0]);
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
                pcm += 384*info->channels;
            }
            if (bs_frame->pos > bs_frame->limit)
 800263e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8002642:	429a      	cmp	r2, r3
 8002644:	f300 80b3 	bgt.w	80027ae <mp3dec_decode_frame+0x542>
        for (i = 0, igr = 0; igr < 3; igr++)
 8002648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800264a:	3b01      	subs	r3, #1
 800264c:	930c      	str	r3, [sp, #48]	; 0x30
 800264e:	d1a6      	bne.n	800259e <mp3dec_decode_frame+0x332>
 8002650:	2001      	movs	r0, #1
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8002652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002654:	f641 0309 	movw	r3, #6153	; 0x1809
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	f003 0206 	and.w	r2, r3, #6
 800265e:	2a06      	cmp	r2, #6
 8002660:	f000 818f 	beq.w	8002982 <mp3dec_decode_frame+0x716>
 8002664:	f003 030e 	and.w	r3, r3, #14
 8002668:	2b02      	cmp	r3, #2
 800266a:	bf14      	ite	ne
 800266c:	f44f 6390 	movne.w	r3, #1152	; 0x480
 8002670:	f44f 7310 	moveq.w	r3, #576	; 0x240
                return 0;
            }
        }
#endif /* MINIMP3_ONLY_MP3 */
    }
    return success*hdr_frame_samples(dec->header);
 8002674:	fb00 f003 	mul.w	r0, r0, r3
}
 8002678:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 800267c:	b005      	add	sp, #20
 800267e:	ecbd 8b04 	vpop	{d8-d9}
 8002682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            info->frame_bytes = i;
 8002686:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 800268a:	3348      	adds	r3, #72	; 0x48
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6018      	str	r0, [r3, #0]
            return 0;
 8002690:	2000      	movs	r0, #0
}
 8002692:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 8002696:	b005      	add	sp, #20
 8002698:	ecbd 8b04 	vpop	{d8-d9}
 800269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (mp3_bytes > 4 && dec->header[0] == 0xff && hdr_compare(dec->header, mp3))
 80026a0:	f7fe fafc 	bl	8000c9c <hdr_compare>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	f43f adf9 	beq.w	800229c <mp3dec_decode_frame+0x30>
        frame_size = hdr_frame_bytes(mp3, dec->free_format_bytes) + hdr_padding(mp3);
 80026aa:	f641 0304 	movw	r3, #6148	; 0x1804
 80026ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80026b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80026b2:	4630      	mov	r0, r6
 80026b4:	58c9      	ldr	r1, [r1, r3]
 80026b6:	f7fe fb15 	bl	8000ce4 <hdr_frame_bytes>
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80026ba:	78b3      	ldrb	r3, [r6, #2]
        frame_size = hdr_frame_bytes(mp3, dec->free_format_bytes) + hdr_padding(mp3);
 80026bc:	4604      	mov	r4, r0
    return HDR_TEST_PADDING(h) ? (HDR_IS_LAYER_1(h) ? 4 : 1) : 0;
 80026be:	0798      	lsls	r0, r3, #30
 80026c0:	d506      	bpl.n	80026d0 <mp3dec_decode_frame+0x464>
 80026c2:	7873      	ldrb	r3, [r6, #1]
 80026c4:	f003 0306 	and.w	r3, r3, #6
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	bf0c      	ite	eq
 80026cc:	3404      	addeq	r4, #4
 80026ce:	3401      	addne	r4, #1
        if (frame_size != mp3_bytes && (frame_size + HDR_SIZE > mp3_bytes || !hdr_compare(mp3, mp3 + frame_size)))
 80026d0:	42a5      	cmp	r5, r4
        frame_size = hdr_frame_bytes(mp3, dec->free_format_bytes) + hdr_padding(mp3);
 80026d2:	9423      	str	r4, [sp, #140]	; 0x8c
        if (frame_size != mp3_bytes && (frame_size + HDR_SIZE > mp3_bytes || !hdr_compare(mp3, mp3 + frame_size)))
 80026d4:	d00e      	beq.n	80026f4 <mp3dec_decode_frame+0x488>
 80026d6:	1ce3      	adds	r3, r4, #3
 80026d8:	42ab      	cmp	r3, r5
 80026da:	f280 8172 	bge.w	80029c2 <mp3dec_decode_frame+0x756>
 80026de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026e0:	1919      	adds	r1, r3, r4
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fada 	bl	8000c9c <hdr_compare>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f000 816a 	beq.w	80029c2 <mp3dec_decode_frame+0x756>
    if (!frame_size)
 80026ee:	2c00      	cmp	r4, #0
 80026f0:	f43f add4 	beq.w	800229c <mp3dec_decode_frame+0x30>
 80026f4:	4623      	mov	r3, r4
    int i = 0, igr, frame_size = 0, success = 1;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e5ea      	b.n	80022d0 <mp3dec_decode_frame+0x64>
        sci->scfcod[i] = sci->bitalloc[i] ? HDR_IS_LAYER_1(hdr) ? 2 : get_bits(bs, 2) : 6;
 80026fa:	2002      	movs	r0, #2
 80026fc:	e6d6      	b.n	80024ac <mp3dec_decode_frame+0x240>
                    unsigned mod = (2 << (ba - 17)) + 1;    /* 3, 5, 9 */
 80026fe:	2202      	movs	r2, #2
 8002700:	f1a4 0311 	sub.w	r3, r4, #17
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	f103 0901 	add.w	r9, r3, #1
                    unsigned code = get_bits(bs, mod + 2 - (mod >> 3));  /* 5, 7, 10 */
 800270c:	3303      	adds	r3, #3
 800270e:	eba3 01d9 	sub.w	r1, r3, r9, lsr #3
 8002712:	a825      	add	r0, sp, #148	; 0x94
 8002714:	f7fe fa74 	bl	8000c00 <get_bits>
                    for (k = 0; k < group_size; k++, code /= mod)
 8002718:	9b05      	ldr	r3, [sp, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f77f af7b 	ble.w	8002616 <mp3dec_decode_frame+0x3aa>
 8002720:	9a03      	ldr	r2, [sp, #12]
                        dst[k] = (float)((int)(code % mod - mod/2));
 8002722:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 8002726:	463b      	mov	r3, r7
 8002728:	18b9      	adds	r1, r7, r2
 800272a:	fbb0 f2f9 	udiv	r2, r0, r9
 800272e:	fb09 0012 	mls	r0, r9, r2, r0
 8002732:	eba0 000c 	sub.w	r0, r0, ip
 8002736:	ee07 0a90 	vmov	s15, r0
 800273a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    for (k = 0; k < group_size; k++, code /= mod)
 800273e:	4610      	mov	r0, r2
                        dst[k] = (float)((int)(code % mod - mod/2));
 8002740:	ece3 7a01 	vstmia	r3!, {s15}
                    for (k = 0; k < group_size; k++, code /= mod)
 8002744:	4299      	cmp	r1, r3
 8002746:	d1f0      	bne.n	800272a <mp3dec_decode_frame+0x4be>
 8002748:	e765      	b.n	8002616 <mp3dec_decode_frame+0x3aa>
                int b = get_bits(bs, 6);
 800274a:	2106      	movs	r1, #6
 800274c:	a825      	add	r0, sp, #148	; 0x94
 800274e:	f7fe fa57 	bl	8000c00 <get_bits>
                s = g_deq_L12[ba*3 - 6 + b % 3]*(1 << 21 >> b/3);
 8002752:	4b9d      	ldr	r3, [pc, #628]	; (80029c8 <mp3dec_decode_frame+0x75c>)
 8002754:	fb83 3200 	smull	r3, r2, r3, r0
 8002758:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800275c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002760:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002764:	1ac3      	subs	r3, r0, r3
 8002766:	fa41 f202 	asr.w	r2, r1, r2
 800276a:	4898      	ldr	r0, [pc, #608]	; (80029cc <mp3dec_decode_frame+0x760>)
 800276c:	443b      	add	r3, r7
 800276e:	ee07 2a90 	vmov	s15, r2
 8002772:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002776:	ed93 7a00 	vldr	s14, [r3]
 800277a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002782:	e6c4      	b.n	800250e <mp3dec_decode_frame+0x2a2>
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8002784:	7873      	ldrb	r3, [r6, #1]
 8002786:	f003 0206 	and.w	r2, r3, #6
 800278a:	2a06      	cmp	r2, #6
 800278c:	f000 8105 	beq.w	800299a <mp3dec_decode_frame+0x72e>
 8002790:	f003 030e 	and.w	r3, r3, #14
 8002794:	2b02      	cmp	r3, #2
 8002796:	bf14      	ite	ne
 8002798:	f44f 6090 	movne.w	r0, #1152	; 0x480
 800279c:	f44f 7010 	moveq.w	r0, #576	; 0x240
}
 80027a0:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 80027a4:	b005      	add	sp, #20
 80027a6:	ecbd 8b04 	vpop	{d8-d9}
 80027aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec->header[0] = 0;
 80027ae:	f641 0308 	movw	r3, #6152	; 0x1808
 80027b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80027b4:	2000      	movs	r0, #0
 80027b6:	54d0      	strb	r0, [r2, r3]
}
 80027b8:	f50d 4d87 	add.w	sp, sp, #17280	; 0x4380
 80027bc:	b005      	add	sp, #20
 80027be:	ecbd 8b04 	vpop	{d8-d9}
 80027c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sci->total_bands = (uint8_t)nbands;
 80027c6:	aa28      	add	r2, sp, #160	; 0xa0
 80027c8:	2520      	movs	r5, #32
        alloc = g_alloc_L1;
 80027ca:	4e81      	ldr	r6, [pc, #516]	; (80029d0 <mp3dec_decode_frame+0x764>)
    sci->total_bands = (uint8_t)nbands;
 80027cc:	9207      	str	r2, [sp, #28]
 80027ce:	f882 5300 	strb.w	r5, [r2, #768]	; 0x300
 80027d2:	f04f 0940 	mov.w	r9, #64	; 0x40
    sci->stereo_bands = (uint8_t)MINIMP3_MIN(stereo_bands, nbands);
 80027d6:	fa5f fb83 	uxtb.w	fp, r3
 80027da:	e618      	b.n	800240e <mp3dec_decode_frame+0x1a2>
        get_bits(bs_frame, 16);
 80027dc:	2110      	movs	r1, #16
 80027de:	a825      	add	r0, sp, #148	; 0x94
 80027e0:	f7fe fa0e 	bl	8000c00 <get_bits>
 80027e4:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80027e8:	3348      	adds	r3, #72	; 0x48
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
    if (info->layer == 3)
 80027ee:	2a03      	cmp	r2, #3
 80027f0:	f47f add5 	bne.w	800239e <mp3dec_decode_frame+0x132>
        int main_data_begin = L3_read_side_info(bs_frame, scratch.gr_info, hdr);
 80027f4:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 80027f8:	f50d 6173 	add.w	r1, sp, #3888	; 0xf30
 80027fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027fe:	9310      	str	r3, [sp, #64]	; 0x40
 8002800:	a825      	add	r0, sp, #148	; 0x94
 8002802:	f7fe fab9 	bl	8000d78 <L3_read_side_info>
        if (main_data_begin < 0 || bs_frame->pos > bs_frame->limit)
 8002806:	1e07      	subs	r7, r0, #0
 8002808:	dbd1      	blt.n	80027ae <mp3dec_decode_frame+0x542>
 800280a:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 800280e:	42a5      	cmp	r5, r4
 8002810:	dccd      	bgt.n	80027ae <mp3dec_decode_frame+0x542>
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 8002812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002814:	f502 53c0 	add.w	r3, r2, #6144	; 0x1800
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 8002818:	f103 000c 	add.w	r0, r3, #12
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 800281c:	681e      	ldr	r6, [r3, #0]
 800281e:	9321      	str	r3, [sp, #132]	; 0x84
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 8002820:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002822:	901f      	str	r0, [sp, #124]	; 0x7c
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 8002824:	42b7      	cmp	r7, r6
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 8002826:	eba6 0107 	sub.w	r1, r6, r7
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 800282a:	46b8      	mov	r8, r7
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 800282c:	f1a3 0320 	sub.w	r3, r3, #32
    int bytes_have = MINIMP3_MIN(h->reserv, main_data_begin);
 8002830:	bfa8      	it	ge
 8002832:	46b0      	movge	r8, r6
    memcpy(s->maindata, h->reserv_buf + MINIMP3_MAX(0, h->reserv - main_data_begin), MINIMP3_MIN(h->reserv, main_data_begin));
 8002834:	2900      	cmp	r1, #0
 8002836:	bfa8      	it	ge
 8002838:	1840      	addge	r0, r0, r1
 800283a:	4601      	mov	r1, r0
 800283c:	4642      	mov	r2, r8
 800283e:	4618      	mov	r0, r3
 8002840:	f00d fb85 	bl	800ff4e <memcpy>
    int frame_bytes = (bs->limit - bs->pos)/8;
 8002844:	1b64      	subs	r4, r4, r5
    memcpy(s->maindata + bytes_have, bs->buf + bs->pos/8, frame_bytes);
 8002846:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002848:	2d00      	cmp	r5, #0
 800284a:	bfb8      	it	lt
 800284c:	3507      	addlt	r5, #7
    int frame_bytes = (bs->limit - bs->pos)/8;
 800284e:	10e4      	asrs	r4, r4, #3
    memcpy(s->maindata + bytes_have, bs->buf + bs->pos/8, frame_bytes);
 8002850:	eb01 01e5 	add.w	r1, r1, r5, asr #3
 8002854:	4622      	mov	r2, r4
 8002856:	4440      	add	r0, r8
 8002858:	f00d fb79 	bl	800ff4e <memcpy>
    bs->buf   = data;
 800285c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    bs_init(&s->bs, s->maindata, bytes_have + frame_bytes);
 800285e:	eb04 0208 	add.w	r2, r4, r8
    bs->buf   = data;
 8002862:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
    return h->reserv >= main_data_begin;
 8002866:	42b7      	cmp	r7, r6
    bs->pos   = 0;
 8002868:	f04f 0300 	mov.w	r3, #0
    bs->buf   = data;
 800286c:	900b      	str	r0, [sp, #44]	; 0x2c
    bs->limit = bytes*8;
 800286e:	ea4f 01c2 	mov.w	r1, r2, lsl #3
    return h->reserv >= main_data_begin;
 8002872:	bfd8      	it	le
 8002874:	2001      	movle	r0, #1
    bs->buf   = data;
 8002876:	f1a5 0220 	sub.w	r2, r5, #32
    return h->reserv >= main_data_begin;
 800287a:	bfc8      	it	gt
 800287c:	4618      	movgt	r0, r3
    bs->pos   = 0;
 800287e:	e945 310a 	strd	r3, r1, [r5, #-40]	; 0x28
    return h->reserv >= main_data_begin;
 8002882:	9020      	str	r0, [sp, #128]	; 0x80
    bs->buf   = data;
 8002884:	f845 2c2c 	str.w	r2, [r5, #-44]
        if (success)
 8002888:	f340 80ac 	ble.w	80029e4 <mp3dec_decode_frame+0x778>
 800288c:	461a      	mov	r2, r3
    int remains = s->bs.limit/8u - pos;
 800288e:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
    if (remains > MAX_BITRESERVOIR_BYTES)
 8002892:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    int remains = s->bs.limit/8u - pos;
 8002896:	4614      	mov	r4, r2
    if (remains > MAX_BITRESERVOIR_BYTES)
 8002898:	f2c0 808f 	blt.w	80029ba <mp3dec_decode_frame+0x74e>
        pos += remains - MAX_BITRESERVOIR_BYTES;
 800289c:	f46f 74ff 	mvn.w	r4, #510	; 0x1fe
 80028a0:	1911      	adds	r1, r2, r4
 80028a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028a6:	440b      	add	r3, r1
        remains = MAX_BITRESERVOIR_BYTES;
 80028a8:	4614      	mov	r4, r2
        memmove(h->reserv_buf, s->maindata + pos, remains);
 80028aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80028ac:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80028ae:	3920      	subs	r1, #32
 80028b0:	4419      	add	r1, r3
 80028b2:	f00d fb4c 	bl	800ff4e <memcpy>
    h->reserv = remains;
 80028b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80028b8:	9820      	ldr	r0, [sp, #128]	; 0x80
 80028ba:	601c      	str	r4, [r3, #0]
 80028bc:	e6c9      	b.n	8002652 <mp3dec_decode_frame+0x3e6>
    memcpy(dst + 576 + sci->stereo_bands*18, dst + sci->stereo_bands*18, (sci->total_bands - sci->stereo_bands)*18*sizeof(float));
 80028be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80028c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80028c4:	f00d fb43 	bl	800ff4e <memcpy>
    for (i = 0; i < sci->total_bands; i++, dst += 18, scf += 6)
 80028c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ca:	b343      	cbz	r3, 800291e <mp3dec_decode_frame+0x6b2>
 80028cc:	9b07      	ldr	r3, [sp, #28]
 80028ce:	9c06      	ldr	r4, [sp, #24]
 80028d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80028d2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80028d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028d8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 80028dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028de:	f503 6535 	add.w	r5, r3, #2896	; 0xb50
            dst[k + 0]   *= scf[0];
 80028e2:	ed50 6a06 	vldr	s13, [r0, #-24]	; 0xffffffe8
            dst[k + 576] *= scf[3];
 80028e6:	ed10 7a03 	vldr	s14, [r0, #-12]
 80028ea:	462b      	mov	r3, r5
 80028ec:	f505 6210 	add.w	r2, r5, #2304	; 0x900
 80028f0:	f105 0130 	add.w	r1, r5, #48	; 0x30
            dst[k + 0]   *= scf[0];
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028fc:	ece3 7a01 	vstmia	r3!, {s15}
            dst[k + 576] *= scf[3];
 8002900:	edd2 7a00 	vldr	s15, [r2]
 8002904:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (k = 0; k < 12; k++)
 8002908:	4299      	cmp	r1, r3
            dst[k + 576] *= scf[3];
 800290a:	ece2 7a01 	vstmia	r2!, {s15}
        for (k = 0; k < 12; k++)
 800290e:	d1f1      	bne.n	80028f4 <mp3dec_decode_frame+0x688>
    for (i = 0; i < sci->total_bands; i++, dst += 18, scf += 6)
 8002910:	3401      	adds	r4, #1
 8002912:	42b4      	cmp	r4, r6
 8002914:	f105 0548 	add.w	r5, r5, #72	; 0x48
 8002918:	f100 0018 	add.w	r0, r0, #24
 800291c:	d1e1      	bne.n	80028e2 <mp3dec_decode_frame+0x676>
                mp3d_synth_granule(dec->qmf_state, scratch.grbuf[0], 12, info->channels, pcm, scratch.syn[0]);
 800291e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002920:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002922:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002924:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002926:	f503 52f0 	add.w	r2, r3, #7680	; 0x1e00
 800292a:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 800292e:	3348      	adds	r3, #72	; 0x48
 8002930:	321c      	adds	r2, #28
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f501 6435 	add.w	r4, r1, #2896	; 0xb50
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	4621      	mov	r1, r4
 800293e:	220c      	movs	r2, #12
 8002940:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002944:	9500      	str	r5, [sp, #0]
 8002946:	f7fe fe19 	bl	800157c <mp3d_synth_granule>
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 800294a:	4620      	mov	r0, r4
 800294c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8002950:	2100      	movs	r1, #0
 8002952:	f00d fb20 	bl	800ff96 <memset>
                pcm += 384*info->channels;
 8002956:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 800295a:	3348      	adds	r3, #72	; 0x48
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002964:	eb05 2303 	add.w	r3, r5, r3, lsl #8
 8002968:	9312      	str	r3, [sp, #72]	; 0x48
                i = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	9309      	str	r3, [sp, #36]	; 0x24
 800296e:	e666      	b.n	800263e <mp3dec_decode_frame+0x3d2>
    int nbands, stereo_bands = (mode == MODE_MONO) ? 0 : (mode == MODE_JOINT_STEREO) ? (HDR_GET_STEREO_MODE_EXT(hdr) << 2) + 4 : 32;
 8002970:	2300      	movs	r3, #0
 8002972:	e51e      	b.n	80023b2 <mp3dec_decode_frame+0x146>
    } else if (!HDR_TEST_MPEG1(hdr))
 8002974:	f04f 0b1e 	mov.w	fp, #30
        nbands = 30;
 8002978:	465d      	mov	r5, fp
    } else if (!HDR_TEST_MPEG1(hdr))
 800297a:	f04f 093c 	mov.w	r9, #60	; 0x3c
        alloc = g_alloc_L2M2;
 800297e:	4e15      	ldr	r6, [pc, #84]	; (80029d4 <mp3dec_decode_frame+0x768>)
 8002980:	e53e      	b.n	8002400 <mp3dec_decode_frame+0x194>
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8002982:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002986:	e675      	b.n	8002674 <mp3dec_decode_frame+0x408>
    int nbands, stereo_bands = (mode == MODE_MONO) ? 0 : (mode == MODE_JOINT_STEREO) ? (HDR_GET_STEREO_MODE_EXT(hdr) << 2) + 4 : 32;
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	3304      	adds	r3, #4
 8002990:	e50f      	b.n	80023b2 <mp3dec_decode_frame+0x146>
 8002992:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8002996:	b22e      	sxth	r6, r5
 8002998:	e5d8      	b.n	800254c <mp3dec_decode_frame+0x2e0>
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 800299a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800299e:	e678      	b.n	8002692 <mp3dec_decode_frame+0x426>
        if (kbps < 56)
 80029a0:	2a37      	cmp	r2, #55	; 0x37
 80029a2:	f200 8701 	bhi.w	80037a8 <mp3dec_decode_frame+0x153c>
            nbands = sample_rate_idx == 2 ? 12 : 8;
 80029a6:	2802      	cmp	r0, #2
 80029a8:	f000 872e 	beq.w	8003808 <mp3dec_decode_frame+0x159c>
 80029ac:	f04f 0b08 	mov.w	fp, #8
 80029b0:	465d      	mov	r5, fp
 80029b2:	f04f 0910 	mov.w	r9, #16
            alloc = g_alloc_L2M1_lowrate;
 80029b6:	4e08      	ldr	r6, [pc, #32]	; (80029d8 <mp3dec_decode_frame+0x76c>)
 80029b8:	e522      	b.n	8002400 <mp3dec_decode_frame+0x194>
    if (remains > 0)
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	f73f af75 	bgt.w	80028aa <mp3dec_decode_frame+0x63e>
 80029c0:	e779      	b.n	80028b6 <mp3dec_decode_frame+0x64a>
            frame_size = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80029c6:	e469      	b.n	800229c <mp3dec_decode_frame+0x30>
 80029c8:	55555556 	.word	0x55555556
 80029cc:	08010948 	.word	0x08010948
 80029d0:	080108c8 	.word	0x080108c8
 80029d4:	080108e0 	.word	0x080108e0
 80029d8:	080108d8 	.word	0x080108d8
 80029dc:	3e638e39 	.word	0x3e638e39
 80029e0:	3faaaaab 	.word	0x3faaaaab
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 80029e4:	ed5f 8a03 	vldr	s17, [pc, #-12]	; 80029dc <mp3dec_decode_frame+0x770>
 80029e8:	ed1f 8a03 	vldr	s16, [pc, #-12]	; 80029e0 <mp3dec_decode_frame+0x774>
            for (igr = 0; igr < (HDR_TEST_MPEG1(hdr) ? 2 : 1); igr++, pcm += 576*info->channels)
 80029ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80029ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	f013 0f08 	tst.w	r3, #8
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2302      	movne	r3, #2
 80029fe:	429a      	cmp	r2, r3
 8002a00:	f280 86ca 	bge.w	8003798 <mp3dec_decode_frame+0x152c>
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 8002a04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002a06:	f504 6335 	add.w	r3, r4, #2896	; 0xb50
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8002a10:	2100      	movs	r1, #0
 8002a12:	f00d fac0 	bl	800ff96 <memset>
                L3_decode(dec, &scratch, scratch.gr_info + igr*info->channels, info->channels);
 8002a16:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 8002a1a:	3248      	adds	r2, #72	; 0x48
                memset(scratch.grbuf[0], 0, 576*2*sizeof(float));
 8002a1c:	4603      	mov	r3, r0
                L3_decode(dec, &scratch, scratch.gr_info + igr*info->channels, info->channels);
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	6891      	ldr	r1, [r2, #8]
 8002a22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002a24:	911a      	str	r1, [sp, #104]	; 0x68
 8002a26:	4610      	mov	r0, r2
 8002a28:	460a      	mov	r2, r1
 8002a2a:	fb00 f202 	mul.w	r2, r0, r2
 8002a2e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002a32:	f504 602e 	add.w	r0, r4, #2784	; 0xae0
 8002a36:	921e      	str	r2, [sp, #120]	; 0x78
    for (ch = 0; ch < nch; ch++)
 8002a38:	2900      	cmp	r1, #0
                L3_decode(dec, &scratch, scratch.gr_info + igr*info->channels, info->channels);
 8002a3a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002a3e:	901d      	str	r0, [sp, #116]	; 0x74
 8002a40:	921c      	str	r2, [sp, #112]	; 0x70
    for (ch = 0; ch < nch; ch++)
 8002a42:	f340 856b 	ble.w	800351c <mp3dec_decode_frame+0x12b0>
 8002a46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a4a:	9314      	str	r3, [sp, #80]	; 0x50
 8002a4c:	f502 547c 	add.w	r4, r2, #16128	; 0x3f00
 8002a50:	f501 50c0 	add.w	r0, r1, #6144	; 0x1800
 8002a54:	f104 031c 	add.w	r3, r4, #28
 8002a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a5a:	f100 030b 	add.w	r3, r0, #11
 8002a5e:	9319      	str	r3, [sp, #100]	; 0x64
 8002a60:	f100 0309 	add.w	r3, r0, #9
 8002a64:	9318      	str	r3, [sp, #96]	; 0x60
 8002a66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002a68:	6852      	ldr	r2, [r2, #4]
 8002a6a:	9211      	str	r2, [sp, #68]	; 0x44
 8002a6c:	330f      	adds	r3, #15
 8002a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8002a70:	2300      	movs	r3, #0
 8002a72:	9317      	str	r3, [sp, #92]	; 0x5c
 8002a74:	ab28      	add	r3, sp, #160	; 0xa0
 8002a76:	9315      	str	r3, [sp, #84]	; 0x54
    const uint8_t *scf_partition = g_scf_partitions[!!gr->n_short_sfb + !gr->n_long_sfb];
 8002a78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (HDR_TEST_MPEG1(hdr))
 8002a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    const uint8_t *scf_partition = g_scf_partitions[!!gr->n_short_sfb + !gr->n_long_sfb];
 8002a7c:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8002a80:	f815 4c01 	ldrb.w	r4, [r5, #-1]
        int layer3gr_limit = s->bs.pos + gr_info[ch].part_23_length;
 8002a84:	f835 0c0b 	ldrh.w	r0, [r5, #-11]
    int i, scf_shift = gr->scalefac_scale + 1, gain_exp, scfsi = gr->scfsi;
 8002a88:	7aa9      	ldrb	r1, [r5, #10]
    if (HDR_TEST_MPEG1(hdr))
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	f835 6c07 	ldrh.w	r6, [r5, #-7]
    const uint8_t *scf_partition = g_scf_partitions[!!gr->n_short_sfb + !gr->n_long_sfb];
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	2c00      	cmp	r4, #0
 8002a98:	bf18      	it	ne
 8002a9a:	3301      	addne	r3, #1
 8002a9c:	4cc0      	ldr	r4, [pc, #768]	; (8002da0 <mp3dec_decode_frame+0xb34>)
 8002a9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002aa2:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
        int layer3gr_limit = s->bs.pos + gr_info[ch].part_23_length;
 8002aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
        L3_decode_scalefactors(h->header, s->ist_pos[ch], &s->bs, gr_info + ch, s->scf, ch);
 8002aa8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
        int layer3gr_limit = s->bs.pos + gr_info[ch].part_23_length;
 8002aaa:	4403      	add	r3, r0
 8002aac:	9311      	str	r3, [sp, #68]	; 0x44
    if (HDR_TEST_MPEG1(hdr))
 8002aae:	0717      	lsls	r7, r2, #28
    int i, scf_shift = gr->scalefac_scale + 1, gain_exp, scfsi = gr->scfsi;
 8002ab0:	f101 0301 	add.w	r3, r1, #1
 8002ab4:	9305      	str	r3, [sp, #20]
    if (HDR_TEST_MPEG1(hdr))
 8002ab6:	f140 8423 	bpl.w	8003300 <mp3dec_decode_frame+0x1094>
        int part = g_scfc_decode[gr->scalefac_compress];
 8002aba:	4bba      	ldr	r3, [pc, #744]	; (8002da4 <mp3dec_decode_frame+0xb38>)
    int i, scf_shift = gr->scalefac_scale + 1, gain_exp, scfsi = gr->scfsi;
 8002abc:	f895 900c 	ldrb.w	r9, [r5, #12]
        int part = g_scfc_decode[gr->scalefac_compress];
 8002ac0:	5d9b      	ldrb	r3, [r3, r6]
        scf_size[1] = scf_size[0] = (uint8_t)(part >> 2);
 8002ac2:	089a      	lsrs	r2, r3, #2
        scf_size[3] = scf_size[2] = (uint8_t)(part & 3);
 8002ac4:	f003 0303 	and.w	r3, r3, #3
        scf_size[1] = scf_size[0] = (uint8_t)(part >> 2);
 8002ac8:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8002acc:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
        scf_size[3] = scf_size[2] = (uint8_t)(part & 3);
 8002ad0:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 8002ad4:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8002ad8:	f10a 33ff 	add.w	r3, sl, #4294967295
    for (i = 0; i < 4 && scf_count[i]; i++, scfsi *= 2)
 8002adc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	f04f 0800 	mov.w	r8, #0
 8002ae4:	9b03      	ldr	r3, [sp, #12]
 8002ae6:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8002aea:	9303      	str	r3, [sp, #12]
 8002aec:	b1e5      	cbz	r5, 8002b28 <mp3dec_decode_frame+0x8bc>
        if (scfsi & 8)
 8002aee:	f019 0f08 	tst.w	r9, #8
 8002af2:	f040 827e 	bne.w	8002ff2 <mp3dec_decode_frame+0xd86>
            int bits = scf_size[i];
 8002af6:	ab24      	add	r3, sp, #144	; 0x90
 8002af8:	f813 7008 	ldrb.w	r7, [r3, r8]
            if (!bits)
 8002afc:	2f00      	cmp	r7, #0
 8002afe:	f040 824a 	bne.w	8002f96 <mp3dec_decode_frame+0xd2a>
                memset(scf, 0, cnt);
 8002b02:	462a      	mov	r2, r5
 8002b04:	4639      	mov	r1, r7
 8002b06:	4630      	mov	r0, r6
 8002b08:	f00d fa45 	bl	800ff96 <memset>
                memset(ist_pos, 0, cnt);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	462a      	mov	r2, r5
 8002b10:	4639      	mov	r1, r7
 8002b12:	f00d fa40 	bl	800ff96 <memset>
 8002b16:	442c      	add	r4, r5
    for (i = 0; i < 4 && scf_count[i]; i++, scfsi *= 2)
 8002b18:	f108 0801 	add.w	r8, r8, #1
 8002b1c:	f1b8 0f04 	cmp.w	r8, #4
        scf += cnt;
 8002b20:	442e      	add	r6, r5
    for (i = 0; i < 4 && scf_count[i]; i++, scfsi *= 2)
 8002b22:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002b26:	d1dd      	bne.n	8002ae4 <mp3dec_decode_frame+0x878>
    if (gr->n_short_sfb)
 8002b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b2a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8002b2e:	f813 5c02 	ldrb.w	r5, [r3, #-2]
    scf[0] = scf[1] = scf[2] = 0;
 8002b32:	2200      	movs	r2, #0
 8002b34:	70b2      	strb	r2, [r6, #2]
 8002b36:	7072      	strb	r2, [r6, #1]
 8002b38:	7032      	strb	r2, [r6, #0]
    if (gr->n_short_sfb)
 8002b3a:	2f00      	cmp	r7, #0
 8002b3c:	f040 841a 	bne.w	8003374 <mp3dec_decode_frame+0x1108>
    } else if (gr->preflag)
 8002b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b42:	7a5b      	ldrb	r3, [r3, #9]
 8002b44:	b17b      	cbz	r3, 8002b66 <mp3dec_decode_frame+0x8fa>
 8002b46:	ab44      	add	r3, sp, #272	; 0x110
 8002b48:	f1a3 045c 	sub.w	r4, r3, #92	; 0x5c
 8002b4c:	4896      	ldr	r0, [pc, #600]	; (8002da8 <mp3dec_decode_frame+0xb3c>)
 8002b4e:	f10d 01aa 	add.w	r1, sp, #170	; 0xaa
 8002b52:	2301      	movs	r3, #1
 8002b54:	e001      	b.n	8002b5a <mp3dec_decode_frame+0x8ee>
 8002b56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
            iscf[11 + i] += g_preamp[i];
 8002b5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002b5e:	4413      	add	r3, r2
        for (i = 0; i < 10; i++)
 8002b60:	428c      	cmp	r4, r1
            iscf[11 + i] += g_preamp[i];
 8002b62:	700b      	strb	r3, [r1, #0]
        for (i = 0; i < 10; i++)
 8002b64:	d1f7      	bne.n	8002b56 <mp3dec_decode_frame+0x8ea>
    gain_exp = gr->global_gain + BITS_DEQUANTIZER_OUT*4 - 210 - (HDR_IS_MS_STEREO(hdr) ? 2 : 0);
 8002b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b6c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8002b70:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 8002b74:	2a60      	cmp	r2, #96	; 0x60
 8002b76:	f1a1 03d6 	sub.w	r3, r1, #214	; 0xd6
 8002b7a:	f000 8420 	beq.w	80033be <mp3dec_decode_frame+0x1152>
    gain = L3_ldexp_q2(1 << (MAX_SCFI/4),  MAX_SCFI - gain_exp);
 8002b7e:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8002dac <mp3dec_decode_frame+0xb40>
 8002b82:	f1c3 032c 	rsb	r3, r3, #44	; 0x2c
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b86:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
        e = MINIMP3_MIN(30*4, exp_q2);
 8002b8a:	2b78      	cmp	r3, #120	; 0x78
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	bfa8      	it	ge
 8002b90:	2278      	movge	r2, #120	; 0x78
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002b92:	1090      	asrs	r0, r2, #2
 8002b94:	fa44 f000 	asr.w	r0, r4, r0
 8002b98:	4e85      	ldr	r6, [pc, #532]	; (8002db0 <mp3dec_decode_frame+0xb44>)
 8002b9a:	ee07 0a90 	vmov	s15, r0
 8002b9e:	f002 0103 	and.w	r1, r2, #3
 8002ba2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8002ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002baa:	edd1 7a00 	vldr	s15, [r1]
    } while ((exp_q2 -= e) > 0);
 8002bae:	1a9b      	subs	r3, r3, r2
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
    } while ((exp_q2 -= e) > 0);
 8002bb4:	2b00      	cmp	r3, #0
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002bb6:	ee26 6a27 	vmul.f32	s12, s12, s15
    } while ((exp_q2 -= e) > 0);
 8002bba:	dce6      	bgt.n	8002b8a <mp3dec_decode_frame+0x91e>
    for (i = 0; i < (int)(gr->n_long_sfb + gr->n_short_sfb); i++)
 8002bbc:	19ef      	adds	r7, r5, r7
 8002bbe:	d02e      	beq.n	8002c1e <mp3dec_decode_frame+0x9b2>
 8002bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bc2:	9d15      	ldr	r5, [sp, #84]	; 0x54
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002bc4:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002bc8:	f503 56eb 	add.w	r6, r3, #7520	; 0x1d60
 8002bcc:	442f      	add	r7, r5
 8002bce:	361c      	adds	r6, #28
 8002bd0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
        scf[i] = L3_ldexp_q2(gain, iscf[i] << scf_shift);
 8002bd4:	f815 3b01 	ldrb.w	r3, [r5], #1
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002bd8:	eef0 6a46 	vmov.f32	s13, s12
        scf[i] = L3_ldexp_q2(gain, iscf[i] << scf_shift);
 8002bdc:	fa03 f30c 	lsl.w	r3, r3, ip
 8002be0:	46ae      	mov	lr, r5
        e = MINIMP3_MIN(30*4, exp_q2);
 8002be2:	2b78      	cmp	r3, #120	; 0x78
 8002be4:	461a      	mov	r2, r3
 8002be6:	bfa8      	it	ge
 8002be8:	2278      	movge	r2, #120	; 0x78
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002bea:	1090      	asrs	r0, r2, #2
 8002bec:	fa44 f000 	asr.w	r0, r4, r0
 8002bf0:	4d6f      	ldr	r5, [pc, #444]	; (8002db0 <mp3dec_decode_frame+0xb44>)
 8002bf2:	ee07 0a90 	vmov	s15, r0
 8002bf6:	f002 0103 	and.w	r1, r2, #3
 8002bfa:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c02:	edd1 7a00 	vldr	s15, [r1]
    } while ((exp_q2 -= e) > 0);
 8002c06:	1a9b      	subs	r3, r3, r2
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
    } while ((exp_q2 -= e) > 0);
 8002c0c:	2b00      	cmp	r3, #0
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 8002c0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    } while ((exp_q2 -= e) > 0);
 8002c12:	dce6      	bgt.n	8002be2 <mp3dec_decode_frame+0x976>
    for (i = 0; i < (int)(gr->n_long_sfb + gr->n_short_sfb); i++)
 8002c14:	4577      	cmp	r7, lr
 8002c16:	4675      	mov	r5, lr
        scf[i] = L3_ldexp_q2(gain, iscf[i] << scf_shift);
 8002c18:	ece6 6a01 	vstmia	r6!, {s13}
    for (i = 0; i < (int)(gr->n_long_sfb + gr->n_short_sfb); i++)
 8002c1c:	d1da      	bne.n	8002bd4 <mp3dec_decode_frame+0x968>
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        L3_huffman(s->grbuf[ch], &s->bs, gr_info + ch, s->scf, layer3gr_limit);
 8002c20:	9e14      	ldr	r6, [sp, #80]	; 0x50
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002c22:	6858      	ldr	r0, [r3, #4]
        L3_huffman(s->grbuf[ch], &s->bs, gr_info + ch, s->scf, layer3gr_limit);
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	9316      	str	r3, [sp, #88]	; 0x58
    int ireg = 0, big_val_cnt = gr_info->big_values;
 8002c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002c2a:	9916      	ldr	r1, [sp, #88]	; 0x58
    int ireg = 0, big_val_cnt = gr_info->big_values;
 8002c2c:	f833 2c09 	ldrh.w	r2, [r3, #-9]
    const uint8_t *sfb = gr_info->sfbtab;
 8002c30:	f853 3c0f 	ldr.w	r3, [r3, #-15]
 8002c34:	9304      	str	r3, [sp, #16]
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002c36:	2800      	cmp	r0, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	bfb8      	it	lt
 8002c3c:	1dc3      	addlt	r3, r0, #7
 8002c3e:	10db      	asrs	r3, r3, #3
    int ireg = 0, big_val_cnt = gr_info->big_values;
 8002c40:	9203      	str	r2, [sp, #12]
    const uint8_t *bs_next_ptr = bs->buf + bs->pos/8;
 8002c42:	18ca      	adds	r2, r1, r3
    uint32_t bs_cache = (((bs_next_ptr[0]*256u + bs_next_ptr[1])*256u + bs_next_ptr[2])*256u + bs_next_ptr[3]) << (bs->pos & 7);
 8002c44:	5cc9      	ldrb	r1, [r1, r3]
 8002c46:	7853      	ldrb	r3, [r2, #1]
 8002c48:	7894      	ldrb	r4, [r2, #2]
 8002c4a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002c4e:	78d1      	ldrb	r1, [r2, #3]
 8002c50:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8002c54:	f000 0e07 	and.w	lr, r0, #7
 8002c58:	eb01 2303 	add.w	r3, r1, r3, lsl #8
 8002c5c:	fa03 fb0e 	lsl.w	fp, r3, lr
    while (big_val_cnt > 0)
 8002c60:	9b03      	ldr	r3, [sp, #12]
    bs_next_ptr += 4;
 8002c62:	f102 0904 	add.w	r9, r2, #4
    int pairs_to_decode, np, bs_sh = (bs->pos & 7) - 8;
 8002c66:	f1ae 0808 	sub.w	r8, lr, #8
    while (big_val_cnt > 0)
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 844e 	beq.w	800350c <mp3dec_decode_frame+0x12a0>
 8002c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c72:	f8df a150 	ldr.w	sl, [pc, #336]	; 8002dc4 <mp3dec_decode_frame+0xb58>
    if (x < 1024)
 8002c76:	eddf 4a4f 	vldr	s9, [pc, #316]	; 8002db4 <mp3dec_decode_frame+0xb48>
    while (big_val_cnt > 0)
 8002c7a:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8002c7e:	331c      	adds	r3, #28
 8002c80:	9305      	str	r3, [sp, #20]
 8002c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c86:	46b6      	mov	lr, r6
        int tab_num = gr_info->table_select[ireg];
 8002c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        const int16_t *codebook = tabs + tabindex[tab_num];
 8002c8a:	494b      	ldr	r1, [pc, #300]	; (8002db8 <mp3dec_decode_frame+0xb4c>)
        int tab_num = gr_info->table_select[ireg];
 8002c8c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002c90:	920f      	str	r2, [sp, #60]	; 0x3c
        const int16_t *codebook = tabs + tabindex[tab_num];
 8002c92:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
        int linbits = g_linbits[tab_num];
 8002c96:	4949      	ldr	r1, [pc, #292]	; (8002dbc <mp3dec_decode_frame+0xb50>)
        int sfb_cnt = gr_info->region_count[ireg++];
 8002c98:	7892      	ldrb	r2, [r2, #2]
 8002c9a:	9206      	str	r2, [sp, #24]
        int linbits = g_linbits[tab_num];
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
        const int16_t *codebook = tabs + tabindex[tab_num];
 8002c9e:	4a48      	ldr	r2, [pc, #288]	; (8002dc0 <mp3dec_decode_frame+0xb54>)
 8002ca0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
        if (linbits)
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80f2 	beq.w	8002e8e <mp3dec_decode_frame+0xc22>
                            lsb += PEEK_BITS(linbits);
 8002caa:	f1c3 0220 	rsb	r2, r3, #32
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002cae:	4671      	mov	r1, lr
                            lsb += PEEK_BITS(linbits);
 8002cb0:	9209      	str	r2, [sp, #36]	; 0x24
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002cb2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002cb6:	469e      	mov	lr, r3
                np = *sfb++ / 2;
 8002cb8:	9a04      	ldr	r2, [sp, #16]
 8002cba:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002cbe:	9204      	str	r2, [sp, #16]
                one = *scf++;
 8002cc0:	9a05      	ldr	r2, [sp, #20]
 8002cc2:	ecb2 7a01 	vldmia	r2!, {s14}
 8002cc6:	9205      	str	r2, [sp, #20]
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002cc8:	9a03      	ldr	r2, [sp, #12]
                np = *sfb++ / 2;
 8002cca:	085b      	lsrs	r3, r3, #1
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	bfa8      	it	ge
 8002cd0:	461a      	movge	r2, r3
 8002cd2:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
                np = *sfb++ / 2;
 8002cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8002cd8:	46bc      	mov	ip, r7
                    int leaf = codebook[PEEK_BITS(w)];
 8002cda:	ea4f 63db 	mov.w	r3, fp, lsr #27
 8002cde:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da0f      	bge.n	8002d06 <mp3dec_decode_frame+0xa9a>
                    int j, w = 5;
 8002ce6:	2005      	movs	r0, #5
                        FLUSH_BITS(w);
 8002ce8:	fa0b fb00 	lsl.w	fp, fp, r0
 8002cec:	4480      	add	r8, r0
                        w = leaf & 7;
 8002cee:	f003 0007 	and.w	r0, r3, #7
                        leaf = codebook[PEEK_BITS(w) - (leaf >> 3)];
 8002cf2:	f1c0 0220 	rsb	r2, r0, #32
 8002cf6:	fa2b f202 	lsr.w	r2, fp, r2
 8002cfa:	eba2 03e3 	sub.w	r3, r2, r3, asr #3
 8002cfe:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	dbf0      	blt.n	8002ce8 <mp3dec_decode_frame+0xa7c>
                    FLUSH_BITS(leaf >> 8);
 8002d06:	121a      	asrs	r2, r3, #8
 8002d08:	fa0b fb02 	lsl.w	fp, fp, r2
 8002d0c:	4490      	add	r8, r2
 8002d0e:	f101 0008 	add.w	r0, r1, #8
 8002d12:	4627      	mov	r7, r4
                        int lsb = leaf & 0x0F;
 8002d14:	f003 020f 	and.w	r2, r3, #15
                        if (lsb == 15)
 8002d18:	2a0f      	cmp	r2, #15
 8002d1a:	d055      	beq.n	8002dc8 <mp3dec_decode_frame+0xb5c>
                            *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002d1c:	ea4f 74db 	mov.w	r4, fp, lsr #31
 8002d20:	f102 0510 	add.w	r5, r2, #16
 8002d24:	eba5 1404 	sub.w	r4, r5, r4, lsl #4
 8002d28:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8002d2c:	edd4 7a00 	vldr	s15, [r4]
 8002d30:	ee67 7a87 	vmul.f32	s15, s15, s14
                        FLUSH_BITS(lsb ? 1 : 0);
 8002d34:	3200      	adds	r2, #0
                            *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002d36:	edc1 7a00 	vstr	s15, [r1]
                    for (j = 0; j < 2; j++, dst++, leaf >>= 4)
 8002d3a:	f101 0104 	add.w	r1, r1, #4
                        FLUSH_BITS(lsb ? 1 : 0);
 8002d3e:	bf18      	it	ne
 8002d40:	2201      	movne	r2, #1
                    for (j = 0; j < 2; j++, dst++, leaf >>= 4)
 8002d42:	4281      	cmp	r1, r0
                        FLUSH_BITS(lsb ? 1 : 0);
 8002d44:	fa0b fb02 	lsl.w	fp, fp, r2
 8002d48:	4490      	add	r8, r2
                    for (j = 0; j < 2; j++, dst++, leaf >>= 4)
 8002d4a:	ea4f 1323 	mov.w	r3, r3, asr #4
 8002d4e:	d1e1      	bne.n	8002d14 <mp3dec_decode_frame+0xaa8>
                    CHECK_BITS;
 8002d50:	f1b8 0f00 	cmp.w	r8, #0
 8002d54:	463c      	mov	r4, r7
 8002d56:	4601      	mov	r1, r0
 8002d58:	db12      	blt.n	8002d80 <mp3dec_decode_frame+0xb14>
 8002d5a:	4643      	mov	r3, r8
 8002d5c:	464d      	mov	r5, r9
 8002d5e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	3b08      	subs	r3, #8
 8002d66:	ea4b 0b02 	orr.w	fp, fp, r2
 8002d6a:	d5f8      	bpl.n	8002d5e <mp3dec_decode_frame+0xaf2>
 8002d6c:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8002d70:	ebc3 7243 	rsb	r2, r3, r3, lsl #29
 8002d74:	f1a8 0808 	sub.w	r8, r8, #8
 8002d78:	3301      	adds	r3, #1
 8002d7a:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
 8002d7e:	4499      	add	r9, r3
                } while (--pairs_to_decode);
 8002d80:	4560      	cmp	r0, ip
 8002d82:	d1aa      	bne.n	8002cda <mp3dec_decode_frame+0xa6e>
            } while ((big_val_cnt -= np) > 0 && --sfb_cnt >= 0);
 8002d84:	9b03      	ldr	r3, [sp, #12]
 8002d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	9303      	str	r3, [sp, #12]
 8002d8e:	f340 82a9 	ble.w	80032e4 <mp3dec_decode_frame+0x1078>
 8002d92:	9b06      	ldr	r3, [sp, #24]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	9306      	str	r3, [sp, #24]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	d18d      	bne.n	8002cb8 <mp3dec_decode_frame+0xa4c>
 8002d9c:	468e      	mov	lr, r1
 8002d9e:	e773      	b.n	8002c88 <mp3dec_decode_frame+0xa1c>
 8002da0:	08010f88 	.word	0x08010f88
 8002da4:	0801111c 	.word	0x0801111c
 8002da8:	08010d84 	.word	0x08010d84
 8002dac:	45000000 	.word	0x45000000
 8002db0:	08010a20 	.word	0x08010a20
 8002db4:	43800000 	.word	0x43800000
 8002db8:	08011650 	.word	0x08011650
 8002dbc:	08010a40 	.word	0x08010a40
 8002dc0:	08011690 	.word	0x08011690
 8002dc4:	08010b40 	.word	0x08010b40
                            lsb += PEEK_BITS(linbits);
 8002dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
                            CHECK_BITS;
 8002dca:	eb18 080e 	adds.w	r8, r8, lr
                            lsb += PEEK_BITS(linbits);
 8002dce:	fa2b f202 	lsr.w	r2, fp, r2
 8002dd2:	f102 020f 	add.w	r2, r2, #15
                            FLUSH_BITS(linbits);
 8002dd6:	fa0b fb0e 	lsl.w	fp, fp, lr
                            CHECK_BITS;
 8002dda:	d412      	bmi.n	8002e02 <mp3dec_decode_frame+0xb96>
 8002ddc:	4644      	mov	r4, r8
 8002dde:	464e      	mov	r6, r9
 8002de0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002de4:	40a5      	lsls	r5, r4
 8002de6:	3c08      	subs	r4, #8
 8002de8:	ea4b 0b05 	orr.w	fp, fp, r5
 8002dec:	d5f8      	bpl.n	8002de0 <mp3dec_decode_frame+0xb74>
 8002dee:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 8002df2:	ebc4 7544 	rsb	r5, r4, r4, lsl #29
 8002df6:	f1a8 0808 	sub.w	r8, r8, #8
 8002dfa:	3401      	adds	r4, #1
 8002dfc:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002e00:	44a1      	add	r9, r4
    if (x < 129)
 8002e02:	2a80      	cmp	r2, #128	; 0x80
 8002e04:	dd3e      	ble.n	8002e84 <mp3dec_decode_frame+0xc18>
    if (x < 1024)
 8002e06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
        x <<= 3;
 8002e0a:	bfb4      	ite	lt
 8002e0c:	00d4      	lsllt	r4, r2, #3
    if (x < 1024)
 8002e0e:	4614      	movge	r4, r2
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002e10:	f004 063f 	and.w	r6, r4, #63	; 0x3f
 8002e14:	9608      	str	r6, [sp, #32]
 8002e16:	f024 063f 	bic.w	r6, r4, #63	; 0x3f
    sign = 2*x & 64;
 8002e1a:	ea4f 0544 	mov.w	r5, r4, lsl #1
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002e1e:	9607      	str	r6, [sp, #28]
 8002e20:	9e08      	ldr	r6, [sp, #32]
    sign = 2*x & 64;
 8002e22:	f005 0540 	and.w	r5, r5, #64	; 0x40
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002e26:	eba6 0605 	sub.w	r6, r6, r5
 8002e2a:	ee07 6a90 	vmov	s15, r6
 8002e2e:	9e07      	ldr	r6, [sp, #28]
 8002e30:	442e      	add	r6, r5
 8002e32:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002e36:	ee07 6a90 	vmov	s15, r6
 8002e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002e3e:	442c      	add	r4, r5
    frac = (float)((x & 63) - sign) / ((x & ~63) + sign);
 8002e40:	eec6 5a27 	vdiv.f32	s11, s12, s15
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002e44:	ea4f 14a4 	mov.w	r4, r4, asr #6
 8002e48:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8002e4c:	eeb0 6a48 	vmov.f32	s12, s16
 8002e50:	eea5 6aa8 	vfma.f32	s12, s11, s17
 8002e54:	eeb0 4a45 	vmov.f32	s8, s10
 8002e58:	eea5 4a86 	vfma.f32	s8, s11, s12
 8002e5c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8002e60:	ee64 7a27 	vmul.f32	s15, s8, s15
        x <<= 3;
 8002e64:	bfb4      	ite	lt
 8002e66:	eef3 6a00 	vmovlt.f32	s13, #48	; 0x41800000  16.0
    if (x < 1024)
 8002e6a:	eef0 6a64 	vmovge.f32	s13, s9
    return g_pow43[16 + ((x + sign) >> 6)]*(1.f + frac*((4.f/3) + frac*(2.f/9)))*mult;
 8002e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
                            *dst = one*L3_pow_43(lsb)*((int32_t)bs_cache < 0 ? -1: 1);
 8002e72:	f1bb 0f00 	cmp.w	fp, #0
 8002e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7a:	f6bf af5b 	bge.w	8002d34 <mp3dec_decode_frame+0xac8>
 8002e7e:	eef1 7a67 	vneg.f32	s15, s15
 8002e82:	e757      	b.n	8002d34 <mp3dec_decode_frame+0xac8>
        return g_pow43[16 + x];
 8002e84:	eb0a 0482 	add.w	r4, sl, r2, lsl #2
 8002e88:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8002e8c:	e7f1      	b.n	8002e72 <mp3dec_decode_frame+0xc06>
 8002e8e:	4658      	mov	r0, fp
 8002e90:	f8cd e01c 	str.w	lr, [sp, #28]
                np = *sfb++ / 2;
 8002e94:	9b04      	ldr	r3, [sp, #16]
 8002e96:	9a07      	ldr	r2, [sp, #28]
 8002e98:	f813 bb01 	ldrb.w	fp, [r3], #1
 8002e9c:	9304      	str	r3, [sp, #16]
                one = *scf++;
 8002e9e:	9b05      	ldr	r3, [sp, #20]
 8002ea0:	ecb3 7a01 	vldmia	r3!, {s14}
 8002ea4:	9305      	str	r3, [sp, #20]
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002ea6:	9b03      	ldr	r3, [sp, #12]
                np = *sfb++ / 2;
 8002ea8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
                pairs_to_decode = MINIMP3_MIN(big_val_cnt, np);
 8002eac:	455b      	cmp	r3, fp
 8002eae:	bfa8      	it	ge
 8002eb0:	465b      	movge	r3, fp
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	f102 0c08 	add.w	ip, r2, #8
 8002eb8:	9308      	str	r3, [sp, #32]
 8002eba:	eb0c 0e03 	add.w	lr, ip, r3
                    int leaf = codebook[PEEK_BITS(w)];
 8002ebe:	0ec3      	lsrs	r3, r0, #27
 8002ec0:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da0e      	bge.n	8002ee6 <mp3dec_decode_frame+0xc7a>
                    int j, w = 5;
 8002ec8:	2105      	movs	r1, #5
                        FLUSH_BITS(w);
 8002eca:	4088      	lsls	r0, r1
 8002ecc:	4488      	add	r8, r1
                        w = leaf & 7;
 8002ece:	f003 0107 	and.w	r1, r3, #7
                        leaf = codebook[PEEK_BITS(w) - (leaf >> 3)];
 8002ed2:	f1c1 0220 	rsb	r2, r1, #32
 8002ed6:	fa20 f202 	lsr.w	r2, r0, r2
 8002eda:	eba2 03e3 	sub.w	r3, r2, r3, asr #3
 8002ede:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
                    while (leaf < 0)
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dbf1      	blt.n	8002eca <mp3dec_decode_frame+0xc5e>
                        int lsb = leaf & 0x0F;
 8002ee6:	f003 020f 	and.w	r2, r3, #15
                        FLUSH_BITS(lsb ? 1 : 0);
 8002eea:	1c16      	adds	r6, r2, #0
                    FLUSH_BITS(leaf >> 8);
 8002eec:	ea4f 2123 	mov.w	r1, r3, asr #8
                        FLUSH_BITS(lsb ? 1 : 0);
 8002ef0:	bf18      	it	ne
 8002ef2:	2601      	movne	r6, #1
                    FLUSH_BITS(leaf >> 8);
 8002ef4:	4088      	lsls	r0, r1
                        FLUSH_BITS(lsb ? 1 : 0);
 8002ef6:	fa00 f506 	lsl.w	r5, r0, r6
                        int lsb = leaf & 0x0F;
 8002efa:	f3c3 1303 	ubfx	r3, r3, #4, #4
                        *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002efe:	0fc0      	lsrs	r0, r0, #31
 8002f00:	3210      	adds	r2, #16
 8002f02:	eba2 1200 	sub.w	r2, r2, r0, lsl #4
 8002f06:	0fef      	lsrs	r7, r5, #31
 8002f08:	f103 0010 	add.w	r0, r3, #16
 8002f0c:	eba0 1007 	sub.w	r0, r0, r7, lsl #4
 8002f10:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8002f14:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8002f18:	edd0 6a00 	vldr	s13, [r0]
 8002f1c:	edd2 7a00 	vldr	s15, [r2]
                        FLUSH_BITS(lsb ? 1 : 0);
 8002f20:	3300      	adds	r3, #0
                    FLUSH_BITS(leaf >> 8);
 8002f22:	4488      	add	r8, r1
                        FLUSH_BITS(lsb ? 1 : 0);
 8002f24:	bf18      	it	ne
 8002f26:	2301      	movne	r3, #1
                        *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002f28:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
                        FLUSH_BITS(lsb ? 1 : 0);
 8002f30:	44b0      	add	r8, r6
                    CHECK_BITS;
 8002f32:	eb13 0808 	adds.w	r8, r3, r8
                        FLUSH_BITS(lsb ? 1 : 0);
 8002f36:	fa05 f003 	lsl.w	r0, r5, r3
                        *dst = g_pow43[16 + lsb - 16*(bs_cache >> 31)]*one;
 8002f3a:	ed4c 6a01 	vstr	s13, [ip, #-4]
 8002f3e:	ed4c 7a02 	vstr	s15, [ip, #-8]
                    CHECK_BITS;
 8002f42:	d412      	bmi.n	8002f6a <mp3dec_decode_frame+0xcfe>
 8002f44:	4643      	mov	r3, r8
 8002f46:	4649      	mov	r1, r9
 8002f48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	3b08      	subs	r3, #8
 8002f50:	ea40 0002 	orr.w	r0, r0, r2
 8002f54:	d5f8      	bpl.n	8002f48 <mp3dec_decode_frame+0xcdc>
 8002f56:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8002f5a:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8002f5e:	f1a8 0808 	sub.w	r8, r8, #8
 8002f62:	3201      	adds	r2, #1
 8002f64:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 8002f68:	4491      	add	r9, r2
 8002f6a:	f10c 0c08 	add.w	ip, ip, #8
                } while (--pairs_to_decode);
 8002f6e:	45e6      	cmp	lr, ip
 8002f70:	d1a5      	bne.n	8002ebe <mp3dec_decode_frame+0xc52>
            } while ((big_val_cnt -= np) > 0 && --sfb_cnt >= 0);
 8002f72:	9b03      	ldr	r3, [sp, #12]
 8002f74:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 8002f78:	eba3 030b 	sub.w	r3, r3, fp
 8002f7c:	440a      	add	r2, r1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	9303      	str	r3, [sp, #12]
 8002f82:	9207      	str	r2, [sp, #28]
 8002f84:	dd3c      	ble.n	8003000 <mp3dec_decode_frame+0xd94>
 8002f86:	9b06      	ldr	r3, [sp, #24]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	9306      	str	r3, [sp, #24]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	d181      	bne.n	8002e94 <mp3dec_decode_frame+0xc28>
 8002f90:	4683      	mov	fp, r0
 8002f92:	4696      	mov	lr, r2
 8002f94:	e678      	b.n	8002c88 <mp3dec_decode_frame+0xa1c>
                int max_scf = (scfsi < 0) ? (1 << bits) - 1 : -1;
 8002f96:	f1b9 0f00 	cmp.w	r9, #0
 8002f9a:	bfbe      	ittt	lt
 8002f9c:	f04f 0a01 	movlt.w	sl, #1
 8002fa0:	fa0a fa07 	lsllt.w	sl, sl, r7
 8002fa4:	f10a 33ff 	addlt.w	r3, sl, #4294967295
 8002fa8:	f106 3bff 	add.w	fp, r6, #4294967295
 8002fac:	bfa8      	it	ge
 8002fae:	f04f 33ff 	movge.w	r3, #4294967295
 8002fb2:	46a2      	mov	sl, r4
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8002fba:	442c      	add	r4, r5
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	465d      	mov	r5, fp
 8002fc0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	4656      	mov	r6, sl
 8002fc8:	4692      	mov	sl, r2
                    int s = get_bits(bitbuf, bits);
 8002fca:	4639      	mov	r1, r7
 8002fcc:	4658      	mov	r0, fp
 8002fce:	f7fd fe17 	bl	8000c00 <get_bits>
                    ist_pos[k] = (s == max_scf ? -1 : s);
 8002fd2:	4550      	cmp	r0, sl
 8002fd4:	bf14      	ite	ne
 8002fd6:	b2c0      	uxtbne	r0, r0
 8002fd8:	20ff      	moveq	r0, #255	; 0xff
 8002fda:	f806 0b01 	strb.w	r0, [r6], #1
 8002fde:	bf0c      	ite	eq
 8002fe0:	9904      	ldreq	r1, [sp, #16]
 8002fe2:	4601      	movne	r1, r0
                for (k = 0; k < cnt; k++)
 8002fe4:	42b4      	cmp	r4, r6
                    scf[k] = s;
 8002fe6:	f805 1f01 	strb.w	r1, [r5, #1]!
                for (k = 0; k < cnt; k++)
 8002fea:	d1ee      	bne.n	8002fca <mp3dec_decode_frame+0xd5e>
 8002fec:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 8002ff0:	e592      	b.n	8002b18 <mp3dec_decode_frame+0x8ac>
            memcpy(scf, ist_pos, cnt);
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	442c      	add	r4, r5
 8002ffa:	f00c ffa8 	bl	800ff4e <memcpy>
 8002ffe:	e58b      	b.n	8002b18 <mp3dec_decode_frame+0x8ac>
 8003000:	9e07      	ldr	r6, [sp, #28]
 8003002:	4683      	mov	fp, r0
 8003004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003006:	4ab8      	ldr	r2, [pc, #736]	; (80032e8 <mp3dec_decode_frame+0x107c>)
 8003008:	7adf      	ldrb	r7, [r3, #11]
 800300a:	49b8      	ldr	r1, [pc, #736]	; (80032ec <mp3dec_decode_frame+0x1080>)
    for (np = 1 - big_val_cnt;; dst += 4)
 800300c:	9b03      	ldr	r3, [sp, #12]
 800300e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8003012:	2f00      	cmp	r7, #0
 8003014:	bf08      	it	eq
 8003016:	460a      	moveq	r2, r1
 8003018:	f106 0410 	add.w	r4, r6, #16
 800301c:	4617      	mov	r7, r2
 800301e:	e9dd 6c04 	ldrd	r6, ip, [sp, #16]
 8003022:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003024:	f1c3 0301 	rsb	r3, r3, #1
 8003028:	eba9 0502 	sub.w	r5, r9, r2
 800302c:	4692      	mov	sl, r2
        int leaf = codebook_count1[PEEK_BITS(4)];
 800302e:	ea4f 721b 	mov.w	r2, fp, lsr #28
 8003032:	5cba      	ldrb	r2, [r7, r2]
        if (!(leaf & 8))
 8003034:	0710      	lsls	r0, r2, #28
 8003036:	d40a      	bmi.n	800304e <mp3dec_decode_frame+0xde2>
            leaf = codebook_count1[(leaf >> 3) + (bs_cache << 4 >> (32 - (leaf & 3)))];
 8003038:	f002 0003 	and.w	r0, r2, #3
 800303c:	f1c0 0020 	rsb	r0, r0, #32
 8003040:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8003044:	eb07 02d2 	add.w	r2, r7, r2, lsr #3
 8003048:	fa21 f000 	lsr.w	r0, r1, r0
 800304c:	5c12      	ldrb	r2, [r2, r0]
        FLUSH_BITS(leaf & 7);
 800304e:	f002 0007 	and.w	r0, r2, #7
 8003052:	4480      	add	r8, r0
        if (BSPOS > layer3gr_limit)
 8003054:	1ee9      	subs	r1, r5, #3
 8003056:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 800305a:	458e      	cmp	lr, r1
        FLUSH_BITS(leaf & 7);
 800305c:	fa0b fb00 	lsl.w	fp, fp, r0
        if (BSPOS > layer3gr_limit)
 8003060:	db6b      	blt.n	800313a <mp3dec_decode_frame+0xece>
        RELOAD_SCALEFACTOR;
 8003062:	3b01      	subs	r3, #1
 8003064:	d108      	bne.n	8003078 <mp3dec_decode_frame+0xe0c>
 8003066:	7833      	ldrb	r3, [r6, #0]
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	f106 0601 	add.w	r6, r6, #1
 800306e:	d064      	beq.n	800313a <mp3dec_decode_frame+0xece>
 8003070:	ed9c 7a00 	vldr	s14, [ip]
 8003074:	f10c 0c04 	add.w	ip, ip, #4
        DEQ_COUNT1(0);
 8003078:	0611      	lsls	r1, r2, #24
 800307a:	d50c      	bpl.n	8003096 <mp3dec_decode_frame+0xe2a>
 800307c:	f1bb 0f00 	cmp.w	fp, #0
 8003080:	bfb4      	ite	lt
 8003082:	eef1 7a47 	vneglt.f32	s15, s14
 8003086:	eef0 7a47 	vmovge.f32	s15, s14
 800308a:	ed44 7a04 	vstr	s15, [r4, #-16]
 800308e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003092:	f108 0801 	add.w	r8, r8, #1
        DEQ_COUNT1(1);
 8003096:	0650      	lsls	r0, r2, #25
 8003098:	d50c      	bpl.n	80030b4 <mp3dec_decode_frame+0xe48>
 800309a:	f1bb 0f00 	cmp.w	fp, #0
 800309e:	bfb4      	ite	lt
 80030a0:	eef1 7a47 	vneglt.f32	s15, s14
 80030a4:	eef0 7a47 	vmovge.f32	s15, s14
 80030a8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80030ac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80030b0:	f108 0801 	add.w	r8, r8, #1
        RELOAD_SCALEFACTOR;
 80030b4:	3b01      	subs	r3, #1
 80030b6:	d108      	bne.n	80030ca <mp3dec_decode_frame+0xe5e>
 80030b8:	7833      	ldrb	r3, [r6, #0]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	f106 0601 	add.w	r6, r6, #1
 80030c0:	d03b      	beq.n	800313a <mp3dec_decode_frame+0xece>
 80030c2:	ed9c 7a00 	vldr	s14, [ip]
 80030c6:	f10c 0c04 	add.w	ip, ip, #4
        DEQ_COUNT1(2);
 80030ca:	0691      	lsls	r1, r2, #26
 80030cc:	d50c      	bpl.n	80030e8 <mp3dec_decode_frame+0xe7c>
 80030ce:	f1bb 0f00 	cmp.w	fp, #0
 80030d2:	bfb4      	ite	lt
 80030d4:	eef1 7a47 	vneglt.f32	s15, s14
 80030d8:	eef0 7a47 	vmovge.f32	s15, s14
 80030dc:	ed44 7a02 	vstr	s15, [r4, #-8]
 80030e0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80030e4:	f108 0801 	add.w	r8, r8, #1
        DEQ_COUNT1(3);
 80030e8:	06d2      	lsls	r2, r2, #27
 80030ea:	d50c      	bpl.n	8003106 <mp3dec_decode_frame+0xe9a>
 80030ec:	f1bb 0f00 	cmp.w	fp, #0
 80030f0:	bfb4      	ite	lt
 80030f2:	eef1 7a47 	vneglt.f32	s15, s14
 80030f6:	eef0 7a47 	vmovge.f32	s15, s14
 80030fa:	ed44 7a01 	vstr	s15, [r4, #-4]
 80030fe:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003102:	f108 0801 	add.w	r8, r8, #1
        CHECK_BITS;
 8003106:	f1b8 0f00 	cmp.w	r8, #0
 800310a:	db14      	blt.n	8003136 <mp3dec_decode_frame+0xeca>
 800310c:	4642      	mov	r2, r8
 800310e:	4648      	mov	r0, r9
 8003110:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003114:	4091      	lsls	r1, r2
 8003116:	3a08      	subs	r2, #8
 8003118:	ea4b 0b01 	orr.w	fp, fp, r1
 800311c:	d5f8      	bpl.n	8003110 <mp3dec_decode_frame+0xea4>
 800311e:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8003122:	1c51      	adds	r1, r2, #1
 8003124:	f1a8 0808 	sub.w	r8, r8, #8
 8003128:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800312c:	4489      	add	r9, r1
 800312e:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
 8003132:	eba9 050a 	sub.w	r5, r9, sl
 8003136:	3410      	adds	r4, #16
 8003138:	e779      	b.n	800302e <mp3dec_decode_frame+0xdc2>
    bs->pos = layer3gr_limit;
 800313a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (ch = 0; ch < nch; ch++)
 800313c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    bs->pos = layer3gr_limit;
 800313e:	4611      	mov	r1, r2
 8003140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003142:	604a      	str	r2, [r1, #4]
 8003144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800314a:	9214      	str	r2, [sp, #80]	; 0x50
 800314c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800314e:	3227      	adds	r2, #39	; 0x27
 8003150:	9213      	str	r2, [sp, #76]	; 0x4c
 8003152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003154:	321c      	adds	r2, #28
 8003156:	920c      	str	r2, [sp, #48]	; 0x30
    for (ch = 0; ch < nch; ch++)
 8003158:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800315a:	3301      	adds	r3, #1
 800315c:	429a      	cmp	r2, r3
 800315e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003160:	f47f ac8a 	bne.w	8002a78 <mp3dec_decode_frame+0x80c>
    if (HDR_TEST_I_STEREO(h->header))
 8003164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003166:	7819      	ldrb	r1, [r3, #0]
 8003168:	06cb      	lsls	r3, r1, #27
 800316a:	f100 81f4 	bmi.w	8003556 <mp3dec_decode_frame+0x12ea>
    } else if (HDR_IS_MS_STEREO(h->header))
 800316e:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
 8003172:	2960      	cmp	r1, #96	; 0x60
 8003174:	f000 81d8 	beq.w	8003528 <mp3dec_decode_frame+0x12bc>
    for (ch = 0; ch < nch; ch++, gr_info++)
 8003178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800317a:	2b00      	cmp	r3, #0
 800317c:	f340 808e 	ble.w	800329c <mp3dec_decode_frame+0x1030>
 8003180:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003184:	9e1c      	ldr	r6, [sp, #112]	; 0x70
        int aa_bands = 31;
 8003186:	eddf 9a5a 	vldr	s19, [pc, #360]	; 80032f0 <mp3dec_decode_frame+0x1084>
 800318a:	ed9f 9a5a 	vldr	s18, [pc, #360]	; 80032f4 <mp3dec_decode_frame+0x1088>
 800318e:	9203      	str	r2, [sp, #12]
 8003190:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003194:	f502 50c0 	add.w	r0, r2, #6144	; 0x1800
 8003198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800319c:	9306      	str	r3, [sp, #24]
 800319e:	f100 0309 	add.w	r3, r0, #9
 80031a2:	9318      	str	r3, [sp, #96]	; 0x60
 80031a4:	f100 030a 	add.w	r3, r0, #10
 80031a8:	9307      	str	r3, [sp, #28]
 80031aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80031ac:	f603 3b98 	addw	fp, r3, #2968	; 0xb98
        int n_long_bands = (gr_info->mixed_block_flag ? 2 : 0) << (int)(HDR_GET_MY_SAMPLE_RATE(h->header) == 2);
 80031b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80031b2:	7b31      	ldrb	r1, [r6, #12]
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	9b07      	ldr	r3, [sp, #28]
 80031b8:	7818      	ldrb	r0, [r3, #0]
 80031ba:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 80031be:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031c8:	f3c0 0281 	ubfx	r2, r0, #2, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	f1a3 0302 	sub.w	r3, r3, #2
 80031d2:	2900      	cmp	r1, #0
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80031dc:	bf0c      	ite	eq
 80031de:	2500      	moveq	r5, #0
 80031e0:	2502      	movne	r5, #2
        if (gr_info->n_short_sfb)
 80031e2:	7bb2      	ldrb	r2, [r6, #14]
        int n_long_bands = (gr_info->mixed_block_flag ? 2 : 0) << (int)(HDR_GET_MY_SAMPLE_RATE(h->header) == 2);
 80031e4:	409d      	lsls	r5, r3
 80031e6:	f1ab 0348 	sub.w	r3, fp, #72	; 0x48
 80031ea:	9304      	str	r3, [sp, #16]
        if (gr_info->n_short_sfb)
 80031ec:	2a00      	cmp	r2, #0
 80031ee:	f040 80ea 	bne.w	80033c6 <mp3dec_decode_frame+0x115a>
        int aa_bands = 31;
 80031f2:	271f      	movs	r7, #31
 80031f4:	465c      	mov	r4, fp
 80031f6:	4940      	ldr	r1, [pc, #256]	; (80032f8 <mp3dec_decode_frame+0x108c>)
 80031f8:	eeb0 6a69 	vmov.f32	s12, s19
 80031fc:	eef0 6a49 	vmov.f32	s13, s18
 8003200:	f104 0020 	add.w	r0, r4, #32
 8003204:	4622      	mov	r2, r4
 8003206:	4623      	mov	r3, r4
 8003208:	e003      	b.n	8003212 <mp3dec_decode_frame+0xfa6>
 800320a:	ecf1 6a01 	vldmia	r1!, {s13}
 800320e:	ed91 6a07 	vldr	s12, [r1, #28]
            float d = grbuf[17 - i];
 8003212:	ed72 7a01 	vldmdb	r2!, {s15}
            float u = grbuf[18 + i];
 8003216:	edd3 5a00 	vldr	s11, [r3]
            grbuf[18 + i] = u*g_aa[0][i] - d*g_aa[1][i];
 800321a:	ee26 7a67 	vnmul.f32	s14, s12, s15
            grbuf[17 - i] = u*g_aa[1][i] + d*g_aa[0][i];
 800321e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            grbuf[18 + i] = u*g_aa[0][i] - d*g_aa[1][i];
 8003222:	eea5 7aa6 	vfma.f32	s14, s11, s13
            grbuf[17 - i] = u*g_aa[1][i] + d*g_aa[0][i];
 8003226:	eee5 7a86 	vfma.f32	s15, s11, s12
            grbuf[18 + i] = u*g_aa[0][i] - d*g_aa[1][i];
 800322a:	eca3 7a01 	vstmia	r3!, {s14}
        for(; i < 8; i++)
 800322e:	4298      	cmp	r0, r3
            grbuf[17 - i] = u*g_aa[1][i] + d*g_aa[0][i];
 8003230:	edc2 7a00 	vstr	s15, [r2]
        for(; i < 8; i++)
 8003234:	d1e9      	bne.n	800320a <mp3dec_decode_frame+0xf9e>
    for (; nbands > 0; nbands--, grbuf += 18)
 8003236:	3f01      	subs	r7, #1
 8003238:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800323c:	d1db      	bne.n	80031f6 <mp3dec_decode_frame+0xf8a>
        L3_imdct_gr(s->grbuf[ch], h->mdct_overlap[ch], gr_info->block_type, n_long_bands);
 800323e:	9c03      	ldr	r4, [sp, #12]
 8003240:	7af7      	ldrb	r7, [r6, #11]
    if (n_long_bands)
 8003242:	2d00      	cmp	r5, #0
 8003244:	f040 810d 	bne.w	8003462 <mp3dec_decode_frame+0x11f6>
    if (block_type == SHORT_BLOCK_TYPE)
 8003248:	2f02      	cmp	r7, #2
 800324a:	f1c5 0520 	rsb	r5, r5, #32
 800324e:	f000 811e 	beq.w	800348e <mp3dec_decode_frame+0x1222>
        L3_imdct36(grbuf, overlap, g_mdct_window[block_type == STOP_BLOCK_TYPE], 32 - n_long_bands);
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <mp3dec_decode_frame+0x1090>)
 8003254:	9804      	ldr	r0, [sp, #16]
 8003256:	2f03      	cmp	r7, #3
 8003258:	bf0c      	ite	eq
 800325a:	2748      	moveq	r7, #72	; 0x48
 800325c:	2700      	movne	r7, #0
 800325e:	462b      	mov	r3, r5
 8003260:	4621      	mov	r1, r4
 8003262:	443a      	add	r2, r7
 8003264:	f7fd ff76 	bl	8001154 <L3_imdct36>
    for (b = 0, grbuf += 18; b < 32; b += 2, grbuf += 36)
 8003268:	4659      	mov	r1, fp
 800326a:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 800326e:	460b      	mov	r3, r1
 8003270:	f101 0248 	add.w	r2, r1, #72	; 0x48
            grbuf[i] = -grbuf[i];
 8003274:	edd3 7a01 	vldr	s15, [r3, #4]
 8003278:	eef1 7a67 	vneg.f32	s15, s15
 800327c:	edc3 7a01 	vstr	s15, [r3, #4]
 8003280:	3308      	adds	r3, #8
        for (i = 1; i < 18; i += 2)
 8003282:	4293      	cmp	r3, r2
 8003284:	d1f6      	bne.n	8003274 <mp3dec_decode_frame+0x1008>
    for (b = 0, grbuf += 18; b < 32; b += 2, grbuf += 36)
 8003286:	3190      	adds	r1, #144	; 0x90
 8003288:	4559      	cmp	r1, fp
 800328a:	d1f0      	bne.n	800326e <mp3dec_decode_frame+0x1002>
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003292:	9303      	str	r3, [sp, #12]
    for (ch = 0; ch < nch; ch++, gr_info++)
 8003294:	9b06      	ldr	r3, [sp, #24]
 8003296:	361c      	adds	r6, #28
 8003298:	429e      	cmp	r6, r3
 800329a:	d189      	bne.n	80031b0 <mp3dec_decode_frame+0xf44>
                mp3d_synth_granule(dec->qmf_state, scratch.grbuf[0], 18, info->channels, pcm, scratch.syn[0]);
 800329c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800329e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80032a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80032a4:	f503 52f0 	add.w	r2, r3, #7680	; 0x1e00
 80032a8:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80032ac:	3348      	adds	r3, #72	; 0x48
 80032ae:	321c      	adds	r2, #28
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f501 6135 	add.w	r1, r1, #2896	; 0xb50
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	9201      	str	r2, [sp, #4]
 80032ba:	9400      	str	r4, [sp, #0]
 80032bc:	2212      	movs	r2, #18
 80032be:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80032c2:	f7fe f95b 	bl	800157c <mp3d_synth_granule>
            for (igr = 0; igr < (HDR_TEST_MPEG1(hdr) ? 2 : 1); igr++, pcm += 576*info->channels)
 80032c6:	f50d 4387 	add.w	r3, sp, #17280	; 0x4380
 80032ca:	3348      	adds	r3, #72	; 0x48
 80032cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80032d6:	3201      	adds	r2, #1
 80032d8:	eb04 13c3 	add.w	r3, r4, r3, lsl #7
 80032dc:	921b      	str	r2, [sp, #108]	; 0x6c
 80032de:	9312      	str	r3, [sp, #72]	; 0x48
 80032e0:	f7ff bb85 	b.w	80029ee <mp3dec_decode_frame+0x782>
 80032e4:	460e      	mov	r6, r1
 80032e6:	e68d      	b.n	8003004 <mp3dec_decode_frame+0xd98>
 80032e8:	08011640 	.word	0x08011640
 80032ec:	08011624 	.word	0x08011624
 80032f0:	3f03b5fe 	.word	0x3f03b5fe
 80032f4:	3f5b84a8 	.word	0x3f5b84a8
 80032f8:	0801088c 	.word	0x0801088c
 80032fc:	08010a60 	.word	0x08010a60
        int k, modprod, sfc, ist = HDR_TEST_I_STEREO(hdr) && ch;
 8003300:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f013 0e10 	ands.w	lr, r3, #16
 8003308:	f000 80fd 	beq.w	8003506 <mp3dec_decode_frame+0x129a>
 800330c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800330e:	1c1a      	adds	r2, r3, #0
 8003310:	bf18      	it	ne
 8003312:	2201      	movne	r2, #1
 8003314:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8003318:	4496      	add	lr, r2
 800331a:	4baa      	ldr	r3, [pc, #680]	; (80035c4 <mp3dec_decode_frame+0x1358>)
 800331c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003320:	eb03 010e 	add.w	r1, r3, lr
 8003324:	4116      	asrs	r6, r2
 8003326:	78c9      	ldrb	r1, [r1, #3]
 8003328:	f10e 0c02 	add.w	ip, lr, #2
 800332c:	449c      	add	ip, r3
 800332e:	f10d 088f 	add.w	r8, sp, #143	; 0x8f
 8003332:	f10d 0593 	add.w	r5, sp, #147	; 0x93
 8003336:	4667      	mov	r7, ip
            for (modprod = 1, i = 3; i >= 0; i--)
 8003338:	2001      	movs	r0, #1
                scf_size[i] = (uint8_t)(sfc / modprod % g_mod[k + i]);
 800333a:	fb96 f2f0 	sdiv	r2, r6, r0
 800333e:	fb92 f3f1 	sdiv	r3, r2, r1
 8003342:	fb01 2313 	mls	r3, r1, r3, r2
 8003346:	f805 3901 	strb.w	r3, [r5], #-1
            for (modprod = 1, i = 3; i >= 0; i--)
 800334a:	45a8      	cmp	r8, r5
                modprod *= g_mod[k + i];
 800334c:	fb01 f000 	mul.w	r0, r1, r0
            for (modprod = 1, i = 3; i >= 0; i--)
 8003350:	d002      	beq.n	8003358 <mp3dec_decode_frame+0x10ec>
 8003352:	f817 1901 	ldrb.w	r1, [r7], #-1
 8003356:	e7f0      	b.n	800333a <mp3dec_decode_frame+0x10ce>
        for (k = ist*3*4; sfc >= 0; sfc -= modprod, k += 4)
 8003358:	1a36      	subs	r6, r6, r0
 800335a:	f10e 0e04 	add.w	lr, lr, #4
 800335e:	f10c 0c04 	add.w	ip, ip, #4
 8003362:	d402      	bmi.n	800336a <mp3dec_decode_frame+0x10fe>
 8003364:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8003368:	e7e3      	b.n	8003332 <mp3dec_decode_frame+0x10c6>
        scf_partition += k;
 800336a:	44f2      	add	sl, lr
        scfsi = -16;
 800336c:	f06f 090f 	mvn.w	r9, #15
 8003370:	f7ff bbb2 	b.w	8002ad8 <mp3dec_decode_frame+0x86c>
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 8003374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003376:	f893 e006 	ldrb.w	lr, [r3, #6]
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 800337a:	f893 c007 	ldrb.w	ip, [r3, #7]
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 800337e:	7a1e      	ldrb	r6, [r3, #8]
        int sh = 3 - scf_shift;
 8003380:	9b05      	ldr	r3, [sp, #20]
 8003382:	f1c3 0303 	rsb	r3, r3, #3
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 8003386:	fa0e fe03 	lsl.w	lr, lr, r3
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 800338a:	fa0c fc03 	lsl.w	ip, ip, r3
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 800338e:	409e      	lsls	r6, r3
 8003390:	9b15      	ldr	r3, [sp, #84]	; 0x54
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 8003392:	fa5f fe8e 	uxtb.w	lr, lr
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 8003396:	fa5f fc8c 	uxtb.w	ip, ip
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 800339a:	b2f6      	uxtb	r6, r6
 800339c:	442b      	add	r3, r5
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 800339e:	781c      	ldrb	r4, [r3, #0]
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 80033a0:	7858      	ldrb	r0, [r3, #1]
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 80033a2:	7899      	ldrb	r1, [r3, #2]
        for (i = 0; i < gr->n_short_sfb; i += 3)
 80033a4:	3203      	adds	r2, #3
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 80033a6:	4474      	add	r4, lr
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 80033a8:	4460      	add	r0, ip
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 80033aa:	4431      	add	r1, r6
        for (i = 0; i < gr->n_short_sfb; i += 3)
 80033ac:	42ba      	cmp	r2, r7
            iscf[gr->n_long_sfb + i + 0] += gr->subblock_gain[0] << sh;
 80033ae:	701c      	strb	r4, [r3, #0]
            iscf[gr->n_long_sfb + i + 1] += gr->subblock_gain[1] << sh;
 80033b0:	7058      	strb	r0, [r3, #1]
            iscf[gr->n_long_sfb + i + 2] += gr->subblock_gain[2] << sh;
 80033b2:	7099      	strb	r1, [r3, #2]
 80033b4:	f103 0303 	add.w	r3, r3, #3
        for (i = 0; i < gr->n_short_sfb; i += 3)
 80033b8:	dbf1      	blt.n	800339e <mp3dec_decode_frame+0x1132>
 80033ba:	f7ff bbd4 	b.w	8002b66 <mp3dec_decode_frame+0x8fa>
 80033be:	f1a1 03d8 	sub.w	r3, r1, #216	; 0xd8
 80033c2:	f7ff bbdc 	b.w	8002b7e <mp3dec_decode_frame+0x912>
            L3_reorder(s->grbuf[ch] + n_long_bands*18, s->syn[0], gr_info->sfbtab + gr_info->n_long_sfb);
 80033c6:	7b71      	ldrb	r1, [r6, #13]
 80033c8:	f8d6 a000 	ldr.w	sl, [r6]
 80033cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    for (;0 != (len = *sfb); sfb += 3, src += 2*len)
 80033ce:	f81a 2001 	ldrb.w	r2, [sl, r1]
            L3_reorder(s->grbuf[ch] + n_long_bands*18, s->syn[0], gr_info->sfbtab + gr_info->n_long_sfb);
 80033d2:	448a      	add	sl, r1
 80033d4:	9904      	ldr	r1, [sp, #16]
 80033d6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80033da:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 80033de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80033e2:	f100 031c 	add.w	r3, r0, #28
 80033e6:	9105      	str	r1, [sp, #20]
 80033e8:	9308      	str	r3, [sp, #32]
            aa_bands = n_long_bands - 1;
 80033ea:	1e6f      	subs	r7, r5, #1
    for (;0 != (len = *sfb); sfb += 3, src += 2*len)
 80033ec:	b352      	cbz	r2, 8003444 <mp3dec_decode_frame+0x11d8>
    float *src = grbuf, *dst = scratch;
 80033ee:	46ae      	mov	lr, r5
 80033f0:	4699      	mov	r9, r3
 80033f2:	4615      	mov	r5, r2
 80033f4:	4608      	mov	r0, r1
            *dst++ = src[1*len];
 80033f6:	b212      	sxth	r2, r2
            *dst++ = src[2*len];
 80033f8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80033fc:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8003400:	f109 030c 	add.w	r3, r9, #12
 8003404:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        for (i = 0; i < len; i++, src++)
 8003408:	2100      	movs	r1, #0
 800340a:	e000      	b.n	800340e <mp3dec_decode_frame+0x11a2>
 800340c:	4663      	mov	r3, ip
            *dst++ = src[0*len];
 800340e:	f850 cb04 	ldr.w	ip, [r0], #4
 8003412:	f843 cc0c 	str.w	ip, [r3, #-12]
            *dst++ = src[1*len];
 8003416:	f854 cb04 	ldr.w	ip, [r4], #4
 800341a:	f843 cc08 	str.w	ip, [r3, #-8]
        for (i = 0; i < len; i++, src++)
 800341e:	3101      	adds	r1, #1
            *dst++ = src[2*len];
 8003420:	f852 cb04 	ldr.w	ip, [r2], #4
 8003424:	f843 cc04 	str.w	ip, [r3, #-4]
        for (i = 0; i < len; i++, src++)
 8003428:	42a9      	cmp	r1, r5
 800342a:	4699      	mov	r9, r3
 800342c:	f103 0c0c 	add.w	ip, r3, #12
 8003430:	dbec      	blt.n	800340c <mp3dec_decode_frame+0x11a0>
    for (;0 != (len = *sfb); sfb += 3, src += 2*len)
 8003432:	f81a 5f03 	ldrb.w	r5, [sl, #3]!
 8003436:	4440      	add	r0, r8
 8003438:	462a      	mov	r2, r5
 800343a:	2d00      	cmp	r5, #0
 800343c:	d1db      	bne.n	80033f6 <mp3dec_decode_frame+0x118a>
 800343e:	9a08      	ldr	r2, [sp, #32]
 8003440:	4675      	mov	r5, lr
 8003442:	1a9a      	subs	r2, r3, r2
    memcpy(grbuf, scratch, (dst - scratch)*sizeof(float));
 8003444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003446:	9805      	ldr	r0, [sp, #20]
 8003448:	f503 51f0 	add.w	r1, r3, #7680	; 0x1e00
 800344c:	311c      	adds	r1, #28
 800344e:	f00c fd7e 	bl	800ff4e <memcpy>
    for (; nbands > 0; nbands--, grbuf += 18)
 8003452:	2f00      	cmp	r7, #0
 8003454:	f73f aece 	bgt.w	80031f4 <mp3dec_decode_frame+0xf88>
        L3_imdct_gr(s->grbuf[ch], h->mdct_overlap[ch], gr_info->block_type, n_long_bands);
 8003458:	9c03      	ldr	r4, [sp, #12]
 800345a:	7af7      	ldrb	r7, [r6, #11]
    if (n_long_bands)
 800345c:	2d00      	cmp	r5, #0
 800345e:	f43f aef3 	beq.w	8003248 <mp3dec_decode_frame+0xfdc>
        L3_imdct36(grbuf, overlap, g_mdct_window[0], n_long_bands);
 8003462:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003466:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800346a:	4a57      	ldr	r2, [pc, #348]	; (80035c8 <mp3dec_decode_frame+0x135c>)
 800346c:	462b      	mov	r3, r5
        grbuf += 18*n_long_bands;
 800346e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
        L3_imdct36(grbuf, overlap, g_mdct_window[0], n_long_bands);
 8003472:	4649      	mov	r1, r9
 8003474:	4640      	mov	r0, r8
 8003476:	f7fd fe6d 	bl	8001154 <L3_imdct36>
        grbuf += 18*n_long_bands;
 800347a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
    if (block_type == SHORT_BLOCK_TYPE)
 800347e:	2f02      	cmp	r7, #2
        grbuf += 18*n_long_bands;
 8003480:	9304      	str	r3, [sp, #16]
        overlap += 9*n_long_bands;
 8003482:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 8003486:	f1c5 0520 	rsb	r5, r5, #32
    if (block_type == SHORT_BLOCK_TYPE)
 800348a:	f47f aee2 	bne.w	8003252 <mp3dec_decode_frame+0xfe6>
 800348e:	9b04      	ldr	r3, [sp, #16]
 8003490:	f103 0818 	add.w	r8, r3, #24
        L3_imdct12(tmp + 1, grbuf + 12, overlap + 6);
 8003494:	ab29      	add	r3, sp, #164	; 0xa4
 8003496:	9304      	str	r3, [sp, #16]
        L3_imdct12(tmp + 2, overlap, overlap + 6);
 8003498:	ab2a      	add	r3, sp, #168	; 0xa8
 800349a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
 800349e:	9305      	str	r3, [sp, #20]
        memcpy(tmp, grbuf, sizeof(tmp));
 80034a0:	f1a8 0718 	sub.w	r7, r8, #24
 80034a4:	4639      	mov	r1, r7
 80034a6:	2248      	movs	r2, #72	; 0x48
 80034a8:	4648      	mov	r0, r9
 80034aa:	f00c fd50 	bl	800ff4e <memcpy>
        memcpy(grbuf, overlap, 6*sizeof(float));
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	6860      	ldr	r0, [r4, #4]
 80034b2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80034b6:	68e2      	ldr	r2, [r4, #12]
 80034b8:	f848 1c18 	str.w	r1, [r8, #-24]
 80034bc:	f104 0a18 	add.w	sl, r4, #24
 80034c0:	6921      	ldr	r1, [r4, #16]
 80034c2:	f848 0c14 	str.w	r0, [r8, #-20]
 80034c6:	6960      	ldr	r0, [r4, #20]
 80034c8:	f848 cc10 	str.w	ip, [r8, #-16]
 80034cc:	f848 2c0c 	str.w	r2, [r8, #-12]
 80034d0:	f848 1c08 	str.w	r1, [r8, #-8]
 80034d4:	f848 0c04 	str.w	r0, [r8, #-4]
        L3_imdct12(tmp, grbuf + 6, overlap + 6);
 80034d8:	4641      	mov	r1, r8
 80034da:	4652      	mov	r2, sl
 80034dc:	4648      	mov	r0, r9
 80034de:	f7fd feeb 	bl	80012b8 <L3_imdct12>
        L3_imdct12(tmp + 1, grbuf + 12, overlap + 6);
 80034e2:	f108 0118 	add.w	r1, r8, #24
 80034e6:	4652      	mov	r2, sl
 80034e8:	9804      	ldr	r0, [sp, #16]
 80034ea:	f7fd fee5 	bl	80012b8 <L3_imdct12>
        L3_imdct12(tmp + 2, overlap, overlap + 6);
 80034ee:	4621      	mov	r1, r4
 80034f0:	4652      	mov	r2, sl
 80034f2:	9805      	ldr	r0, [sp, #20]
 80034f4:	f7fd fee0 	bl	80012b8 <L3_imdct12>
    for (;nbands > 0; nbands--, overlap += 9, grbuf += 18)
 80034f8:	3d01      	subs	r5, #1
 80034fa:	f108 0848 	add.w	r8, r8, #72	; 0x48
 80034fe:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8003502:	d1cd      	bne.n	80034a0 <mp3dec_decode_frame+0x1234>
 8003504:	e6b0      	b.n	8003268 <mp3dec_decode_frame+0xffc>
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <mp3dec_decode_frame+0x1358>)
        int k, modprod, sfc, ist = HDR_TEST_I_STEREO(hdr) && ch;
 8003508:	2104      	movs	r1, #4
 800350a:	e70d      	b.n	8003328 <mp3dec_decode_frame+0x10bc>
    while (big_val_cnt > 0)
 800350c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    float one = 0.0f;
 800350e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80035cc <mp3dec_decode_frame+0x1360>
    while (big_val_cnt > 0)
 8003512:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8003516:	331c      	adds	r3, #28
 8003518:	9305      	str	r3, [sp, #20]
 800351a:	e573      	b.n	8003004 <mp3dec_decode_frame+0xd98>
 800351c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800351e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8003522:	330b      	adds	r3, #11
 8003524:	9319      	str	r3, [sp, #100]	; 0x64
 8003526:	e61d      	b.n	8003164 <mp3dec_decode_frame+0xef8>
 8003528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800352a:	f503 52a3 	add.w	r2, r3, #5216	; 0x1460
 800352e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003530:	321c      	adds	r2, #28
 8003532:	4611      	mov	r1, r2
 8003534:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
        float a = left[i];
 8003538:	ed93 7a00 	vldr	s14, [r3]
        float b = right[i];
 800353c:	edd2 7a00 	vldr	s15, [r2]
        left[i] = a + b;
 8003540:	ee77 6a27 	vadd.f32	s13, s14, s15
        right[i] = a - b;
 8003544:	ee77 7a67 	vsub.f32	s15, s14, s15
        left[i] = a + b;
 8003548:	ece3 6a01 	vstmia	r3!, {s13}
    for (; i < n; i++)
 800354c:	4299      	cmp	r1, r3
        right[i] = a - b;
 800354e:	ece2 7a01 	vstmia	r2!, {s15}
    for (; i < n; i++)
 8003552:	d1f1      	bne.n	8003538 <mp3dec_decode_frame+0x12cc>
 8003554:	e610      	b.n	8003178 <mp3dec_decode_frame+0xf0c>
    int max_band[3], n_sfb = gr->n_long_sfb + gr->n_short_sfb;
 8003556:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003558:	f893 e00e 	ldrb.w	lr, [r3, #14]
 800355c:	f893 c00d 	ldrb.w	ip, [r3, #13]
    L3_stereo_top_band(left + 576, gr->sfbtab, n_sfb, max_band);
 8003560:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
    int i, max_blocks = gr->n_short_sfb ? 3 : 1;
 8003564:	f1be 0f00 	cmp.w	lr, #0
    L3_stereo_top_band(left + 576, gr->sfbtab, n_sfb, max_band);
 8003568:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    int i, max_blocks = gr->n_short_sfb ? 3 : 1;
 800356c:	bf08      	it	eq
 800356e:	2701      	moveq	r7, #1
    max_band[0] = max_band[1] = max_band[2] = -1;
 8003570:	aa28      	add	r2, sp, #160	; 0xa0
 8003572:	f04f 33ff 	mov.w	r3, #4294967295
    int i, max_blocks = gr->n_short_sfb ? 3 : 1;
 8003576:	bf18      	it	ne
 8003578:	2703      	movne	r7, #3
    for (i = 0; i < nbands; i++)
 800357a:	eb1c 0e0e 	adds.w	lr, ip, lr
    max_band[0] = max_band[1] = max_band[2] = -1;
 800357e:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8003582:	9215      	str	r2, [sp, #84]	; 0x54
 8003584:	9328      	str	r3, [sp, #160]	; 0xa0
    for (i = 0; i < nbands; i++)
 8003586:	d040      	beq.n	800360a <mp3dec_decode_frame+0x139e>
 8003588:	441c      	add	r4, r3
 800358a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                max_band[i % 3] = i;
 800358c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80035d0 <mp3dec_decode_frame+0x1364>
    for (i = 0; i < nbands; i++)
 8003590:	f503 50a3 	add.w	r0, r3, #5216	; 0x1460
 8003594:	eb04 080e 	add.w	r8, r4, lr
 8003598:	301c      	adds	r0, #28
 800359a:	2600      	movs	r6, #0
        for (k = 0; k < sfb[i]; k += 2)
 800359c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80035a0:	b36d      	cbz	r5, 80035fe <mp3dec_decode_frame+0x1392>
            if (right[k] != 0 || right[k + 1] != 0)
 80035a2:	edd0 7a00 	vldr	s15, [r0]
 80035a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	d164      	bne.n	800367a <mp3dec_decode_frame+0x140e>
 80035b0:	edd0 7a01 	vldr	s15, [r0, #4]
 80035b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035bc:	d15d      	bne.n	800367a <mp3dec_decode_frame+0x140e>
 80035be:	4603      	mov	r3, r0
        for (k = 0; k < sfb[i]; k += 2)
 80035c0:	2200      	movs	r2, #0
 80035c2:	e019      	b.n	80035f8 <mp3dec_decode_frame+0x138c>
 80035c4:	08010af0 	.word	0x08010af0
 80035c8:	08010a60 	.word	0x08010a60
 80035cc:	00000000 	.word	0x00000000
 80035d0:	aaaaaaab 	.word	0xaaaaaaab
 80035d4:	3fb504f3 	.word	0x3fb504f3
            if (right[k] != 0 || right[k + 1] != 0)
 80035d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80035dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	f103 0308 	add.w	r3, r3, #8
 80035e8:	d147      	bne.n	800367a <mp3dec_decode_frame+0x140e>
 80035ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80035ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f6:	d140      	bne.n	800367a <mp3dec_decode_frame+0x140e>
        for (k = 0; k < sfb[i]; k += 2)
 80035f8:	3202      	adds	r2, #2
 80035fa:	42aa      	cmp	r2, r5
 80035fc:	dbec      	blt.n	80035d8 <mp3dec_decode_frame+0x136c>
    for (i = 0; i < nbands; i++)
 80035fe:	45a0      	cmp	r8, r4
        right += sfb[i];
 8003600:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    for (i = 0; i < nbands; i++)
 8003604:	f106 0601 	add.w	r6, r6, #1
 8003608:	d1c8      	bne.n	800359c <mp3dec_decode_frame+0x1330>
 800360a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800360c:	461a      	mov	r2, r3
 800360e:	6818      	ldr	r0, [r3, #0]
    if (gr->n_long_sfb)
 8003610:	f1bc 0f00 	cmp.w	ip, #0
 8003614:	d00b      	beq.n	800362e <mp3dec_decode_frame+0x13c2>
        max_band[0] = max_band[1] = max_band[2] = MINIMP3_MAX(MINIMP3_MAX(max_band[0], max_band[1]), max_band[2]);
 8003616:	461c      	mov	r4, r3
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	6892      	ldr	r2, [r2, #8]
 800361c:	4298      	cmp	r0, r3
 800361e:	bfb8      	it	lt
 8003620:	4618      	movlt	r0, r3
 8003622:	4290      	cmp	r0, r2
 8003624:	bfb8      	it	lt
 8003626:	4610      	movlt	r0, r2
 8003628:	60a0      	str	r0, [r4, #8]
 800362a:	6060      	str	r0, [r4, #4]
 800362c:	6020      	str	r0, [r4, #0]
        int default_pos = HDR_TEST_MPEG1(hdr) ? 3 : 0;
 800362e:	f641 0309 	movw	r3, #6153	; 0x1809
 8003632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003634:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003636:	5cd2      	ldrb	r2, [r2, r3]
 8003638:	ebae 0e07 	sub.w	lr, lr, r7
 800363c:	f50e 537d 	add.w	r3, lr, #16192	; 0x3f40
        ist_pos[itop] = max_band[i] >= prev ? default_pos : ist_pos[prev];
 8003640:	f012 0208 	ands.w	r2, r2, #8
 8003644:	f103 0303 	add.w	r3, r3, #3
 8003648:	4423      	add	r3, r4
 800364a:	bf18      	it	ne
 800364c:	f04f 0c03 	movne.w	ip, #3
 8003650:	ebae 0407 	sub.w	r4, lr, r7
 8003654:	bf08      	it	eq
 8003656:	f04f 0c00 	moveq.w	ip, #0
 800365a:	427f      	negs	r7, r7
 800365c:	ae29      	add	r6, sp, #164	; 0xa4
 800365e:	4605      	mov	r5, r0
 8003660:	42ac      	cmp	r4, r5
 8003662:	f104 0401 	add.w	r4, r4, #1
 8003666:	bfcc      	ite	gt
 8003668:	5ddd      	ldrbgt	r5, [r3, r7]
 800366a:	4665      	movle	r5, ip
    for (i = 0; i < max_blocks; i++)
 800366c:	45a6      	cmp	lr, r4
        ist_pos[itop] = max_band[i] >= prev ? default_pos : ist_pos[prev];
 800366e:	f803 5b01 	strb.w	r5, [r3], #1
    for (i = 0; i < max_blocks; i++)
 8003672:	d012      	beq.n	800369a <mp3dec_decode_frame+0x142e>
 8003674:	f856 5b04 	ldr.w	r5, [r6], #4
 8003678:	e7f2      	b.n	8003660 <mp3dec_decode_frame+0x13f4>
                max_band[i % 3] = i;
 800367a:	fba9 2306 	umull	r2, r3, r9, r6
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003684:	f50d 4287 	add.w	r2, sp, #17280	; 0x4380
 8003688:	1af3      	subs	r3, r6, r3
 800368a:	3210      	adds	r2, #16
 800368c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003690:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 8003694:	f843 6c70 	str.w	r6, [r3, #-112]
 8003698:	e7b1      	b.n	80035fe <mp3dec_decode_frame+0x1392>
    L3_stereo_process(left, ist_pos, gr->sfbtab, hdr, max_band, gr[1].scalefac_compress & 1);
 800369a:	e9dd 341d 	ldrd	r3, r4, [sp, #116]	; 0x74
 800369e:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 80036a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for (i = 0; sfb[i]; i++)
 80036a4:	7835      	ldrb	r5, [r6, #0]
    L3_stereo_process(left, ist_pos, gr->sfbtab, hdr, max_band, gr[1].scalefac_compress & 1);
 80036a6:	f8b3 8024 	ldrh.w	r8, [r3, #36]	; 0x24
    unsigned i, max_pos = HDR_TEST_MPEG1(hdr) ? 7 : 64;
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 80036b2:	f04f 0c07 	movne.w	ip, #7
    L3_stereo_process(left, ist_pos, gr->sfbtab, hdr, max_band, gr[1].scalefac_compress & 1);
 80036b6:	f008 0801 	and.w	r8, r8, #1
    for (i = 0; sfb[i]; i++)
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	f43f ad5c 	beq.w	8003178 <mp3dec_decode_frame+0xf0c>
 80036c0:	ed5f 6a3c 	vldr	s13, [pc, #-240]	; 80035d4 <mp3dec_decode_frame+0x1368>
 80036c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
                kl = g_pan[2*ipos];
 80036c6:	4f54      	ldr	r7, [pc, #336]	; (8003818 <mp3dec_decode_frame+0x15ac>)
 80036c8:	f011 0b20 	ands.w	fp, r1, #32
 80036cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80036d0:	bf08      	it	eq
 80036d2:	eef0 6a67 	vmoveq.f32	s13, s15
    for (i = 0; sfb[i]; i++)
 80036d6:	f503 6e35 	add.w	lr, r3, #2896	; 0xb50
 80036da:	2400      	movs	r4, #0
        unsigned ipos = ist_pos[i];
 80036dc:	f643 7a43 	movw	sl, #16195	; 0x3f43
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 80036e0:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
        if ((int)i > max_band[i % 3] && ipos < max_pos)
 80036e4:	4284      	cmp	r4, r0
 80036e6:	dd05      	ble.n	80036f4 <mp3dec_decode_frame+0x1488>
        unsigned ipos = ist_pos[i];
 80036e8:	eb04 030a 	add.w	r3, r4, sl
 80036ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036ee:	5cc9      	ldrb	r1, [r1, r3]
        if ((int)i > max_band[i % 3] && ipos < max_pos)
 80036f0:	4561      	cmp	r1, ip
 80036f2:	d31c      	bcc.n	800372e <mp3dec_decode_frame+0x14c2>
        } else if (HDR_TEST_MS_STEREO(hdr))
 80036f4:	f1bb 0f00 	cmp.w	fp, #0
 80036f8:	d13a      	bne.n	8003770 <mp3dec_decode_frame+0x1504>
        left += sfb[i];
 80036fa:	7833      	ldrb	r3, [r6, #0]
    for (i = 0; sfb[i]; i++)
 80036fc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8003700:	3401      	adds	r4, #1
        left += sfb[i];
 8003702:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
    for (i = 0; sfb[i]; i++)
 8003706:	2d00      	cmp	r5, #0
 8003708:	f43f ad36 	beq.w	8003178 <mp3dec_decode_frame+0xf0c>
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <mp3dec_decode_frame+0x15b0>)
 800370e:	fba3 1304 	umull	r1, r3, r3, r4
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003718:	f50d 4187 	add.w	r1, sp, #17280	; 0x4380
 800371c:	1ae3      	subs	r3, r4, r3
 800371e:	3110      	adds	r1, #16
 8003720:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003724:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 8003728:	f853 0c70 	ldr.w	r0, [r3, #-112]
 800372c:	e7da      	b.n	80036e4 <mp3dec_decode_frame+0x1478>
            if (HDR_TEST_MPEG1(hdr))
 800372e:	2a00      	cmp	r2, #0
 8003730:	d04d      	beq.n	80037ce <mp3dec_decode_frame+0x1562>
                kl = g_pan[2*ipos];
 8003732:	b209      	sxth	r1, r1
 8003734:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
 8003738:	edd3 7a00 	vldr	s15, [r3]
                kr = g_pan[2*ipos + 1];
 800373c:	ed93 7a01 	vldr	s14, [r3, #4]
            L3_intensity_stereo_band(left, sfb[i], kl*s, kr*s);
 8003740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003744:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003748:	4673      	mov	r3, lr
 800374a:	f50e 6010 	add.w	r0, lr, #2304	; 0x900
    for (i = 0; i < n; i++)
 800374e:	2100      	movs	r1, #0
        left[i + 576] = left[i]*kr;
 8003750:	ed93 6a00 	vldr	s12, [r3]
 8003754:	ee26 6a07 	vmul.f32	s12, s12, s14
    for (i = 0; i < n; i++)
 8003758:	3101      	adds	r1, #1
        left[i + 576] = left[i]*kr;
 800375a:	eca0 6a01 	vstmia	r0!, {s12}
        left[i] = left[i]*kl;
 800375e:	ed93 6a00 	vldr	s12, [r3]
 8003762:	ee26 6a27 	vmul.f32	s12, s12, s15
    for (i = 0; i < n; i++)
 8003766:	428d      	cmp	r5, r1
        left[i] = left[i]*kl;
 8003768:	eca3 6a01 	vstmia	r3!, {s12}
    for (i = 0; i < n; i++)
 800376c:	dcf0      	bgt.n	8003750 <mp3dec_decode_frame+0x14e4>
 800376e:	e7c4      	b.n	80036fa <mp3dec_decode_frame+0x148e>
 8003770:	4670      	mov	r0, lr
 8003772:	f50e 6110 	add.w	r1, lr, #2304	; 0x900
    int i = 0;
 8003776:	2300      	movs	r3, #0
        float a = left[i];
 8003778:	ed90 7a00 	vldr	s14, [r0]
        float b = right[i];
 800377c:	edd1 7a00 	vldr	s15, [r1]
    for (; i < n; i++)
 8003780:	3301      	adds	r3, #1
        left[i] = a + b;
 8003782:	ee37 6a27 	vadd.f32	s12, s14, s15
        right[i] = a - b;
 8003786:	ee77 7a67 	vsub.f32	s15, s14, s15
    for (; i < n; i++)
 800378a:	429d      	cmp	r5, r3
        left[i] = a + b;
 800378c:	eca0 6a01 	vstmia	r0!, {s12}
        right[i] = a - b;
 8003790:	ece1 7a01 	vstmia	r1!, {s15}
    for (; i < n; i++)
 8003794:	dcf0      	bgt.n	8003778 <mp3dec_decode_frame+0x150c>
 8003796:	e7b0      	b.n	80036fa <mp3dec_decode_frame+0x148e>
 8003798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800379a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800379e:	3207      	adds	r2, #7
 80037a0:	08d2      	lsrs	r2, r2, #3
 80037a2:	4613      	mov	r3, r2
 80037a4:	f7ff b873 	b.w	800288e <mp3dec_decode_frame+0x622>
        } else if (kbps >= 96 && sample_rate_idx != 1)
 80037a8:	2a5f      	cmp	r2, #95	; 0x5f
 80037aa:	f63e ae20 	bhi.w	80023ee <mp3dec_decode_frame+0x182>
 80037ae:	f04f 0b1b 	mov.w	fp, #27
        nbands = 27;
 80037b2:	465d      	mov	r5, fp
        } else if (kbps >= 96 && sample_rate_idx != 1)
 80037b4:	f04f 0936 	mov.w	r9, #54	; 0x36
        alloc = g_alloc_L2M1;
 80037b8:	4e19      	ldr	r6, [pc, #100]	; (8003820 <mp3dec_decode_frame+0x15b4>)
 80037ba:	f7fe be21 	b.w	8002400 <mp3dec_decode_frame+0x194>
        } else if (kbps >= 96 && sample_rate_idx != 1)
 80037be:	f04f 0b1b 	mov.w	fp, #27
        alloc = g_alloc_L2M1;
 80037c2:	4e17      	ldr	r6, [pc, #92]	; (8003820 <mp3dec_decode_frame+0x15b4>)
        nbands = 27;
 80037c4:	465d      	mov	r5, fp
        } else if (kbps >= 96 && sample_rate_idx != 1)
 80037c6:	f04f 0936 	mov.w	r9, #54	; 0x36
 80037ca:	f7fe be19 	b.w	8002400 <mp3dec_decode_frame+0x194>
                kr = L3_ldexp_q2(1, (ipos + 1) >> 1 << mpeg2_sh);
 80037ce:	1c4b      	adds	r3, r1, #1
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	fa03 f308 	lsl.w	r3, r3, r8
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 80037d6:	1098      	asrs	r0, r3, #2
 80037d8:	fa49 f000 	asr.w	r0, r9, r0
 80037dc:	ee07 0a90 	vmov	s15, r0
 80037e0:	4810      	ldr	r0, [pc, #64]	; (8003824 <mp3dec_decode_frame+0x15b8>)
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80037ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
                if (ipos & 1)
 80037f6:	07cb      	lsls	r3, r1, #31
        y *= g_expfrac[e & 3]*(1 << 30 >> (e >> 2));
 80037f8:	bf56      	itet	pl
 80037fa:	eeb0 7a67 	vmovpl.f32	s14, s15
                    kr = 1;
 80037fe:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
                kl = 1;
 8003802:	eef7 7a00 	vmovpl.f32	s15, #112	; 0x3f800000  1.0
 8003806:	e79b      	b.n	8003740 <mp3dec_decode_frame+0x14d4>
            nbands = sample_rate_idx == 2 ? 12 : 8;
 8003808:	f04f 0b0c 	mov.w	fp, #12
 800380c:	465d      	mov	r5, fp
 800380e:	f04f 0918 	mov.w	r9, #24
            alloc = g_alloc_L2M1_lowrate;
 8003812:	4e05      	ldr	r6, [pc, #20]	; (8003828 <mp3dec_decode_frame+0x15bc>)
 8003814:	f7fe bdf4 	b.w	8002400 <mp3dec_decode_frame+0x194>
 8003818:	08010b08 	.word	0x08010b08
 800381c:	aaaaaaab 	.word	0xaaaaaaab
 8003820:	080108cc 	.word	0x080108cc
 8003824:	08010a20 	.word	0x08010a20
 8003828:	080108d8 	.word	0x080108d8

0800382c <mp3dec_load_index>:
    } while (1);
    return 0;
}

static int mp3dec_load_index(void *user_data, const uint8_t *frame, int frame_size, int free_format_bytes, size_t buf_size, uint64_t offset, mp3dec_frame_info_t *info)
{
 800382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003830:	4604      	mov	r4, r0
    mp3dec_frame_t *idx_frame;
    mp3dec_ex_t *dec = (mp3dec_ex_t *)user_data;
    if (!dec->index.frames && !dec->start_offset)
 8003832:	f641 2018 	movw	r0, #6680	; 0x1a18
{
 8003836:	b089      	sub	sp, #36	; 0x24
    if (!dec->index.frames && !dec->start_offset)
 8003838:	5825      	ldr	r5, [r4, r0]
{
 800383a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800383e:	460f      	mov	r7, r1
    if (!dec->index.frames && !dec->start_offset)
 8003840:	2d00      	cmp	r5, #0
 8003842:	f000 8087 	beq.w	8003954 <mp3dec_load_index+0x128>
                return MP3D_E_USER;
            } else if (ret < 0)
                return 0;
        }
    }
    if (dec->flags & MP3D_DO_NOT_SCAN)
 8003846:	f642 437c 	movw	r3, #11388	; 0x2c7c
 800384a:	58e5      	ldr	r5, [r4, r3]
 800384c:	f015 0502 	ands.w	r5, r5, #2
 8003850:	f040 811a 	bne.w	8003a88 <mp3dec_load_index+0x25c>
        return MP3D_E_USER;
    if (dec->index.num_frames + 1 > dec->index.capacity)
 8003854:	f641 231c 	movw	r3, #6684	; 0x1a1c
 8003858:	f504 5cd1 	add.w	ip, r4, #6688	; 0x1a20
 800385c:	58e2      	ldr	r2, [r4, r3]
 800385e:	f8dc 3000 	ldr.w	r3, [ip]
 8003862:	f641 2018 	movw	r0, #6680	; 0x1a18
 8003866:	1c51      	adds	r1, r2, #1
 8003868:	4299      	cmp	r1, r3
 800386a:	5820      	ldr	r0, [r4, r0]
 800386c:	d914      	bls.n	8003898 <mp3dec_load_index+0x6c>
    {
        if (!dec->index.capacity)
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 8105 	bne.w	8003a7e <mp3dec_load_index+0x252>
            dec->index.capacity = 4096;
 8003874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003878:	f8cc 3000 	str.w	r3, [ip]
 800387c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
        else
            dec->index.capacity *= 2;
        mp3dec_frame_t *alloc_buf = (mp3dec_frame_t *)realloc((void*)dec->index.frames, sizeof(mp3dec_frame_t)*dec->index.capacity);
 8003880:	f00c fc3a 	bl	80100f8 <realloc>
        if (!alloc_buf)
 8003884:	2800      	cmp	r0, #0
 8003886:	f000 810d 	beq.w	8003aa4 <mp3dec_load_index+0x278>
 800388a:	f641 221c 	movw	r2, #6684	; 0x1a1c
            return MP3D_E_MEMORY;
        dec->index.frames = alloc_buf;
 800388e:	f641 2318 	movw	r3, #6680	; 0x1a18
 8003892:	58a2      	ldr	r2, [r4, r2]
 8003894:	50e0      	str	r0, [r4, r3]
 8003896:	1c51      	adds	r1, r2, #1
    }
    idx_frame = &dec->index.frames[dec->index.num_frames++];
    idx_frame->offset = offset;
    idx_frame->sample = dec->samples;
 8003898:	f504 58d1 	add.w	r8, r4, #6688	; 0x1a20
 800389c:	f108 0810 	add.w	r8, r8, #16
    idx_frame = &dec->index.frames[dec->index.num_frames++];
 80038a0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    idx_frame->sample = dec->samples;
 80038a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80038a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    idx_frame->offset = offset;
 80038ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    idx_frame = &dec->index.frames[dec->index.num_frames++];
 80038b0:	f641 2c1c 	movw	ip, #6684	; 0x1a1c
    if (!dec->buffer_samples && dec->index.num_frames < 256)
 80038b4:	f642 498c 	movw	r9, #11404	; 0x2c8c
    idx_frame = &dec->index.frames[dec->index.num_frames++];
 80038b8:	f844 100c 	str.w	r1, [r4, ip]
    idx_frame->offset = offset;
 80038bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
    idx_frame->sample = dec->samples;
 80038c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    if (!dec->buffer_samples && dec->index.num_frames < 256)
 80038c4:	f854 6009 	ldr.w	r6, [r4, r9]
    idx_frame->sample = dec->samples;
 80038c8:	e9c0 2300 	strd	r2, r3, [r0]
    if (!dec->buffer_samples && dec->index.num_frames < 256)
 80038cc:	bb1e      	cbnz	r6, 8003916 <mp3dec_load_index+0xea>
 80038ce:	29ff      	cmp	r1, #255	; 0xff
 80038d0:	d821      	bhi.n	8003916 <mp3dec_load_index+0xea>
    {   /* for some cutted mp3 frames, bit-reservoir not filled and decoding can't be started from first frames */
        /* try to decode up to 255 first frames till samples starts to decode */
        dec->buffer_samples = mp3dec_decode_frame(&dec->mp3d, frame, MINIMP3_MIN(buf_size, (size_t)INT_MAX), dec->buffer, info);
 80038d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80038d6:	f8cd b000 	str.w	fp, [sp]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f504 53d3 	add.w	r3, r4, #6752	; 0x1a60
 80038e0:	bfb8      	it	lt
 80038e2:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
 80038e6:	4639      	mov	r1, r7
 80038e8:	3310      	adds	r3, #16
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7fe fcbe 	bl	800226c <mp3dec_decode_frame>
        dec->samples += dec->buffer_samples*info->channels;
 80038f0:	f8db 1008 	ldr.w	r1, [fp, #8]
        dec->buffer_samples = mp3dec_decode_frame(&dec->mp3d, frame, MINIMP3_MIN(buf_size, (size_t)INT_MAX), dec->buffer, info);
 80038f4:	f844 0009 	str.w	r0, [r4, r9]
        dec->samples += dec->buffer_samples*info->channels;
 80038f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80038fc:	fb01 f000 	mul.w	r0, r1, r0
 8003900:	eb12 0900 	adds.w	r9, r2, r0
 8003904:	eb43 7ae0 	adc.w	sl, r3, r0, asr #31
 8003908:	e9c8 9a00 	strd	r9, sl, [r8]
    } else
        dec->samples += hdr_frame_samples(frame)*info->channels;
    return 0;
 800390c:	4635      	mov	r5, r6
}
 800390e:	4628      	mov	r0, r5
 8003910:	b009      	add	sp, #36	; 0x24
 8003912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HDR_IS_LAYER_1(h) ? 384 : (1152 >> (int)HDR_IS_FRAME_576(h));
 8003916:	7879      	ldrb	r1, [r7, #1]
 8003918:	f001 0006 	and.w	r0, r1, #6
 800391c:	2806      	cmp	r0, #6
 800391e:	d016      	beq.n	800394e <mp3dec_load_index+0x122>
 8003920:	f001 010e 	and.w	r1, r1, #14
 8003924:	2902      	cmp	r1, #2
 8003926:	bf14      	ite	ne
 8003928:	f44f 6090 	movne.w	r0, #1152	; 0x480
 800392c:	f44f 7010 	moveq.w	r0, #576	; 0x240
        dec->samples += hdr_frame_samples(frame)*info->channels;
 8003930:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003938:	fb01 f100 	mul.w	r1, r1, r0
 800393c:	1852      	adds	r2, r2, r1
 800393e:	f143 0300 	adc.w	r3, r3, #0
}
 8003942:	4628      	mov	r0, r5
        dec->samples += hdr_frame_samples(frame)*info->channels;
 8003944:	e9c8 2300 	strd	r2, r3, [r8]
}
 8003948:	b009      	add	sp, #36	; 0x24
 800394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800394e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8003952:	e7ed      	b.n	8003930 <mp3dec_load_index+0x104>
    if (!dec->index.frames && !dec->start_offset)
 8003954:	f504 58d2 	add.w	r8, r4, #6720	; 0x1a40
 8003958:	4691      	mov	r9, r2
 800395a:	461e      	mov	r6, r3
 800395c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	f108 0808 	add.w	r8, r8, #8
 8003966:	f47f af6e 	bne.w	8003846 <mp3dec_load_index+0x1a>
        dec->info = *info;
 800396a:	46da      	mov	sl, fp
 800396c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8003970:	f504 5cd2 	add.w	ip, r4, #6720	; 0x1a40
 8003974:	f10c 0c18 	add.w	ip, ip, #24
 8003978:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800397c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8003980:	e88c 0003 	stmia.w	ip, {r0, r1}
        if (3 == dec->info.layer)
 8003984:	f641 2368 	movw	r3, #6760	; 0x1a68
        dec->end_offset   = offset + buf_size;
 8003988:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
        if (3 == dec->info.layer)
 800398c:	58e3      	ldr	r3, [r4, r3]
 800398e:	9302      	str	r3, [sp, #8]
        dec->end_offset   = offset + buf_size;
 8003990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003992:	18c9      	adds	r1, r1, r3
 8003994:	f142 0200 	adc.w	r2, r2, #0
 8003998:	4613      	mov	r3, r2
 800399a:	460a      	mov	r2, r1
        dec->start_offset = dec->offset = offset;
 800399c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80039a0:	f504 5ad1 	add.w	sl, r4, #6688	; 0x1a20
        dec->end_offset   = offset + buf_size;
 80039a4:	f504 5ed2 	add.w	lr, r4, #6720	; 0x1a40
        dec->start_offset = dec->offset = offset;
 80039a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80039ac:	e9c8 0100 	strd	r0, r1, [r8]
        dec->end_offset   = offset + buf_size;
 80039b0:	e9ce 2304 	strd	r2, r3, [lr, #16]
        if (3 == dec->info.layer)
 80039b4:	9b02      	ldr	r3, [sp, #8]
        dec->free_format_bytes = free_format_bytes; /* should not change */
 80039b6:	f642 4c88 	movw	ip, #11400	; 0x2c88
        if (3 == dec->info.layer)
 80039ba:	2b03      	cmp	r3, #3
        dec->start_offset = dec->offset = offset;
 80039bc:	f10a 0a08 	add.w	sl, sl, #8
        dec->end_offset   = offset + buf_size;
 80039c0:	f10e 0e10 	add.w	lr, lr, #16
        dec->free_format_bytes = free_format_bytes; /* should not change */
 80039c4:	f844 600c 	str.w	r6, [r4, ip]
        if (3 == dec->info.layer)
 80039c8:	f47f af3d 	bne.w	8003846 <mp3dec_load_index+0x1a>
            int ret = mp3dec_check_vbrtag(frame, frame_size, &frames, &delay, &padding);
 80039cc:	ab07      	add	r3, sp, #28
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	aa05      	add	r2, sp, #20
 80039d2:	ab06      	add	r3, sp, #24
 80039d4:	4649      	mov	r1, r9
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7fe fa68 	bl	8001eac <mp3dec_check_vbrtag>
            if (ret)
 80039dc:	2800      	cmp	r0, #0
 80039de:	f43f af32 	beq.w	8003846 <mp3dec_load_index+0x1a>
                dec->start_offset = dec->offset = offset + frame_size;
 80039e2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80039e6:	eb12 0209 	adds.w	r2, r2, r9
 80039ea:	eb43 73e9 	adc.w	r3, r3, r9, asr #31
            if (ret > 0)
 80039ee:	2800      	cmp	r0, #0
                dec->start_offset = dec->offset = offset + frame_size;
 80039f0:	e9ca 2300 	strd	r2, r3, [sl]
 80039f4:	e9c8 2300 	strd	r2, r3, [r8]
            if (ret > 0)
 80039f8:	dd89      	ble.n	800390e <mp3dec_load_index+0xe2>
                padding *= info->channels;
 80039fa:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 80039fe:	f8db 3008 	ldr.w	r3, [fp, #8]
                dec->start_delay = dec->to_skip = delay*info->channels;
 8003a02:	f642 4194 	movw	r1, #11412	; 0x2c94
 8003a06:	f642 4298 	movw	r2, #11416	; 0x2c98
 8003a0a:	fb00 f003 	mul.w	r0, r0, r3
 8003a0e:	5060      	str	r0, [r4, r1]
 8003a10:	50a0      	str	r0, [r4, r2]
 8003a12:	787a      	ldrb	r2, [r7, #1]
 8003a14:	f002 0106 	and.w	r1, r2, #6
 8003a18:	2906      	cmp	r1, #6
                padding *= info->channels;
 8003a1a:	fb05 f503 	mul.w	r5, r5, r3
 8003a1e:	d03e      	beq.n	8003a9e <mp3dec_load_index+0x272>
 8003a20:	f002 020e 	and.w	r2, r2, #14
 8003a24:	2a02      	cmp	r2, #2
 8003a26:	bf14      	ite	ne
 8003a28:	f44f 6290 	movne.w	r2, #1152	; 0x480
 8003a2c:	f44f 7210 	moveq.w	r2, #576	; 0x240
                dec->samples = hdr_frame_samples(frame)*info->channels*(uint64_t)frames;
 8003a30:	9905      	ldr	r1, [sp, #20]
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	fba3 2301 	umull	r2, r3, r3, r1
                if (dec->samples >= (uint64_t)dec->start_delay)
 8003a3a:	17c1      	asrs	r1, r0, #31
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf08      	it	eq
 8003a40:	4282      	cmpeq	r2, r0
                    dec->samples -= dec->start_delay;
 8003a42:	f504 58d1 	add.w	r8, r4, #6688	; 0x1a20
                if (dec->samples >= (uint64_t)dec->start_delay)
 8003a46:	d222      	bcs.n	8003a8e <mp3dec_load_index+0x262>
                dec->samples = hdr_frame_samples(frame)*info->channels*(uint64_t)frames;
 8003a48:	f108 0810 	add.w	r8, r8, #16
 8003a4c:	e9c8 2300 	strd	r2, r3, [r8]
                if (padding > 0 && dec->samples >= (uint64_t)padding)
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	dd09      	ble.n	8003a68 <mp3dec_load_index+0x23c>
 8003a54:	17e9      	asrs	r1, r5, #31
 8003a56:	428b      	cmp	r3, r1
 8003a58:	bf08      	it	eq
 8003a5a:	42aa      	cmpeq	r2, r5
 8003a5c:	d304      	bcc.n	8003a68 <mp3dec_load_index+0x23c>
                    dec->samples -= padding;
 8003a5e:	1b52      	subs	r2, r2, r5
 8003a60:	eb63 0301 	sbc.w	r3, r3, r1
 8003a64:	e9c8 2300 	strd	r2, r3, [r8]
                dec->detected_samples = dec->samples;
 8003a68:	f504 51d1 	add.w	r1, r4, #6688	; 0x1a20
                dec->vbr_tag_found = 1;
 8003a6c:	f504 5432 	add.w	r4, r4, #11392	; 0x2c80
 8003a70:	2001      	movs	r0, #1
                dec->detected_samples = dec->samples;
 8003a72:	e9c1 2306 	strd	r2, r3, [r1, #24]
                return MP3D_E_USER;
 8003a76:	f06f 0503 	mvn.w	r5, #3
                dec->vbr_tag_found = 1;
 8003a7a:	6020      	str	r0, [r4, #0]
                return MP3D_E_USER;
 8003a7c:	e747      	b.n	800390e <mp3dec_load_index+0xe2>
            dec->index.capacity *= 2;
 8003a7e:	005a      	lsls	r2, r3, #1
 8003a80:	f8cc 2000 	str.w	r2, [ip]
 8003a84:	0159      	lsls	r1, r3, #5
 8003a86:	e6fb      	b.n	8003880 <mp3dec_load_index+0x54>
        return MP3D_E_USER;
 8003a88:	f06f 0503 	mvn.w	r5, #3
 8003a8c:	e73f      	b.n	800390e <mp3dec_load_index+0xe2>
                    dec->samples -= dec->start_delay;
 8003a8e:	1a12      	subs	r2, r2, r0
 8003a90:	eb63 0301 	sbc.w	r3, r3, r1
 8003a94:	e9c8 2304 	strd	r2, r3, [r8, #16]
 8003a98:	f108 0810 	add.w	r8, r8, #16
 8003a9c:	e7d8      	b.n	8003a50 <mp3dec_load_index+0x224>
 8003a9e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003aa2:	e7c5      	b.n	8003a30 <mp3dec_load_index+0x204>
            return MP3D_E_MEMORY;
 8003aa4:	f06f 0501 	mvn.w	r5, #1
 8003aa8:	e731      	b.n	800390e <mp3dec_load_index+0xe2>
 8003aaa:	bf00      	nop

08003aac <prvMp3PlayerDecode.constprop.9>:
static void prvMp3PlayerDecode(uint32_t *pulBytesRead, int xInputBufPos){
 8003aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(!ulAudioRemSize){                                                                                                    /*finish decoding last buffer*/
 8003ab0:	4c2d      	ldr	r4, [pc, #180]	; (8003b68 <prvMp3PlayerDecode.constprop.9+0xbc>)
 8003ab2:	6822      	ldr	r2, [r4, #0]
static void prvMp3PlayerDecode(uint32_t *pulBytesRead, int xInputBufPos){
 8003ab4:	b083      	sub	sp, #12
    if(!ulAudioRemSize){                                                                                                    /*finish decoding last buffer*/
 8003ab6:	2a00      	cmp	r2, #0
 8003ab8:	d129      	bne.n	8003b0e <prvMp3PlayerDecode.constprop.9+0x62>
        if(xFrameInfo.frame_bytes){                                                                                         /*if there are still more frames left*/
 8003aba:	4d2c      	ldr	r5, [pc, #176]	; (8003b6c <prvMp3PlayerDecode.constprop.9+0xc0>)
 8003abc:	682a      	ldr	r2, [r5, #0]
 8003abe:	b95a      	cbnz	r2, 8003ad8 <prvMp3PlayerDecode.constprop.9+0x2c>
            pxCurrent = pxCurrent->pxNext;                                                                                      /*update LL to point to next track*/
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <prvMp3PlayerDecode.constprop.9+0xc4>)
            ucFindInfoFlag = 1;                                                                                                 /*update mp3 decoding flag*/
 8003ac2:	492c      	ldr	r1, [pc, #176]	; (8003b74 <prvMp3PlayerDecode.constprop.9+0xc8>)
            pxCurrent = pxCurrent->pxNext;                                                                                      /*update LL to point to next track*/
 8003ac4:	6818      	ldr	r0, [r3, #0]
            ucNewSongFlag = 1;
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <prvMp3PlayerDecode.constprop.9+0xcc>)
            pxCurrent = pxCurrent->pxNext;                                                                                      /*update LL to point to next track*/
 8003ac8:	6840      	ldr	r0, [r0, #4]
 8003aca:	6018      	str	r0, [r3, #0]
            ucFindInfoFlag = 1;                                                                                                 /*update mp3 decoding flag*/
 8003acc:	2301      	movs	r3, #1
 8003ace:	700b      	strb	r3, [r1, #0]
            ucNewSongFlag = 1;
 8003ad0:	7013      	strb	r3, [r2, #0]
}
 8003ad2:	b003      	add	sp, #12
 8003ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003ad8:	4e28      	ldr	r6, [pc, #160]	; (8003b7c <prvMp3PlayerDecode.constprop.9+0xd0>)
            ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003ada:	4929      	ldr	r1, [pc, #164]	; (8003b80 <prvMp3PlayerDecode.constprop.9+0xd4>)
            n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003adc:	6834      	ldr	r4, [r6, #0]
            ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <prvMp3PlayerDecode.constprop.9+0xd8>)
 8003ae0:	9500      	str	r5, [sp, #0]
            n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003ae2:	4414      	add	r4, r2
            ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003ae4:	4421      	add	r1, r4
 8003ae6:	f5c4 5200 	rsb	r2, r4, #8192	; 0x2000
            n += xFrameInfo.frame_bytes;                                                                                        /*track frame position in input buffer*/
 8003aea:	6034      	str	r4, [r6, #0]
            ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[n], MP3_BUF - n, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003aec:	4c26      	ldr	r4, [pc, #152]	; (8003b88 <prvMp3PlayerDecode.constprop.9+0xdc>)
 8003aee:	4403      	add	r3, r0
 8003af0:	4826      	ldr	r0, [pc, #152]	; (8003b8c <prvMp3PlayerDecode.constprop.9+0xe0>)
 8003af2:	f7fe fbbb 	bl	800226c <mp3dec_decode_frame>
 8003af6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003afa:	1815      	adds	r5, r2, r0
 8003afc:	eb43 76e0 	adc.w	r6, r3, r0, asr #31
 8003b00:	4631      	mov	r1, r6
 8003b02:	4628      	mov	r0, r5
 8003b04:	e9c4 0100 	strd	r0, r1, [r4]
}
 8003b08:	b003      	add	sp, #12
 8003b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003b0e:	4d1c      	ldr	r5, [pc, #112]	; (8003b80 <prvMp3PlayerDecode.constprop.9+0xd4>)
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <prvMp3PlayerDecode.constprop.9+0xd8>)
 8003b12:	4e16      	ldr	r6, [pc, #88]	; (8003b6c <prvMp3PlayerDecode.constprop.9+0xc0>)
 8003b14:	9600      	str	r6, [sp, #0]
 8003b16:	4403      	add	r3, r0
 8003b18:	4629      	mov	r1, r5
 8003b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b1e:	481b      	ldr	r0, [pc, #108]	; (8003b8c <prvMp3PlayerDecode.constprop.9+0xe0>)
        f_read(&xFileRead, &cInputData[MP3_BUF - xFrameInfo.frame_bytes], xFrameInfo.frame_bytes, (void *) pulBytesRead);   /*read more data into end of input buffer*/
 8003b20:	4f1b      	ldr	r7, [pc, #108]	; (8003b90 <prvMp3PlayerDecode.constprop.9+0xe4>)
        ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003b22:	f7fe fba3 	bl	800226c <mp3dec_decode_frame>
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <prvMp3PlayerDecode.constprop.9+0xdc>)
        memmove(&cInputData[0], &cInputData[xFrameInfo.frame_bytes], (MP3_BUF - xFrameInfo.frame_bytes));                   /*move input buffer to to correct position*/
 8003b28:	6836      	ldr	r6, [r6, #0]
        ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003b2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b2e:	eb18 0100 	adds.w	r1, r8, r0
 8003b32:	eb49 72e0 	adc.w	r2, r9, r0, asr #31
        memmove(&cInputData[0], &cInputData[xFrameInfo.frame_bytes], (MP3_BUF - xFrameInfo.frame_bytes));                   /*move input buffer to to correct position*/
 8003b36:	f5c6 5800 	rsb	r8, r6, #8192	; 0x2000
        ullSamples += mp3dec_decode_frame(&xMp3Dec, (const uint8_t*) &cInputData[0], MP3_BUF, (short*) &ucAudioBuffer[xInputBufPos], &xFrameInfo);
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	e9c3 0100 	strd	r0, r1, [r3]
        memmove(&cInputData[0], &cInputData[xFrameInfo.frame_bytes], (MP3_BUF - xFrameInfo.frame_bytes));                   /*move input buffer to to correct position*/
 8003b42:	4642      	mov	r2, r8
 8003b44:	19a9      	adds	r1, r5, r6
 8003b46:	4628      	mov	r0, r5
 8003b48:	f00c fa0c 	bl	800ff64 <memmove>
        f_read(&xFileRead, &cInputData[MP3_BUF - xFrameInfo.frame_bytes], xFrameInfo.frame_bytes, (void *) pulBytesRead);   /*read more data into end of input buffer*/
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	463b      	mov	r3, r7
 8003b50:	eb05 0108 	add.w	r1, r5, r8
 8003b54:	480f      	ldr	r0, [pc, #60]	; (8003b94 <prvMp3PlayerDecode.constprop.9+0xe8>)
 8003b56:	f008 fddd 	bl	800c714 <f_read>
        ulAudioRemSize = ulAudioRemSize - *pulBytesRead;                                                                    /*update ulAudioRemSize variable*/
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	6023      	str	r3, [r4, #0]
}
 8003b62:	b003      	add	sp, #12
 8003b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b68:	2000478c 	.word	0x2000478c
 8003b6c:	20005810 	.word	0x20005810
 8003b70:	20000368 	.word	0x20000368
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000001 	.word	0x20000001
 8003b7c:	20002384 	.word	0x20002384
 8003b80:	20000384 	.word	0x20000384
 8003b84:	20002388 	.word	0x20002388
 8003b88:	200047a0 	.word	0x200047a0
 8003b8c:	20005828 	.word	0x20005828
 8003b90:	20004790 	.word	0x20004790
 8003b94:	200047e0 	.word	0x200047e0

08003b98 <mp3dec_iterate_cb>:
{
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	b099      	sub	sp, #100	; 0x64
    if (!io || !buf || (size_t)-1 == buf_size || buf_size < MINIMP3_BUF_SIZE || !callback)
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	f000 8114 	beq.w	8003dcc <mp3dec_iterate_cb+0x234>
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	f000 8111 	beq.w	8003dcc <mp3dec_iterate_cb+0x234>
 8003baa:	4c8a      	ldr	r4, [pc, #552]	; (8003dd4 <mp3dec_iterate_cb+0x23c>)
 8003bac:	f5a2 5500 	sub.w	r5, r2, #8192	; 0x2000
 8003bb0:	42a5      	cmp	r5, r4
 8003bb2:	f200 810b 	bhi.w	8003dcc <mp3dec_iterate_cb+0x234>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8108 	beq.w	8003dcc <mp3dec_iterate_cb+0x234>
 8003bbc:	4689      	mov	r9, r1
 8003bbe:	900d      	str	r0, [sp, #52]	; 0x34
 8003bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc2:	920c      	str	r2, [sp, #48]	; 0x30
    size_t filled = io->read(buf, MINIMP3_ID3_DETECT_SIZE, io->read_data), consumed = 0;
 8003bc4:	6803      	ldr	r3, [r0, #0]
 8003bc6:	6842      	ldr	r2, [r0, #4]
 8003bc8:	210a      	movs	r1, #10
 8003bca:	4648      	mov	r0, r9
 8003bcc:	4798      	blx	r3
    memset(&frame_info, 0, sizeof(frame_info));
 8003bce:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8003bd2:	2300      	movs	r3, #0
    if (filled > MINIMP3_ID3_DETECT_SIZE)
 8003bd4:	280a      	cmp	r0, #10
    memset(&frame_info, 0, sizeof(frame_info));
 8003bd6:	f8cb 3004 	str.w	r3, [fp, #4]
    size_t filled = io->read(buf, MINIMP3_ID3_DETECT_SIZE, io->read_data), consumed = 0;
 8003bda:	900f      	str	r0, [sp, #60]	; 0x3c
    memset(&frame_info, 0, sizeof(frame_info));
 8003bdc:	9312      	str	r3, [sp, #72]	; 0x48
 8003bde:	e9cb 3302 	strd	r3, r3, [fp, #8]
 8003be2:	e9cb 3304 	strd	r3, r3, [fp, #16]
    if (filled > MINIMP3_ID3_DETECT_SIZE)
 8003be6:	f200 80d6 	bhi.w	8003d96 <mp3dec_iterate_cb+0x1fe>
    if (MINIMP3_ID3_DETECT_SIZE != filled)
 8003bea:	d004      	beq.n	8003bf6 <mp3dec_iterate_cb+0x5e>
        return 0;
 8003bec:	469a      	mov	sl, r3
}
 8003bee:	4650      	mov	r0, sl
 8003bf0:	b019      	add	sp, #100	; 0x64
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t id3v2size = mp3dec_skip_id3v2(buf, filled);
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4648      	mov	r0, r9
 8003bfa:	f7fe fa1d 	bl	8002038 <mp3dec_skip_id3v2>
    if (id3v2size)
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	f040 80b5 	bne.w	8003d6e <mp3dec_iterate_cb+0x1d6>
        size_t readed = io->read(buf + MINIMP3_ID3_DETECT_SIZE, buf_size - MINIMP3_ID3_DETECT_SIZE, io->read_data);
 8003c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c08:	f1a3 040a 	sub.w	r4, r3, #10
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	6852      	ldr	r2, [r2, #4]
 8003c12:	f109 000a 	add.w	r0, r9, #10
 8003c16:	4798      	blx	r3
        if (readed > (buf_size - MINIMP3_ID3_DETECT_SIZE))
 8003c18:	4284      	cmp	r4, r0
 8003c1a:	f0c0 80bc 	bcc.w	8003d96 <mp3dec_iterate_cb+0x1fe>
        filled += readed;
 8003c1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    uint64_t readed = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	2400      	movs	r4, #0
 8003c24:	e9cd 3406 	strd	r3, r4, [sp, #24]
        filled += readed;
 8003c28:	4428      	add	r0, r5
 8003c2a:	900f      	str	r0, [sp, #60]	; 0x3c
    if (filled < MINIMP3_BUF_SIZE)
 8003c2c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003c30:	f0c0 80c6 	bcc.w	8003dc0 <mp3dec_iterate_cb+0x228>
            consumed += i;
 8003c34:	2300      	movs	r3, #0
 8003c36:	930a      	str	r3, [sp, #40]	; 0x28
 8003c38:	4605      	mov	r5, r0
 8003c3a:	4698      	mov	r8, r3
 8003c3c:	464c      	mov	r4, r9
 8003c3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        int i = mp3d_find_frame(buf + consumed, filled - consumed, &free_format_bytes, &frame_size);
 8003c42:	4629      	mov	r1, r5
 8003c44:	4620      	mov	r0, r4
 8003c46:	ab11      	add	r3, sp, #68	; 0x44
 8003c48:	aa10      	add	r2, sp, #64	; 0x40
        int free_format_bytes = 0, frame_size = 0, ret;
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
        int i = mp3d_find_frame(buf + consumed, filled - consumed, &free_format_bytes, &frame_size);
 8003c50:	f7fe fa26 	bl	80020a0 <mp3d_find_frame>
        if (i && !frame_size)
 8003c54:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003c56:	4606      	mov	r6, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	f000 809f 	beq.w	8003d9c <mp3dec_iterate_cb+0x204>
 8003c5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003c60:	eb00 0408 	add.w	r4, r0, r8
 8003c64:	2f00      	cmp	r7, #0
 8003c66:	f000 809c 	beq.w	8003da2 <mp3dec_iterate_cb+0x20a>
 8003c6a:	444c      	add	r4, r9
        frame_info.channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8003c6c:	78e3      	ldrb	r3, [r4, #3]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c6e:	7862      	ldrb	r2, [r4, #1]
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003c70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c72:	9004      	str	r0, [sp, #16]
        frame_info.channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8003c74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c78:	2bc0      	cmp	r3, #192	; 0xc0
        frame_info.layer = 4 - HDR_GET_LAYER(hdr);
 8003c7a:	f3c2 0e41 	ubfx	lr, r2, #1, #2
 8003c7e:	f002 0308 	and.w	r3, r2, #8
        frame_info.channels = HDR_IS_MONO(hdr) ? 1 : 2;
 8003c82:	bf14      	ite	ne
 8003c84:	f04f 0a02 	movne.w	sl, #2
 8003c88:	f04f 0a01 	moveq.w	sl, #1
 8003c8c:	2b00      	cmp	r3, #0
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003c8e:	f10e 33ff 	add.w	r3, lr, #4294967295
 8003c92:	bf14      	ite	ne
 8003c94:	252d      	movne	r5, #45	; 0x2d
 8003c96:	2500      	moveq	r5, #0
 8003c98:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003c9c:	78a0      	ldrb	r0, [r4, #2]
 8003c9e:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003ca2:	eb03 0c05 	add.w	ip, r3, r5
 8003ca6:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <mp3dec_iterate_cb+0x240>)
        frame_info.frame_bytes = frame_size;
 8003ca8:	9712      	str	r7, [sp, #72]	; 0x48
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003caa:	f3c0 0581 	ubfx	r5, r0, #2, #2
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003cae:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <mp3dec_iterate_cb+0x244>)
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003cb4:	f810 c00c 	ldrb.w	ip, [r0, ip]
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003cb8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
        readed += i;
 8003cbc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	f082 0010 	eor.w	r0, r2, #16
 8003cca:	eb1a 0a06 	adds.w	sl, sl, r6
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003cce:	eba1 0108 	sub.w	r1, r1, r8
 8003cd2:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8003cd6:	fa25 f503 	lsr.w	r5, r5, r3
 8003cda:	9100      	str	r1, [sp, #0]
        readed += i;
 8003cdc:	eb4b 7be6 	adc.w	fp, fp, r6, asr #31
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003ce0:	463a      	mov	r2, r7
 8003ce2:	4621      	mov	r1, r4
        frame_info.layer = 4 - HDR_GET_LAYER(hdr);
 8003ce4:	f1ce 0704 	rsb	r7, lr, #4
    return 2*halfrate[!!HDR_TEST_MPEG1(h)][HDR_GET_LAYER(h) - 1][HDR_GET_BITRATE(h)];
 8003ce8:	ea4f 044c 	mov.w	r4, ip, lsl #1
    return g_hz[HDR_GET_SAMPLE_RATE(h)] >> (int)!HDR_TEST_MPEG1(h) >> (int)!HDR_TEST_NOT_MPEG25(h);
 8003cec:	40c5      	lsrs	r5, r0
        frame_info.bitrate_kbps = hdr_bitrate_kbps(hdr);
 8003cee:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cf4:	9822      	ldr	r0, [sp, #136]	; 0x88
        frame_info.hz = hdr_sample_rate_hz(hdr);
 8003cf6:	9515      	str	r5, [sp, #84]	; 0x54
            if ((ret = callback(user_data, hdr, frame_size, free_format_bytes, filled - consumed, readed, &frame_info)))
 8003cf8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003cfc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003cfe:	47a0      	blx	r4
 8003d00:	4607      	mov	r7, r0
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d151      	bne.n	8003daa <mp3dec_iterate_cb+0x212>
        readed += frame_size;
 8003d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d0a:	eb1a 0403 	adds.w	r4, sl, r3
 8003d0e:	eb4b 75e3 	adc.w	r5, fp, r3, asr #31
        consumed += i + frame_size;
 8003d12:	441e      	add	r6, r3
        if (!eof && filled - consumed < MINIMP3_BUF_SIZE)
 8003d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        consumed += i + frame_size;
 8003d16:	44b0      	add	r8, r6
        readed += frame_size;
 8003d18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d1c:	eba1 0508 	sub.w	r5, r1, r8
 8003d20:	eb09 0408 	add.w	r4, r9, r8
        if (!eof && filled - consumed < MINIMP3_BUF_SIZE)
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d18c      	bne.n	8003c42 <mp3dec_iterate_cb+0xaa>
 8003d28:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8003d2c:	d289      	bcs.n	8003c42 <mp3dec_iterate_cb+0xaa>
            memmove(buf, buf + consumed, filled - consumed);
 8003d2e:	4621      	mov	r1, r4
 8003d30:	462a      	mov	r2, r5
 8003d32:	4648      	mov	r0, r9
 8003d34:	f00c f916 	bl	800ff64 <memmove>
            size_t readed = io->read(buf + filled, buf_size - filled, io->read_data);
 8003d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003d3c:	6813      	ldr	r3, [r2, #0]
            filled -= consumed;
 8003d3e:	950f      	str	r5, [sp, #60]	; 0x3c
            size_t readed = io->read(buf + filled, buf_size - filled, io->read_data);
 8003d40:	6852      	ldr	r2, [r2, #4]
 8003d42:	1b61      	subs	r1, r4, r5
 8003d44:	eb09 0005 	add.w	r0, r9, r5
 8003d48:	4798      	blx	r3
            if (readed > (buf_size - filled))
 8003d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d4c:	1ae2      	subs	r2, r4, r3
 8003d4e:	4282      	cmp	r2, r0
 8003d50:	d321      	bcc.n	8003d96 <mp3dec_iterate_cb+0x1fe>
            if (readed != (buf_size - filled))
 8003d52:	d02f      	beq.n	8003db4 <mp3dec_iterate_cb+0x21c>
            filled += readed;
 8003d54:	a918      	add	r1, sp, #96	; 0x60
 8003d56:	4403      	add	r3, r0
 8003d58:	f841 3d24 	str.w	r3, [r1, #-36]!
                mp3dec_skip_id3v1(buf, &filled);
 8003d5c:	4648      	mov	r0, r9
 8003d5e:	f7fe f85f 	bl	8001e20 <mp3dec_skip_id3v1>
 8003d62:	2301      	movs	r3, #1
            consumed = 0;
 8003d64:	46b8      	mov	r8, r7
                mp3dec_skip_id3v1(buf, &filled);
 8003d66:	930a      	str	r3, [sp, #40]	; 0x28
 8003d68:	464c      	mov	r4, r9
 8003d6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003d6c:	e769      	b.n	8003c42 <mp3dec_iterate_cb+0xaa>
        if (io->seek(id3v2size, io->seek_data))
 8003d6e:	2400      	movs	r4, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d76:	4621      	mov	r1, r4
 8003d78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	68e2      	ldr	r2, [r4, #12]
 8003d7e:	4798      	blx	r3
 8003d80:	b948      	cbnz	r0, 8003d96 <mp3dec_iterate_cb+0x1fe>
        filled = io->read(buf, buf_size, io->read_data);
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	6862      	ldr	r2, [r4, #4]
 8003d86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003d88:	4648      	mov	r0, r9
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4798      	blx	r3
        if (filled > buf_size)
 8003d8e:	42a0      	cmp	r0, r4
        filled = io->read(buf, buf_size, io->read_data);
 8003d90:	900f      	str	r0, [sp, #60]	; 0x3c
        if (filled > buf_size)
 8003d92:	f67f af4b 	bls.w	8003c2c <mp3dec_iterate_cb+0x94>
                return MP3D_E_IOERROR;
 8003d96:	f06f 0a02 	mvn.w	sl, #2
 8003d9a:	e728      	b.n	8003bee <mp3dec_iterate_cb+0x56>
        if (!frame_size)
 8003d9c:	b12f      	cbz	r7, 8003daa <mp3dec_iterate_cb+0x212>
 8003d9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003da0:	e764      	b.n	8003c6c <mp3dec_iterate_cb+0xd4>
            consumed += i;
 8003da2:	46a0      	mov	r8, r4
 8003da4:	1b0d      	subs	r5, r1, r4
 8003da6:	444c      	add	r4, r9
 8003da8:	e74b      	b.n	8003c42 <mp3dec_iterate_cb+0xaa>
 8003daa:	46ba      	mov	sl, r7
}
 8003dac:	4650      	mov	r0, sl
 8003dae:	b019      	add	sp, #100	; 0x64
 8003db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            filled += readed;
 8003db4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db6:	950f      	str	r5, [sp, #60]	; 0x3c
            consumed = 0;
 8003db8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003dbc:	464c      	mov	r4, r9
 8003dbe:	e740      	b.n	8003c42 <mp3dec_iterate_cb+0xaa>
        mp3dec_skip_id3v1(buf, &filled);
 8003dc0:	4648      	mov	r0, r9
 8003dc2:	a90f      	add	r1, sp, #60	; 0x3c
 8003dc4:	f7fe f82c 	bl	8001e20 <mp3dec_skip_id3v1>
 8003dc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dca:	e733      	b.n	8003c34 <mp3dec_iterate_cb+0x9c>
        return MP3D_E_PARAM;
 8003dcc:	f04f 3aff 	mov.w	sl, #4294967295
 8003dd0:	e70d      	b.n	8003bee <mp3dec_iterate_cb+0x56>
 8003dd2:	bf00      	nop
 8003dd4:	ffffdffe 	.word	0xffffdffe
 8003dd8:	080115b0 	.word	0x080115b0
 8003ddc:	08010a30 	.word	0x08010a30

08003de0 <mp3dec_ex_open_cb>:
    return samples_requested - samples;
}

int mp3dec_ex_open_cb(mp3dec_ex_t *dec, mp3dec_io_t *io, int flags)
{
    if (!dec || !io || (flags & (~MP3D_FLAGS_MASK)))
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d068      	beq.n	8003eb6 <mp3dec_ex_open_cb+0xd6>
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d066      	beq.n	8003eb6 <mp3dec_ex_open_cb+0xd6>
{
 8003de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (!dec || !io || (flags & (~MP3D_FLAGS_MASK)))
 8003dec:	f032 0703 	bics.w	r7, r2, #3
{
 8003df0:	b083      	sub	sp, #12
    if (!dec || !io || (flags & (~MP3D_FLAGS_MASK)))
 8003df2:	d15d      	bne.n	8003eb0 <mp3dec_ex_open_cb+0xd0>
 8003df4:	4604      	mov	r4, r0
 8003df6:	4616      	mov	r6, r2
 8003df8:	460d      	mov	r5, r1
        return MP3D_E_PARAM;
    memset(dec, 0, sizeof(*dec));
 8003dfa:	f642 42a0 	movw	r2, #11424	; 0x2ca0
 8003dfe:	4639      	mov	r1, r7
#ifdef MINIMP3_HAVE_RING
    int ret;
    if (ret = mp3dec_open_ring(&dec->file, MINIMP3_IO_SIZE))
        return ret;
#else
    dec->file.size = MINIMP3_IO_SIZE;
 8003e00:	f641 2910 	movw	r9, #6672	; 0x1a10
    memset(dec, 0, sizeof(*dec));
 8003e04:	f00c f8c7 	bl	800ff96 <memset>
    dec->file.size = MINIMP3_IO_SIZE;
 8003e08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e0c:	f844 0009 	str.w	r0, [r4, r9]
    dec->file.buffer = (const uint8_t*)malloc(dec->file.size);
 8003e10:	f00c f87e 	bl	800ff10 <malloc>
 8003e14:	f641 280c 	movw	r8, #6668	; 0x1a0c
 8003e18:	f844 0008 	str.w	r0, [r4, r8]
    if (!dec->file.buffer)
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d04d      	beq.n	8003ebc <mp3dec_ex_open_cb+0xdc>
    dec->header[0] = 0;
 8003e20:	f641 0308 	movw	r3, #6152	; 0x1808
        return MP3D_E_MEMORY;
#endif
    dec->flags = flags;
 8003e24:	f642 407c 	movw	r0, #11388	; 0x2c7c
 8003e28:	54e7      	strb	r7, [r4, r3]
    dec->io = io;
 8003e2a:	f641 2114 	movw	r1, #6676	; 0x1a14
    mp3dec_init(&dec->mp3d);
    if (io->seek(0, io->seek_data))
 8003e2e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    dec->flags = flags;
 8003e32:	5026      	str	r6, [r4, r0]
    dec->io = io;
 8003e34:	5065      	str	r5, [r4, r1]
    if (io->seek(0, io->seek_data))
 8003e36:	2000      	movs	r0, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4798      	blx	r3
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d134      	bne.n	8003eaa <mp3dec_ex_open_cb+0xca>
        return MP3D_E_IOERROR;
    int ret = mp3dec_iterate_cb(io, (uint8_t *)dec->file.buffer, dec->file.size, mp3dec_load_index, dec);
 8003e40:	f854 2009 	ldr.w	r2, [r4, r9]
 8003e44:	f854 1008 	ldr.w	r1, [r4, r8]
 8003e48:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <mp3dec_ex_open_cb+0xe4>)
 8003e4a:	9400      	str	r4, [sp, #0]
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f7ff fea3 	bl	8003b98 <mp3dec_iterate_cb>
    if (ret && MP3D_E_USER != ret)
 8003e52:	bb38      	cbnz	r0, 8003ea4 <mp3dec_ex_open_cb+0xc4>
        return ret;
    if (dec->io->seek(dec->start_offset, dec->io->seek_data))
 8003e54:	f641 2214 	movw	r2, #6676	; 0x1a14
 8003e58:	f504 53d2 	add.w	r3, r4, #6720	; 0x1a40
 8003e5c:	58a2      	ldr	r2, [r4, r2]
 8003e5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003e62:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
 8003e66:	47a8      	blx	r5
 8003e68:	b9f8      	cbnz	r0, 8003eaa <mp3dec_ex_open_cb+0xca>
 8003e6a:	f641 0208 	movw	r2, #6152	; 0x1808
        return MP3D_E_IOERROR;
    mp3dec_init(&dec->mp3d);
    dec->buffer_samples = 0;
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e6e:	f504 5332 	add.w	r3, r4, #11392	; 0x2c80
 8003e72:	54a0      	strb	r0, [r4, r2]
    dec->buffer_samples = 0;
 8003e74:	f642 428c 	movw	r2, #11404	; 0x2c8c
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e78:	681b      	ldr	r3, [r3, #0]
    dec->buffer_samples = 0;
 8003e7a:	50a0      	str	r0, [r4, r2]
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e7c:	b163      	cbz	r3, 8003e98 <mp3dec_ex_open_cb+0xb8>
 8003e7e:	4605      	mov	r5, r0
    dec->flags &= (~MP3D_DO_NOT_SCAN);
 8003e80:	f642 427c 	movw	r2, #11388	; 0x2c7c
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e84:	f642 4184 	movw	r1, #11396	; 0x2c84
    dec->flags &= (~MP3D_DO_NOT_SCAN);
 8003e88:	58a3      	ldr	r3, [r4, r2]
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e8a:	5065      	str	r5, [r4, r1]
    dec->flags &= (~MP3D_DO_NOT_SCAN);
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	50a3      	str	r3, [r4, r2]
    return 0;
}
 8003e92:	b003      	add	sp, #12
 8003e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dec->indexes_built = !(dec->vbr_tag_found || (flags & MP3D_DO_NOT_SCAN));
 8003e98:	f016 0f02 	tst.w	r6, #2
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2501      	moveq	r5, #1
 8003ea0:	2500      	movne	r5, #0
 8003ea2:	e7ed      	b.n	8003e80 <mp3dec_ex_open_cb+0xa0>
    if (ret && MP3D_E_USER != ret)
 8003ea4:	1d03      	adds	r3, r0, #4
 8003ea6:	d1f4      	bne.n	8003e92 <mp3dec_ex_open_cb+0xb2>
 8003ea8:	e7d4      	b.n	8003e54 <mp3dec_ex_open_cb+0x74>
        return MP3D_E_IOERROR;
 8003eaa:	f06f 0002 	mvn.w	r0, #2
 8003eae:	e7f0      	b.n	8003e92 <mp3dec_ex_open_cb+0xb2>
        return MP3D_E_PARAM;
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	e7ed      	b.n	8003e92 <mp3dec_ex_open_cb+0xb2>
 8003eb6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003eba:	4770      	bx	lr
        return MP3D_E_MEMORY;
 8003ebc:	f06f 0001 	mvn.w	r0, #1
 8003ec0:	e7e7      	b.n	8003e92 <mp3dec_ex_open_cb+0xb2>
 8003ec2:	bf00      	nop
 8003ec4:	0800382d 	.word	0x0800382d

08003ec8 <mp3dec_ex_close>:
}
#endif
#else /* MINIMP3_NO_STDIO */
void mp3dec_ex_close(mp3dec_ex_t *dec)
{
	if (dec->io && dec->file.buffer)
 8003ec8:	f641 2314 	movw	r3, #6676	; 0x1a14
{
 8003ecc:	b510      	push	{r4, lr}
	if (dec->io && dec->file.buffer)
 8003ece:	58c3      	ldr	r3, [r0, r3]
{
 8003ed0:	4604      	mov	r4, r0
	if (dec->io && dec->file.buffer)
 8003ed2:	b12b      	cbz	r3, 8003ee0 <mp3dec_ex_close+0x18>
 8003ed4:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8003ed8:	58c0      	ldr	r0, [r0, r3]
 8003eda:	b108      	cbz	r0, 8003ee0 <mp3dec_ex_close+0x18>
		free((void*)dec->file.buffer);
 8003edc:	f00c f820 	bl	800ff20 <free>
    if (dec->index.frames)
 8003ee0:	f641 2318 	movw	r3, #6680	; 0x1a18
 8003ee4:	58e0      	ldr	r0, [r4, r3]
 8003ee6:	b108      	cbz	r0, 8003eec <mp3dec_ex_close+0x24>
        free(dec->index.frames);
 8003ee8:	f00c f81a 	bl	800ff20 <free>
    memset(dec, 0, sizeof(*dec));
 8003eec:	4620      	mov	r0, r4
 8003eee:	f642 42a0 	movw	r2, #11424	; 0x2ca0
 8003ef2:	2100      	movs	r1, #0
}
 8003ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset(dec, 0, sizeof(*dec));
 8003ef8:	f00c b84d 	b.w	800ff96 <memset>

08003efc <vMp3PlayerInit>:
void vMp3PlayerInit(){
 8003efc:	b510      	push	{r4, lr}
    vUpdateLCDSetCurrentTime(0);                                                                                            /*initialize current mp3 time equal to 0*/
 8003efe:	2000      	movs	r0, #0
 8003f00:	f000 fb5c 	bl	80045bc <vUpdateLCDSetCurrentTime>
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <vMp3PlayerInit+0x70>)
 8003f06:	f641 0308 	movw	r3, #6152	; 0x1808
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	54d1      	strb	r1, [r2, r3]
    if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, ulUpdateLCDGetSampleRate()) != 0){                                        /* Initialize MP3 player (Codec, DMA, I2C) */
 8003f0e:	f000 fb95 	bl	800463c <ulUpdateLCDGetSampleRate>
 8003f12:	2146      	movs	r1, #70	; 0x46
 8003f14:	4602      	mov	r2, r0
 8003f16:	2004      	movs	r0, #4
 8003f18:	f000 ffb2 	bl	8004e80 <BSP_AUDIO_OUT_Init>
 8003f1c:	bb18      	cbnz	r0, 8003f66 <vMp3PlayerInit+0x6a>
    f_read(&xFileRead, &cInputData[0], MP3_BUF, (void *) pulBytesRead);                                                     /*read mp3 data into input buffer*/
 8003f1e:	4c14      	ldr	r4, [pc, #80]	; (8003f70 <vMp3PlayerInit+0x74>)
    f_lseek(&xFileRead, 0);                                                                                                 /*seek to beginning of file*/
 8003f20:	4814      	ldr	r0, [pc, #80]	; (8003f74 <vMp3PlayerInit+0x78>)
 8003f22:	2100      	movs	r1, #0
 8003f24:	f008 fdcc 	bl	800cac0 <f_lseek>
    f_read(&xFileRead, &cInputData[0], MP3_BUF, (void *) pulBytesRead);                                                     /*read mp3 data into input buffer*/
 8003f28:	4623      	mov	r3, r4
 8003f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f2e:	4912      	ldr	r1, [pc, #72]	; (8003f78 <vMp3PlayerInit+0x7c>)
 8003f30:	4810      	ldr	r0, [pc, #64]	; (8003f74 <vMp3PlayerInit+0x78>)
 8003f32:	f008 fbef 	bl	800c714 <f_read>
    ulAudioRemSize = ulMP3DataLength - *pulBytesRead;                                                                       /*calculate ulAudioRemSize*/
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <vMp3PlayerInit+0x80>)
 8003f38:	6821      	ldr	r1, [r4, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <vMp3PlayerInit+0x84>)
 8003f3e:	1a5b      	subs	r3, r3, r1
    prvMp3PlayerDecode(&ulBytesRead, 0);                                                                                    /*decode mp3 data, store result in first half of Audio Buffer*/
 8003f40:	2000      	movs	r0, #0
    ulAudioRemSize = ulMP3DataLength - *pulBytesRead;                                                                       /*calculate ulAudioRemSize*/
 8003f42:	6013      	str	r3, [r2, #0]
    prvMp3PlayerDecode(&ulBytesRead, 0);                                                                                    /*decode mp3 data, store result in first half of Audio Buffer*/
 8003f44:	f7ff fdb2 	bl	8003aac <prvMp3PlayerDecode.constprop.9>
    prvMp3PlayerDecode(&ulBytesRead, AUDIO_BUFFER_SIZE/2);                                                                  /*decode mp3 data, store result in second half of Audio Buffer*/
 8003f48:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8003f4c:	f7ff fdae 	bl	8003aac <prvMp3PlayerDecode.constprop.9>
    if(BSP_AUDIO_OUT_Play((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE) != 0){                                           /*start playing MP3*/
 8003f50:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8003f54:	480b      	ldr	r0, [pc, #44]	; (8003f84 <vMp3PlayerInit+0x88>)
 8003f56:	f000 fe79 	bl	8004c4c <BSP_AUDIO_OUT_Play>
 8003f5a:	b900      	cbnz	r0, 8003f5e <vMp3PlayerInit+0x62>
}
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Error_Handler();
 8003f62:	f7fc bc8d 	b.w	8000880 <Error_Handler>
        Error_Handler();                                                                                                        /*error if mp3 player initialization fails*/
 8003f66:	f7fc fc8b 	bl	8000880 <Error_Handler>
 8003f6a:	e7d8      	b.n	8003f1e <vMp3PlayerInit+0x22>
 8003f6c:	20005828 	.word	0x20005828
 8003f70:	20004790 	.word	0x20004790
 8003f74:	200047e0 	.word	0x200047e0
 8003f78:	20000384 	.word	0x20000384
 8003f7c:	20004794 	.word	0x20004794
 8003f80:	2000478c 	.word	0x2000478c
 8003f84:	20002388 	.word	0x20002388

08003f88 <vMp3PlayerDecodeFrames>:
void vMp3PlayerDecodeFrames(){
 8003f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 8003f8c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8004120 <vMp3PlayerDecodeFrames+0x198>
 8003f90:	f899 3000 	ldrb.w	r3, [r9]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f000 8095 	beq.w	80040c4 <vMp3PlayerDecodeFrames+0x13c>
 8003f9a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8004124 <vMp3PlayerDecodeFrames+0x19c>
 8003f9e:	f898 2000 	ldrb.w	r2, [r8]
 8003fa2:	2a01      	cmp	r2, #1
 8003fa4:	d054      	beq.n	8004050 <vMp3PlayerDecodeFrames+0xc8>
 8003fa6:	4c56      	ldr	r4, [pc, #344]	; (8004100 <vMp3PlayerDecodeFrames+0x178>)
 8003fa8:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8004128 <vMp3PlayerDecodeFrames+0x1a0>
 8003fac:	4d55      	ldr	r5, [pc, #340]	; (8004104 <vMp3PlayerDecodeFrames+0x17c>)
        ulBytesRead = 0;                                                                                                        /*set bytes read back to zero*/
 8003fae:	f04f 0a00 	mov.w	sl, #0
 8003fb2:	4b55      	ldr	r3, [pc, #340]	; (8004108 <vMp3PlayerDecodeFrames+0x180>)
        vUpdateLCDSetCurrentTime(ullSamples / ulUpdateLCDGetSampleRate());                                                      /*update current time*/
 8003fb4:	e9db 6700 	ldrd	r6, r7, [fp]
        ulBytesRead = 0;                                                                                                        /*set bytes read back to zero*/
 8003fb8:	f8c3 a000 	str.w	sl, [r3]
        vUpdateLCDSetCurrentTime(ullSamples / ulUpdateLCDGetSampleRate());                                                      /*update current time*/
 8003fbc:	f000 fb3e 	bl	800463c <ulUpdateLCDGetSampleRate>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f7fc f9b2 	bl	8000330 <__aeabi_uldivmod>
 8003fcc:	f000 faf6 	bl	80045bc <vUpdateLCDSetCurrentTime>
        if(ulUpdateLCDGetCurrentTime() != ulOldTime){                                                                           /*if current time does not match old time*/
 8003fd0:	f000 fafa 	bl	80045c8 <ulUpdateLCDGetCurrentTime>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	4298      	cmp	r0, r3
 8003fd8:	d002      	beq.n	8003fe0 <vMp3PlayerDecodeFrames+0x58>
            ulOldTime = ulUpdateLCDGetCurrentTime();                                                                                /*set old time equal to current time*/
 8003fda:	f000 faf5 	bl	80045c8 <ulUpdateLCDGetCurrentTime>
 8003fde:	6028      	str	r0, [r5, #0]
        if(xBufferOffset == BUFFER_OFFSET_HALF){                                                                               /*check if the first half of the Audio Buffer has been transferred*/
 8003fe0:	7823      	ldrb	r3, [r4, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d019      	beq.n	800401a <vMp3PlayerDecodeFrames+0x92>
        if(xBufferOffset == BUFFER_OFFSET_FULL){                                                                                /*check if the second half of the Audio Buffer has been transferred*/
 8003fe6:	7823      	ldrb	r3, [r4, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d01e      	beq.n	800402a <vMp3PlayerDecodeFrames+0xa2>
        BSP_AUDIO_OUT_SetVolume(ulUpdateLCDGetVolume());                                                                        /*set volume appropriately*/
 8003fec:	f000 fb1a 	bl	8004624 <ulUpdateLCDGetVolume>
 8003ff0:	b2c0      	uxtb	r0, r0
 8003ff2:	f000 fe73 	bl	8004cdc <BSP_AUDIO_OUT_SetVolume>
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 8003ff6:	f899 3000 	ldrb.w	r3, [r9]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d032      	beq.n	8004064 <vMp3PlayerDecodeFrames+0xdc>
 8003ffe:	f898 2000 	ldrb.w	r2, [r8]
 8004002:	2a01      	cmp	r2, #1
 8004004:	d1d5      	bne.n	8003fb2 <vMp3PlayerDecodeFrames+0x2a>
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8004006:	4a41      	ldr	r2, [pc, #260]	; (800410c <vMp3PlayerDecodeFrames+0x184>)
 8004008:	7811      	ldrb	r1, [r2, #0]
 800400a:	2901      	cmp	r1, #1
 800400c:	d057      	beq.n	80040be <vMp3PlayerDecodeFrames+0x136>
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 800400e:	f898 2000 	ldrb.w	r2, [r8]
 8004012:	2a01      	cmp	r2, #1
 8004014:	d020      	beq.n	8004058 <vMp3PlayerDecodeFrames+0xd0>
}
 8004016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            prvMp3PlayerDecode(&ulBytesRead, 0);                                                                                    /*decode next mp3 data to replace it in the Audio buffer*/
 800401a:	2000      	movs	r0, #0
 800401c:	f7ff fd46 	bl	8003aac <prvMp3PlayerDecode.constprop.9>
            xBufferOffset = BUFFER_OFFSET_NONE;                                                                                     /*update buffer offset*/
 8004020:	f884 a000 	strb.w	sl, [r4]
        if(xBufferOffset == BUFFER_OFFSET_FULL){                                                                                /*check if the second half of the Audio Buffer has been transferred*/
 8004024:	7823      	ldrb	r3, [r4, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d1e0      	bne.n	8003fec <vMp3PlayerDecodeFrames+0x64>
            prvMp3PlayerDecode(&ulBytesRead, AUDIO_BUFFER_SIZE/2);                                                                  /*decode next mp3 data to replace it in the Audio buffer*/
 800402a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 800402e:	f7ff fd3d 	bl	8003aac <prvMp3PlayerDecode.constprop.9>
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <vMp3PlayerDecodeFrames+0x184>)
 8004034:	f899 0000 	ldrb.w	r0, [r9]
 8004038:	7819      	ldrb	r1, [r3, #0]
            xBufferOffset = BUFFER_OFFSET_NONE;                                                                                     /*update buffer offset*/
 800403a:	2200      	movs	r2, #0
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 800403c:	2901      	cmp	r1, #1
            xBufferOffset = BUFFER_OFFSET_NONE;                                                                                     /*update buffer offset*/
 800403e:	7022      	strb	r2, [r4, #0]
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8004040:	d059      	beq.n	80040f6 <vMp3PlayerDecodeFrames+0x16e>
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 8004042:	f899 3000 	ldrb.w	r3, [r9]
 8004046:	f898 2000 	ldrb.w	r2, [r8]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d042      	beq.n	80040d4 <vMp3PlayerDecodeFrames+0x14c>
 800404e:	e7de      	b.n	800400e <vMp3PlayerDecodeFrames+0x86>
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8004050:	4a2e      	ldr	r2, [pc, #184]	; (800410c <vMp3PlayerDecodeFrames+0x184>)
 8004052:	7811      	ldrb	r1, [r2, #0]
 8004054:	2901      	cmp	r1, #1
 8004056:	d029      	beq.n	80040ac <vMp3PlayerDecodeFrames+0x124>
        }else if(ucPauseStateFlag == 0){                                                                                        /*if button is pressed to resume*/
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1dc      	bne.n	8004016 <vMp3PlayerDecodeFrames+0x8e>
}
 800405c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            prvMp3PlayerResume();                                                                                                 /*Resume play-back*/
 8004060:	f7fd bfca 	b.w	8001ff8 <prvMp3PlayerResume>
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <vMp3PlayerDecodeFrames+0x184>)
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	2a01      	cmp	r2, #1
 800406a:	d1ea      	bne.n	8004042 <vMp3PlayerDecodeFrames+0xba>
        ucNewSongFlag = 0;
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
            ucPauseStateFlag = 0;                                                                                                   /*resume and then change the track*/
 8004070:	2300      	movs	r3, #0
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8004072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004076:	4826      	ldr	r0, [pc, #152]	; (8004110 <vMp3PlayerDecodeFrames+0x188>)
            ucPauseStateFlag = 0;                                                                                                   /*resume and then change the track*/
 8004078:	f889 3000 	strb.w	r3, [r9]
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800407c:	f002 f94a 	bl	8006314 <HAL_GPIO_TogglePin>
            prvMp3PlayerResume();
 8004080:	f7fd ffba 	bl	8001ff8 <prvMp3PlayerResume>
        memset(&ucAudioBuffer[0], 0, AUDIO_BUFFER_SIZE);                                                                            /*fixed bug where audio stutters as track changes*/
 8004084:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8004088:	2100      	movs	r1, #0
 800408a:	4822      	ldr	r0, [pc, #136]	; (8004114 <vMp3PlayerDecodeFrames+0x18c>)
 800408c:	f00b ff83 	bl	800ff96 <memset>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);                                                                                      /*stop audio play-back*/
 8004090:	2001      	movs	r0, #1
 8004092:	f000 fe01 	bl	8004c98 <BSP_AUDIO_OUT_Stop>
    f_close(&xFileRead);                                                                                                    /*close file*/
 8004096:	4820      	ldr	r0, [pc, #128]	; (8004118 <vMp3PlayerDecodeFrames+0x190>)
 8004098:	f008 fcde 	bl	800ca58 <f_close>
    ullSamples = 0;
 800409c:	2200      	movs	r2, #0
 800409e:	2300      	movs	r3, #0
 80040a0:	e9cb 2300 	strd	r2, r3, [fp]
        ucFindInfoFlag = 1;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <vMp3PlayerDecodeFrames+0x194>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e7ca      	b.n	8004042 <vMp3PlayerDecodeFrames+0xba>
        ucNewSongFlag = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004128 <vMp3PlayerDecodeFrames+0x1a0>
 80040b2:	7013      	strb	r3, [r2, #0]
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 80040b4:	f898 3000 	ldrb.w	r3, [r8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d1e3      	bne.n	8004084 <vMp3PlayerDecodeFrames+0xfc>
 80040bc:	e7d8      	b.n	8004070 <vMp3PlayerDecodeFrames+0xe8>
        ucNewSongFlag = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	7013      	strb	r3, [r2, #0]
 80040c2:	e7f7      	b.n	80040b4 <vMp3PlayerDecodeFrames+0x12c>
    if(ucNewSongFlag == 1){                                                                                                     /*if the track changes*/
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <vMp3PlayerDecodeFrames+0x184>)
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	2a01      	cmp	r2, #1
 80040ca:	d00d      	beq.n	80040e8 <vMp3PlayerDecodeFrames+0x160>
 80040cc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004124 <vMp3PlayerDecodeFrames+0x19c>
 80040d0:	f898 2000 	ldrb.w	r2, [r8]
        if(ucOldPauseStateFlag == 0){                                                                                           /*if its the first case*/
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d19e      	bne.n	8004016 <vMp3PlayerDecodeFrames+0x8e>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);                                                                                      /*stop play-back*/
 80040d8:	2001      	movs	r0, #1
 80040da:	f000 fddd 	bl	8004c98 <BSP_AUDIO_OUT_Stop>
    ucOldPauseStateFlag = 1;                                                                                                /*set flag ucOldPauseStateFlag*/
 80040de:	2301      	movs	r3, #1
 80040e0:	f888 3000 	strb.w	r3, [r8]
}
 80040e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ucNewSongFlag = 0;
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8004124 <vMp3PlayerDecodeFrames+0x19c>
 80040f0:	f8df b034 	ldr.w	fp, [pc, #52]	; 8004128 <vMp3PlayerDecodeFrames+0x1a0>
 80040f4:	e7bc      	b.n	8004070 <vMp3PlayerDecodeFrames+0xe8>
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 80040f6:	2801      	cmp	r0, #1
        ucNewSongFlag = 0;
 80040f8:	701a      	strb	r2, [r3, #0]
    if(ucPauseStateFlag == 1 || ucOldPauseStateFlag == 1)
 80040fa:	d0b9      	beq.n	8004070 <vMp3PlayerDecodeFrames+0xe8>
 80040fc:	e7da      	b.n	80040b4 <vMp3PlayerDecodeFrames+0x12c>
 80040fe:	bf00      	nop
 8004100:	200047a8 	.word	0x200047a8
 8004104:	20004798 	.word	0x20004798
 8004108:	20004790 	.word	0x20004790
 800410c:	20000001 	.word	0x20000001
 8004110:	40020c00 	.word	0x40020c00
 8004114:	20002388 	.word	0x20002388
 8004118:	200047e0 	.word	0x200047e0
 800411c:	20000000 	.word	0x20000000
 8004120:	20000371 	.word	0x20000371
 8004124:	20004788 	.word	0x20004788
 8004128:	200047a0 	.word	0x200047a0

0800412c <vMp3PlayerFindInfo>:
/**
  * @brief  finds the track length and sample rate of the mp3
  * @param  None
  * @retval None
  */
void vMp3PlayerFindInfo(){
 800412c:	b530      	push	{r4, r5, lr}
    mp3dec_io_t xIo;                                                                                                            /* "" "" "" */
    xIo.read = prvMp3PlayerMiniIoRead;                                                                                          /* "" "" "" */
    xIo.seek = prvMp3PlayerMiniIoSeek;                                                                                          /* "" "" "" */
    xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */

    vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 800412e:	4c2d      	ldr	r4, [pc, #180]	; (80041e4 <vMp3PlayerFindInfo+0xb8>)
    xIo.seek = prvMp3PlayerMiniIoSeek;                                                                                          /* "" "" "" */
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <vMp3PlayerFindInfo+0xbc>)
    vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8004132:	6821      	ldr	r1, [r4, #0]
    xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */
 8004134:	4d2d      	ldr	r5, [pc, #180]	; (80041ec <vMp3PlayerFindInfo+0xc0>)
    vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8004136:	6808      	ldr	r0, [r1, #0]
    xIo.read = prvMp3PlayerMiniIoRead;                                                                                          /* "" "" "" */
 8004138:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <vMp3PlayerFindInfo+0xc4>)
void vMp3PlayerFindInfo(){
 800413a:	f5ad 5d32 	sub.w	sp, sp, #11392	; 0x2c80
 800413e:	b08d      	sub	sp, #52	; 0x34
    xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */
 8004140:	e9cd 3502 	strd	r3, r5, [sp, #8]
    xIo.read = prvMp3PlayerMiniIoRead;                                                                                          /* "" "" "" */
 8004144:	9200      	str	r2, [sp, #0]
    xIo.read_data = xIo.seek_data = &xFileRead;                                                                                 /* "" "" "" */
 8004146:	9501      	str	r5, [sp, #4]
    vUpdateLCDSetMp3Track(pxCurrent->pcMp3Name);
 8004148:	f000 fa7e 	bl	8004648 <vUpdateLCDSetMp3Track>

    if(f_opendir(&xDirectory, "0:/") == FR_OK){                                                                                 /*Get the read out protection status*/
 800414c:	4929      	ldr	r1, [pc, #164]	; (80041f4 <vMp3PlayerFindInfo+0xc8>)
 800414e:	482a      	ldr	r0, [pc, #168]	; (80041f8 <vMp3PlayerFindInfo+0xcc>)
 8004150:	f008 fe5a 	bl	800ce08 <f_opendir>
 8004154:	bb60      	cbnz	r0, 80041b0 <vMp3PlayerFindInfo+0x84>
        if(f_open(&xFileRead, pxCurrent->pcMp3Name , FA_READ) != FR_OK){                                                            /*Open the MP3 file to be played*/
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	2201      	movs	r2, #1
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	4628      	mov	r0, r5
 800415e:	f008 f917 	bl	800c390 <f_open>
 8004162:	bb28      	cbnz	r0, 80041b0 <vMp3PlayerFindInfo+0x84>
        }
    }else{
        Error_Handler();                                                                                                            /*error if directory can not be opened*/
    }

    ulMP3DataLength = f_size(&xFileRead);                                                                                       /*file length information*/
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <vMp3PlayerFindInfo+0xd0>)
 8004166:	68ea      	ldr	r2, [r5, #12]
 8004168:	601a      	str	r2, [r3, #0]

    if(mp3dec_ex_open_cb(&xDec, &xIo, MP3D_SEEK_TO_SAMPLE)){                                                                    /*find VBR tag*/
 800416a:	ac04      	add	r4, sp, #16
 800416c:	4669      	mov	r1, sp
 800416e:	4620      	mov	r0, r4
 8004170:	2201      	movs	r2, #1
 8004172:	f7ff fe35 	bl	8003de0 <mp3dec_ex_open_cb>
 8004176:	b9f0      	cbnz	r0, 80041b6 <vMp3PlayerFindInfo+0x8a>
        vUpdateLCDSetSampleRate(44100);                                                                                             /*Default behaviour if tag cannot be found*/
        vUpdateLCDSetTotalTime(0);
        return;
    }

    vUpdateLCDSetSampleRate(xDec.info.hz);                                                                                      /*sample rate information*/
 8004178:	f641 2564 	movw	r5, #6756	; 0x1a64
 800417c:	5960      	ldr	r0, [r4, r5]
 800417e:	f000 fa57 	bl	8004630 <vUpdateLCDSetSampleRate>

    if(xDec.info.channels == 2){                                                                                                /*calculate mp3 track length*/
 8004182:	f50d 53d3 	add.w	r3, sp, #6752	; 0x1a60
 8004186:	3310      	adds	r3, #16
        vUpdateLCDSetTotalTime(xDec.samples / (xDec.info.hz * 2));                                                              /* "" "" "" */
 8004188:	5962      	ldr	r2, [r4, r5]
    if(xDec.info.channels == 2){                                                                                                /*calculate mp3 track length*/
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d01d      	beq.n	80041cc <vMp3PlayerFindInfo+0xa0>
    }else{                                                                                                                      /* "" "" "" */
        vUpdateLCDSetTotalTime(xDec.samples / (xDec.info.hz));                                                                  /* "" "" "" */
 8004190:	f504 53d1 	add.w	r3, r4, #6688	; 0x1a20
 8004194:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004198:	17d3      	asrs	r3, r2, #31
 800419a:	f7fc f8c9 	bl	8000330 <__aeabi_uldivmod>
 800419e:	f000 fa19 	bl	80045d4 <vUpdateLCDSetTotalTime>
    }
    mp3dec_ex_close(&xDec);                                                                                                     /*free memory allocated by minimp3 library*/
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7ff fe90 	bl	8003ec8 <mp3dec_ex_close>
}
 80041a8:	f50d 5d32 	add.w	sp, sp, #11392	; 0x2c80
 80041ac:	b00d      	add	sp, #52	; 0x34
 80041ae:	bd30      	pop	{r4, r5, pc}
            Error_Handler();                                                                                                        /*error if file does not exist*/
 80041b0:	f7fc fb66 	bl	8000880 <Error_Handler>
 80041b4:	e7d6      	b.n	8004164 <vMp3PlayerFindInfo+0x38>
        vUpdateLCDSetSampleRate(44100);                                                                                             /*Default behaviour if tag cannot be found*/
 80041b6:	f64a 4044 	movw	r0, #44100	; 0xac44
 80041ba:	f000 fa39 	bl	8004630 <vUpdateLCDSetSampleRate>
        vUpdateLCDSetTotalTime(0);
 80041be:	2000      	movs	r0, #0
 80041c0:	f000 fa08 	bl	80045d4 <vUpdateLCDSetTotalTime>
}
 80041c4:	f50d 5d32 	add.w	sp, sp, #11392	; 0x2c80
 80041c8:	b00d      	add	sp, #52	; 0x34
 80041ca:	bd30      	pop	{r4, r5, pc}
        vUpdateLCDSetTotalTime(xDec.samples / (xDec.info.hz * 2));                                                              /* "" "" "" */
 80041cc:	f504 51d1 	add.w	r1, r4, #6688	; 0x1a20
 80041d0:	0052      	lsls	r2, r2, #1
 80041d2:	3110      	adds	r1, #16
 80041d4:	17d3      	asrs	r3, r2, #31
 80041d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041da:	f7fc f8a9 	bl	8000330 <__aeabi_uldivmod>
 80041de:	f000 f9f9 	bl	80045d4 <vUpdateLCDSetTotalTime>
 80041e2:	e7de      	b.n	80041a2 <vMp3PlayerFindInfo+0x76>
 80041e4:	20000368 	.word	0x20000368
 80041e8:	08001fd5 	.word	0x08001fd5
 80041ec:	200047e0 	.word	0x200047e0
 80041f0:	08001fe1 	.word	0x08001fe1
 80041f4:	08010880 	.word	0x08010880
 80041f8:	200047ac 	.word	0x200047ac
 80041fc:	20004794 	.word	0x20004794

08004200 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void){
    xBufferOffset = BUFFER_OFFSET_HALF;                                                                                         /*set the buffer offset flag*/
 8004200:	4b01      	ldr	r3, [pc, #4]	; (8004208 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
}
 8004206:	4770      	bx	lr
 8004208:	200047a8 	.word	0x200047a8

0800420c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void){
    xBufferOffset = BUFFER_OFFSET_FULL;                                                                                         /*set the buffer offset flag*/
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE / 2);                                            /*fill buffer with next audio information*/
 800420e:	4804      	ldr	r0, [pc, #16]	; (8004220 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
    xBufferOffset = BUFFER_OFFSET_FULL;                                                                                         /*set the buffer offset flag*/
 8004210:	2202      	movs	r2, #2
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE / 2);                                            /*fill buffer with next audio information*/
 8004212:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    xBufferOffset = BUFFER_OFFSET_FULL;                                                                                         /*set the buffer offset flag*/
 8004216:	701a      	strb	r2, [r3, #0]
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&ucAudioBuffer[0], AUDIO_BUFFER_SIZE / 2);                                            /*fill buffer with next audio information*/
 8004218:	f000 bd36 	b.w	8004c88 <BSP_AUDIO_OUT_ChangeBuffer>
 800421c:	200047a8 	.word	0x200047a8
 8004220:	20002388 	.word	0x20002388

08004224 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void){
 8004224:	b508      	push	{r3, lr}
    while (1){                                                                                                                  /*Stop the program with an infinite loop*/
      Error_Handler();                                                                                                          /*Go to error handler*/
 8004226:	f7fc fb2b 	bl	8000880 <Error_Handler>
 800422a:	e7fc      	b.n	8004226 <BSP_AUDIO_OUT_Error_CallBack+0x2>

0800422c <pxSongLLNewElement>:
/**
  * @brief  create and allocate memory for new node in LL
  * @param  pcFileName : Name of LL node
  * @retval MP3 Node variable
  */
MP3 *pxSongLLNewElement(char* pcFileName){
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4605      	mov	r5, r0
    MP3 *pxNewPointer;
    pxNewPointer = (MP3 *) malloc(sizeof(MP3));
 8004230:	200c      	movs	r0, #12
 8004232:	f00b fe6d 	bl	800ff10 <malloc>
 8004236:	4604      	mov	r4, r0
    pxNewPointer->pcMp3Name = (char *) malloc(strlen(pcFileName) + 1);
 8004238:	4628      	mov	r0, r5
 800423a:	f7fc f81d 	bl	8000278 <strlen>
 800423e:	1c46      	adds	r6, r0, #1
 8004240:	4630      	mov	r0, r6
 8004242:	f00b fe65 	bl	800ff10 <malloc>
    strcpy(pxNewPointer->pcMp3Name, pcFileName);
 8004246:	4632      	mov	r2, r6
 8004248:	4629      	mov	r1, r5
    pxNewPointer->pcMp3Name = (char *) malloc(strlen(pcFileName) + 1);
 800424a:	6020      	str	r0, [r4, #0]
    strcpy(pxNewPointer->pcMp3Name, pcFileName);
 800424c:	f00b fe7f 	bl	800ff4e <memcpy>
    pxNewPointer->pxNext = NULL;
 8004250:	2300      	movs	r3, #0
    pxNewPointer->pxPrev = NULL;
 8004252:	e9c4 3301 	strd	r3, r3, [r4, #4]
    return pxNewPointer;
}
 8004256:	4620      	mov	r0, r4
 8004258:	bd70      	pop	{r4, r5, r6, pc}
 800425a:	bf00      	nop

0800425c <vSongLLAddEnd>:
  * @param  pxNewPointer : pointer to new node
  * @retval None
  */
void vSongLLAddEnd(MP3 **ppxHead, MP3 *pxNewPointer){
    MP3 *pxPointer2;
    if((*ppxHead) == NULL){
 800425c:	6802      	ldr	r2, [r0, #0]
 800425e:	b90a      	cbnz	r2, 8004264 <vSongLLAddEnd+0x8>
 8004260:	e006      	b.n	8004270 <vSongLLAddEnd+0x14>
 8004262:	461a      	mov	r2, r3
        *ppxHead = pxNewPointer;
    }else{
        for(pxPointer2 = *ppxHead; pxPointer2->pxNext !=NULL; pxPointer2 = pxPointer2->pxNext){
 8004264:	6853      	ldr	r3, [r2, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1fb      	bne.n	8004262 <vSongLLAddEnd+0x6>
            ;
        }

        pxPointer2->pxNext = pxNewPointer;
 800426a:	6051      	str	r1, [r2, #4]
        pxNewPointer->pxPrev = pxPointer2;
 800426c:	608a      	str	r2, [r1, #8]
    }
}
 800426e:	4770      	bx	lr
        *ppxHead = pxNewPointer;
 8004270:	6001      	str	r1, [r0, #0]
 8004272:	4770      	bx	lr

08004274 <vSongLLCircularizeList>:
  * @param  pxHead : pointer to head of LL
  * @retval None
  */
void vSongLLCircularizeList(MP3 *pxHead){
    MP3 *pxPointer2;
    if(pxHead == NULL)
 8004274:	b138      	cbz	r0, 8004286 <vSongLLCircularizeList+0x12>
 8004276:	4602      	mov	r2, r0
 8004278:	e000      	b.n	800427c <vSongLLCircularizeList+0x8>
 800427a:	461a      	mov	r2, r3
        return;

    for(pxPointer2 = pxHead; pxPointer2->pxNext !=NULL; pxPointer2 = pxPointer2->pxNext){
 800427c:	6853      	ldr	r3, [r2, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1fb      	bne.n	800427a <vSongLLCircularizeList+0x6>
        ;
    }

    pxHead->pxPrev = pxPointer2;
 8004282:	6082      	str	r2, [r0, #8]
    pxPointer2->pxNext = pxHead;
 8004284:	6050      	str	r0, [r2, #4]
}
 8004286:	4770      	bx	lr

08004288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004288:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_MspInit+0x3c>)
 800428c:	2200      	movs	r2, #0
 800428e:	9200      	str	r2, [sp, #0]
 8004290:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004292:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004296:	6459      	str	r1, [r3, #68]	; 0x44
 8004298:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800429a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800429e:	9100      	str	r1, [sp, #0]
 80042a0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	9201      	str	r2, [sp, #4]
 80042a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042a6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80042aa:	6419      	str	r1, [r3, #64]	; 0x40
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042b6:	210f      	movs	r1, #15
 80042b8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042bc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042be:	f001 bbf5 	b.w	8005aac <HAL_NVIC_SetPriority>
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042c8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80042ca:	6801      	ldr	r1, [r0, #0]
 80042cc:	4a15      	ldr	r2, [pc, #84]	; (8004324 <HAL_ADC_MspInit+0x5c>)
{
 80042ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d0:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80042d2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80042d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80042dc:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80042de:	d001      	beq.n	80042e4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042e0:	b008      	add	sp, #32
 80042e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042e4:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ec:	480e      	ldr	r0, [pc, #56]	; (8004328 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042ee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80042f2:	6451      	str	r1, [r2, #68]	; 0x44
 80042f4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80042f6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80042fa:	9101      	str	r1, [sp, #4]
 80042fc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	9302      	str	r3, [sp, #8]
 8004300:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6313      	str	r3, [r2, #48]	; 0x30
 8004308:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004310:	2208      	movs	r2, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004312:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004314:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004316:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004318:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431c:	f001 fe42 	bl	8005fa4 <HAL_GPIO_Init>
}
 8004320:	b008      	add	sp, #32
 8004322:	bd10      	pop	{r4, pc}
 8004324:	40012000 	.word	0x40012000
 8004328:	40020000 	.word	0x40020000

0800432c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800432c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800432e:	6802      	ldr	r2, [r0, #0]
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <HAL_I2C_MspInit+0x64>)
{
 8004332:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004334:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8004336:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800433c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004340:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8004342:	d001      	beq.n	8004348 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004344:	b008      	add	sp, #32
 8004346:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004348:	4d12      	ldr	r5, [pc, #72]	; (8004394 <HAL_I2C_MspInit+0x68>)
 800434a:	9401      	str	r4, [sp, #4]
 800434c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434e:	4812      	ldr	r0, [pc, #72]	; (8004398 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	632b      	str	r3, [r5, #48]	; 0x30
 8004356:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800435e:	f44f 7210 	mov.w	r2, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004362:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004364:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004366:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004368:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800436a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800436e:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004370:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004372:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004374:	f001 fe16 	bl	8005fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004378:	9402      	str	r4, [sp, #8]
 800437a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800437c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004380:	642b      	str	r3, [r5, #64]	; 0x40
 8004382:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	9b02      	ldr	r3, [sp, #8]
}
 800438c:	b008      	add	sp, #32
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	40005400 	.word	0x40005400
 8004394:	40023800 	.word	0x40023800
 8004398:	40020400 	.word	0x40020400

0800439c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800439c:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 800439e:	6802      	ldr	r2, [r0, #0]
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_I2C_MspDeInit+0x2c>)
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d000      	beq.n	80043a8 <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80043a6:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <HAL_I2C_MspDeInit+0x30>)
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80043aa:	4809      	ldr	r0, [pc, #36]	; (80043d0 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80043ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80043ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043b2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	f001 fef9 	bl	80061ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80043ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043be:	4804      	ldr	r0, [pc, #16]	; (80043d0 <HAL_I2C_MspDeInit+0x34>)
}
 80043c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80043c4:	f001 bef2 	b.w	80061ac <HAL_GPIO_DeInit>
 80043c8:	40005400 	.word	0x40005400
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020400 	.word	0x40020400

080043d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80043d4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2s->Instance==SPI3)
 80043d6:	6802      	ldr	r2, [r0, #0]
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_I2S_MspInit+0xa4>)
{
 80043da:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	2400      	movs	r4, #0
  if(hi2s->Instance==SPI3)
 80043de:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80043e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80043e8:	9407      	str	r4, [sp, #28]
  if(hi2s->Instance==SPI3)
 80043ea:	d001      	beq.n	80043f0 <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80043ec:	b008      	add	sp, #32
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043f0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80043f4:	9400      	str	r4, [sp, #0]
 80043f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80043f8:	4820      	ldr	r0, [pc, #128]	; (800447c <HAL_I2S_MspInit+0xa8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
 8004400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004402:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004406:	9200      	str	r2, [sp, #0]
 8004408:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	9401      	str	r4, [sp, #4]
 800440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
 8004414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004416:	f002 0201 	and.w	r2, r2, #1
 800441a:	9201      	str	r2, [sp, #4]
 800441c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	9402      	str	r4, [sp, #8]
 8004420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004422:	f042 0204 	orr.w	r2, r2, #4
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004430:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004432:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004434:	2606      	movs	r6, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004436:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004438:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800443a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004440:	f001 fdb0 	bl	8005fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004444:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004448:	a903      	add	r1, sp, #12
 800444a:	480d      	ldr	r0, [pc, #52]	; (8004480 <HAL_I2S_MspInit+0xac>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800444c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004450:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004456:	f001 fda5 	bl	8005fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800445a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 800445e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004460:	a903      	add	r1, sp, #12
 8004462:	4807      	ldr	r0, [pc, #28]	; (8004480 <HAL_I2S_MspInit+0xac>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004464:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800446a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 800446c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446e:	f001 fd99 	bl	8005fa4 <HAL_GPIO_Init>
}
 8004472:	b008      	add	sp, #32
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	bf00      	nop
 8004478:	40003c00 	.word	0x40003c00
 800447c:	40020000 	.word	0x40020000
 8004480:	40020800 	.word	0x40020800

08004484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004484:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004486:	4601      	mov	r1, r0
{
 8004488:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800448a:	2200      	movs	r2, #0
 800448c:	2037      	movs	r0, #55	; 0x37
 800448e:	f001 fb0d 	bl	8005aac <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004492:	2037      	movs	r0, #55	; 0x37
 8004494:	f001 fb40 	bl	8005b18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004498:	2500      	movs	r5, #0
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_InitTick+0x70>)
 800449c:	9502      	str	r5, [sp, #8]
 800449e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80044a0:	4c15      	ldr	r4, [pc, #84]	; (80044f8 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 0320 	and.w	r3, r3, #32
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044ae:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM7_CLK_ENABLE();
 80044b0:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044b2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 80044b4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044b6:	f003 ffdd 	bl	8008474 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80044ba:	f003 ffcb 	bl	8008454 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044be:	4a0f      	ldr	r2, [pc, #60]	; (80044fc <HAL_InitTick+0x78>)
  htim7.Instance = TIM7;
 80044c0:	490f      	ldr	r1, [pc, #60]	; (8004500 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 80044c2:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80044c4:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	0c9b      	lsrs	r3, r3, #18
 80044cc:	3b01      	subs	r3, #1
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80044ce:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80044d2:	4620      	mov	r0, r4
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d4:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim7.Instance = TIM7;
 80044d8:	6021      	str	r1, [r4, #0]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80044da:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80044dc:	f004 fa0a 	bl	80088f4 <HAL_TIM_Base_Init>
 80044e0:	b110      	cbz	r0, 80044e8 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
}
 80044e4:	b009      	add	sp, #36	; 0x24
 80044e6:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim7);
 80044e8:	4620      	mov	r0, r4
 80044ea:	f004 f8cf 	bl	800868c <HAL_TIM_Base_Start_IT>
}
 80044ee:	b009      	add	sp, #36	; 0x24
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	2000d620 	.word	0x2000d620
 80044fc:	431bde83 	.word	0x431bde83
 8004500:	40001400 	.word	0x40001400

08004504 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004508:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800450a:	2201      	movs	r2, #1
 800450c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <HardFault_Handler+0x10>)
 8004512:	f001 fefb 	bl	800630c <HAL_GPIO_WritePin>
 8004516:	e7fe      	b.n	8004516 <HardFault_Handler+0xe>
 8004518:	40020c00 	.word	0x40020c00

0800451c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800451c:	e7fe      	b.n	800451c <MemManage_Handler>
 800451e:	bf00      	nop

08004520 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004520:	e7fe      	b.n	8004520 <BusFault_Handler>
 8004522:	bf00      	nop

08004524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004524:	e7fe      	b.n	8004524 <UsageFault_Handler>
 8004526:	bf00      	nop

08004528 <DebugMon_Handler>:
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <TIM7_IRQHandler+0x8>)
 800452e:	f004 b8c5 	b.w	80086bc <HAL_TIM_IRQHandler>
 8004532:	bf00      	nop
 8004534:	2000d620 	.word	0x2000d620

08004538 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <OTG_FS_IRQHandler+0x8>)
 800453a:	f002 b805 	b.w	8006548 <HAL_HCD_IRQHandler>
 800453e:	bf00      	nop
 8004540:	2000fcd8 	.word	0x2000fcd8

08004544 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8004544:	4b01      	ldr	r3, [pc, #4]	; (800454c <DMA1_Stream7_IRQHandler+0x8>)
 8004546:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004548:	f001 bc56 	b.w	8005df8 <HAL_DMA_IRQHandler>
 800454c:	2000d704 	.word	0x2000d704

08004550 <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8004550:	4b01      	ldr	r3, [pc, #4]	; (8004558 <DMA1_Stream3_IRQHandler+0x8>)
 8004552:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004554:	f001 bc50 	b.w	8005df8 <HAL_DMA_IRQHandler>
 8004558:	2000d74c 	.word	0x2000d74c

0800455c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800455c:	490c      	ldr	r1, [pc, #48]	; (8004590 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800455e:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004560:	680b      	ldr	r3, [r1, #0]
{
 8004562:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004564:	4c0c      	ldr	r4, [pc, #48]	; (8004598 <_sbrk+0x3c>)
 8004566:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004568:	b12b      	cbz	r3, 8004576 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800456a:	4418      	add	r0, r3
 800456c:	4290      	cmp	r0, r2
 800456e:	d807      	bhi.n	8004580 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004570:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004572:	4618      	mov	r0, r3
 8004574:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <_sbrk+0x40>)
 8004578:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800457a:	4418      	add	r0, r3
 800457c:	4290      	cmp	r0, r2
 800457e:	d9f7      	bls.n	8004570 <_sbrk+0x14>
    errno = ENOMEM;
 8004580:	f00b fc9c 	bl	800febc <__errno>
 8004584:	230c      	movs	r3, #12
 8004586:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd10      	pop	{r4, pc}
 8004590:	20007234 	.word	0x20007234
 8004594:	20020000 	.word	0x20020000
 8004598:	00008000 	.word	0x00008000
 800459c:	2000ffa0 	.word	0x2000ffa0

080045a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <SystemInit+0x18>)
 80045a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045b2:	6099      	str	r1, [r3, #8]
#endif
}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <vUpdateLCDSetCurrentTime>:
  * @brief  Set current time LCD variable
  * @param  ulSetToCurrentTime: variable to set the current time on LCD.
  * @retval None
  */
void vUpdateLCDSetCurrentTime(uint32_t ulSetToCurrentTime){
    xDisplayInfo.ulCurrentTime = ulSetToCurrentTime;
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <vUpdateLCDSetCurrentTime+0x8>)
 80045be:	6018      	str	r0, [r3, #0]
}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20007238 	.word	0x20007238

080045c8 <ulUpdateLCDGetCurrentTime>:
/**
  * @brief  returns current time LCD variable
  * @retval ""
  */
uint32_t ulUpdateLCDGetCurrentTime(){
    return xDisplayInfo.ulCurrentTime;
 80045c8:	4b01      	ldr	r3, [pc, #4]	; (80045d0 <ulUpdateLCDGetCurrentTime+0x8>)
}
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20007238 	.word	0x20007238

080045d4 <vUpdateLCDSetTotalTime>:
/**
  * @brief  Set total time LCD variable, convert it from integer to "mm:ss" string
  * @param  ulSetToCurrentTime: variable to set the total time on LCD.
  * @retval None
  */
void vUpdateLCDSetTotalTime(uint32_t ulSetToTotalTime){
 80045d4:	b430      	push	{r4, r5}

    xDisplayInfo.ulTotalTime = ulSetToTotalTime;
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <vUpdateLCDSetTotalTime+0x34>)
 80045d8:	6060      	str	r0, [r4, #4]

    if(ulSetToTotalTime != 0){
 80045da:	b930      	cbnz	r0, 80045ea <vUpdateLCDSetTotalTime+0x16>
        prvUpdateLCDConvertToMinutes(xDisplayInfo.ulTotalTime, xDisplayInfo.cTotalTime);
    }else{
        strncpy(xDisplayInfo.cTotalTime , "--:--", 12);
 80045dc:	f104 001c 	add.w	r0, r4, #28
 80045e0:	220c      	movs	r2, #12
 80045e2:	490a      	ldr	r1, [pc, #40]	; (800460c <vUpdateLCDSetTotalTime+0x38>)
    }
}
 80045e4:	bc30      	pop	{r4, r5}
        strncpy(xDisplayInfo.cTotalTime , "--:--", 12);
 80045e6:	f00b bdbf 	b.w	8010168 <strncpy>
  * @param  time_string	:	time in mm:ss char format
  * @retval None
  */
static void prvUpdateLCDConvertToMinutes(uint32_t ulSeconds, char cTimeString[12]){
    uint32_t minutes = ulSeconds/60;                                                                                                /*minutes calculation*/
    ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <vUpdateLCDSetTotalTime+0x3c>)
    sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 80045ec:	4909      	ldr	r1, [pc, #36]	; (8004614 <vUpdateLCDSetTotalTime+0x40>)
 80045ee:	4603      	mov	r3, r0
    ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 80045f0:	fba2 0203 	umull	r0, r2, r2, r3
 80045f4:	0952      	lsrs	r2, r2, #5
 80045f6:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 80045fa:	f104 001c 	add.w	r0, r4, #28
 80045fe:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
}
 8004602:	bc30      	pop	{r4, r5}
    sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 8004604:	f00b bd90 	b.w	8010128 <siprintf>
 8004608:	20007238 	.word	0x20007238
 800460c:	080127a4 	.word	0x080127a4
 8004610:	88888889 	.word	0x88888889
 8004614:	08012798 	.word	0x08012798

08004618 <vUpdateLCDSetVolume>:
    xDisplayInfo.ulVolume = ulSetToVolume;
 8004618:	4b01      	ldr	r3, [pc, #4]	; (8004620 <vUpdateLCDSetVolume+0x8>)
 800461a:	6098      	str	r0, [r3, #8]
}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20007238 	.word	0x20007238

08004624 <ulUpdateLCDGetVolume>:
    return xDisplayInfo.ulVolume;
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <ulUpdateLCDGetVolume+0x8>)
}
 8004626:	6898      	ldr	r0, [r3, #8]
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20007238 	.word	0x20007238

08004630 <vUpdateLCDSetSampleRate>:
    xDisplayInfo.ulSampleRate = ulSetToSampleRate;
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <vUpdateLCDSetSampleRate+0x8>)
 8004632:	60d8      	str	r0, [r3, #12]
}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20007238 	.word	0x20007238

0800463c <ulUpdateLCDGetSampleRate>:
    return xDisplayInfo.ulSampleRate;
 800463c:	4b01      	ldr	r3, [pc, #4]	; (8004644 <ulUpdateLCDGetSampleRate+0x8>)
}
 800463e:	68d8      	ldr	r0, [r3, #12]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20007238 	.word	0x20007238

08004648 <vUpdateLCDSetMp3Track>:
    strncpy(xDisplayInfo.cMp3Track, pcMp3Track, 50);
 8004648:	4601      	mov	r1, r0
 800464a:	2232      	movs	r2, #50	; 0x32
 800464c:	4801      	ldr	r0, [pc, #4]	; (8004654 <vUpdateLCDSetMp3Track+0xc>)
 800464e:	f00b bd8b 	b.w	8010168 <strncpy>
 8004652:	bf00      	nop
 8004654:	20007266 	.word	0x20007266

08004658 <vUpdateLCDScreen>:
/**
  * @brief  update the LCM1602a with current information
  * @param  None
  * @retval None
  */
void vUpdateLCDScreen(){
 8004658:	b538      	push	{r3, r4, r5, lr}
    prvUpdateLCDConvertToMinutes(xDisplayInfo.ulCurrentTime, xDisplayInfo.cCurrentTime);                                            /*convert current time to character string*/
 800465a:	4c33      	ldr	r4, [pc, #204]	; (8004728 <vUpdateLCDScreen+0xd0>)
    ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <vUpdateLCDScreen+0xd4>)
    sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 800465e:	4934      	ldr	r1, [pc, #208]	; (8004730 <vUpdateLCDScreen+0xd8>)
    prvUpdateLCDConvertToMinutes(xDisplayInfo.ulCurrentTime, xDisplayInfo.cCurrentTime);                                            /*convert current time to character string*/
 8004660:	4620      	mov	r0, r4
 8004662:	f850 3b10 	ldr.w	r3, [r0], #16
    ulSeconds = ulSeconds - ((ulSeconds/60) * 60);                                                                                  /*seconds calculation*/
 8004666:	fba2 5203 	umull	r5, r2, r2, r3
 800466a:	0952      	lsrs	r2, r2, #5
 800466c:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    sprintf(cTimeString, "%02ld:%02ld", minutes, ulSeconds);                                                                        /*convert to string*/
 8004670:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 8004674:	f00b fd58 	bl	8010128 <siprintf>
    LCM1602a_Write_Data(0b00000010, 0, 0);                                                                                          /*Return to Home position on display*/
 8004678:	2200      	movs	r2, #0
 800467a:	4611      	mov	r1, r2
 800467c:	2002      	movs	r0, #2
 800467e:	f000 fe9d 	bl	80053bc <LCM1602a_Write_Data>
    LCM1602a_textwrap((char*) xDisplayInfo.cMp3Track, 1);
 8004682:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8004686:	2101      	movs	r1, #1
 8004688:	f000 ff22 	bl	80054d0 <LCM1602a_textwrap>
    LCM1602a_Write_Data(0b11000000, 0, 0);                                                                                          /*next line on display*/
 800468c:	2200      	movs	r2, #0
 800468e:	4611      	mov	r1, r2
 8004690:	20c0      	movs	r0, #192	; 0xc0
 8004692:	f000 fe93 	bl	80053bc <LCM1602a_Write_Data>
    LCM1602a_Write_Message((char*) xDisplayInfo.cCurrentTime);                                                                      /*display time information*/
 8004696:	f104 0010 	add.w	r0, r4, #16
 800469a:	f000 fe65 	bl	8005368 <LCM1602a_Write_Message>
    LCM1602a_Write_Message((char*) "/");                                                                                            /* "" "" "" */
 800469e:	4825      	ldr	r0, [pc, #148]	; (8004734 <vUpdateLCDScreen+0xdc>)
 80046a0:	f000 fe62 	bl	8005368 <LCM1602a_Write_Message>
    LCM1602a_Write_Message((char*) xDisplayInfo.cTotalTime);                                                                        /* "" "" "" */
 80046a4:	f104 001c 	add.w	r0, r4, #28
 80046a8:	f000 fe5e 	bl	8005368 <LCM1602a_Write_Message>
    LCM1602a_Write_Message((char*) " ");                                                                                            /*space character*/
 80046ac:	4822      	ldr	r0, [pc, #136]	; (8004738 <vUpdateLCDScreen+0xe0>)
 80046ae:	f000 fe5b 	bl	8005368 <LCM1602a_Write_Message>
    LCM1602a_Write_Data(SPEAKER, 1, 0);                                                                                             /*print speaker character*/
 80046b2:	2200      	movs	r2, #0
 80046b4:	4610      	mov	r0, r2
 80046b6:	2101      	movs	r1, #1
 80046b8:	f000 fe80 	bl	80053bc <LCM1602a_Write_Data>
    if(xDisplayInfo.ulVolume < 25){                                                                                                 /*if volume less than 25*/
 80046bc:	68a3      	ldr	r3, [r4, #8]
 80046be:	2b18      	cmp	r3, #24
 80046c0:	d910      	bls.n	80046e4 <vUpdateLCDScreen+0x8c>
    }else if(xDisplayInfo.ulVolume < 50){																							/*else if volume less than 50*/
 80046c2:	2b31      	cmp	r3, #49	; 0x31
 80046c4:	d904      	bls.n	80046d0 <vUpdateLCDScreen+0x78>
    }else if(xDisplayInfo.ulVolume < 75){                                                                                           /*else if volume less than 75*/
 80046c6:	2b4a      	cmp	r3, #74	; 0x4a
 80046c8:	d916      	bls.n	80046f8 <vUpdateLCDScreen+0xa0>
    }else if(xDisplayInfo.ulVolume <= 100){                                                                                         /*else if volume less than / equal to 100*/
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d920      	bls.n	8004710 <vUpdateLCDScreen+0xb8>
    prvUpdateLCDPrintVolume();                                                                                                      /*current volume*/
}
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
        LCM1602a_Write_Data(VOLUME2, 1, 0);                                                                                             /* ##-- */
 80046d0:	2002      	movs	r0, #2
 80046d2:	2200      	movs	r2, #0
 80046d4:	2101      	movs	r1, #1
 80046d6:	f000 fe71 	bl	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Message((char*) " ");
 80046da:	4817      	ldr	r0, [pc, #92]	; (8004738 <vUpdateLCDScreen+0xe0>)
}
 80046dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        LCM1602a_Write_Message((char*) " ");
 80046e0:	f000 be42 	b.w	8005368 <LCM1602a_Write_Message>
        LCM1602a_Write_Data(VOLUME1, 1, 0);                                                                                             /* #--- */
 80046e4:	2101      	movs	r1, #1
 80046e6:	4608      	mov	r0, r1
 80046e8:	2200      	movs	r2, #0
 80046ea:	f000 fe67 	bl	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Message((char*) " ");
 80046ee:	4812      	ldr	r0, [pc, #72]	; (8004738 <vUpdateLCDScreen+0xe0>)
}
 80046f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        LCM1602a_Write_Message((char*) " ");
 80046f4:	f000 be38 	b.w	8005368 <LCM1602a_Write_Message>
        LCM1602a_Write_Data(VOLUME2, 1, 0);                                                                                             /* ###- */
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	2002      	movs	r0, #2
 80046fe:	f000 fe5d 	bl	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Data(VOLUME3, 1, 0);
 8004702:	2200      	movs	r2, #0
 8004704:	2101      	movs	r1, #1
 8004706:	2003      	movs	r0, #3
}
 8004708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        LCM1602a_Write_Data(VOLUME3, 1, 0);
 800470c:	f000 be56 	b.w	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Data(VOLUME2, 1, 0);                                                                                             /* #### */
 8004710:	2200      	movs	r2, #0
 8004712:	2101      	movs	r1, #1
 8004714:	2002      	movs	r0, #2
 8004716:	f000 fe51 	bl	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Data(VOLUME4, 1, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2101      	movs	r1, #1
 800471e:	2004      	movs	r0, #4
}
 8004720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        LCM1602a_Write_Data(VOLUME4, 1, 0);
 8004724:	f000 be4a 	b.w	80053bc <LCM1602a_Write_Data>
 8004728:	20007238 	.word	0x20007238
 800472c:	88888889 	.word	0x88888889
 8004730:	08012798 	.word	0x08012798
 8004734:	08012790 	.word	0x08012790
 8004738:	08012794 	.word	0x08012794

0800473c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800473c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004742:	e003      	b.n	800474c <LoopCopyDataInit>

08004744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800474a:	3104      	adds	r1, #4

0800474c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800474c:	480b      	ldr	r0, [pc, #44]	; (800477c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004754:	d3f6      	bcc.n	8004744 <CopyDataInit>
  ldr  r2, =_sbss
 8004756:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004758:	e002      	b.n	8004760 <LoopFillZerobss>

0800475a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800475a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800475c:	f842 3b04 	str.w	r3, [r2], #4

08004760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004764:	d3f9      	bcc.n	800475a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004766:	f7ff ff1b 	bl	80045a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800476a:	f00b fbad 	bl	800fec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800476e:	f7fc f8eb 	bl	8000948 <main>
  bx  lr    
 8004772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004774:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004778:	08012dc8 	.word	0x08012dc8
  ldr  r0, =_sdata
 800477c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004780:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 8004784:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 8004788:	2000ffa0 	.word	0x2000ffa0

0800478c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800478c:	e7fe      	b.n	800478c <ADC_IRQHandler>
	...

08004790 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 8004794:	2000      	movs	r0, #0
 8004796:	4770      	bx	lr

08004798 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004798:	2964      	cmp	r1, #100	; 0x64
{
 800479a:	b538      	push	{r3, r4, r5, lr}
 800479c:	b2c5      	uxtb	r5, r0
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800479e:	d814      	bhi.n	80047ca <cs43l22_SetVolume+0x32>
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <cs43l22_SetVolume+0x38>)
 80047a2:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80047a6:	fba3 3101 	umull	r3, r1, r3, r1
 80047aa:	0949      	lsrs	r1, r1, #5
 80047ac:	f101 0419 	add.w	r4, r1, #25
 80047b0:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80047b2:	4622      	mov	r2, r4
 80047b4:	4628      	mov	r0, r5
 80047b6:	2120      	movs	r1, #32
 80047b8:	f000 f9ee 	bl	8004b98 <AUDIO_IO_Write>
 80047bc:	4628      	mov	r0, r5
 80047be:	4622      	mov	r2, r4
 80047c0:	2121      	movs	r1, #33	; 0x21
 80047c2:	f000 f9e9 	bl	8004b98 <AUDIO_IO_Write>
}
 80047c6:	2000      	movs	r0, #0
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	2418      	movs	r4, #24
 80047cc:	e7f1      	b.n	80047b2 <cs43l22_SetVolume+0x1a>
 80047ce:	bf00      	nop
 80047d0:	51eb851f 	.word	0x51eb851f

080047d4 <cs43l22_Init>:
{
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80047d6:	b2c4      	uxtb	r4, r0
{
 80047d8:	460d      	mov	r5, r1
 80047da:	4606      	mov	r6, r0
 80047dc:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 80047de:	f000 f9a7 	bl	8004b30 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 80047e2:	2102      	movs	r1, #2
 80047e4:	4620      	mov	r0, r4
 80047e6:	2201      	movs	r2, #1
 80047e8:	f000 f9d6 	bl	8004b98 <AUDIO_IO_Write>
  switch (OutputDevice)
 80047ec:	1e69      	subs	r1, r5, #1
 80047ee:	2903      	cmp	r1, #3
 80047f0:	d803      	bhi.n	80047fa <cs43l22_Init+0x26>
 80047f2:	e8df f001 	tbb	[pc, r1]
 80047f6:	4c64      	.short	0x4c64
 80047f8:	0248      	.short	0x0248
    OutputDev = 0x05;
 80047fa:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <cs43l22_Init+0xf4>)
 80047fc:	2205      	movs	r2, #5
 80047fe:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8004800:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8004802:	2104      	movs	r1, #4
 8004804:	4620      	mov	r0, r4
 8004806:	f000 f9c7 	bl	8004b98 <AUDIO_IO_Write>
 800480a:	2281      	movs	r2, #129	; 0x81
 800480c:	2105      	movs	r1, #5
 800480e:	4620      	mov	r0, r4
 8004810:	f000 f9c2 	bl	8004b98 <AUDIO_IO_Write>
 8004814:	2204      	movs	r2, #4
 8004816:	2106      	movs	r1, #6
 8004818:	4620      	mov	r0, r4
 800481a:	f000 f9bd 	bl	8004b98 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800481e:	4639      	mov	r1, r7
 8004820:	4630      	mov	r0, r6
 8004822:	f7ff ffb9 	bl	8004798 <cs43l22_SetVolume>
  AUDIO_IO_Write(Addr, Reg, Value);
 8004826:	2206      	movs	r2, #6
 8004828:	210f      	movs	r1, #15
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800482a:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 800482c:	4620      	mov	r0, r4
 800482e:	f000 f9b3 	bl	8004b98 <AUDIO_IO_Write>
 8004832:	2200      	movs	r2, #0
 8004834:	2124      	movs	r1, #36	; 0x24
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f9ae 	bl	8004b98 <AUDIO_IO_Write>
 800483c:	2200      	movs	r2, #0
 800483e:	2125      	movs	r1, #37	; 0x25
 8004840:	4620      	mov	r0, r4
 8004842:	f000 f9a9 	bl	8004b98 <AUDIO_IO_Write>
 8004846:	4620      	mov	r0, r4
 8004848:	2200      	movs	r2, #0
 800484a:	210a      	movs	r1, #10
 800484c:	f000 f9a4 	bl	8004b98 <AUDIO_IO_Write>
 8004850:	4620      	mov	r0, r4
 8004852:	2204      	movs	r2, #4
 8004854:	210e      	movs	r1, #14
 8004856:	f000 f99f 	bl	8004b98 <AUDIO_IO_Write>
 800485a:	4620      	mov	r0, r4
 800485c:	2200      	movs	r2, #0
 800485e:	2127      	movs	r1, #39	; 0x27
 8004860:	f000 f99a 	bl	8004b98 <AUDIO_IO_Write>
 8004864:	4620      	mov	r0, r4
 8004866:	220f      	movs	r2, #15
 8004868:	211f      	movs	r1, #31
 800486a:	f000 f995 	bl	8004b98 <AUDIO_IO_Write>
 800486e:	4620      	mov	r0, r4
 8004870:	220a      	movs	r2, #10
 8004872:	211a      	movs	r1, #26
 8004874:	f000 f990 	bl	8004b98 <AUDIO_IO_Write>
 8004878:	4620      	mov	r0, r4
 800487a:	220a      	movs	r2, #10
 800487c:	211b      	movs	r1, #27
 800487e:	f000 f98b 	bl	8004b98 <AUDIO_IO_Write>
}
 8004882:	4628      	mov	r0, r5
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAA;
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <cs43l22_Init+0xf4>)
 8004888:	22aa      	movs	r2, #170	; 0xaa
 800488a:	701a      	strb	r2, [r3, #0]
    break;
 800488c:	e7b8      	b.n	8004800 <cs43l22_Init+0x2c>
    OutputDev = 0xAF;
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <cs43l22_Init+0xf4>)
 8004890:	22af      	movs	r2, #175	; 0xaf
 8004892:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8004894:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8004896:	2104      	movs	r1, #4
 8004898:	4620      	mov	r0, r4
 800489a:	f000 f97d 	bl	8004b98 <AUDIO_IO_Write>
 800489e:	2281      	movs	r2, #129	; 0x81
 80048a0:	2105      	movs	r1, #5
 80048a2:	4620      	mov	r0, r4
 80048a4:	f000 f978 	bl	8004b98 <AUDIO_IO_Write>
 80048a8:	2204      	movs	r2, #4
 80048aa:	2106      	movs	r1, #6
 80048ac:	4620      	mov	r0, r4
 80048ae:	f000 f973 	bl	8004b98 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80048b2:	4639      	mov	r1, r7
 80048b4:	4630      	mov	r0, r6
 80048b6:	f7ff ff6f 	bl	8004798 <cs43l22_SetVolume>
 80048ba:	4605      	mov	r5, r0
 80048bc:	e7c3      	b.n	8004846 <cs43l22_Init+0x72>
    OutputDev = 0xFA;
 80048be:	4b02      	ldr	r3, [pc, #8]	; (80048c8 <cs43l22_Init+0xf4>)
 80048c0:	22fa      	movs	r2, #250	; 0xfa
 80048c2:	701a      	strb	r2, [r3, #0]
    break;
 80048c4:	e79c      	b.n	8004800 <cs43l22_Init+0x2c>
 80048c6:	bf00      	nop
 80048c8:	20007298 	.word	0x20007298

080048cc <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 80048cc:	f000 b962 	b.w	8004b94 <AUDIO_IO_DeInit>

080048d0 <cs43l22_ReadID>:
{
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 80048d4:	f000 f92c 	bl	8004b30 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80048d8:	b2e0      	uxtb	r0, r4
 80048da:	2101      	movs	r1, #1
 80048dc:	f000 f978 	bl	8004bd0 <AUDIO_IO_Read>
}
 80048e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80048e4:	bd10      	pop	{r4, pc}
 80048e6:	bf00      	nop

080048e8 <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 80048e8:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80048ea:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80048ec:	4620      	mov	r0, r4
 80048ee:	22ff      	movs	r2, #255	; 0xff
 80048f0:	2104      	movs	r1, #4
 80048f2:	f000 f951 	bl	8004b98 <AUDIO_IO_Write>
 80048f6:	4620      	mov	r0, r4
 80048f8:	2201      	movs	r2, #1
 80048fa:	2122      	movs	r1, #34	; 0x22
 80048fc:	f000 f94c 	bl	8004b98 <AUDIO_IO_Write>
 8004900:	4620      	mov	r0, r4
 8004902:	2201      	movs	r2, #1
 8004904:	2123      	movs	r1, #35	; 0x23
}
 8004906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 800490a:	f000 b945 	b.w	8004b98 <AUDIO_IO_Write>
 800490e:	bf00      	nop

08004910 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8004910:	2901      	cmp	r1, #1
{
 8004912:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8004914:	d012      	beq.n	800493c <cs43l22_SetMute+0x2c>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8004916:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8004918:	4620      	mov	r0, r4
 800491a:	2200      	movs	r2, #0
 800491c:	2122      	movs	r1, #34	; 0x22
 800491e:	f000 f93b 	bl	8004b98 <AUDIO_IO_Write>
 8004922:	4620      	mov	r0, r4
 8004924:	2200      	movs	r2, #0
 8004926:	2123      	movs	r1, #35	; 0x23
 8004928:	f000 f936 	bl	8004b98 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 800492e:	4620      	mov	r0, r4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8004930:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8004932:	2104      	movs	r1, #4
 8004934:	f000 f930 	bl	8004b98 <AUDIO_IO_Write>
}
 8004938:	2000      	movs	r0, #0
 800493a:	bd10      	pop	{r4, pc}
 800493c:	f7ff ffd4 	bl	80048e8 <cs43l22_SetMute.part.0>
 8004940:	2000      	movs	r0, #0
 8004942:	bd10      	pop	{r4, pc}
 8004944:	20007298 	.word	0x20007298

08004948 <cs43l22_Resume>:
{
 8004948:	b570      	push	{r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 800494a:	2500      	movs	r5, #0
{
 800494c:	b082      	sub	sp, #8
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800494e:	4629      	mov	r1, r5
  volatile uint32_t index = 0x00;
 8004950:	9501      	str	r5, [sp, #4]
{
 8004952:	4604      	mov	r4, r0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004954:	f7ff ffdc 	bl	8004910 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8004958:	9501      	str	r5, [sp, #4]
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	2bfe      	cmp	r3, #254	; 0xfe
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800495e:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 8004960:	d805      	bhi.n	800496e <cs43l22_Resume+0x26>
 8004962:	9b01      	ldr	r3, [sp, #4]
 8004964:	3301      	adds	r3, #1
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	9b01      	ldr	r3, [sp, #4]
 800496a:	2bfe      	cmp	r3, #254	; 0xfe
 800496c:	d9f9      	bls.n	8004962 <cs43l22_Resume+0x1a>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <cs43l22_Resume+0x44>)
 8004970:	b2e4      	uxtb	r4, r4
 8004972:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8004974:	4620      	mov	r0, r4
 8004976:	2104      	movs	r1, #4
 8004978:	f000 f90e 	bl	8004b98 <AUDIO_IO_Write>
 800497c:	4620      	mov	r0, r4
 800497e:	229e      	movs	r2, #158	; 0x9e
 8004980:	2102      	movs	r1, #2
 8004982:	f000 f909 	bl	8004b98 <AUDIO_IO_Write>
}
 8004986:	4630      	mov	r0, r6
 8004988:	b002      	add	sp, #8
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	20007298 	.word	0x20007298

08004990 <cs43l22_Pause>:
{  
 8004990:	b510      	push	{r4, lr}
 8004992:	4604      	mov	r4, r0
 8004994:	f7ff ffa8 	bl	80048e8 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8004998:	b2e0      	uxtb	r0, r4
 800499a:	2201      	movs	r2, #1
 800499c:	2102      	movs	r1, #2
 800499e:	f000 f8fb 	bl	8004b98 <AUDIO_IO_Write>
}
 80049a2:	2000      	movs	r0, #0
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop

080049a8 <cs43l22_Stop>:
{
 80049a8:	b510      	push	{r4, lr}
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80049aa:	b2c4      	uxtb	r4, r0
 80049ac:	f7ff ff9c 	bl	80048e8 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80049b0:	4620      	mov	r0, r4
 80049b2:	2204      	movs	r2, #4
 80049b4:	210e      	movs	r1, #14
 80049b6:	f000 f8ef 	bl	8004b98 <AUDIO_IO_Write>
 80049ba:	4620      	mov	r0, r4
 80049bc:	229f      	movs	r2, #159	; 0x9f
 80049be:	2102      	movs	r1, #2
 80049c0:	f000 f8ea 	bl	8004b98 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80049c4:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <cs43l22_Stop+0x28>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
}
 80049ca:	2000      	movs	r0, #0
 80049cc:	bd10      	pop	{r4, pc}
 80049ce:	bf00      	nop
 80049d0:	20000008 	.word	0x20000008

080049d4 <cs43l22_Play>:
{
 80049d4:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 80049d6:	4c0e      	ldr	r4, [pc, #56]	; (8004a10 <cs43l22_Play+0x3c>)
 80049d8:	7823      	ldrb	r3, [r4, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d002      	beq.n	80049e4 <cs43l22_Play+0x10>
  uint32_t counter = 0;
 80049de:	2500      	movs	r5, #0
}
 80049e0:	4628      	mov	r0, r5
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80049e4:	b2c6      	uxtb	r6, r0
 80049e6:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80049e8:	2206      	movs	r2, #6
 80049ea:	4630      	mov	r0, r6
 80049ec:	210e      	movs	r1, #14
 80049ee:	f000 f8d3 	bl	8004b98 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80049f2:	4628      	mov	r0, r5
 80049f4:	2100      	movs	r1, #0
 80049f6:	f7ff ff8b 	bl	8004910 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 80049fa:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80049fc:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80049fe:	2102      	movs	r1, #2
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 f8c9 	bl	8004b98 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	7023      	strb	r3, [r4, #0]
}
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000008 	.word	0x20000008

08004a14 <cs43l22_SetOutputMode>:
  switch (Output) 
 8004a14:	3901      	subs	r1, #1
{
 8004a16:	b508      	push	{r3, lr}
 8004a18:	b2c0      	uxtb	r0, r0
  switch (Output) 
 8004a1a:	2903      	cmp	r1, #3
 8004a1c:	d803      	bhi.n	8004a26 <cs43l22_SetOutputMode+0x12>
 8004a1e:	e8df f001 	tbb	[pc, r1]
 8004a22:	141d      	.short	0x141d
 8004a24:	020b      	.short	0x020b
  AUDIO_IO_Write(Addr, Reg, Value);
 8004a26:	2205      	movs	r2, #5
 8004a28:	2104      	movs	r1, #4
 8004a2a:	f000 f8b5 	bl	8004b98 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <cs43l22_SetOutputMode+0x5c>)
 8004a30:	2205      	movs	r2, #5
 8004a32:	701a      	strb	r2, [r3, #0]
}
 8004a34:	2000      	movs	r0, #0
 8004a36:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8004a38:	22aa      	movs	r2, #170	; 0xaa
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	f000 f8ac 	bl	8004b98 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <cs43l22_SetOutputMode+0x5c>)
 8004a42:	22aa      	movs	r2, #170	; 0xaa
 8004a44:	701a      	strb	r2, [r3, #0]
}
 8004a46:	2000      	movs	r0, #0
 8004a48:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8004a4a:	22af      	movs	r2, #175	; 0xaf
 8004a4c:	2104      	movs	r1, #4
 8004a4e:	f000 f8a3 	bl	8004b98 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <cs43l22_SetOutputMode+0x5c>)
 8004a54:	22af      	movs	r2, #175	; 0xaf
 8004a56:	701a      	strb	r2, [r3, #0]
}
 8004a58:	2000      	movs	r0, #0
 8004a5a:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8004a5c:	22fa      	movs	r2, #250	; 0xfa
 8004a5e:	2104      	movs	r1, #4
 8004a60:	f000 f89a 	bl	8004b98 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <cs43l22_SetOutputMode+0x5c>)
 8004a66:	22fa      	movs	r2, #250	; 0xfa
 8004a68:	701a      	strb	r2, [r3, #0]
}
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	bd08      	pop	{r3, pc}
 8004a6e:	bf00      	nop
 8004a70:	20007298 	.word	0x20007298

08004a74 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8004a74:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004a76:	4d29      	ldr	r5, [pc, #164]	; (8004b1c <I2Cx_Init+0xa8>)
{
 8004a78:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f002 fe22 	bl	80076c4 <HAL_I2C_GetState>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d148      	bne.n	8004b16 <I2Cx_Init+0xa2>
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004a84:	4e26      	ldr	r6, [pc, #152]	; (8004b20 <I2Cx_Init+0xac>)
 8004a86:	9001      	str	r0, [sp, #4]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <I2Cx_Init+0xb0>)
 8004a8a:	602b      	str	r3, [r5, #0]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004a8c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a8e:	60a8      	str	r0, [r5, #8]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004a90:	f043 0302 	orr.w	r3, r3, #2
 8004a94:	6333      	str	r3, [r6, #48]	; 0x30
 8004a96:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <I2Cx_Init+0xb4>)
 8004a9a:	606a      	str	r2, [r5, #4]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004a9c:	f003 0302 	and.w	r3, r3, #2
    I2cHandle.Init.OwnAddress1 = 0x33;
 8004aa0:	2133      	movs	r1, #51	; 0x33
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004aa2:	9301      	str	r3, [sp, #4]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8004aa8:	f44f 7310 	mov.w	r3, #576	; 0x240
    I2cHandle.Init.OwnAddress1 = 0x33;
 8004aac:	60e9      	str	r1, [r5, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aae:	2112      	movs	r1, #18
 8004ab0:	4604      	mov	r4, r0
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ab2:	612a      	str	r2, [r5, #16]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ab4:	9801      	ldr	r0, [sp, #4]
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8004ab6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004ab8:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004aba:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004abc:	9104      	str	r1, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8004abe:	481b      	ldr	r0, [pc, #108]	; (8004b2c <I2Cx_Init+0xb8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004ac0:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8004ac2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004ac4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004ac6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8004ac8:	f001 fa6c 	bl	8005fa4 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004acc:	9402      	str	r4, [sp, #8]
 8004ace:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad4:	6433      	str	r3, [r6, #64]	; 0x40
 8004ad6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004adc:	9302      	str	r3, [sp, #8]
 8004ade:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8004ae0:	6a33      	ldr	r3, [r6, #32]
 8004ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ae6:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8004ae8:	6a33      	ldr	r3, [r6, #32]
 8004aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aee:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8004af0:	4622      	mov	r2, r4
 8004af2:	4621      	mov	r1, r4
 8004af4:	201f      	movs	r0, #31
 8004af6:	f000 ffd9 	bl	8005aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004afa:	201f      	movs	r0, #31
 8004afc:	f001 f80c 	bl	8005b18 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8004b00:	4622      	mov	r2, r4
 8004b02:	4621      	mov	r1, r4
 8004b04:	2020      	movs	r0, #32
 8004b06:	f000 ffd1 	bl	8005aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8004b0a:	2020      	movs	r0, #32
 8004b0c:	f001 f804 	bl	8005b18 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8004b10:	4628      	mov	r0, r5
 8004b12:	f002 fb4f 	bl	80071b4 <HAL_I2C_Init>
}
 8004b16:	b008      	add	sp, #32
 8004b18:	bd70      	pop	{r4, r5, r6, pc}
 8004b1a:	bf00      	nop
 8004b1c:	2000729c 	.word	0x2000729c
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40005400 	.word	0x40005400
 8004b28:	000186a0 	.word	0x000186a0
 8004b2c:	40020400 	.word	0x40020400

08004b30 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b32:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004b34:	2600      	movs	r6, #0
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <AUDIO_IO_Init+0x5c>)
 8004b38:	9600      	str	r6, [sp, #0]
 8004b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004b3c:	4c14      	ldr	r4, [pc, #80]	; (8004b90 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004b3e:	f042 0208 	orr.w	r2, r2, #8
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004b46:	9603      	str	r6, [sp, #12]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004b4e:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004b50:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8004b52:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004b54:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b56:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004b58:	9304      	str	r3, [sp, #16]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004b5a:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5c:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8004b60:	f001 fa20 	bl	8005fa4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8004b64:	f7ff ff86 	bl	8004a74 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8004b68:	4632      	mov	r2, r6
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f001 fbcd 	bl	800630c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8004b72:	2005      	movs	r0, #5
 8004b74:	f000 fd4a 	bl	800560c <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8004b78:	463a      	mov	r2, r7
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f001 fbc5 	bl	800630c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8004b82:	2005      	movs	r0, #5
 8004b84:	f000 fd42 	bl	800560c <HAL_Delay>
}
 8004b88:	b007      	add	sp, #28
 8004b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40020c00 	.word	0x40020c00

08004b94 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8004b9e:	4c0a      	ldr	r4, [pc, #40]	; (8004bc8 <AUDIO_IO_Write+0x30>)
 8004ba0:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	460a      	mov	r2, r1
 8004bac:	9402      	str	r4, [sp, #8]
 8004bae:	4601      	mov	r1, r0
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	4806      	ldr	r0, [pc, #24]	; (8004bcc <AUDIO_IO_Write+0x34>)
 8004bb4:	f002 fbd8 	bl	8007368 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8004bb8:	b120      	cbz	r0, 8004bc4 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8004bba:	4804      	ldr	r0, [pc, #16]	; (8004bcc <AUDIO_IO_Write+0x34>)
 8004bbc:	f002 fbba 	bl	8007334 <HAL_I2C_DeInit>
  I2Cx_Init();
 8004bc0:	f7ff ff58 	bl	8004a74 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8004bc4:	b006      	add	sp, #24
 8004bc6:	bd10      	pop	{r4, pc}
 8004bc8:	2000003c 	.word	0x2000003c
 8004bcc:	2000729c 	.word	0x2000729c

08004bd0 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	b086      	sub	sp, #24
  uint8_t value = 0;
 8004bd4:	ab06      	add	r3, sp, #24
 8004bd6:	2400      	movs	r4, #0
 8004bd8:	f803 4d01 	strb.w	r4, [r3, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <AUDIO_IO_Read+0x38>)
 8004bde:	6814      	ldr	r4, [r2, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2301      	movs	r3, #1
 8004be4:	460a      	mov	r2, r1
 8004be6:	9402      	str	r4, [sp, #8]
 8004be8:	4601      	mov	r1, r0
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	4807      	ldr	r0, [pc, #28]	; (8004c0c <AUDIO_IO_Read+0x3c>)
 8004bee:	f002 fc51 	bl	8007494 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8004bf2:	b120      	cbz	r0, 8004bfe <AUDIO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 8004bf4:	4805      	ldr	r0, [pc, #20]	; (8004c0c <AUDIO_IO_Read+0x3c>)
 8004bf6:	f002 fb9d 	bl	8007334 <HAL_I2C_DeInit>
  I2Cx_Init();
 8004bfa:	f7ff ff3b 	bl	8004a74 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8004bfe:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004c02:	b006      	add	sp, #24
 8004c04:	bd10      	pop	{r4, pc}
 8004c06:	bf00      	nop
 8004c08:	2000003c 	.word	0x2000003c
 8004c0c:	2000729c 	.word	0x2000729c

08004c10 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8004c10:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <I2S3_Init+0x34>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8004c12:	69d1      	ldr	r1, [r2, #28]
{
 8004c14:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8004c18:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 8004c1c:	601a      	str	r2, [r3, #0]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8004c1e:	6158      	str	r0, [r3, #20]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8004c20:	61d1      	str	r1, [r2, #28]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8004c22:	4618      	mov	r0, r3
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8004c24:	2200      	movs	r2, #0
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8004c26:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8004c2a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8004c2e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8004c32:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8004c34:	6059      	str	r1, [r3, #4]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8004c36:	f002 fd71 	bl	800771c <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8004c3a:	3000      	adds	r0, #0
 8004c3c:	bf18      	it	ne
 8004c3e:	2001      	movne	r0, #1
 8004c40:	bd08      	pop	{r3, pc}
 8004c42:	bf00      	nop
 8004c44:	40003c00 	.word	0x40003c00
 8004c48:	2000d704 	.word	0x2000d704

08004c4c <BSP_AUDIO_OUT_Play>:
{
 8004c4c:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <BSP_AUDIO_OUT_Play+0x34>)
 8004c50:	681b      	ldr	r3, [r3, #0]
{
 8004c52:	4605      	mov	r5, r0
 8004c54:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8004c56:	b28a      	uxth	r2, r1
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	2094      	movs	r0, #148	; 0x94
 8004c5e:	4798      	blx	r3
 8004c60:	b960      	cbnz	r0, 8004c7c <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 8004c62:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8004c66:	bf34      	ite	cc
 8004c68:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8004c6c:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8004c70:	4629      	mov	r1, r5
 8004c72:	4804      	ldr	r0, [pc, #16]	; (8004c84 <BSP_AUDIO_OUT_Play+0x38>)
 8004c74:	f002 fdfc 	bl	8007870 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8004c78:	2000      	movs	r0, #0
}
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8004c7c:	2001      	movs	r0, #1
}
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20007350 	.word	0x20007350
 8004c84:	2000d704 	.word	0x2000d704

08004c88 <BSP_AUDIO_OUT_ChangeBuffer>:
	HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size);
 8004c88:	460a      	mov	r2, r1
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	4801      	ldr	r0, [pc, #4]	; (8004c94 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8004c8e:	f002 bdef 	b.w	8007870 <HAL_I2S_Transmit_DMA>
 8004c92:	bf00      	nop
 8004c94:	2000d704 	.word	0x2000d704

08004c98 <BSP_AUDIO_OUT_Stop>:
{
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8004c9c:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <BSP_AUDIO_OUT_Stop+0x38>)
 8004c9e:	f002 fe49 	bl	8007934 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <BSP_AUDIO_OUT_Stop+0x3c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2094      	movs	r0, #148	; 0x94
 8004cac:	4798      	blx	r3
 8004cae:	b918      	cbnz	r0, 8004cb8 <BSP_AUDIO_OUT_Stop+0x20>
    if(Option == CODEC_PDWN_HW)
 8004cb0:	2d01      	cmp	r5, #1
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	d002      	beq.n	8004cbc <BSP_AUDIO_OUT_Stop+0x24>
}
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8004cb8:	2001      	movs	r0, #1
}
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
      HAL_Delay(1);
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 fca5 	bl	800560c <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	2110      	movs	r1, #16
 8004cc6:	4804      	ldr	r0, [pc, #16]	; (8004cd8 <BSP_AUDIO_OUT_Stop+0x40>)
 8004cc8:	f001 fb20 	bl	800630c <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8004ccc:	4620      	mov	r0, r4
}
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	2000d704 	.word	0x2000d704
 8004cd4:	20007350 	.word	0x20007350
 8004cd8:	40020c00 	.word	0x40020c00

08004cdc <BSP_AUDIO_OUT_SetVolume>:
{
 8004cdc:	b508      	push	{r3, lr}
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <BSP_AUDIO_OUT_SetVolume+0x18>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	2094      	movs	r0, #148	; 0x94
 8004ce8:	4798      	blx	r3
}
 8004cea:	3000      	adds	r0, #0
 8004cec:	bf18      	it	ne
 8004cee:	2001      	movne	r0, #1
 8004cf0:	bd08      	pop	{r3, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20007350 	.word	0x20007350

08004cf8 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8004cf8:	b530      	push	{r4, r5, lr}
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	4d16      	ldr	r5, [pc, #88]	; (8004d58 <BSP_AUDIO_OUT_ClockConfig+0x60>)
 8004d00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  uint8_t index = 0, freqindex = 0xFF;
 8004d04:	24ff      	movs	r4, #255	; 0xff
 8004d06:	e001      	b.n	8004d0c <BSP_AUDIO_OUT_ClockConfig+0x14>
 8004d08:	f855 2b04 	ldr.w	r2, [r5], #4
 8004d0c:	b2d8      	uxtb	r0, r3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	428a      	cmp	r2, r1
 8004d12:	bf08      	it	eq
 8004d14:	4604      	moveq	r4, r0
  for(index = 0; index < 8; index++)
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d1f6      	bne.n	8004d08 <BSP_AUDIO_OUT_ClockConfig+0x10>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8004d1a:	4668      	mov	r0, sp
 8004d1c:	f003 fc6c 	bl	80085f8 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 8004d20:	0763      	lsls	r3, r4, #29
 8004d22:	d00a      	beq.n	8004d3a <BSP_AUDIO_OUT_ClockConfig+0x42>
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8004d24:	2101      	movs	r1, #1
 8004d26:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004d2a:	2303      	movs	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004d2c:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8004d2e:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004d32:	f003 fbc1 	bl	80084b8 <HAL_RCCEx_PeriphCLKConfig>
}
 8004d36:	b005      	add	sp, #20
 8004d38:	bd30      	pop	{r4, r5, pc}
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <BSP_AUDIO_OUT_ClockConfig+0x64>)
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8004d3c:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <BSP_AUDIO_OUT_ClockConfig+0x68>)
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8004d3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8004d42:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8004d46:	9301      	str	r3, [sp, #4]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004d48:	4668      	mov	r0, sp
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004d4a:	2301      	movs	r3, #1
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8004d4c:	9202      	str	r2, [sp, #8]
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004d4e:	9300      	str	r3, [sp, #0]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8004d50:	f003 fbb2 	bl	80084b8 <HAL_RCCEx_PeriphCLKConfig>
}
 8004d54:	b005      	add	sp, #20
 8004d56:	bd30      	pop	{r4, r5, pc}
 8004d58:	080127b0 	.word	0x080127b0
 8004d5c:	080127cc 	.word	0x080127cc
 8004d60:	080127ec 	.word	0x080127ec

08004d64 <BSP_AUDIO_OUT_MspInit>:
{
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8004d68:	4c3f      	ldr	r4, [pc, #252]	; (8004e68 <BSP_AUDIO_OUT_MspInit+0x104>)
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	9500      	str	r5, [sp, #0]
 8004d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d74:	6423      	str	r3, [r4, #64]	; 0x40
 8004d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8004d80:	9501      	str	r5, [sp, #4]
 8004d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	6323      	str	r3, [r4, #48]	; 0x30
 8004d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8004d94:	9502      	str	r5, [sp, #8]
 8004d96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6323      	str	r3, [r4, #48]	; 0x30
 8004d9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8004da0:	9507      	str	r5, [sp, #28]
  I2S3_WS_CLK_ENABLE();
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8004da8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8004dac:	2302      	movs	r3, #2
{
 8004dae:	4606      	mov	r6, r0
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8004db0:	a905      	add	r1, sp, #20
  I2S3_WS_CLK_ENABLE();
 8004db2:	9802      	ldr	r0, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8004db4:	9205      	str	r2, [sp, #20]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8004db6:	482d      	ldr	r0, [pc, #180]	; (8004e6c <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8004db8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8004dba:	2206      	movs	r2, #6
 8004dbc:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8004dbe:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8004dc0:	f001 f8f0 	bl	8005fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8004dc4:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8004dc6:	a905      	add	r1, sp, #20
 8004dc8:	4829      	ldr	r0, [pc, #164]	; (8004e70 <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8004dca:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8004dcc:	f001 f8ea 	bl	8005fa4 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8004dd0:	9503      	str	r5, [sp, #12]
 8004dd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8004dd4:	4825      	ldr	r0, [pc, #148]	; (8004e6c <BSP_AUDIO_OUT_MspInit+0x108>)
  I2S3_MCK_CLK_ENABLE();
 8004dd6:	f043 0304 	orr.w	r3, r3, #4
 8004dda:	6323      	str	r3, [r4, #48]	; 0x30
 8004ddc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8004de4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8004de6:	2380      	movs	r3, #128	; 0x80
  I2S3_MCK_CLK_ENABLE();
 8004de8:	9a03      	ldr	r2, [sp, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8004dea:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8004dec:	f001 f8da 	bl	8005fa4 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8004df0:	9504      	str	r5, [sp, #16]
 8004df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8004df4:	6831      	ldr	r1, [r6, #0]
 8004df6:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <BSP_AUDIO_OUT_MspInit+0x110>)
  I2S3_DMAx_CLK_ENABLE(); 
 8004df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dfc:	6323      	str	r3, [r4, #48]	; 0x30
 8004dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e04:	9304      	str	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8004e06:	4291      	cmp	r1, r2
  I2S3_DMAx_CLK_ENABLE(); 
 8004e08:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8004e0a:	d009      	beq.n	8004e20 <BSP_AUDIO_OUT_MspInit+0xbc>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	210e      	movs	r1, #14
 8004e10:	202f      	movs	r0, #47	; 0x2f
 8004e12:	f000 fe4b 	bl	8005aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8004e16:	202f      	movs	r0, #47	; 0x2f
 8004e18:	f000 fe7e 	bl	8005b18 <HAL_NVIC_EnableIRQ>
}
 8004e1c:	b00a      	add	sp, #40	; 0x28
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8004e20:	4c15      	ldr	r4, [pc, #84]	; (8004e78 <BSP_AUDIO_OUT_MspInit+0x114>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8004e22:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004e24:	2140      	movs	r1, #64	; 0x40
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8004e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8004e2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8004e2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8004e32:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004e34:	60e5      	str	r5, [r4, #12]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8004e36:	61e5      	str	r5, [r4, #28]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004e38:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004e3c:	60a1      	str	r1, [r4, #8]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8004e3e:	6122      	str	r2, [r4, #16]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004e40:	2104      	movs	r1, #4
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004e42:	2203      	movs	r2, #3
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8004e44:	6163      	str	r3, [r4, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8004e46:	61a0      	str	r0, [r4, #24]
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <BSP_AUDIO_OUT_MspInit+0x118>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8004e4a:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004e4c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    HAL_DMA_DeInit(&hdma_i2sTx);
 8004e50:	4620      	mov	r0, r4
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004e52:	e9c4 5108 	strd	r5, r1, [r4, #32]
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004e56:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8004e58:	6023      	str	r3, [r4, #0]
    HAL_DMA_DeInit(&hdma_i2sTx);
 8004e5a:	f000 ff05 	bl	8005c68 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f000 fe68 	bl	8005b34 <HAL_DMA_Init>
 8004e64:	e7d2      	b.n	8004e0c <BSP_AUDIO_OUT_MspInit+0xa8>
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40020800 	.word	0x40020800
 8004e70:	40020000 	.word	0x40020000
 8004e74:	40003c00 	.word	0x40003c00
 8004e78:	200072f0 	.word	0x200072f0
 8004e7c:	400260b8 	.word	0x400260b8

08004e80 <BSP_AUDIO_OUT_Init>:
{    
 8004e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8004e84:	4c18      	ldr	r4, [pc, #96]	; (8004ee8 <BSP_AUDIO_OUT_Init+0x68>)
{    
 8004e86:	4615      	mov	r5, r2
 8004e88:	4607      	mov	r7, r0
 8004e8a:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4611      	mov	r1, r2
 8004e90:	2200      	movs	r2, #0
 8004e92:	f7ff ff31 	bl	8004cf8 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <BSP_AUDIO_OUT_Init+0x6c>)
 8004e98:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f002 fef6 	bl	8007c8c <HAL_I2S_GetState>
 8004ea0:	b1e0      	cbz	r0, 8004edc <BSP_AUDIO_OUT_Init+0x5c>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f7ff feb4 	bl	8004c10 <I2S3_Init>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	b938      	cbnz	r0, 8004ebc <BSP_AUDIO_OUT_Init+0x3c>
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8004eac:	4e10      	ldr	r6, [pc, #64]	; (8004ef0 <BSP_AUDIO_OUT_Init+0x70>)
 8004eae:	2094      	movs	r0, #148	; 0x94
 8004eb0:	68b3      	ldr	r3, [r6, #8]
 8004eb2:	4798      	blx	r3
 8004eb4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8004eb8:	28e0      	cmp	r0, #224	; 0xe0
 8004eba:	d003      	beq.n	8004ec4 <BSP_AUDIO_OUT_Init+0x44>
    ret = AUDIO_ERROR;
 8004ebc:	2401      	movs	r4, #1
}
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pAudioDrv = &cs43l22_drv; 
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <BSP_AUDIO_OUT_Init+0x74>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8004ec6:	f8d6 9000 	ldr.w	r9, [r6]
      pAudioDrv = &cs43l22_drv; 
 8004eca:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8004ecc:	4642      	mov	r2, r8
 8004ece:	462b      	mov	r3, r5
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	2094      	movs	r0, #148	; 0x94
 8004ed4:	47c8      	blx	r9
}
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8004edc:	4601      	mov	r1, r0
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7ff ff40 	bl	8004d64 <BSP_AUDIO_OUT_MspInit>
 8004ee4:	e7dd      	b.n	8004ea2 <BSP_AUDIO_OUT_Init+0x22>
 8004ee6:	bf00      	nop
 8004ee8:	2000d704 	.word	0x2000d704
 8004eec:	40003c00 	.word	0x40003c00
 8004ef0:	2000000c 	.word	0x2000000c
 8004ef4:	20007350 	.word	0x20007350

08004ef8 <HAL_I2S_TxCpltCallback>:
{
 8004ef8:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8004efa:	6802      	ldr	r2, [r0, #0]
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <HAL_I2S_TxCpltCallback+0x14>)
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d000      	beq.n	8004f04 <HAL_I2S_TxCpltCallback+0xc>
}
 8004f02:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8004f04:	f7ff f982 	bl	800420c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004f08:	bd08      	pop	{r3, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40003c00 	.word	0x40003c00

08004f10 <HAL_I2S_TxHalfCpltCallback>:
{
 8004f10:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8004f12:	6802      	ldr	r2, [r0, #0]
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_I2S_TxHalfCpltCallback+0x14>)
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d000      	beq.n	8004f1c <HAL_I2S_TxHalfCpltCallback+0xc>
}
 8004f1a:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8004f1c:	f7ff f970 	bl	8004200 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004f20:	bd08      	pop	{r3, pc}
 8004f22:	bf00      	nop
 8004f24:	40003c00 	.word	0x40003c00

08004f28 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f2c:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004f2e:	f7ff fffb 	bl	8004f28 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004f32:	bd08      	pop	{r3, pc}

08004f34 <BSP_AUDIO_IN_Error_Callback>:
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004f38:	b500      	push	{lr}
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8004f3a:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <HAL_I2S_ErrorCallback+0x30>)
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	4293      	cmp	r3, r2
{
 8004f40:	b083      	sub	sp, #12
  if(hi2s->Instance == I2S3)
 8004f42:	d00a      	beq.n	8004f5a <HAL_I2S_ErrorCallback+0x22>
  {
    BSP_AUDIO_OUT_Error_CallBack();
  }
  if(hi2s->Instance == I2S2)
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_I2S_ErrorCallback+0x34>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d002      	beq.n	8004f50 <HAL_I2S_ErrorCallback+0x18>
  {
    BSP_AUDIO_IN_Error_Callback();
  }
}
 8004f4a:	b003      	add	sp, #12
 8004f4c:	f85d fb04 	ldr.w	pc, [sp], #4
    BSP_AUDIO_IN_Error_Callback();
 8004f50:	f7ff fff0 	bl	8004f34 <BSP_AUDIO_IN_Error_Callback>
}
 8004f54:	b003      	add	sp, #12
 8004f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f5a:	9001      	str	r0, [sp, #4]
    BSP_AUDIO_OUT_Error_CallBack();
 8004f5c:	f7ff f962 	bl	8004224 <BSP_AUDIO_OUT_Error_CallBack>
 8004f60:	9801      	ldr	r0, [sp, #4]
 8004f62:	6803      	ldr	r3, [r0, #0]
 8004f64:	e7ee      	b.n	8004f44 <HAL_I2S_ErrorCallback+0xc>
 8004f66:	bf00      	nop
 8004f68:	40003c00 	.word	0x40003c00
 8004f6c:	40003800 	.word	0x40003800

08004f70 <LCM1602a_Hang_Busy_Flag>:
/**
  * @brief  Hangs until the Data 7 pin returns the LOW value (Busy Flag)
  * @param  None
  * @retval None
  */
static void LCM1602a_Hang_Busy_Flag(){
 8004f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    data_port->MODER &= ~(GPIO_PIN_TO_MODER(data_7_pin));                               /*set D7 to input*/
 8004f74:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8005154 <LCM1602a_Hang_Busy_Flag+0x1e4>
 8004f78:	4e72      	ldr	r6, [pc, #456]	; (8005144 <LCM1602a_Hang_Busy_Flag+0x1d4>)
 8004f7a:	f8b8 2000 	ldrh.w	r2, [r8]
 8004f7e:	6831      	ldr	r1, [r6, #0]
 8004f80:	2a01      	cmp	r2, #1
 8004f82:	680b      	ldr	r3, [r1, #0]
 8004f84:	d07f      	beq.n	8005086 <LCM1602a_Hang_Busy_Flag+0x116>
 8004f86:	2a02      	cmp	r2, #2
 8004f88:	d033      	beq.n	8004ff2 <LCM1602a_Hang_Busy_Flag+0x82>
 8004f8a:	2a04      	cmp	r2, #4
 8004f8c:	f000 808e 	beq.w	80050ac <LCM1602a_Hang_Busy_Flag+0x13c>
 8004f90:	2a08      	cmp	r2, #8
 8004f92:	f000 8085 	beq.w	80050a0 <LCM1602a_Hang_Busy_Flag+0x130>
 8004f96:	2a10      	cmp	r2, #16
 8004f98:	f000 8095 	beq.w	80050c6 <LCM1602a_Hang_Busy_Flag+0x156>
 8004f9c:	2a20      	cmp	r2, #32
 8004f9e:	f000 809e 	beq.w	80050de <LCM1602a_Hang_Busy_Flag+0x16e>
 8004fa2:	2a40      	cmp	r2, #64	; 0x40
 8004fa4:	f000 80a1 	beq.w	80050ea <LCM1602a_Hang_Busy_Flag+0x17a>
 8004fa8:	2a80      	cmp	r2, #128	; 0x80
 8004faa:	f000 808f 	beq.w	80050cc <LCM1602a_Hang_Busy_Flag+0x15c>
 8004fae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004fb2:	f000 80a0 	beq.w	80050f6 <LCM1602a_Hang_Busy_Flag+0x186>
 8004fb6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004fba:	f000 80a5 	beq.w	8005108 <LCM1602a_Hang_Busy_Flag+0x198>
 8004fbe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004fc2:	f000 80a7 	beq.w	8005114 <LCM1602a_Hang_Busy_Flag+0x1a4>
 8004fc6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004fca:	f000 80a9 	beq.w	8005120 <LCM1602a_Hang_Busy_Flag+0x1b0>
 8004fce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004fd2:	f000 80ae 	beq.w	8005132 <LCM1602a_Hang_Busy_Flag+0x1c2>
 8004fd6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004fda:	f000 80ad 	beq.w	8005138 <LCM1602a_Hang_Busy_Flag+0x1c8>
 8004fde:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004fe2:	f000 80ac 	beq.w	800513e <LCM1602a_Hang_Busy_Flag+0x1ce>
 8004fe6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004fea:	bf08      	it	eq
 8004fec:	f023 4340 	biceq.w	r3, r3, #3221225472	; 0xc0000000
 8004ff0:	e001      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 8004ff2:	f023 030c 	bic.w	r3, r3, #12
 8004ff6:	4d54      	ldr	r5, [pc, #336]	; (8005148 <LCM1602a_Hang_Busy_Flag+0x1d8>)
 8004ff8:	4c54      	ldr	r4, [pc, #336]	; (800514c <LCM1602a_Hang_Busy_Flag+0x1dc>)
 8004ffa:	4f55      	ldr	r7, [pc, #340]	; (8005150 <LCM1602a_Hang_Busy_Flag+0x1e0>)
 8004ffc:	600b      	str	r3, [r1, #0]

    while(1){                                                                           /*hang till Busy flag is Low*/

        HAL_GPIO_WritePin(control_port, control_pins[1], GPIO_PIN_SET);                 /*set RW and E*/
 8004ffe:	8869      	ldrh	r1, [r5, #2]
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	2201      	movs	r2, #1
 8005004:	f001 f982 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /* " " " */
 8005008:	88a9      	ldrh	r1, [r5, #4]
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	f001 f97d 	bl	800630c <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(data_port, data_pins[7]) == 0){                             /*if Data 7 pin is 0*/
 8005012:	89f9      	ldrh	r1, [r7, #14]
 8005014:	6830      	ldr	r0, [r6, #0]
 8005016:	f001 f973 	bl	8006300 <HAL_GPIO_ReadPin>
 800501a:	2800      	cmp	r0, #0
 800501c:	d1ef      	bne.n	8004ffe <LCM1602a_Hang_Busy_Flag+0x8e>
            HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_RESET);               /*set E back to LOW and stop hanging*/
 800501e:	4602      	mov	r2, r0
 8005020:	88a9      	ldrh	r1, [r5, #4]
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	f001 f972 	bl	800630c <HAL_GPIO_WritePin>
            break;
        }
    }

    data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 8005028:	f8b8 3000 	ldrh.w	r3, [r8]
 800502c:	6831      	ldr	r1, [r6, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	680a      	ldr	r2, [r1, #0]
 8005032:	d02b      	beq.n	800508c <LCM1602a_Hang_Busy_Flag+0x11c>
 8005034:	2b02      	cmp	r3, #2
 8005036:	d02e      	beq.n	8005096 <LCM1602a_Hang_Busy_Flag+0x126>
 8005038:	2b04      	cmp	r3, #4
 800503a:	d03a      	beq.n	80050b2 <LCM1602a_Hang_Busy_Flag+0x142>
 800503c:	2b08      	cmp	r3, #8
 800503e:	d03d      	beq.n	80050bc <LCM1602a_Hang_Busy_Flag+0x14c>
 8005040:	2b10      	cmp	r3, #16
 8005042:	d030      	beq.n	80050a6 <LCM1602a_Hang_Busy_Flag+0x136>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d047      	beq.n	80050d8 <LCM1602a_Hang_Busy_Flag+0x168>
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d04b      	beq.n	80050e4 <LCM1602a_Hang_Busy_Flag+0x174>
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d04f      	beq.n	80050f0 <LCM1602a_Hang_Busy_Flag+0x180>
 8005050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005054:	d03d      	beq.n	80050d2 <LCM1602a_Hang_Busy_Flag+0x162>
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d04f      	beq.n	80050fc <LCM1602a_Hang_Busy_Flag+0x18c>
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005060:	d04f      	beq.n	8005102 <LCM1602a_Hang_Busy_Flag+0x192>
 8005062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005066:	d052      	beq.n	800510e <LCM1602a_Hang_Busy_Flag+0x19e>
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506c:	d055      	beq.n	800511a <LCM1602a_Hang_Busy_Flag+0x1aa>
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	d058      	beq.n	8005126 <LCM1602a_Hang_Busy_Flag+0x1b6>
 8005074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005078:	d058      	beq.n	800512c <LCM1602a_Hang_Busy_Flag+0x1bc>
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507e:	bf08      	it	eq
 8005080:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8005084:	e004      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	e7b4      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	600a      	str	r2, [r1, #0]
}
 8005092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005096:	f042 0204 	orr.w	r2, r2, #4
    data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 800509a:	600a      	str	r2, [r1, #0]
}
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050a4:	e7a7      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050aa:	e7f1      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 80050ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80050b0:	e7a1      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050b2:	f042 0210 	orr.w	r2, r2, #16
    data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 80050b6:	600a      	str	r2, [r1, #0]
}
 80050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    data_port->MODER |= GPIO_PIN_TO_MODER_0(data_7_pin);                                /*set D7 to output*/
 80050c0:	600a      	str	r2, [r1, #0]
}
 80050c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	e794      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80050d0:	e791      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050d6:	e7db      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 80050d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050dc:	e7d8      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 80050de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050e2:	e788      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050e8:	e7d2      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 80050ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050ee:	e782      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f4:	e7cc      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 80050f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80050fa:	e77c      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 80050fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005100:	e7c6      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 8005102:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005106:	e7c3      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 8005108:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800510c:	e773      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 800510e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005112:	e7bd      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 8005114:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005118:	e76d      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 800511a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800511e:	e7b7      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 8005120:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005124:	e767      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 8005126:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800512a:	e7b1      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 800512c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005130:	e7ae      	b.n	8005090 <LCM1602a_Hang_Busy_Flag+0x120>
 8005132:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005136:	e75e      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 8005138:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800513c:	e75b      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 800513e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005142:	e758      	b.n	8004ff6 <LCM1602a_Hang_Busy_Flag+0x86>
 8005144:	20007374 	.word	0x20007374
 8005148:	20007354 	.word	0x20007354
 800514c:	2000735c 	.word	0x2000735c
 8005150:	20007364 	.word	0x20007364
 8005154:	20007362 	.word	0x20007362

08005158 <LCM1602a_Write8_Data>:
static void LCM1602a_Write8_Data(uint8_t dataValues, uint8_t RS, uint8_t RW){
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	4607      	mov	r7, r0
 800515e:	4689      	mov	r9, r1
 8005160:	4690      	mov	r8, r2
    LCM1602a_Hang_Busy_Flag();                                                          /*hang until busy flag is reset*/
 8005162:	f7ff ff05 	bl	8004f70 <LCM1602a_Hang_Busy_Flag>
 8005166:	4d16      	ldr	r5, [pc, #88]	; (80051c0 <LCM1602a_Write8_Data+0x68>)
 8005168:	4e16      	ldr	r6, [pc, #88]	; (80051c4 <LCM1602a_Write8_Data+0x6c>)
    for(int i = 0; i < DATA_8; i++){                                                    /*write to data lines*/
 800516a:	2400      	movs	r4, #0
        HAL_GPIO_WritePin(data_port, data_pins[i] , ((dataValues >> i) & 1));           /* " " " */
 800516c:	fa47 f204 	asr.w	r2, r7, r4
 8005170:	f002 0201 	and.w	r2, r2, #1
    for(int i = 0; i < DATA_8; i++){                                                    /*write to data lines*/
 8005174:	3401      	adds	r4, #1
        HAL_GPIO_WritePin(data_port, data_pins[i] , ((dataValues >> i) & 1));           /* " " " */
 8005176:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800517a:	6830      	ldr	r0, [r6, #0]
 800517c:	f001 f8c6 	bl	800630c <HAL_GPIO_WritePin>
    for(int i = 0; i < DATA_8; i++){                                                    /*write to data lines*/
 8005180:	2c08      	cmp	r4, #8
 8005182:	d1f3      	bne.n	800516c <LCM1602a_Write8_Data+0x14>
    HAL_GPIO_WritePin(control_port, control_pins[0], RS);                               /*write to control lines RS, RW*/
 8005184:	4d10      	ldr	r5, [pc, #64]	; (80051c8 <LCM1602a_Write8_Data+0x70>)
 8005186:	4e11      	ldr	r6, [pc, #68]	; (80051cc <LCM1602a_Write8_Data+0x74>)
 8005188:	8829      	ldrh	r1, [r5, #0]
 800518a:	6830      	ldr	r0, [r6, #0]
 800518c:	464a      	mov	r2, r9
    HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                     /*set E to High*/
 800518e:	462c      	mov	r4, r5
    HAL_GPIO_WritePin(control_port, control_pins[0], RS);                               /*write to control lines RS, RW*/
 8005190:	f001 f8bc 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(control_port, control_pins[1], RW);                               /* " " " */
 8005194:	8869      	ldrh	r1, [r5, #2]
 8005196:	6830      	ldr	r0, [r6, #0]
 8005198:	4642      	mov	r2, r8
 800519a:	f001 f8b7 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                     /*set E to High*/
 800519e:	f834 1f04 	ldrh.w	r1, [r4, #4]!
 80051a2:	6830      	ldr	r0, [r6, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f001 f8b1 	bl	800630c <HAL_GPIO_WritePin>
 80051aa:	3d02      	subs	r5, #2
        HAL_GPIO_WritePin(control_port, control_pins[i], GPIO_PIN_RESET);               /* " " " */
 80051ac:	f834 1902 	ldrh.w	r1, [r4], #-2
 80051b0:	6830      	ldr	r0, [r6, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f001 f8aa 	bl	800630c <HAL_GPIO_WritePin>
    for(int i = CONTROL_PIN_COUNT - 1; i >= 0; i--){                                    /*reset all control pins*/
 80051b8:	42ac      	cmp	r4, r5
 80051ba:	d1f7      	bne.n	80051ac <LCM1602a_Write8_Data+0x54>
}
 80051bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c0:	20007362 	.word	0x20007362
 80051c4:	20007374 	.word	0x20007374
 80051c8:	20007354 	.word	0x20007354
 80051cc:	2000735c 	.word	0x2000735c

080051d0 <LCM1602a_Write4_Data>:
static void LCM1602a_Write4_Data(uint8_t dataValues, uint8_t RS, uint8_t RW){
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	b083      	sub	sp, #12
 80051d6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800528c <LCM1602a_Write4_Data+0xbc>
 80051da:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8005290 <LCM1602a_Write4_Data+0xc0>
 80051de:	4f29      	ldr	r7, [pc, #164]	; (8005284 <LCM1602a_Write4_Data+0xb4>)
 80051e0:	4d29      	ldr	r5, [pc, #164]	; (8005288 <LCM1602a_Write4_Data+0xb8>)
 80051e2:	e9cd 1200 	strd	r1, r2, [sp]
 80051e6:	4606      	mov	r6, r0
 80051e8:	f1a9 0a02 	sub.w	sl, r9, #2
 80051ec:	2404      	movs	r4, #4
        LCM1602a_Hang_Busy_Flag();                                                      /*hang until busy flag is reset*/
 80051ee:	f7ff febf 	bl	8004f70 <LCM1602a_Hang_Busy_Flag>
        HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0 + 4*i)) & 1));    /*write to data lines*/
 80051f2:	fa46 f204 	asr.w	r2, r6, r4
 80051f6:	f002 0201 	and.w	r2, r2, #1
 80051fa:	f8b8 1000 	ldrh.w	r1, [r8]
 80051fe:	6838      	ldr	r0, [r7, #0]
 8005200:	f8df b090 	ldr.w	fp, [pc, #144]	; 8005294 <LCM1602a_Write4_Data+0xc4>
 8005204:	f001 f882 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(data_port, data_pins[1], ((dataValues >> (1 + 4*i)) & 1));    /* " " " */
 8005208:	1c62      	adds	r2, r4, #1
 800520a:	fa46 f202 	asr.w	r2, r6, r2
 800520e:	f002 0201 	and.w	r2, r2, #1
 8005212:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8005216:	6838      	ldr	r0, [r7, #0]
 8005218:	f001 f878 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(data_port, data_pins[2], ((dataValues >> (2 + 4*i)) & 1));    /* " " " */
 800521c:	1ca2      	adds	r2, r4, #2
 800521e:	fa46 f202 	asr.w	r2, r6, r2
 8005222:	f002 0201 	and.w	r2, r2, #1
 8005226:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800522a:	6838      	ldr	r0, [r7, #0]
 800522c:	f001 f86e 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(data_port, data_pins[3], ((dataValues >> (3 + 4*i)) & 1));    /* " " " */
 8005230:	1ce2      	adds	r2, r4, #3
 8005232:	fa46 f202 	asr.w	r2, r6, r2
 8005236:	f002 0201 	and.w	r2, r2, #1
 800523a:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f001 f864 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 8005244:	9a00      	ldr	r2, [sp, #0]
 8005246:	f8b9 1000 	ldrh.w	r1, [r9]
 800524a:	6828      	ldr	r0, [r5, #0]
 800524c:	f001 f85e 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(control_port, control_pins[1], RW);                           /* " " " */
 8005250:	9a01      	ldr	r2, [sp, #4]
 8005252:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8005256:	6828      	ldr	r0, [r5, #0]
 8005258:	f001 f858 	bl	800630c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /*set E to High*/
 800525c:	2201      	movs	r2, #1
 800525e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8005262:	6828      	ldr	r0, [r5, #0]
 8005264:	f001 f852 	bl	800630c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(control_port, control_pins[j], GPIO_PIN_RESET);           /* " " " */
 8005268:	f83b 1902 	ldrh.w	r1, [fp], #-2
 800526c:	6828      	ldr	r0, [r5, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	f001 f84c 	bl	800630c <HAL_GPIO_WritePin>
        for(int j = CONTROL_PIN_COUNT - 1; j >= 0; j--){                                /*reset all control pins*/
 8005274:	45da      	cmp	sl, fp
 8005276:	d1f7      	bne.n	8005268 <LCM1602a_Write4_Data+0x98>
 8005278:	3c04      	subs	r4, #4
    for(int i = 1; i >= 0; i--){
 800527a:	1d23      	adds	r3, r4, #4
 800527c:	d1b7      	bne.n	80051ee <LCM1602a_Write4_Data+0x1e>
}
 800527e:	b003      	add	sp, #12
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	20007374 	.word	0x20007374
 8005288:	2000735c 	.word	0x2000735c
 800528c:	20007354 	.word	0x20007354
 8005290:	20007364 	.word	0x20007364
 8005294:	20007358 	.word	0x20007358

08005298 <LCM1602a_Write4_Data_Single.constprop.0>:
static void LCM1602a_Write4_Data_Single(uint8_t dataValues, uint8_t RS, uint8_t RW){
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0)) & 1));          /*write to data lines*/
 800529a:	4c1a      	ldr	r4, [pc, #104]	; (8005304 <LCM1602a_Write4_Data_Single.constprop.0+0x6c>)
 800529c:	4f1a      	ldr	r7, [pc, #104]	; (8005308 <LCM1602a_Write4_Data_Single.constprop.0+0x70>)
    HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 800529e:	4d1b      	ldr	r5, [pc, #108]	; (800530c <LCM1602a_Write4_Data_Single.constprop.0+0x74>)
    HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0)) & 1));          /*write to data lines*/
 80052a0:	8839      	ldrh	r1, [r7, #0]
    HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 80052a2:	4e1b      	ldr	r6, [pc, #108]	; (8005310 <LCM1602a_Write4_Data_Single.constprop.0+0x78>)
    HAL_GPIO_WritePin(data_port, data_pins[0], ((dataValues >> (0)) & 1));          /*write to data lines*/
 80052a4:	f000 0201 	and.w	r2, r0, #1
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	f001 f82f 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(data_port, data_pins[1], ((dataValues >> (1)) & 1));          /* " " " */
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	8879      	ldrh	r1, [r7, #2]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f001 f82a 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(data_port, data_pins[2], ((dataValues >> (2)) & 1));          /* " " " */
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	88b9      	ldrh	r1, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f001 f825 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(data_port, data_pins[3], ((dataValues >> (3)) & 1));          /* " " " */
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	88f9      	ldrh	r1, [r7, #6]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f001 f820 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /*set E to High*/
 80052cc:	462c      	mov	r4, r5
    HAL_GPIO_WritePin(control_port, control_pins[0], RS);                           /*write to control lines RS, RW*/
 80052ce:	8829      	ldrh	r1, [r5, #0]
 80052d0:	6830      	ldr	r0, [r6, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f001 f81a 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(control_port, control_pins[1], RW);                           /* " " " */
 80052d8:	8869      	ldrh	r1, [r5, #2]
 80052da:	6830      	ldr	r0, [r6, #0]
 80052dc:	2200      	movs	r2, #0
 80052de:	f001 f815 	bl	800630c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(control_port, control_pins[2], GPIO_PIN_SET);                 /*set E to High*/
 80052e2:	f834 1f04 	ldrh.w	r1, [r4, #4]!
 80052e6:	6830      	ldr	r0, [r6, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f001 f80f 	bl	800630c <HAL_GPIO_WritePin>
 80052ee:	3d02      	subs	r5, #2
        HAL_GPIO_WritePin(control_port, control_pins[j], GPIO_PIN_RESET);           /* " " " */
 80052f0:	f834 1902 	ldrh.w	r1, [r4], #-2
 80052f4:	6830      	ldr	r0, [r6, #0]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f001 f808 	bl	800630c <HAL_GPIO_WritePin>
    for(int j = CONTROL_PIN_COUNT - 1; j >= 0; j--){                                /*reset all control pins*/
 80052fc:	42ac      	cmp	r4, r5
 80052fe:	d1f7      	bne.n	80052f0 <LCM1602a_Write4_Data_Single.constprop.0+0x58>
}
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	bf00      	nop
 8005304:	20007374 	.word	0x20007374
 8005308:	20007364 	.word	0x20007364
 800530c:	20007354 	.word	0x20007354
 8005310:	2000735c 	.word	0x2000735c

08005314 <LCM1602a_Set_DATA8>:
void LCM1602a_Set_DATA8(GPIO_TypeDef *d_Port, uint16_t d_Pins[8], GPIO_TypeDef *c_Port, uint16_t c_Pins[3]){
 8005314:	b4f0      	push	{r4, r5, r6, r7}
    data_7_pin = d_Pins[7];                                                             /*set D7 pin*/
 8005316:	4d0e      	ldr	r5, [pc, #56]	; (8005350 <LCM1602a_Set_DATA8+0x3c>)
 8005318:	89cf      	ldrh	r7, [r1, #14]
    transmission_mode = DATA_8;                                                         /*set transmission mode*/
 800531a:	4c0e      	ldr	r4, [pc, #56]	; (8005354 <LCM1602a_Set_DATA8+0x40>)
    data_7_pin = d_Pins[7];                                                             /*set D7 pin*/
 800531c:	802f      	strh	r7, [r5, #0]
    data_port = d_Port;                                                                 /*set data port*/
 800531e:	4e0e      	ldr	r6, [pc, #56]	; (8005358 <LCM1602a_Set_DATA8+0x44>)
    control_port = c_Port;                                                              /*set control port*/
 8005320:	4d0e      	ldr	r5, [pc, #56]	; (800535c <LCM1602a_Set_DATA8+0x48>)
    data_port = d_Port;                                                                 /*set data port*/
 8005322:	6030      	str	r0, [r6, #0]
    transmission_mode = DATA_8;                                                         /*set transmission mode*/
 8005324:	2708      	movs	r7, #8
 8005326:	7027      	strb	r7, [r4, #0]
 8005328:	4c0d      	ldr	r4, [pc, #52]	; (8005360 <LCM1602a_Set_DATA8+0x4c>)
    control_port = c_Port;                                                              /*set control port*/
 800532a:	602a      	str	r2, [r5, #0]
 800532c:	1e88      	subs	r0, r1, #2
 800532e:	310e      	adds	r1, #14
        data_pins[i] = d_Pins[i];                                                       /* " " " */
 8005330:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8005334:	f824 2f02 	strh.w	r2, [r4, #2]!
    for(int i = 0; i < DATA_8; i++){                                                    /*set data pins*/
 8005338:	4288      	cmp	r0, r1
 800533a:	d1f9      	bne.n	8005330 <LCM1602a_Set_DATA8+0x1c>
        control_pins[i] = c_Pins[i];                                                    /* " " " */
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <LCM1602a_Set_DATA8+0x50>)
 800533e:	8819      	ldrh	r1, [r3, #0]
 8005340:	8011      	strh	r1, [r2, #0]
 8005342:	8859      	ldrh	r1, [r3, #2]
 8005344:	8051      	strh	r1, [r2, #2]
 8005346:	889b      	ldrh	r3, [r3, #4]
 8005348:	8093      	strh	r3, [r2, #4]
}
 800534a:	bcf0      	pop	{r4, r5, r6, r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20007362 	.word	0x20007362
 8005354:	20007379 	.word	0x20007379
 8005358:	20007374 	.word	0x20007374
 800535c:	2000735c 	.word	0x2000735c
 8005360:	20007362 	.word	0x20007362
 8005364:	20007354 	.word	0x20007354

08005368 <LCM1602a_Write_Message>:
void LCM1602a_Write_Message(char *Message){
 8005368:	b538      	push	{r3, r4, r5, lr}
    if(transmission_mode == DATA_8){                                                    /*if 8 Data Lines*/
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <LCM1602a_Write_Message+0x50>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b08      	cmp	r3, #8
void LCM1602a_Write_Message(char *Message){
 8005370:	4604      	mov	r4, r0
    if(transmission_mode == DATA_8){                                                    /*if 8 Data Lines*/
 8005372:	d011      	beq.n	8005398 <LCM1602a_Write_Message+0x30>
    }else if(transmission_mode == DATA_4){                                              /*if 4 Data Lines*/
 8005374:	2b04      	cmp	r3, #4
 8005376:	d000      	beq.n	800537a <LCM1602a_Write_Message+0x12>
}
 8005378:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Len = (uint16_t)strlen(Message);                                           /*find length of the message*/
 800537a:	f7fa ff7d 	bl	8000278 <strlen>
 800537e:	b280      	uxth	r0, r0
    for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 8005380:	2800      	cmp	r0, #0
 8005382:	d0f9      	beq.n	8005378 <LCM1602a_Write_Message+0x10>
 8005384:	1825      	adds	r5, r4, r0
        LCM1602a_Write4_Data((int)*Message, 1, 0);                                      /* " " " */
 8005386:	f814 0b01 	ldrb.w	r0, [r4], #1
 800538a:	2200      	movs	r2, #0
 800538c:	2101      	movs	r1, #1
 800538e:	f7ff ff1f 	bl	80051d0 <LCM1602a_Write4_Data>
    for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 8005392:	42a5      	cmp	r5, r4
 8005394:	d1f7      	bne.n	8005386 <LCM1602a_Write_Message+0x1e>
}
 8005396:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Len = (uint16_t)strlen(Message);                                           /*find length of the message*/
 8005398:	f7fa ff6e 	bl	8000278 <strlen>
 800539c:	b280      	uxth	r0, r0
    for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 800539e:	2800      	cmp	r0, #0
 80053a0:	d0ea      	beq.n	8005378 <LCM1602a_Write_Message+0x10>
 80053a2:	1825      	adds	r5, r4, r0
        LCM1602a_Write8_Data((int)*Message, 1, 0);                                      /* " " " */
 80053a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80053a8:	2200      	movs	r2, #0
 80053aa:	2101      	movs	r1, #1
 80053ac:	f7ff fed4 	bl	8005158 <LCM1602a_Write8_Data>
    for(int i = 0; i < Len; i++){                                                       /*write message to display*/
 80053b0:	42a5      	cmp	r5, r4
 80053b2:	d1f7      	bne.n	80053a4 <LCM1602a_Write_Message+0x3c>
}
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
 80053b6:	bf00      	nop
 80053b8:	20007379 	.word	0x20007379

080053bc <LCM1602a_Write_Data>:
    if(transmission_mode == DATA_8){                                                    /*if 8 Data Lines*/
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <LCM1602a_Write_Data+0x18>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d004      	beq.n	80053ce <LCM1602a_Write_Data+0x12>
    }else if(transmission_mode == DATA_4){                                              /*if 4 Data Lines*/
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d000      	beq.n	80053ca <LCM1602a_Write_Data+0xe>
}
 80053c8:	4770      	bx	lr
        LCM1602a_Write4_Data(dataValues, RS, RW);                                           /*use corresponding write function*/
 80053ca:	f7ff bf01 	b.w	80051d0 <LCM1602a_Write4_Data>
        LCM1602a_Write8_Data(dataValues, RS, RW);                                           /*use corresponding write function*/
 80053ce:	f7ff bec3 	b.w	8005158 <LCM1602a_Write8_Data>
 80053d2:	bf00      	nop
 80053d4:	20007379 	.word	0x20007379

080053d8 <create_char>:
    LCM1602a_Write_Data(0x40 | (location << 3), 0, 0);                                  /**/
 80053d8:	00c0      	lsls	r0, r0, #3
 80053da:	2200      	movs	r2, #0
 80053dc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
static void create_char(uint8_t location, uint8_t charmap[]){
 80053e0:	b538      	push	{r3, r4, r5, lr}
    LCM1602a_Write_Data(0x40 | (location << 3), 0, 0);                                  /**/
 80053e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
static void create_char(uint8_t location, uint8_t charmap[]){
 80053e6:	460d      	mov	r5, r1
    LCM1602a_Write_Data(0x40 | (location << 3), 0, 0);                                  /**/
 80053e8:	4611      	mov	r1, r2
 80053ea:	f7ff ffe7 	bl	80053bc <LCM1602a_Write_Data>
 80053ee:	1e6c      	subs	r4, r5, #1
 80053f0:	3507      	adds	r5, #7
        LCM1602a_Write_Data(charmap[i], 1, 0);                                          /* " " " */
 80053f2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80053f6:	2200      	movs	r2, #0
 80053f8:	2101      	movs	r1, #1
 80053fa:	f7ff ffdf 	bl	80053bc <LCM1602a_Write_Data>
    for(int i = 0; i < 8; i++){                                                         /*write char into RAM*/
 80053fe:	42ac      	cmp	r4, r5
 8005400:	d1f7      	bne.n	80053f2 <create_char+0x1a>
}
 8005402:	bd38      	pop	{r3, r4, r5, pc}

08005404 <LCM1602a_init>:
void LCM1602a_init(uint8_t disp_line){
 8005404:	b510      	push	{r4, lr}
    if(transmission_mode == DATA_8){
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <LCM1602a_init+0xb4>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b08      	cmp	r3, #8
 800540c:	d002      	beq.n	8005414 <LCM1602a_init+0x10>
    }else if(transmission_mode == DATA_4){
 800540e:	2b04      	cmp	r3, #4
 8005410:	d02a      	beq.n	8005468 <LCM1602a_init+0x64>
}
 8005412:	bd10      	pop	{r4, pc}
 8005414:	4604      	mov	r4, r0
        create_char(0, Speaker);                                                        /*store custom characters into LCD RAM*/
 8005416:	4929      	ldr	r1, [pc, #164]	; (80054bc <LCM1602a_init+0xb8>)
 8005418:	2000      	movs	r0, #0
 800541a:	f7ff ffdd 	bl	80053d8 <create_char>
        create_char(1, Volume_1);                                                       /* " " " */
 800541e:	4928      	ldr	r1, [pc, #160]	; (80054c0 <LCM1602a_init+0xbc>)
 8005420:	2001      	movs	r0, #1
 8005422:	f7ff ffd9 	bl	80053d8 <create_char>
        create_char(2, Volume_2);                                                       /* " " " */
 8005426:	4927      	ldr	r1, [pc, #156]	; (80054c4 <LCM1602a_init+0xc0>)
 8005428:	2002      	movs	r0, #2
 800542a:	f7ff ffd5 	bl	80053d8 <create_char>
        create_char(3, Volume_3);                                                       /* " " " */
 800542e:	4926      	ldr	r1, [pc, #152]	; (80054c8 <LCM1602a_init+0xc4>)
 8005430:	2003      	movs	r0, #3
 8005432:	f7ff ffd1 	bl	80053d8 <create_char>
        create_char(4, Volume_4);                                                       /* " " " */
 8005436:	4925      	ldr	r1, [pc, #148]	; (80054cc <LCM1602a_init+0xc8>)
 8005438:	2004      	movs	r0, #4
 800543a:	f7ff ffcd 	bl	80053d8 <create_char>
        if(disp_line == TWO_LINE_DISPLAY){
 800543e:	2c02      	cmp	r4, #2
 8005440:	d030      	beq.n	80054a4 <LCM1602a_init+0xa0>
        }else if(disp_line == ONE_LINE_DISPLAY){
 8005442:	2c01      	cmp	r4, #1
 8005444:	d034      	beq.n	80054b0 <LCM1602a_init+0xac>
        LCM1602a_Write_Data(0b00001100, 0, 0);                                          /*Display on With Cursor off*/
 8005446:	2200      	movs	r2, #0
 8005448:	4611      	mov	r1, r2
 800544a:	200c      	movs	r0, #12
 800544c:	f7ff ffb6 	bl	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Data(0b00000110, 0, 0);                                          /*increment on*/
 8005450:	2200      	movs	r2, #0
 8005452:	4611      	mov	r1, r2
 8005454:	2006      	movs	r0, #6
 8005456:	f7ff ffb1 	bl	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write_Data(0b00000001, 0, 0);                                          /*clear the display*/
 800545a:	2200      	movs	r2, #0
 800545c:	4611      	mov	r1, r2
 800545e:	2001      	movs	r0, #1
}
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LCM1602a_Write_Data(0b00000001, 0, 0);                                          /*clear the display*/
 8005464:	f7ff bfaa 	b.w	80053bc <LCM1602a_Write_Data>
        LCM1602a_Write4_Data_Single(0b0011, 0, 0); HAL_Delay(5);
 8005468:	2003      	movs	r0, #3
 800546a:	f7ff ff15 	bl	8005298 <LCM1602a_Write4_Data_Single.constprop.0>
 800546e:	2005      	movs	r0, #5
 8005470:	f000 f8cc 	bl	800560c <HAL_Delay>
        LCM1602a_Write4_Data_Single(0b0011, 0, 0); HAL_Delay(5);
 8005474:	2003      	movs	r0, #3
 8005476:	f7ff ff0f 	bl	8005298 <LCM1602a_Write4_Data_Single.constprop.0>
 800547a:	2005      	movs	r0, #5
 800547c:	f000 f8c6 	bl	800560c <HAL_Delay>
        LCM1602a_Write4_Data_Single(0b0011, 0, 0); HAL_Delay(5);
 8005480:	2003      	movs	r0, #3
 8005482:	f7ff ff09 	bl	8005298 <LCM1602a_Write4_Data_Single.constprop.0>
 8005486:	2005      	movs	r0, #5
 8005488:	f000 f8c0 	bl	800560c <HAL_Delay>
        LCM1602a_Write4_Data_Single(0b0010, 0, 0); HAL_Delay(5);
 800548c:	2002      	movs	r0, #2
 800548e:	f7ff ff03 	bl	8005298 <LCM1602a_Write4_Data_Single.constprop.0>
 8005492:	2005      	movs	r0, #5
 8005494:	f000 f8ba 	bl	800560c <HAL_Delay>
        LCM1602a_Write_Data(0b00101000, 0, 0);                                          /*Initialize the display mode 1 Line*/
 8005498:	2200      	movs	r2, #0
 800549a:	4611      	mov	r1, r2
 800549c:	2028      	movs	r0, #40	; 0x28
            LCM1602a_Write_Data(0b00110000, 0, 0);                                      /*Initialize the display mode 1 Line*/
 800549e:	f7ff ff8d 	bl	80053bc <LCM1602a_Write_Data>
 80054a2:	e7d0      	b.n	8005446 <LCM1602a_init+0x42>
            LCM1602a_Write_Data(0b00111000, 0, 0);                                      /*Initialize the display mode 2 Line*/
 80054a4:	2200      	movs	r2, #0
 80054a6:	4611      	mov	r1, r2
 80054a8:	2038      	movs	r0, #56	; 0x38
 80054aa:	f7ff ff87 	bl	80053bc <LCM1602a_Write_Data>
 80054ae:	e7ca      	b.n	8005446 <LCM1602a_init+0x42>
            LCM1602a_Write_Data(0b00110000, 0, 0);                                      /*Initialize the display mode 1 Line*/
 80054b0:	2200      	movs	r2, #0
 80054b2:	4611      	mov	r1, r2
 80054b4:	2030      	movs	r0, #48	; 0x30
 80054b6:	e7f2      	b.n	800549e <LCM1602a_init+0x9a>
 80054b8:	20007379 	.word	0x20007379
 80054bc:	20000040 	.word	0x20000040
 80054c0:	20000048 	.word	0x20000048
 80054c4:	20000050 	.word	0x20000050
 80054c8:	20000058 	.word	0x20000058
 80054cc:	20000060 	.word	0x20000060

080054d0 <LCM1602a_textwrap>:
void LCM1602a_textwrap(char* in_text, uint8_t delay){
 80054d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054d4:	b095      	sub	sp, #84	; 0x54
    sprintf(text, "%s%s%s", "        ", in_text ,"        ");
 80054d6:	4a33      	ldr	r2, [pc, #204]	; (80055a4 <LCM1602a_textwrap+0xd4>)
    if (delay_factor != delay){
 80054d8:	4e33      	ldr	r6, [pc, #204]	; (80055a8 <LCM1602a_textwrap+0xd8>)
    sprintf(text, "%s%s%s", "        ", in_text ,"        ");
 80054da:	9200      	str	r2, [sp, #0]
 80054dc:	ac02      	add	r4, sp, #8
 80054de:	4603      	mov	r3, r0
void LCM1602a_textwrap(char* in_text, uint8_t delay){
 80054e0:	460d      	mov	r5, r1
    sprintf(text, "%s%s%s", "        ", in_text ,"        ");
 80054e2:	4620      	mov	r0, r4
 80054e4:	4931      	ldr	r1, [pc, #196]	; (80055ac <LCM1602a_textwrap+0xdc>)
 80054e6:	f00a fe1f 	bl	8010128 <siprintf>
    if (delay_factor != delay){
 80054ea:	7833      	ldrb	r3, [r6, #0]
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	d004      	beq.n	80054fa <LCM1602a_textwrap+0x2a>
        delay_factor++;
 80054f0:	3301      	adds	r3, #1
 80054f2:	7033      	strb	r3, [r6, #0]
}
 80054f4:	b015      	add	sp, #84	; 0x54
 80054f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int text_len = strlen(text);                                                        /*find length of text*/
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7fa febc 	bl	8000278 <strlen>
    if (cursor_pos == (text_len - 1) ){                                                 /*reset cursor for wrapping*/
 8005500:	4d2b      	ldr	r5, [pc, #172]	; (80055b0 <LCM1602a_textwrap+0xe0>)
 8005502:	882b      	ldrh	r3, [r5, #0]
 8005504:	1e47      	subs	r7, r0, #1
 8005506:	42bb      	cmp	r3, r7
    LCM1602a_Write_Data(0b00000010, 0, 0);                                              /*return display home*/
 8005508:	f04f 0200 	mov.w	r2, #0
        cursor_pos = 0;                                                                 /* " " " */
 800550c:	bf08      	it	eq
 800550e:	2300      	moveq	r3, #0
    int text_len = strlen(text);                                                        /*find length of text*/
 8005510:	4680      	mov	r8, r0
    LCM1602a_Write_Data(0b00000010, 0, 0);                                              /*return display home*/
 8005512:	4611      	mov	r1, r2
 8005514:	f04f 0002 	mov.w	r0, #2
        cursor_pos = 0;                                                                 /* " " " */
 8005518:	bf08      	it	eq
 800551a:	802b      	strheq	r3, [r5, #0]
    LCM1602a_Write_Data(0b00000010, 0, 0);                                              /*return display home*/
 800551c:	f7ff ff4e 	bl	80053bc <LCM1602a_Write_Data>
    if(cursor_pos < text_len - 16){                                                     /*first 16 characters*/
 8005520:	882b      	ldrh	r3, [r5, #0]
 8005522:	f1a8 0210 	sub.w	r2, r8, #16
 8005526:	4293      	cmp	r3, r2
 8005528:	db2a      	blt.n	8005580 <LCM1602a_textwrap+0xb0>
        for(int char_pos = cursor_pos; char_pos < (text_len - 1) ; char_pos++){         /*characters of current string*/
 800552a:	429f      	cmp	r7, r3
 800552c:	dd0d      	ble.n	800554a <LCM1602a_textwrap+0x7a>
 800552e:	18e7      	adds	r7, r4, r3
 8005530:	f10d 0307 	add.w	r3, sp, #7
 8005534:	eb03 0908 	add.w	r9, r3, r8
            LCM1602a_Write_Data((int)text[char_pos], 1, 0);                             /* " " " */
 8005538:	f817 0b01 	ldrb.w	r0, [r7], #1
 800553c:	2200      	movs	r2, #0
 800553e:	2101      	movs	r1, #1
 8005540:	f7ff ff3c 	bl	80053bc <LCM1602a_Write_Data>
        for(int char_pos = cursor_pos; char_pos < (text_len - 1) ; char_pos++){         /*characters of current string*/
 8005544:	454f      	cmp	r7, r9
 8005546:	d1f7      	bne.n	8005538 <LCM1602a_textwrap+0x68>
 8005548:	882b      	ldrh	r3, [r5, #0]
        for (int char_pos = 0; char_pos <= 16 - (text_len - cursor_pos); char_pos++){   /*remaining characters*/
 800554a:	eba3 0208 	sub.w	r2, r3, r8
 800554e:	f112 0f10 	cmn.w	r2, #16
 8005552:	d40e      	bmi.n	8005572 <LCM1602a_textwrap+0xa2>
 8005554:	4627      	mov	r7, r4
            LCM1602a_Write_Data((int)text[char_pos], 1, 0);                             /* " " " */
 8005556:	2200      	movs	r2, #0
 8005558:	2101      	movs	r1, #1
 800555a:	f817 0b01 	ldrb.w	r0, [r7], #1
 800555e:	f7ff ff2d 	bl	80053bc <LCM1602a_Write_Data>
        for (int char_pos = 0; char_pos <= 16 - (text_len - cursor_pos); char_pos++){   /*remaining characters*/
 8005562:	882b      	ldrh	r3, [r5, #0]
 8005564:	eba8 0203 	sub.w	r2, r8, r3
 8005568:	f1c2 0210 	rsb	r2, r2, #16
 800556c:	1b39      	subs	r1, r7, r4
 800556e:	428a      	cmp	r2, r1
 8005570:	daf1      	bge.n	8005556 <LCM1602a_textwrap+0x86>
    cursor_pos++;
 8005572:	3301      	adds	r3, #1
    delay_factor = 0;
 8005574:	2200      	movs	r2, #0
    cursor_pos++;
 8005576:	802b      	strh	r3, [r5, #0]
    delay_factor = 0;
 8005578:	7032      	strb	r2, [r6, #0]
}
 800557a:	b015      	add	sp, #84	; 0x54
 800557c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005580:	18e7      	adds	r7, r4, r3
            LCM1602a_Write_Data((int)text[char_pos], 1, 0);                             /* " " " */
 8005582:	2200      	movs	r2, #0
 8005584:	2101      	movs	r1, #1
 8005586:	f817 0b01 	ldrb.w	r0, [r7], #1
 800558a:	f7ff ff17 	bl	80053bc <LCM1602a_Write_Data>
        for(int char_pos = cursor_pos; char_pos < cursor_pos + 16 ; char_pos++){        /* " " " */
 800558e:	882b      	ldrh	r3, [r5, #0]
 8005590:	1b3a      	subs	r2, r7, r4
 8005592:	f103 010f 	add.w	r1, r3, #15
 8005596:	4291      	cmp	r1, r2
 8005598:	daf3      	bge.n	8005582 <LCM1602a_textwrap+0xb2>
    cursor_pos++;
 800559a:	3301      	adds	r3, #1
    delay_factor = 0;
 800559c:	2200      	movs	r2, #0
    cursor_pos++;
 800559e:	802b      	strh	r3, [r5, #0]
    delay_factor = 0;
 80055a0:	7032      	strb	r2, [r6, #0]
 80055a2:	e7ea      	b.n	800557a <LCM1602a_textwrap+0xaa>
 80055a4:	0801280c 	.word	0x0801280c
 80055a8:	20007378 	.word	0x20007378
 80055ac:	08012818 	.word	0x08012818
 80055b0:	20007360 	.word	0x20007360

080055b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055b4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_Init+0x30>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055be:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055d0:	2003      	movs	r0, #3
 80055d2:	f000 fa59 	bl	8005a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7fe ff54 	bl	8004484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055dc:	f7fe fe54 	bl	8004288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80055e0:	2000      	movs	r0, #0
 80055e2:	bd08      	pop	{r3, pc}
 80055e4:	40023c00 	.word	0x40023c00

080055e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80055e8:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <HAL_IncTick+0x10>)
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <HAL_IncTick+0x14>)
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	440b      	add	r3, r1
 80055f2:	6013      	str	r3, [r2, #0]
}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	2000d794 	.word	0x2000d794
 80055fc:	20000068 	.word	0x20000068

08005600 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <HAL_GetTick+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	2000d794 	.word	0x2000d794

0800560c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005610:	f7ff fff6 	bl	8005600 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005614:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005616:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005618:	d002      	beq.n	8005620 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <HAL_Delay+0x20>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005620:	f7ff ffee 	bl	8005600 <HAL_GetTick>
 8005624:	1b40      	subs	r0, r0, r5
 8005626:	42a0      	cmp	r0, r4
 8005628:	d3fa      	bcc.n	8005620 <HAL_Delay+0x14>
  {
  }
}
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	20000068 	.word	0x20000068

08005630 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005630:	2800      	cmp	r0, #0
 8005632:	f000 8091 	beq.w	8005758 <HAL_ADC_Init+0x128>
{
 8005636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005638:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800563a:	4604      	mov	r4, r0
 800563c:	2d00      	cmp	r5, #0
 800563e:	f000 8081 	beq.w	8005744 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005644:	06db      	lsls	r3, r3, #27
 8005646:	d504      	bpl.n	8005652 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005648:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800564a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800564c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8005650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8005652:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005654:	494d      	ldr	r1, [pc, #308]	; (800578c <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005656:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005658:	4d4d      	ldr	r5, [pc, #308]	; (8005790 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800565a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800565e:	f022 0202 	bic.w	r2, r2, #2
 8005662:	f042 0202 	orr.w	r2, r2, #2
 8005666:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005668:	684a      	ldr	r2, [r1, #4]
 800566a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800566e:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005670:	684a      	ldr	r2, [r1, #4]
 8005672:	6860      	ldr	r0, [r4, #4]
 8005674:	4302      	orrs	r2, r0
 8005676:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005678:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800567a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800567c:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800567e:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005680:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005684:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800568c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800568e:	6858      	ldr	r0, [r3, #4]
 8005690:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8005694:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005696:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800569a:	4339      	orrs	r1, r7
 800569c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800569e:	6899      	ldr	r1, [r3, #8]
 80056a0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80056a4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056a6:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056a8:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056aa:	ea42 0206 	orr.w	r2, r2, r6
 80056ae:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056b0:	d054      	beq.n	800575c <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056b2:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056b4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056b6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80056ba:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	4310      	orrs	r0, r2
 80056c0:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80056c8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	432a      	orrs	r2, r5
 80056ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056d0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056d2:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056d4:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056d8:	f021 0102 	bic.w	r1, r1, #2
 80056dc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80056e4:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80056e6:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d140      	bne.n	800576e <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056f4:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056f6:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056fa:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005702:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005704:	3d01      	subs	r5, #1
 8005706:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800570a:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800570c:	6898      	ldr	r0, [r3, #8]
 800570e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8005712:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005714:	6899      	ldr	r1, [r3, #8]
 8005716:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800571a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800571c:	6899      	ldr	r1, [r3, #8]
 800571e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005722:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005724:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005726:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005728:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800572c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800572e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800573c:	2300      	movs	r3, #0
 800573e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8005744:	f7fe fdc0 	bl	80042c8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005748:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800574a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800574c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005750:	06db      	lsls	r3, r3, #27
 8005752:	f53f af79 	bmi.w	8005648 <HAL_ADC_Init+0x18>
 8005756:	e77c      	b.n	8005652 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8005758:	2001      	movs	r0, #1
}
 800575a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	e7b0      	b.n	80056d0 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800576e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005772:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005774:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800577c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	3901      	subs	r1, #1
 8005782:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	e7b3      	b.n	80056f2 <HAL_ADC_Init+0xc2>
 800578a:	bf00      	nop
 800578c:	40012300 	.word	0x40012300
 8005790:	0f000001 	.word	0x0f000001

08005794 <HAL_ADC_Start>:
{
 8005794:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 8005796:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800579a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800579c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800579e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80057a0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80057a2:	d05c      	beq.n	800585e <HAL_ADC_Start+0xca>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057a4:	6802      	ldr	r2, [r0, #0]
 80057a6:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80057a8:	2101      	movs	r1, #1
 80057aa:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057ae:	07d9      	lsls	r1, r3, #31
 80057b0:	d414      	bmi.n	80057dc <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057b2:	4b32      	ldr	r3, [pc, #200]	; (800587c <HAL_ADC_Start+0xe8>)
 80057b4:	4c32      	ldr	r4, [pc, #200]	; (8005880 <HAL_ADC_Start+0xec>)
 80057b6:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80057b8:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057ba:	fba4 4303 	umull	r4, r3, r4, r3
 80057be:	0c9b      	lsrs	r3, r3, #18
 80057c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 80057c4:	f041 0101 	orr.w	r1, r1, #1
 80057c8:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057ca:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80057cc:	9b01      	ldr	r3, [sp, #4]
 80057ce:	b12b      	cbz	r3, 80057dc <HAL_ADC_Start+0x48>
      counter--;
 80057d0:	9b01      	ldr	r3, [sp, #4]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80057d6:	9b01      	ldr	r3, [sp, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f9      	bne.n	80057d0 <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057dc:	6893      	ldr	r3, [r2, #8]
 80057de:	07db      	lsls	r3, r3, #31
 80057e0:	d52c      	bpl.n	800583c <HAL_ADC_Start+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 80057e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80057e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f0:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057f2:	6853      	ldr	r3, [r2, #4]
 80057f4:	055c      	lsls	r4, r3, #21
 80057f6:	d505      	bpl.n	8005804 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80057fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005802:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005804:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005806:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800580a:	bf1c      	itt	ne
 800580c:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800580e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8005812:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005814:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8005818:	2400      	movs	r4, #0
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <HAL_ADC_Start+0xf0>)
    __HAL_UNLOCK(hadc);
 800581c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005820:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005822:	6859      	ldr	r1, [r3, #4]
 8005824:	06c9      	lsls	r1, r1, #27
 8005826:	d10e      	bne.n	8005846 <HAL_ADC_Start+0xb2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005828:	4917      	ldr	r1, [pc, #92]	; (8005888 <HAL_ADC_Start+0xf4>)
 800582a:	428a      	cmp	r2, r1
 800582c:	d00e      	beq.n	800584c <HAL_ADC_Start+0xb8>
 800582e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8005832:	428a      	cmp	r2, r1
 8005834:	d01e      	beq.n	8005874 <HAL_ADC_Start+0xe0>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005836:	4915      	ldr	r1, [pc, #84]	; (800588c <HAL_ADC_Start+0xf8>)
 8005838:	428a      	cmp	r2, r1
 800583a:	d015      	beq.n	8005868 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 800583c:	2000      	movs	r0, #0
}
 800583e:	b003      	add	sp, #12
 8005840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005844:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_ADC_Start+0xf4>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d1f7      	bne.n	800583c <HAL_ADC_Start+0xa8>
 800584c:	6890      	ldr	r0, [r2, #8]
 800584e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005852:	d1f3      	bne.n	800583c <HAL_ADC_Start+0xa8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005854:	6893      	ldr	r3, [r2, #8]
 8005856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585a:	6093      	str	r3, [r2, #8]
 800585c:	e7ef      	b.n	800583e <HAL_ADC_Start+0xaa>
  __HAL_LOCK(hadc);
 800585e:	2002      	movs	r0, #2
}
 8005860:	b003      	add	sp, #12
 8005862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005866:	4770      	bx	lr
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2b0f      	cmp	r3, #15
 8005870:	d9ec      	bls.n	800584c <HAL_ADC_Start+0xb8>
 8005872:	e7e3      	b.n	800583c <HAL_ADC_Start+0xa8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	06db      	lsls	r3, r3, #27
 8005878:	d0e8      	beq.n	800584c <HAL_ADC_Start+0xb8>
 800587a:	e7df      	b.n	800583c <HAL_ADC_Start+0xa8>
 800587c:	20000004 	.word	0x20000004
 8005880:	431bde83 	.word	0x431bde83
 8005884:	40012300 	.word	0x40012300
 8005888:	40012000 	.word	0x40012000
 800588c:	40012200 	.word	0x40012200

08005890 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	0552      	lsls	r2, r2, #21
 8005896:	d502      	bpl.n	800589e <HAL_ADC_PollForConversion+0xe>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005898:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800589a:	05db      	lsls	r3, r3, #23
 800589c:	d43e      	bmi.n	800591c <HAL_ADC_PollForConversion+0x8c>
{
 800589e:	b570      	push	{r4, r5, r6, lr}
 80058a0:	460c      	mov	r4, r1
 80058a2:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 80058a4:	f7ff feac 	bl	8005600 <HAL_GetTick>
 80058a8:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058aa:	682a      	ldr	r2, [r5, #0]
 80058ac:	e001      	b.n	80058b2 <HAL_ADC_PollForConversion+0x22>
    if(Timeout != HAL_MAX_DELAY)
 80058ae:	1c60      	adds	r0, r4, #1
 80058b0:	d125      	bne.n	80058fe <HAL_ADC_PollForConversion+0x6e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	0799      	lsls	r1, r3, #30
 80058b6:	d5fa      	bpl.n	80058ae <HAL_ADC_PollForConversion+0x1e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80058b8:	f06f 0312 	mvn.w	r3, #18
 80058bc:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058c4:	642b      	str	r3, [r5, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058c6:	6893      	ldr	r3, [r2, #8]
 80058c8:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80058cc:	d115      	bne.n	80058fa <HAL_ADC_PollForConversion+0x6a>
 80058ce:	7e2b      	ldrb	r3, [r5, #24]
 80058d0:	b99b      	cbnz	r3, 80058fa <HAL_ADC_PollForConversion+0x6a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80058d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058d4:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80058d8:	d002      	beq.n	80058e0 <HAL_ADC_PollForConversion+0x50>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80058da:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80058dc:	055b      	lsls	r3, r3, #21
 80058de:	d40c      	bmi.n	80058fa <HAL_ADC_PollForConversion+0x6a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e6:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058e8:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80058ea:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80058ee:	d104      	bne.n	80058fa <HAL_ADC_PollForConversion+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058f0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	642b      	str	r3, [r5, #64]	; 0x40
}
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80058fa:	2000      	movs	r0, #0
}
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80058fe:	b124      	cbz	r4, 800590a <HAL_ADC_PollForConversion+0x7a>
 8005900:	f7ff fe7e 	bl	8005600 <HAL_GetTick>
 8005904:	1b80      	subs	r0, r0, r6
 8005906:	42a0      	cmp	r0, r4
 8005908:	d9cf      	bls.n	80058aa <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800590a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800590c:	2200      	movs	r2, #0
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8005914:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005918:	2003      	movs	r0, #3
 800591a:	e7ed      	b.n	80058f8 <HAL_ADC_PollForConversion+0x68>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800591c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800591e:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005920:	f043 0320 	orr.w	r3, r3, #32
 8005924:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8005926:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800592a:	2001      	movs	r0, #1
}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8005930:	6803      	ldr	r3, [r0, #0]
 8005932:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop

08005938 <HAL_ADC_ConfigChannel>:
{
 8005938:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800593a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800593e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005940:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005942:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005944:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005946:	f000 8095 	beq.w	8005a74 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800594a:	680d      	ldr	r5, [r1, #0]
 800594c:	688a      	ldr	r2, [r1, #8]
 800594e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8005950:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005952:	2d09      	cmp	r5, #9
 8005954:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 8005956:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800595a:	d829      	bhi.n	80059b0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800595c:	691c      	ldr	r4, [r3, #16]
 800595e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8005962:	f04f 0c07 	mov.w	ip, #7
 8005966:	fa0c fc06 	lsl.w	ip, ip, r6
 800596a:	ea24 040c 	bic.w	r4, r4, ip
 800596e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005970:	691c      	ldr	r4, [r3, #16]
 8005972:	fa02 f606 	lsl.w	r6, r2, r6
 8005976:	4326      	orrs	r6, r4
 8005978:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800597a:	684e      	ldr	r6, [r1, #4]
 800597c:	2e06      	cmp	r6, #6
 800597e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8005982:	d82a      	bhi.n	80059da <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005986:	3a05      	subs	r2, #5
 8005988:	241f      	movs	r4, #31
 800598a:	4094      	lsls	r4, r2
 800598c:	ea21 0104 	bic.w	r1, r1, r4
 8005990:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005994:	fa07 f202 	lsl.w	r2, r7, r2
 8005998:	430a      	orrs	r2, r1
 800599a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800599c:	4a37      	ldr	r2, [pc, #220]	; (8005a7c <HAL_ADC_ConfigChannel+0x144>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02d      	beq.n	80059fe <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 80059a2:	2300      	movs	r3, #0
 80059a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80059a8:	4618      	mov	r0, r3
}
 80059aa:	b002      	add	sp, #8
 80059ac:	bcf0      	pop	{r4, r5, r6, r7}
 80059ae:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059b0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80059b4:	68dc      	ldr	r4, [r3, #12]
 80059b6:	3e1e      	subs	r6, #30
 80059b8:	f04f 0c07 	mov.w	ip, #7
 80059bc:	fa0c fc06 	lsl.w	ip, ip, r6
 80059c0:	ea24 040c 	bic.w	r4, r4, ip
 80059c4:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059c6:	68dc      	ldr	r4, [r3, #12]
 80059c8:	fa02 f606 	lsl.w	r6, r2, r6
 80059cc:	4326      	orrs	r6, r4
 80059ce:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 80059d0:	684e      	ldr	r6, [r1, #4]
 80059d2:	2e06      	cmp	r6, #6
 80059d4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80059d8:	d9d4      	bls.n	8005984 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80059da:	2e0c      	cmp	r6, #12
 80059dc:	d835      	bhi.n	8005a4a <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059de:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 80059e2:	211f      	movs	r1, #31
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	40a1      	lsls	r1, r4
 80059e8:	ea22 0201 	bic.w	r2, r2, r1
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059f0:	fa07 f204 	lsl.w	r2, r7, r4
 80059f4:	430a      	orrs	r2, r1
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059f8:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <HAL_ADC_ConfigChannel+0x144>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d1d1      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x6a>
 80059fe:	2d12      	cmp	r5, #18
 8005a00:	d031      	beq.n	8005a66 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a02:	f1a5 0310 	sub.w	r3, r5, #16
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d8cb      	bhi.n	80059a2 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_ADC_ConfigChannel+0x148>)
 8005a0c:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005a0e:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a14:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005a16:	d1c4      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a18:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <HAL_ADC_ConfigChannel+0x14c>)
 8005a1a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8005a1e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	0c9b      	lsrs	r3, r3, #18
 8005a2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0b2      	beq.n	80059a2 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8005a3c:	9b01      	ldr	r3, [sp, #4]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f9      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x104>
 8005a48:	e7ab      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a4a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8005a4e:	241f      	movs	r4, #31
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	408c      	lsls	r4, r1
 8005a54:	ea22 0204 	bic.w	r2, r2, r4
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a5a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005a5c:	fa07 f201 	lsl.w	r2, r7, r1
 8005a60:	4322      	orrs	r2, r4
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a64:	e79a      	b.n	800599c <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a66:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a6e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8005a72:	e796      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8005a74:	2002      	movs	r0, #2
}
 8005a76:	b002      	add	sp, #8
 8005a78:	bcf0      	pop	{r4, r5, r6, r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	40012000 	.word	0x40012000
 8005a80:	40012300 	.word	0x40012300
 8005a84:	20000004 	.word	0x20000004

08005a88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a88:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005a8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a8c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8005a90:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a92:	0200      	lsls	r0, r0, #8
 8005a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a98:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005aa0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005aa2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	e000ed00 	.word	0xe000ed00

08005aac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <HAL_NVIC_SetPriority+0x64>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ab4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ab6:	f1c3 0507 	rsb	r5, r3, #7
 8005aba:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005abc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ac0:	bf28      	it	cs
 8005ac2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ac4:	2c06      	cmp	r4, #6
 8005ac6:	d919      	bls.n	8005afc <HAL_NVIC_SetPriority+0x50>
 8005ac8:	3b03      	subs	r3, #3
 8005aca:	f04f 34ff 	mov.w	r4, #4294967295
 8005ace:	409c      	lsls	r4, r3
 8005ad0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	40aa      	lsls	r2, r5
 8005ada:	ea21 0102 	bic.w	r1, r1, r2
 8005ade:	fa01 f203 	lsl.w	r2, r1, r3
 8005ae2:	4322      	orrs	r2, r4
 8005ae4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	db0a      	blt.n	8005b02 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005af0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005af4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005af8:	bc30      	pop	{r4, r5}
 8005afa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005afc:	2400      	movs	r4, #0
 8005afe:	4623      	mov	r3, r4
 8005b00:	e7e8      	b.n	8005ad4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b02:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <HAL_NVIC_SetPriority+0x68>)
 8005b04:	f000 000f 	and.w	r0, r0, #15
 8005b08:	4403      	add	r3, r0
 8005b0a:	761a      	strb	r2, [r3, #24]
 8005b0c:	bc30      	pop	{r4, r5}
 8005b0e:	4770      	bx	lr
 8005b10:	e000ed00 	.word	0xe000ed00
 8005b14:	e000ecfc 	.word	0xe000ecfc

08005b18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	db07      	blt.n	8005b2c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b1c:	f000 011f 	and.w	r1, r0, #31
 8005b20:	2301      	movs	r3, #1
 8005b22:	0940      	lsrs	r0, r0, #5
 8005b24:	4a02      	ldr	r2, [pc, #8]	; (8005b30 <HAL_NVIC_EnableIRQ+0x18>)
 8005b26:	408b      	lsls	r3, r1
 8005b28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000e100 	.word	0xe000e100

08005b34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8005b38:	f7ff fd62 	bl	8005600 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b3c:	2c00      	cmp	r4, #0
 8005b3e:	d054      	beq.n	8005bea <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b40:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b42:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b44:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005b48:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8005b4a:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8005b50:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005b54:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8005b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b58:	e005      	b.n	8005b66 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b5a:	f7ff fd51 	bl	8005600 <HAL_GetTick>
 8005b5e:	1b40      	subs	r0, r0, r5
 8005b60:	2805      	cmp	r0, #5
 8005b62:	d83b      	bhi.n	8005bdc <HAL_DMA_Init+0xa8>
 8005b64:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	07d1      	lsls	r1, r2, #31
 8005b6a:	d4f6      	bmi.n	8005b5a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b6c:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b70:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b74:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b76:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8005b78:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b7a:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7c:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b80:	430a      	orrs	r2, r1
 8005b82:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b84:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b86:	4835      	ldr	r0, [pc, #212]	; (8005c5c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b88:	4332      	orrs	r2, r6
 8005b8a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b8c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b90:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b92:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b94:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b98:	d029      	beq.n	8005bee <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b9c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b9e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ba2:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	482e      	ldr	r0, [pc, #184]	; (8005c60 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8005ba8:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005baa:	3a10      	subs	r2, #16
 8005bac:	fba0 1202 	umull	r1, r2, r0, r2
 8005bb0:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bb2:	492c      	ldr	r1, [pc, #176]	; (8005c64 <HAL_DMA_Init+0x130>)
 8005bb4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bb8:	5c89      	ldrb	r1, [r1, r2]
 8005bba:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8005bc0:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bc2:	bf88      	it	hi
 8005bc4:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bc6:	223f      	movs	r2, #63	; 0x3f
 8005bc8:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8005bca:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bcc:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bce:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8005bd0:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd2:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd4:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005bd6:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bde:	2220      	movs	r2, #32
 8005be0:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005be2:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005be4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005bea:	2001      	movs	r0, #1
}
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bee:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 8005bf2:	4301      	orrs	r1, r0
 8005bf4:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8005bf6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8005bf8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005bfa:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8005bfc:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c00:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8005c04:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0cc      	beq.n	8005ba4 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c0a:	b17e      	cbz	r6, 8005c2c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c0c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8005c10:	d016      	beq.n	8005c40 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c12:	2d02      	cmp	r5, #2
 8005c14:	d903      	bls.n	8005c1e <HAL_DMA_Init+0xea>
 8005c16:	2d03      	cmp	r5, #3
 8005c18:	d1c4      	bne.n	8005ba4 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c1a:	01c2      	lsls	r2, r0, #7
 8005c1c:	d5c2      	bpl.n	8005ba4 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8005c1e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8005c24:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8005c26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8005c2c:	2d01      	cmp	r5, #1
 8005c2e:	d003      	beq.n	8005c38 <HAL_DMA_Init+0x104>
 8005c30:	d3f3      	bcc.n	8005c1a <HAL_DMA_Init+0xe6>
 8005c32:	2d02      	cmp	r5, #2
 8005c34:	d1b6      	bne.n	8005ba4 <HAL_DMA_Init+0x70>
 8005c36:	e7f0      	b.n	8005c1a <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c38:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8005c3c:	d1b2      	bne.n	8005ba4 <HAL_DMA_Init+0x70>
 8005c3e:	e7ee      	b.n	8005c1e <HAL_DMA_Init+0xea>
    switch (tmp)
 8005c40:	2d03      	cmp	r5, #3
 8005c42:	d8af      	bhi.n	8005ba4 <HAL_DMA_Init+0x70>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_DMA_Init+0x118>)
 8005c46:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c1f 	.word	0x08005c1f
 8005c50:	08005c1b 	.word	0x08005c1b
 8005c54:	08005c1f 	.word	0x08005c1f
 8005c58:	08005c39 	.word	0x08005c39
 8005c5c:	f010803f 	.word	0xf010803f
 8005c60:	aaaaaaab 	.word	0xaaaaaaab
 8005c64:	08012820 	.word	0x08012820

08005c68 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d037      	beq.n	8005cdc <HAL_DMA_DeInit+0x74>
 8005c6c:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005c6e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8005c72:	b2c0      	uxtb	r0, r0
 8005c74:	2802      	cmp	r0, #2
 8005c76:	d033      	beq.n	8005ce0 <HAL_DMA_DeInit+0x78>
  __HAL_DMA_DISABLE(hdma);
 8005c78:	681a      	ldr	r2, [r3, #0]
{
 8005c7a:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c7c:	b2d1      	uxtb	r1, r2
 8005c7e:	4d19      	ldr	r5, [pc, #100]	; (8005ce4 <HAL_DMA_DeInit+0x7c>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c80:	4c19      	ldr	r4, [pc, #100]	; (8005ce8 <HAL_DMA_DeInit+0x80>)
  __HAL_DMA_DISABLE(hdma);
 8005c82:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c84:	3910      	subs	r1, #16
 8005c86:	fba5 5101 	umull	r5, r1, r5, r1
 8005c8a:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8005c8c:	f020 0001 	bic.w	r0, r0, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c90:	5c65      	ldrb	r5, [r4, r1]
  __HAL_DMA_DISABLE(hdma);
 8005c92:	6010      	str	r0, [r2, #0]
 8005c94:	f422 747f 	bic.w	r4, r2, #1020	; 0x3fc
 8005c98:	f024 0403 	bic.w	r4, r4, #3
  if (stream_number > 3U)
 8005c9c:	2903      	cmp	r1, #3
  hdma->Instance->CR   = 0U;
 8005c9e:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ca2:	bf88      	it	hi
 8005ca4:	3404      	addhi	r4, #4
  hdma->Instance->FCR  = 0x00000021U;
 8005ca6:	2621      	movs	r6, #33	; 0x21
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ca8:	213f      	movs	r1, #63	; 0x3f
  hdma->Instance->CR   = 0U;
 8005caa:	6010      	str	r0, [r2, #0]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cac:	40a9      	lsls	r1, r5
  hdma->Instance->NDTR = 0U;
 8005cae:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8005cb0:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8005cb2:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8005cb4:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8005cb6:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 8005cb8:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cba:	65dd      	str	r5, [r3, #92]	; 0x5c
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cbc:	659c      	str	r4, [r3, #88]	; 0x58
  hdma->XferHalfCpltCallback = NULL;
 8005cbe:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8005cc2:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8005cc6:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005cca:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ccc:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8005cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8005cd8:	bc70      	pop	{r4, r5, r6}
 8005cda:	4770      	bx	lr
    return HAL_ERROR;
 8005cdc:	2001      	movs	r0, #1
 8005cde:	4770      	bx	lr
}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	aaaaaaab 	.word	0xaaaaaaab
 8005ce8:	08012820 	.word	0x08012820

08005cec <HAL_DMA_Start_IT>:
{
 8005cec:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8005cee:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005cf2:	2c01      	cmp	r4, #1
 8005cf4:	d035      	beq.n	8005d62 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cf6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cfa:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005cfc:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cfe:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8005d00:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d04:	d127      	bne.n	8005d56 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d06:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d08:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d0a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d0c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d10:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d12:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d14:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d16:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d1a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d1c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005d1e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8005d20:	bf0a      	itet	eq
 8005d22:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005d24:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005d26:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d28:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8005d2a:	bf18      	it	ne
 8005d2c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d2e:	233f      	movs	r3, #63	; 0x3f
 8005d30:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8005d32:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d34:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f043 0316 	orr.w	r3, r3, #22
 8005d3c:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005d3e:	b11a      	cbz	r2, 8005d48 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	f043 0308 	orr.w	r3, r3, #8
 8005d46:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2000      	movs	r0, #0
}
 8005d52:	bcf0      	pop	{r4, r5, r6, r7}
 8005d54:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8005d56:	2300      	movs	r3, #0
 8005d58:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8005d5c:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8005d5e:	2002      	movs	r0, #2
}
 8005d60:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005d62:	2002      	movs	r0, #2
}
 8005d64:	bcf0      	pop	{r4, r5, r6, r7}
 8005d66:	4770      	bx	lr

08005d68 <HAL_DMA_Abort>:
{
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d6c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005d6e:	f7ff fc47 	bl	8005600 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d72:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d006      	beq.n	8005d88 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005d7c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005d80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
}
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d88:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f022 0216 	bic.w	r2, r2, #22
 8005d92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d9e:	b331      	cbz	r1, 8005dee <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f022 0208 	bic.w	r2, r2, #8
 8005da6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005db0:	e005      	b.n	8005dbe <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005db2:	f7ff fc25 	bl	8005600 <HAL_GetTick>
 8005db6:	1b40      	subs	r0, r0, r5
 8005db8:	2805      	cmp	r0, #5
 8005dba:	d80f      	bhi.n	8005ddc <HAL_DMA_Abort+0x74>
 8005dbc:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f013 0301 	ands.w	r3, r3, #1
 8005dc4:	d1f5      	bne.n	8005db2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dc6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005dc8:	223f      	movs	r2, #63	; 0x3f
 8005dca:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8005dcc:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dce:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 8005dd0:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 8005dd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005dd6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ddc:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8005dde:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005de0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005de2:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005de4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005de8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d1d5      	bne.n	8005da0 <HAL_DMA_Abort+0x38>
 8005df4:	e7d8      	b.n	8005da8 <HAL_DMA_Abort+0x40>
 8005df6:	bf00      	nop

08005df8 <HAL_DMA_IRQHandler>:
{
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8005dfc:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dfe:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8005e00:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e02:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8005e04:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e06:	4965      	ldr	r1, [pc, #404]	; (8005f9c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e08:	2208      	movs	r2, #8
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	422a      	tst	r2, r5
{
 8005e0e:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e10:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e12:	d003      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e14:	6801      	ldr	r1, [r0, #0]
 8005e16:	6808      	ldr	r0, [r1, #0]
 8005e18:	0740      	lsls	r0, r0, #29
 8005e1a:	d459      	bmi.n	8005ed0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	422a      	tst	r2, r5
 8005e22:	d003      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e24:	6821      	ldr	r1, [r4, #0]
 8005e26:	6949      	ldr	r1, [r1, #20]
 8005e28:	0608      	lsls	r0, r1, #24
 8005e2a:	d474      	bmi.n	8005f16 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	422a      	tst	r2, r5
 8005e32:	d003      	beq.n	8005e3c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e34:	6821      	ldr	r1, [r4, #0]
 8005e36:	6809      	ldr	r1, [r1, #0]
 8005e38:	0789      	lsls	r1, r1, #30
 8005e3a:	d466      	bmi.n	8005f0a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	422a      	tst	r2, r5
 8005e42:	d003      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e44:	6821      	ldr	r1, [r4, #0]
 8005e46:	6808      	ldr	r0, [r1, #0]
 8005e48:	0700      	lsls	r0, r0, #28
 8005e4a:	d44b      	bmi.n	8005ee4 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	422a      	tst	r2, r5
 8005e52:	d014      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e54:	6821      	ldr	r1, [r4, #0]
 8005e56:	6808      	ldr	r0, [r1, #0]
 8005e58:	06c0      	lsls	r0, r0, #27
 8005e5a:	d510      	bpl.n	8005e7e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e5c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e5e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005e62:	2a05      	cmp	r2, #5
 8005e64:	d063      	beq.n	8005f2e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e66:	680b      	ldr	r3, [r1, #0]
 8005e68:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e6c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e6e:	d07e      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e70:	0319      	lsls	r1, r3, #12
 8005e72:	f140 8089 	bpl.w	8005f88 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8005e76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e78:	b10b      	cbz	r3, 8005e7e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e80:	b323      	cbz	r3, 8005ecc <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	d51a      	bpl.n	8005ebe <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e88:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8005e8a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005e90:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e92:	4943      	ldr	r1, [pc, #268]	; (8005fa0 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8005e94:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e98:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8005e9c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e9e:	0ab6      	lsrs	r6, r6, #10
 8005ea0:	e002      	b.n	8005ea8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	07db      	lsls	r3, r3, #31
 8005ea6:	d504      	bpl.n	8005eb2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	42b3      	cmp	r3, r6
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	d9f7      	bls.n	8005ea2 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8005eb2:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005eb4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8005eb6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005eba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005ebe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005ec0:	b123      	cbz	r3, 8005ecc <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8005ec2:	4620      	mov	r0, r4
}
 8005ec4:	b003      	add	sp, #12
 8005ec6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8005eca:	4718      	bx	r3
}
 8005ecc:	b003      	add	sp, #12
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	f020 0004 	bic.w	r0, r0, #4
 8005ed6:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ed8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005eda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	6562      	str	r2, [r4, #84]	; 0x54
 8005ee2:	e79b      	b.n	8005e1c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ee4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ee6:	680a      	ldr	r2, [r1, #0]
 8005ee8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eec:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eee:	d118      	bne.n	8005f22 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ef0:	05d2      	lsls	r2, r2, #23
 8005ef2:	d403      	bmi.n	8005efc <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ef4:	680a      	ldr	r2, [r1, #0]
 8005ef6:	f022 0208 	bic.w	r2, r2, #8
 8005efa:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005efc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d0a4      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8005f02:	4620      	mov	r0, r4
 8005f04:	4790      	blx	r2
 8005f06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f08:	e7a0      	b.n	8005e4c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f0a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f0e:	f042 0204 	orr.w	r2, r2, #4
 8005f12:	6562      	str	r2, [r4, #84]	; 0x54
 8005f14:	e792      	b.n	8005e3c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f16:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f1a:	f042 0202 	orr.w	r2, r2, #2
 8005f1e:	6562      	str	r2, [r4, #84]	; 0x54
 8005f20:	e784      	b.n	8005e2c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f22:	0311      	lsls	r1, r2, #12
 8005f24:	d5ea      	bpl.n	8005efc <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	d1ea      	bne.n	8005f02 <HAL_DMA_IRQHandler+0x10a>
 8005f2c:	e78e      	b.n	8005e4c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f2e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f30:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f32:	f022 0216 	bic.w	r2, r2, #22
 8005f36:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f38:	694a      	ldr	r2, [r1, #20]
 8005f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f3e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f40:	b338      	cbz	r0, 8005f92 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f42:	680a      	ldr	r2, [r1, #0]
 8005f44:	f022 0208 	bic.w	r2, r2, #8
 8005f48:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f4a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8005f4c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8005f52:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005f54:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f56:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005f58:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005f5c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005f60:	2900      	cmp	r1, #0
 8005f62:	d0b3      	beq.n	8005ecc <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8005f64:	4620      	mov	r0, r4
}
 8005f66:	b003      	add	sp, #12
 8005f68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8005f6c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f6e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005f72:	d180      	bne.n	8005e76 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f74:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005f76:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f78:	f022 0210 	bic.w	r2, r2, #16
 8005f7c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8005f7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005f82:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8005f86:	e776      	b.n	8005e76 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8005f88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f47f af75 	bne.w	8005e7a <HAL_DMA_IRQHandler+0x82>
 8005f90:	e775      	b.n	8005e7e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f92:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	d1d4      	bne.n	8005f42 <HAL_DMA_IRQHandler+0x14a>
 8005f98:	e7d7      	b.n	8005f4a <HAL_DMA_IRQHandler+0x152>
 8005f9a:	bf00      	nop
 8005f9c:	20000004 	.word	0x20000004
 8005fa0:	1b4e81b5 	.word	0x1b4e81b5

08005fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fa8:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fac:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 80061a4 <HAL_GPIO_Init+0x200>
{
 8005fb0:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fb2:	2400      	movs	r4, #0
 8005fb4:	e003      	b.n	8005fbe <HAL_GPIO_Init+0x1a>
 8005fb6:	3401      	adds	r4, #1
 8005fb8:	2c10      	cmp	r4, #16
 8005fba:	f000 808c 	beq.w	80060d6 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fc2:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d1f5      	bne.n	8005fb6 <HAL_GPIO_Init+0x12>
 8005fca:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fce:	f026 0910 	bic.w	r9, r6, #16
 8005fd2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	f109 37ff 	add.w	r7, r9, #4294967295
 8005fdc:	fa03 f30c 	lsl.w	r3, r3, ip
 8005fe0:	2f01      	cmp	r7, #1
 8005fe2:	ea6f 0303 	mvn.w	r3, r3
 8005fe6:	fa05 f50c 	lsl.w	r5, r5, ip
 8005fea:	d977      	bls.n	80060dc <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8005fec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fee:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ff0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8005ff2:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8005ff4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ff6:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ffa:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ffc:	fa05 f30c 	lsl.w	r3, r5, ip
 8006000:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8006002:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006004:	00f3      	lsls	r3, r6, #3
 8006006:	d5d6      	bpl.n	8005fb6 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006008:	4d5f      	ldr	r5, [pc, #380]	; (8006188 <HAL_GPIO_Init+0x1e4>)
 800600a:	2300      	movs	r3, #0
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006014:	646b      	str	r3, [r5, #68]	; 0x44
 8006016:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8006018:	f024 0303 	bic.w	r3, r4, #3
 800601c:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8006020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006024:	9501      	str	r5, [sp, #4]
 8006026:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800602a:	f004 0503 	and.w	r5, r4, #3
 800602e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006032:	4d56      	ldr	r5, [pc, #344]	; (800618c <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006034:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006036:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800603a:	270f      	movs	r7, #15
 800603c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006040:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006042:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006046:	d01f      	beq.n	8006088 <HAL_GPIO_Init+0xe4>
 8006048:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800604c:	42a8      	cmp	r0, r5
 800604e:	d076      	beq.n	800613e <HAL_GPIO_Init+0x19a>
 8006050:	4d4f      	ldr	r5, [pc, #316]	; (8006190 <HAL_GPIO_Init+0x1ec>)
 8006052:	42a8      	cmp	r0, r5
 8006054:	d079      	beq.n	800614a <HAL_GPIO_Init+0x1a6>
 8006056:	4d4f      	ldr	r5, [pc, #316]	; (8006194 <HAL_GPIO_Init+0x1f0>)
 8006058:	42a8      	cmp	r0, r5
 800605a:	d07c      	beq.n	8006156 <HAL_GPIO_Init+0x1b2>
 800605c:	4d4e      	ldr	r5, [pc, #312]	; (8006198 <HAL_GPIO_Init+0x1f4>)
 800605e:	42a8      	cmp	r0, r5
 8006060:	d07f      	beq.n	8006162 <HAL_GPIO_Init+0x1be>
 8006062:	4d4e      	ldr	r5, [pc, #312]	; (800619c <HAL_GPIO_Init+0x1f8>)
 8006064:	42a8      	cmp	r0, r5
 8006066:	f000 8082 	beq.w	800616e <HAL_GPIO_Init+0x1ca>
 800606a:	4d4d      	ldr	r5, [pc, #308]	; (80061a0 <HAL_GPIO_Init+0x1fc>)
 800606c:	42a8      	cmp	r0, r5
 800606e:	f000 8084 	beq.w	800617a <HAL_GPIO_Init+0x1d6>
 8006072:	f8df c134 	ldr.w	ip, [pc, #308]	; 80061a8 <HAL_GPIO_Init+0x204>
 8006076:	4560      	cmp	r0, ip
 8006078:	bf0c      	ite	eq
 800607a:	f04f 0c07 	moveq.w	ip, #7
 800607e:	f04f 0c08 	movne.w	ip, #8
 8006082:	fa0c f509 	lsl.w	r5, ip, r9
 8006086:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006088:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800608a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800608e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006090:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8006092:	bf54      	ite	pl
 8006094:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8006096:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8006098:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800609c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060a0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80060a2:	bf54      	ite	pl
 80060a4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80060a6:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80060a8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ac:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060b0:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80060b2:	bf54      	ite	pl
 80060b4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80060b6:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 80060b8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80060bc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060c0:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060c2:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80060c6:	bf54      	ite	pl
 80060c8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80060ca:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060cc:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80060ce:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060d2:	f47f af74 	bne.w	8005fbe <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 80060d6:	b003      	add	sp, #12
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80060dc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060de:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060e2:	68cf      	ldr	r7, [r1, #12]
 80060e4:	fa07 f70c 	lsl.w	r7, r7, ip
 80060e8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80060ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80060ee:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060f2:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060f6:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060fa:	40a7      	lsls	r7, r4
 80060fc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8006100:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006102:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006104:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006106:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006108:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800610c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800610e:	f47f af71 	bne.w	8005ff4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8006112:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8006116:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800611a:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800611e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006122:	00bf      	lsls	r7, r7, #2
 8006124:	f04f 0b0f 	mov.w	fp, #15
 8006128:	fa0b fb07 	lsl.w	fp, fp, r7
 800612c:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006130:	690d      	ldr	r5, [r1, #16]
 8006132:	40bd      	lsls	r5, r7
 8006134:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8006138:	f8c9 5020 	str.w	r5, [r9, #32]
 800613c:	e75a      	b.n	8005ff4 <HAL_GPIO_Init+0x50>
 800613e:	f04f 0c01 	mov.w	ip, #1
 8006142:	fa0c f509 	lsl.w	r5, ip, r9
 8006146:	432f      	orrs	r7, r5
 8006148:	e79e      	b.n	8006088 <HAL_GPIO_Init+0xe4>
 800614a:	f04f 0c02 	mov.w	ip, #2
 800614e:	fa0c f509 	lsl.w	r5, ip, r9
 8006152:	432f      	orrs	r7, r5
 8006154:	e798      	b.n	8006088 <HAL_GPIO_Init+0xe4>
 8006156:	f04f 0c03 	mov.w	ip, #3
 800615a:	fa0c f509 	lsl.w	r5, ip, r9
 800615e:	432f      	orrs	r7, r5
 8006160:	e792      	b.n	8006088 <HAL_GPIO_Init+0xe4>
 8006162:	f04f 0c04 	mov.w	ip, #4
 8006166:	fa0c f509 	lsl.w	r5, ip, r9
 800616a:	432f      	orrs	r7, r5
 800616c:	e78c      	b.n	8006088 <HAL_GPIO_Init+0xe4>
 800616e:	f04f 0c05 	mov.w	ip, #5
 8006172:	fa0c f509 	lsl.w	r5, ip, r9
 8006176:	432f      	orrs	r7, r5
 8006178:	e786      	b.n	8006088 <HAL_GPIO_Init+0xe4>
 800617a:	f04f 0c06 	mov.w	ip, #6
 800617e:	fa0c f509 	lsl.w	r5, ip, r9
 8006182:	432f      	orrs	r7, r5
 8006184:	e780      	b.n	8006088 <HAL_GPIO_Init+0xe4>
 8006186:	bf00      	nop
 8006188:	40023800 	.word	0x40023800
 800618c:	40020000 	.word	0x40020000
 8006190:	40020800 	.word	0x40020800
 8006194:	40020c00 	.word	0x40020c00
 8006198:	40021000 	.word	0x40021000
 800619c:	40021400 	.word	0x40021400
 80061a0:	40021800 	.word	0x40021800
 80061a4:	40013c00 	.word	0x40013c00
 80061a8:	40021c00 	.word	0x40021c00

080061ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b0:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80061b2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80062f0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061b6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80062f4 <HAL_GPIO_DeInit+0x148>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80061ba:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80062f8 <HAL_GPIO_DeInit+0x14c>
 80061be:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80062fc <HAL_GPIO_DeInit+0x150>
 80061c2:	e002      	b.n	80061ca <HAL_GPIO_DeInit+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061c4:	3301      	adds	r3, #1
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d06e      	beq.n	80062a8 <HAL_GPIO_DeInit+0xfc>
    ioposition = 0x01U << position;
 80061ca:	2401      	movs	r4, #1
 80061cc:	fa04 f503 	lsl.w	r5, r4, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80061d0:	ea05 0601 	and.w	r6, r5, r1
    if(iocurrent == ioposition)
 80061d4:	42b5      	cmp	r5, r6
 80061d6:	d1f5      	bne.n	80061c4 <HAL_GPIO_DeInit+0x18>
 80061d8:	f023 0703 	bic.w	r7, r3, #3
 80061dc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80061e0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80061e4:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80061e8:	f8d7 b008 	ldr.w	fp, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80061ec:	0092      	lsls	r2, r2, #2
 80061ee:	f04f 0c0f 	mov.w	ip, #15
 80061f2:	fa0c fc02 	lsl.w	ip, ip, r2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80061f6:	4540      	cmp	r0, r8
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80061f8:	ea0c 0b0b 	and.w	fp, ip, fp
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80061fc:	d016      	beq.n	800622c <HAL_GPIO_DeInit+0x80>
 80061fe:	4548      	cmp	r0, r9
 8006200:	d011      	beq.n	8006226 <HAL_GPIO_DeInit+0x7a>
 8006202:	4550      	cmp	r0, sl
 8006204:	d052      	beq.n	80062ac <HAL_GPIO_DeInit+0x100>
 8006206:	4c35      	ldr	r4, [pc, #212]	; (80062dc <HAL_GPIO_DeInit+0x130>)
 8006208:	42a0      	cmp	r0, r4
 800620a:	d053      	beq.n	80062b4 <HAL_GPIO_DeInit+0x108>
 800620c:	4c34      	ldr	r4, [pc, #208]	; (80062e0 <HAL_GPIO_DeInit+0x134>)
 800620e:	42a0      	cmp	r0, r4
 8006210:	d054      	beq.n	80062bc <HAL_GPIO_DeInit+0x110>
 8006212:	4c34      	ldr	r4, [pc, #208]	; (80062e4 <HAL_GPIO_DeInit+0x138>)
 8006214:	42a0      	cmp	r0, r4
 8006216:	d055      	beq.n	80062c4 <HAL_GPIO_DeInit+0x118>
 8006218:	4c33      	ldr	r4, [pc, #204]	; (80062e8 <HAL_GPIO_DeInit+0x13c>)
 800621a:	42a0      	cmp	r0, r4
 800621c:	d056      	beq.n	80062cc <HAL_GPIO_DeInit+0x120>
 800621e:	4c33      	ldr	r4, [pc, #204]	; (80062ec <HAL_GPIO_DeInit+0x140>)
 8006220:	42a0      	cmp	r0, r4
 8006222:	d057      	beq.n	80062d4 <HAL_GPIO_DeInit+0x128>
 8006224:	2408      	movs	r4, #8
 8006226:	fa04 f202 	lsl.w	r2, r4, r2
 800622a:	e000      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 800622c:	2200      	movs	r2, #0
 800622e:	4593      	cmp	fp, r2
 8006230:	d118      	bne.n	8006264 <HAL_GPIO_DeInit+0xb8>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006232:	f8de 2000 	ldr.w	r2, [lr]
 8006236:	43f6      	mvns	r6, r6
 8006238:	4032      	ands	r2, r6
 800623a:	f8ce 2000 	str.w	r2, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800623e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006242:	4032      	ands	r2, r6
 8006244:	f8ce 2004 	str.w	r2, [lr, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006248:	f8de 2008 	ldr.w	r2, [lr, #8]
 800624c:	4032      	ands	r2, r6
 800624e:	f8ce 2008 	str.w	r2, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006252:	f8de 200c 	ldr.w	r2, [lr, #12]
 8006256:	4016      	ands	r6, r2
 8006258:	f8ce 600c 	str.w	r6, [lr, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	ea22 020c 	bic.w	r2, r2, ip
 8006262:	60ba      	str	r2, [r7, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006264:	005c      	lsls	r4, r3, #1
 8006266:	2203      	movs	r2, #3
 8006268:	40a2      	lsls	r2, r4
 800626a:	6804      	ldr	r4, [r0, #0]
 800626c:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800626e:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006270:	4014      	ands	r4, r2
 8006272:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006276:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006278:	f003 0407 	and.w	r4, r3, #7
 800627c:	6a37      	ldr	r7, [r6, #32]
 800627e:	00a4      	lsls	r4, r4, #2
 8006280:	f04f 0c0f 	mov.w	ip, #15
 8006284:	fa0c f404 	lsl.w	r4, ip, r4
 8006288:	ea27 0404 	bic.w	r4, r7, r4
 800628c:	6234      	str	r4, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800628e:	68c4      	ldr	r4, [r0, #12]
 8006290:	4014      	ands	r4, r2
 8006292:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006294:	6844      	ldr	r4, [r0, #4]
 8006296:	ea24 0505 	bic.w	r5, r4, r5
 800629a:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800629c:	6884      	ldr	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800629e:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062a0:	4022      	ands	r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062a2:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062a4:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062a6:	d190      	bne.n	80061ca <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	2402      	movs	r4, #2
 80062ae:	fa04 f202 	lsl.w	r2, r4, r2
 80062b2:	e7bc      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 80062b4:	2403      	movs	r4, #3
 80062b6:	fa04 f202 	lsl.w	r2, r4, r2
 80062ba:	e7b8      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 80062bc:	2404      	movs	r4, #4
 80062be:	fa04 f202 	lsl.w	r2, r4, r2
 80062c2:	e7b4      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 80062c4:	2405      	movs	r4, #5
 80062c6:	fa04 f202 	lsl.w	r2, r4, r2
 80062ca:	e7b0      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 80062cc:	2406      	movs	r4, #6
 80062ce:	fa04 f202 	lsl.w	r2, r4, r2
 80062d2:	e7ac      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 80062d4:	2407      	movs	r4, #7
 80062d6:	fa04 f202 	lsl.w	r2, r4, r2
 80062da:	e7a8      	b.n	800622e <HAL_GPIO_DeInit+0x82>
 80062dc:	40020c00 	.word	0x40020c00
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40021400 	.word	0x40021400
 80062e8:	40021800 	.word	0x40021800
 80062ec:	40021c00 	.word	0x40021c00
 80062f0:	40020000 	.word	0x40020000
 80062f4:	40013c00 	.word	0x40013c00
 80062f8:	40020400 	.word	0x40020400
 80062fc:	40020800 	.word	0x40020800

08006300 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006300:	6903      	ldr	r3, [r0, #16]
 8006302:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006304:	bf14      	ite	ne
 8006306:	2001      	movne	r0, #1
 8006308:	2000      	moveq	r0, #0
 800630a:	4770      	bx	lr

0800630c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800630c:	b902      	cbnz	r2, 8006310 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800630e:	0409      	lsls	r1, r1, #16
 8006310:	6181      	str	r1, [r0, #24]
  }
}
 8006312:	4770      	bx	lr

08006314 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006314:	6943      	ldr	r3, [r0, #20]
 8006316:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800631a:	bf08      	it	eq
 800631c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800631e:	6181      	str	r1, [r0, #24]
  }
}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop

08006324 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006328:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 800632c:	b084      	sub	sp, #16
  __HAL_LOCK(hhcd);
 800632e:	2c01      	cmp	r4, #1
{
 8006330:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8006334:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8006338:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800633c:	d02b      	beq.n	8006396 <HAL_HCD_HC_Init+0x72>
 800633e:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 8006340:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8006344:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006348:	f04f 0800 	mov.w	r8, #0
  __HAL_LOCK(hhcd);
 800634c:	2001      	movs	r0, #1
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800634e:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8006352:	f885 02b8 	strb.w	r0, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006356:	f002 067f 	and.w	r6, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 800635a:	bf08      	it	eq
 800635c:	4640      	moveq	r0, r8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800635e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006362:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8006366:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800636a:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800636e:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006372:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 8006376:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 800637a:	6828      	ldr	r0, [r5, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800637c:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  status =  USB_HC_Init(hhcd->Instance,
 8006380:	e9cd e901 	strd	lr, r9, [sp, #4]
 8006384:	f8cd c000 	str.w	ip, [sp]
 8006388:	f002 fc6e 	bl	8008c68 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800638c:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 8006390:	b004      	add	sp, #16
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8006396:	2002      	movs	r0, #2
}
 8006398:	b004      	add	sp, #16
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	bf00      	nop

080063a0 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80063a0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d00b      	beq.n	80063c0 <HAL_HCD_HC_Halt+0x20>
{
 80063a8:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80063aa:	2301      	movs	r3, #1
 80063ac:	4604      	mov	r4, r0
 80063ae:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	f002 fdd8 	bl	8008f68 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80063b8:	2000      	movs	r0, #0
 80063ba:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 80063be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80063c0:	2002      	movs	r0, #2
}
 80063c2:	4770      	bx	lr

080063c4 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d04a      	beq.n	800645e <HAL_HCD_Init+0x9a>
{
 80063c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80063cc:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80063d0:	6804      	ldr	r4, [r0, #0]
{
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	4607      	mov	r7, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80063d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d039      	beq.n	8006452 <HAL_HCD_Init+0x8e>
 80063de:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 80063e0:	2303      	movs	r3, #3
 80063e2:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80063e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063e8:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80063ea:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 80063ee:	bf08      	it	eq
 80063f0:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80063f2:	f002 fb05 	bl	8008a00 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063f6:	f854 6b10 	ldr.w	r6, [r4], #16
 80063fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063fc:	466d      	mov	r5, sp
 80063fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006408:	e885 0003 	stmia.w	r5, {r0, r1}
 800640c:	f107 0804 	add.w	r8, r7, #4
 8006410:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8006414:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006416:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006418:	f002 faa6 	bl	8008968 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800641c:	2101      	movs	r1, #1
 800641e:	6838      	ldr	r0, [r7, #0]
 8006420:	f002 faf6 	bl	8008a10 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006424:	f856 cb10 	ldr.w	ip, [r6], #16
 8006428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800642a:	466d      	mov	r5, sp
 800642c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800642e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006432:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006436:	e885 0003 	stmia.w	r5, {r0, r1}
 800643a:	4660      	mov	r0, ip
 800643c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8006440:	f002 fb7a 	bl	8008b38 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8006444:	2301      	movs	r3, #1
  return HAL_OK;
 8006446:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8006448:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 800644c:	b00a      	add	sp, #40	; 0x28
 800644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8006452:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8006456:	f009 fbe5 	bl	800fc24 <HAL_HCD_MspInit>
 800645a:	6838      	ldr	r0, [r7, #0]
 800645c:	e7c0      	b.n	80063e0 <HAL_HCD_Init+0x1c>
    return HAL_ERROR;
 800645e:	2001      	movs	r0, #1
}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006464:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8006466:	008c      	lsls	r4, r1, #2
 8006468:	1865      	adds	r5, r4, r1
 800646a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 800646e:	f89d c014 	ldrb.w	ip, [sp, #20]
 8006472:	9f06      	ldr	r7, [sp, #24]
 8006474:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8006478:	f89d e020 	ldrb.w	lr, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 800647c:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006480:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 8006484:	f1bc 0f00 	cmp.w	ip, #0
 8006488:	d122      	bne.n	80064d0 <HAL_HCD_HC_SubmitRequest+0x6c>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800648a:	f04f 0c03 	mov.w	ip, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800648e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 8006490:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006494:	f885 c042 	strb.w	ip, [r5, #66]	; 0x42
  switch (ep_type)
 8006498:	d024      	beq.n	80064e4 <HAL_HCD_HC_SubmitRequest+0x80>
 800649a:	4563      	cmp	r3, ip
 800649c:	d022      	beq.n	80064e4 <HAL_HCD_HC_SubmitRequest+0x80>
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d02b      	beq.n	80064fa <HAL_HCD_HC_SubmitRequest+0x96>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80064a2:	1863      	adds	r3, r4, r1
 80064a4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064a8:	2228      	movs	r2, #40	; 0x28
  hhcd->hc[ch_num].ch_num = ch_num;
 80064aa:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80064ae:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064b0:	fb02 0101 	mla	r1, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 80064b4:	e9c3 7611 	strd	r7, r6, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064b8:	7c02      	ldrb	r2, [r0, #16]
 80064ba:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80064bc:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80064c0:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80064c2:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064c6:	3138      	adds	r1, #56	; 0x38
}
 80064c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064cc:	f002 bc6c 	b.w	8008da8 <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064d0:	f04f 0e02 	mov.w	lr, #2
 80064d4:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  switch (ep_type)
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d8e2      	bhi.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
 80064dc:	e8df f003 	tbb	[pc, r3]
 80064e0:	02020d1c 	.word	0x02020d1c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064e4:	1863      	adds	r3, r4, r1
 80064e6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 80064ea:	b96a      	cbnz	r2, 8006508 <HAL_HCD_HC_SubmitRequest+0xa4>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064ec:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 80064f0:	b13d      	cbz	r5, 8006502 <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f8:	e7d3      	b.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064fa:	1863      	adds	r3, r4, r1
 80064fc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8006506:	e7cc      	b.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006508:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800650c:	2a00      	cmp	r2, #0
 800650e:	d0f8      	beq.n	8006502 <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006510:	2202      	movs	r2, #2
 8006512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006516:	e7c4      	b.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006518:	f1bc 0f01 	cmp.w	ip, #1
 800651c:	d1c1      	bne.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
 800651e:	2a00      	cmp	r2, #0
 8006520:	d1bf      	bne.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8006522:	1863      	adds	r3, r4, r1
 8006524:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (length == 0U)
 8006528:	b946      	cbnz	r6, 800653c <HAL_HCD_HC_SubmitRequest+0xd8>
          hhcd->hc[ch_num].toggle_out = 1U;
 800652a:	f883 c051 	strb.w	ip, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800652e:	1863      	adds	r3, r4, r1
 8006530:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653a:	e7b2      	b.n	80064a2 <HAL_HCD_HC_SubmitRequest+0x3e>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800653c:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8006540:	2d00      	cmp	r5, #0
 8006542:	d0de      	beq.n	8006502 <HAL_HCD_HC_SubmitRequest+0x9e>
 8006544:	e7f3      	b.n	800652e <HAL_HCD_HC_SubmitRequest+0xca>
 8006546:	bf00      	nop

08006548 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800654c:	6805      	ldr	r5, [r0, #0]
{
 800654e:	b085      	sub	sp, #20
 8006550:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006552:	4628      	mov	r0, r5
 8006554:	f002 fa8a 	bl	8008a6c <USB_GetMode>
 8006558:	2801      	cmp	r0, #1
 800655a:	d002      	beq.n	8006562 <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 800655c:	b005      	add	sp, #20
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	f002 fa7e 	bl	8008a64 <USB_ReadInterrupts>
 8006568:	2800      	cmp	r0, #0
 800656a:	d0f7      	beq.n	800655c <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	f002 fa79 	bl	8008a64 <USB_ReadInterrupts>
 8006572:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006576:	6820      	ldr	r0, [r4, #0]
 8006578:	bf1c      	itt	ne
 800657a:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800657e:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006580:	f002 fa70 	bl	8008a64 <USB_ReadInterrupts>
 8006584:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	bf1c      	itt	ne
 800658c:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
 8006590:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006592:	f002 fa67 	bl	8008a64 <USB_ReadInterrupts>
 8006596:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	bf1c      	itt	ne
 800659e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80065a2:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80065a4:	f002 fa5e 	bl	8008a64 <USB_ReadInterrupts>
 80065a8:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	bf1c      	itt	ne
 80065b0:	2302      	movne	r3, #2
 80065b2:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80065b4:	f002 fa56 	bl	8008a64 <USB_ReadInterrupts>
 80065b8:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80065bc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80065be:	d150      	bne.n	8006662 <HAL_HCD_IRQHandler+0x11a>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80065c0:	f002 fa50 	bl	8008a64 <USB_ReadInterrupts>
 80065c4:	01c2      	lsls	r2, r0, #7
 80065c6:	f100 80ea 	bmi.w	800679e <HAL_HCD_IRQHandler+0x256>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	f002 fa4a 	bl	8008a64 <USB_ReadInterrupts>
 80065d0:	0703      	lsls	r3, r0, #28
 80065d2:	f100 80dd 	bmi.w	8006790 <HAL_HCD_IRQHandler+0x248>
 80065d6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80065d8:	f002 fa44 	bl	8008a64 <USB_ReadInterrupts>
 80065dc:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80065e0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80065e2:	d14e      	bne.n	8006682 <HAL_HCD_IRQHandler+0x13a>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80065e4:	f002 fa3e 	bl	8008a64 <USB_ReadInterrupts>
 80065e8:	06c3      	lsls	r3, r0, #27
 80065ea:	d5b7      	bpl.n	800655c <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065ec:	6825      	ldr	r5, [r4, #0]
 80065ee:	69ab      	ldr	r3, [r5, #24]
 80065f0:	f023 0310 	bic.w	r3, r3, #16
 80065f4:	61ab      	str	r3, [r5, #24]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80065f6:	6a2e      	ldr	r6, [r5, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80065f8:	f3c6 4243 	ubfx	r2, r6, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;

  switch (pktsts)
 80065fc:	2a02      	cmp	r2, #2
 80065fe:	d12b      	bne.n	8006658 <HAL_HCD_IRQHandler+0x110>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006600:	f3c6 180a 	ubfx	r8, r6, #4, #11
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006604:	f1b8 0f00 	cmp.w	r8, #0
 8006608:	d026      	beq.n	8006658 <HAL_HCD_IRQHandler+0x110>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800660a:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800660e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8006612:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8006616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006618:	b1f1      	cbz	r1, 8006658 <HAL_HCD_IRQHandler+0x110>
      {
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800661a:	4642      	mov	r2, r8
 800661c:	4628      	mov	r0, r5
 800661e:	f002 fa0f 	bl	8008a40 <USB_ReadPacket>

        /*manage multiple Xfer */
        hhcd->hc[ch_num].xfer_buff += pktcnt;
        hhcd->hc[ch_num].xfer_count  += pktcnt;

        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006622:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8006626:	0173      	lsls	r3, r6, #5
 8006628:	18e9      	adds	r1, r5, r3
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800662a:	6c78      	ldr	r0, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800662c:	690e      	ldr	r6, [r1, #16]
 800662e:	4ac1      	ldr	r2, [pc, #772]	; (8006934 <HAL_HCD_IRQHandler+0x3ec>)
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006630:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006632:	4440      	add	r0, r8
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006634:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006636:	4032      	ands	r2, r6
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006638:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800663a:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800663c:	b15a      	cbz	r2, 8006656 <HAL_HCD_IRQHandler+0x10e>
        {
          /* re-activate the channel when more packets are expected */
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800663e:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006640:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006644:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006648:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800664a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800664e:	f083 0301 	eor.w	r3, r3, #1
 8006652:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006656:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006658:	69ab      	ldr	r3, [r5, #24]
 800665a:	f043 0310 	orr.w	r3, r3, #16
 800665e:	61ab      	str	r3, [r5, #24]
 8006660:	e77c      	b.n	800655c <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006662:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006666:	6143      	str	r3, [r0, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006668:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800666c:	07d9      	lsls	r1, r3, #31
 800666e:	d4a7      	bmi.n	80065c0 <HAL_HCD_IRQHandler+0x78>
        HAL_HCD_Disconnect_Callback(hhcd);
 8006670:	4620      	mov	r0, r4
 8006672:	f009 fb29 	bl	800fcc8 <HAL_HCD_Disconnect_Callback>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006676:	2101      	movs	r1, #1
 8006678:	6820      	ldr	r0, [r4, #0]
 800667a:	f002 f9fb 	bl	8008a74 <USB_InitFSLSPClkSel>
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	e79e      	b.n	80065c0 <HAL_HCD_IRQHandler+0x78>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006682:	f002 fc6b 	bl	8008f5c <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006686:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006688:	4680      	mov	r8, r0
 800668a:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800668c:	2900      	cmp	r1, #0
 800668e:	f000 80c0 	beq.w	8006812 <HAL_HCD_IRQHandler+0x2ca>
 8006692:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8006696:	2600      	movs	r6, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006698:	f04f 0904 	mov.w	r9, #4
 800669c:	e03e      	b.n	800671c <HAL_HCD_IRQHandler+0x1d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800669e:	0759      	lsls	r1, r3, #29
 80066a0:	f140 80bb 	bpl.w	800681a <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80066a4:	f8c7 9008 	str.w	r9, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f043 0302 	orr.w	r3, r3, #2
 80066ae:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	059b      	lsls	r3, r3, #22
 80066b4:	f100 80f6 	bmi.w	80068a4 <HAL_HCD_IRQHandler+0x35c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	07d8      	lsls	r0, r3, #31
 80066bc:	f140 80bf 	bpl.w	800683e <HAL_HCD_IRQHandler+0x2f6>
    if (hhcd->Init.dma_enable != 0U)
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 8145 	bne.w	8006952 <HAL_HCD_IRQHandler+0x40a>
 80066c8:	ea4f 038a 	mov.w	r3, sl, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 80066cc:	eb03 010a 	add.w	r1, r3, sl
 80066d0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066d4:	f04f 0c00 	mov.w	ip, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80066d8:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066da:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 80066de:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80066e2:	60b8      	str	r0, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80066e4:	f891 c03f 	ldrb.w	ip, [r1, #63]	; 0x3f
 80066e8:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 80066ec:	f000 8124 	beq.w	8006938 <HAL_HCD_IRQHandler+0x3f0>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80066f0:	f1bc 0f03 	cmp.w	ip, #3
 80066f4:	f000 825f 	beq.w	8006bb6 <HAL_HCD_IRQHandler+0x66e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80066f8:	f1bc 0f01 	cmp.w	ip, #1
 80066fc:	f000 826b 	beq.w	8006bd6 <HAL_HCD_IRQHandler+0x68e>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006700:	4453      	add	r3, sl
 8006702:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006706:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800670a:	f082 0201 	eor.w	r2, r2, #1
 800670e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	68a1      	ldr	r1, [r4, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006716:	3601      	adds	r6, #1
 8006718:	42b1      	cmp	r1, r6
 800671a:	d97a      	bls.n	8006812 <HAL_HCD_IRQHandler+0x2ca>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800671c:	f006 030f 	and.w	r3, r6, #15
 8006720:	fa28 f303 	lsr.w	r3, r8, r3
 8006724:	07df      	lsls	r7, r3, #31
 8006726:	d5f6      	bpl.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
 8006728:	0173      	lsls	r3, r6, #5
 800672a:	fa5f fa86 	uxtb.w	sl, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800672e:	595b      	ldr	r3, [r3, r5]
 8006730:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
 8006734:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8006738:	eb02 070b 	add.w	r7, r2, fp
 800673c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006740:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006742:	d1ac      	bne.n	800669e <HAL_HCD_IRQHandler+0x156>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006744:	f013 0304 	ands.w	r3, r3, #4
 8006748:	d172      	bne.n	8006830 <HAL_HCD_IRQHandler+0x2e8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800674a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800674e:	f01c 0c20 	ands.w	ip, ip, #32
 8006752:	f000 80b5 	beq.w	80068c0 <HAL_HCD_IRQHandler+0x378>
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006756:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800675a:	f04f 0c20 	mov.w	ip, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 800675e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006762:	f8c7 c008 	str.w	ip, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006766:	f892 c03d 	ldrb.w	ip, [r2, #61]	; 0x3d
 800676a:	f1bc 0f01 	cmp.w	ip, #1
 800676e:	d1d2      	bne.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].do_ping = 0U;
 8006770:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006774:	68fb      	ldr	r3, [r7, #12]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006776:	f04f 0c02 	mov.w	ip, #2
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800677a:	ea43 030c 	orr.w	r3, r3, ip
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800677e:	4651      	mov	r1, sl
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006780:	f882 c05c 	strb.w	ip, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006784:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006786:	f002 fbef 	bl	8008f68 <USB_HC_Halt>
 800678a:	6820      	ldr	r0, [r4, #0]
 800678c:	68a1      	ldr	r1, [r4, #8]
 800678e:	e7c2      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
      HAL_HCD_SOF_Callback(hhcd);
 8006790:	4620      	mov	r0, r4
 8006792:	f009 fa91 	bl	800fcb8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006796:	6820      	ldr	r0, [r4, #0]
 8006798:	2308      	movs	r3, #8
 800679a:	6143      	str	r3, [r0, #20]
 800679c:	e71c      	b.n	80065d8 <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80067a0:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80067a4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80067a6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80067aa:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067b2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80067b4:	9b02      	ldr	r3, [sp, #8]
 80067b6:	079b      	lsls	r3, r3, #30
 80067b8:	d507      	bpl.n	80067ca <HAL_HCD_IRQHandler+0x282>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	07df      	lsls	r7, r3, #31
 80067be:	f100 8135 	bmi.w	8006a2c <HAL_HCD_IRQHandler+0x4e4>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	0718      	lsls	r0, r3, #28
 80067ce:	d515      	bpl.n	80067fc <HAL_HCD_IRQHandler+0x2b4>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	f043 0308 	orr.w	r3, r3, #8
 80067d6:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	0759      	lsls	r1, r3, #29
 80067dc:	f140 812a 	bpl.w	8006a34 <HAL_HCD_IRQHandler+0x4ec>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80067e0:	69a1      	ldr	r1, [r4, #24]
 80067e2:	2902      	cmp	r1, #2
 80067e4:	f000 812d 	beq.w	8006a42 <HAL_HCD_IRQHandler+0x4fa>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80067e8:	68e3      	ldr	r3, [r4, #12]
 80067ea:	2b01      	cmp	r3, #1
        {
          USBx_HOST->HFIR = 60000U;
 80067ec:	bf04      	itt	eq
 80067ee:	f64e 2260 	movweq	r2, #60000	; 0xea60
 80067f2:	f8c6 2404 	streq.w	r2, [r6, #1028]	; 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80067f6:	4620      	mov	r0, r4
 80067f8:	f009 fa6e 	bl	800fcd8 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80067fc:	9b02      	ldr	r3, [sp, #8]
 80067fe:	069a      	lsls	r2, r3, #26
 8006800:	d503      	bpl.n	800680a <HAL_HCD_IRQHandler+0x2c2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006802:	9b03      	ldr	r3, [sp, #12]
 8006804:	f043 0320 	orr.w	r3, r3, #32
 8006808:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
 8006810:	e6db      	b.n	80065ca <HAL_HCD_IRQHandler+0x82>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006816:	6143      	str	r3, [r0, #20]
 8006818:	e6e4      	b.n	80065e4 <HAL_HCD_IRQHandler+0x9c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	05db      	lsls	r3, r3, #23
 800681e:	f100 80f0 	bmi.w	8006a02 <HAL_HCD_IRQHandler+0x4ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	0699      	lsls	r1, r3, #26
 8006826:	f140 80ce 	bpl.w	80069c6 <HAL_HCD_IRQHandler+0x47e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800682a:	2320      	movs	r3, #32
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	e73f      	b.n	80066b0 <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006830:	f8c7 9008 	str.w	r9, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f043 0302 	orr.w	r3, r3, #2
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e76b      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	0799      	lsls	r1, r3, #30
 8006842:	f140 8094 	bpl.w	800696e <HAL_HCD_IRQHandler+0x426>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006846:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800684a:	eb03 000a 	add.w	r0, r3, sl
 800684e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006852:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006856:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800685a:	f02c 0c02 	bic.w	ip, ip, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800685e:	2901      	cmp	r1, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006860:	f8c7 c00c 	str.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006864:	f000 80ea 	beq.w	8006a3c <HAL_HCD_IRQHandler+0x4f4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006868:	2905      	cmp	r1, #5
 800686a:	f000 80e7 	beq.w	8006a3c <HAL_HCD_IRQHandler+0x4f4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800686e:	2906      	cmp	r1, #6
 8006870:	f000 816e 	beq.w	8006b50 <HAL_HCD_IRQHandler+0x608>
 8006874:	2908      	cmp	r1, #8
 8006876:	f000 816b 	beq.w	8006b50 <HAL_HCD_IRQHandler+0x608>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800687a:	2903      	cmp	r1, #3
 800687c:	f000 81df 	beq.w	8006c3e <HAL_HCD_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 8006880:	2328      	movs	r3, #40	; 0x28
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006882:	2907      	cmp	r1, #7
      hhcd->hc[ch_num].ErrCnt++;
 8006884:	fb03 430a 	mla	r3, r3, sl, r4
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006888:	f000 81fa 	beq.w	8006c80 <HAL_HCD_IRQHandler+0x738>
 800688c:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006890:	2302      	movs	r3, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006892:	460a      	mov	r2, r1
 8006894:	4620      	mov	r0, r4
 8006896:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006898:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800689a:	f009 fa19 	bl	800fcd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	68a1      	ldr	r1, [r4, #8]
 80068a2:	e738      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068a4:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068a6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068a8:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ac:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ae:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068b0:	f002 fb5a 	bl	8008f68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80068b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b8:	60bb      	str	r3, [r7, #8]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	68a1      	ldr	r1, [r4, #8]
 80068be:	e72a      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	065b      	lsls	r3, r3, #25
 80068c4:	f100 80c8 	bmi.w	8006a58 <HAL_HCD_IRQHandler+0x510>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80068ce:	f040 810f 	bne.w	8006af0 <HAL_HCD_IRQHandler+0x5a8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80068d2:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80068d6:	f01c 0f01 	tst.w	ip, #1
 80068da:	f040 8158 	bne.w	8006b8e <HAL_HCD_IRQHandler+0x646>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f013 0308 	ands.w	r3, r3, #8
 80068e4:	f040 8187 	bne.w	8006bf6 <HAL_HCD_IRQHandler+0x6ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80068e8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80068ec:	f01c 0f10 	tst.w	ip, #16
 80068f0:	f000 80c9 	beq.w	8006a86 <HAL_HCD_IRQHandler+0x53e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80068f4:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 80068f8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hhcd->hc[ch_num].state = HC_NAK;
 80068fc:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80068fe:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006900:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8006904:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006908:	b943      	cbnz	r3, 800691c <HAL_HCD_IRQHandler+0x3d4>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800690a:	2328      	movs	r3, #40	; 0x28
 800690c:	fb03 430a 	mla	r3, r3, sl, r4
 8006910:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006914:	b912      	cbnz	r2, 800691c <HAL_HCD_IRQHandler+0x3d4>
        hhcd->hc[ch_num].do_ping = 1U;
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006922:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006924:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006926:	f002 fb1f 	bl	8008f68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800692a:	2310      	movs	r3, #16
 800692c:	60bb      	str	r3, [r7, #8]
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	68a1      	ldr	r1, [r4, #8]
 8006932:	e6f0      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
 8006934:	1ff80000 	.word	0x1ff80000
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006938:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800693a:	6820      	ldr	r0, [r4, #0]
 800693c:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800693e:	f042 0202 	orr.w	r2, r2, #2
 8006942:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006944:	4651      	mov	r1, sl
 8006946:	f002 fb0f 	bl	8008f68 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800694a:	2210      	movs	r2, #16
 800694c:	60ba      	str	r2, [r7, #8]
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	e6d6      	b.n	8006700 <HAL_HCD_IRQHandler+0x1b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006952:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8006956:	eb03 010a 	add.w	r1, r3, sl
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800695a:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800695c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006960:	f3c0 0c12 	ubfx	ip, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006964:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8006966:	eba0 000c 	sub.w	r0, r0, ip
 800696a:	64c8      	str	r0, [r1, #76]	; 0x4c
 800696c:	e6ae      	b.n	80066cc <HAL_HCD_IRQHandler+0x184>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006976:	f040 80d3 	bne.w	8006b20 <HAL_HCD_IRQHandler+0x5d8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	06d2      	lsls	r2, r2, #27
 800697e:	f140 80b5 	bpl.w	8006aec <HAL_HCD_IRQHandler+0x5a4>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006982:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8006986:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800698a:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 800698e:	2a03      	cmp	r2, #3
 8006990:	f000 8148 	beq.w	8006c24 <HAL_HCD_IRQHandler+0x6dc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006994:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8006998:	d111      	bne.n	80069be <HAL_HCD_IRQHandler+0x476>
      if (hhcd->Init.dma_enable == 0U)
 800699a:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 800699c:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 800699e:	b973      	cbnz	r3, 80069be <HAL_HCD_IRQHandler+0x476>
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069a0:	68fb      	ldr	r3, [r7, #12]
        hhcd->hc[ch_num].state = HC_NAK;
 80069a2:	2228      	movs	r2, #40	; 0x28
 80069a4:	fb02 420a 	mla	r2, r2, sl, r4
 80069a8:	f04f 0c03 	mov.w	ip, #3
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069ac:	f043 0302 	orr.w	r3, r3, #2
        hhcd->hc[ch_num].state = HC_NAK;
 80069b0:	f882 c05d 	strb.w	ip, [r2, #93]	; 0x5d
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069b4:	4651      	mov	r1, sl
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069b6:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069b8:	f002 fad6 	bl	8008f68 <USB_HC_Halt>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069c0:	2310      	movs	r3, #16
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	e6a7      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	071b      	lsls	r3, r3, #28
 80069ca:	f100 8093 	bmi.w	8006af4 <HAL_HCD_IRQHandler+0x5ac>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	0559      	lsls	r1, r3, #21
 80069d2:	f57f ae6d 	bpl.w	80066b0 <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	9201      	str	r2, [sp, #4]
 80069da:	f043 0302 	orr.w	r3, r3, #2
 80069de:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069e0:	4651      	mov	r1, sl
 80069e2:	f002 fac1 	bl	8008f68 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069e6:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069ea:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069ec:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069f0:	60b9      	str	r1, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069f2:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80069f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069f8:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80069fc:	9a01      	ldr	r2, [sp, #4]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	e656      	b.n	80066b0 <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a06:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006a0c:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8006a10:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a14:	f043 0302 	orr.w	r3, r3, #2
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006a18:	f04f 0c07 	mov.w	ip, #7
 8006a1c:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a20:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a22:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a24:	f002 faa0 	bl	8008f68 <USB_HC_Halt>
 8006a28:	9a01      	ldr	r2, [sp, #4]
 8006a2a:	e641      	b.n	80066b0 <HAL_HCD_IRQHandler+0x168>
      HAL_HCD_Connect_Callback(hhcd);
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f009 f947 	bl	800fcc0 <HAL_HCD_Connect_Callback>
 8006a32:	e6c6      	b.n	80067c2 <HAL_HCD_IRQHandler+0x27a>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a34:	4620      	mov	r0, r4
 8006a36:	f009 f953 	bl	800fce0 <HAL_HCD_PortDisabled_Callback>
 8006a3a:	e6df      	b.n	80067fc <HAL_HCD_IRQHandler+0x2b4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006a3c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8006a40:	e726      	b.n	8006890 <HAL_HCD_IRQHandler+0x348>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006a42:	9b02      	ldr	r3, [sp, #8]
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a4e:	bf18      	it	ne
 8006a50:	2101      	movne	r1, #1
 8006a52:	f002 f80f 	bl	8008a74 <USB_InitFSLSPClkSel>
 8006a56:	e6ce      	b.n	80067f6 <HAL_HCD_IRQHandler+0x2ae>
    hhcd->hc[ch_num].state = HC_NYET;
 8006a58:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8006a5c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].do_ping = 1U;
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a66:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_NYET;
 8006a68:	f883 905d 	strb.w	r9, [r3, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a6c:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a70:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a74:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a76:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a78:	f002 fa76 	bl	8008f68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006a7c:	2340      	movs	r3, #64	; 0x40
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	68a1      	ldr	r1, [r4, #8]
 8006a84:	e647      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	061b      	lsls	r3, r3, #24
 8006a8a:	f100 80e7 	bmi.w	8006c5c <HAL_HCD_IRQHandler+0x714>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	055b      	lsls	r3, r3, #21
 8006a92:	f100 80fc 	bmi.w	8006c8e <HAL_HCD_IRQHandler+0x746>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	079b      	lsls	r3, r3, #30
 8006a9a:	f57f ae3c 	bpl.w	8006716 <HAL_HCD_IRQHandler+0x1ce>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a9e:	2128      	movs	r1, #40	; 0x28
 8006aa0:	fb01 410a 	mla	r1, r1, sl, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006aa6:	f891 305d 	ldrb.w	r3, [r1, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006aaa:	f020 0002 	bic.w	r0, r0, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006aae:	2b01      	cmp	r3, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006ab0:	60f8      	str	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006ab2:	f000 8105 	beq.w	8006cc0 <HAL_HCD_IRQHandler+0x778>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	f000 80fe 	beq.w	8006cb8 <HAL_HCD_IRQHandler+0x770>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	f000 80fb 	beq.w	8006cb8 <HAL_HCD_IRQHandler+0x770>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	f000 8120 	beq.w	8006d08 <HAL_HCD_IRQHandler+0x7c0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	f000 8108 	beq.w	8006cde <HAL_HCD_IRQHandler+0x796>
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	f000 8105 	beq.w	8006cde <HAL_HCD_IRQHandler+0x796>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ad4:	2328      	movs	r3, #40	; 0x28
 8006ad6:	fb03 430a 	mla	r3, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ada:	2102      	movs	r1, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006adc:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ae0:	60b9      	str	r1, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	f009 f8f3 	bl	800fcd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	68a1      	ldr	r1, [r4, #8]
 8006aee:	e612      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	e6d9      	b.n	80068a8 <HAL_HCD_IRQHandler+0x360>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006af4:	68f9      	ldr	r1, [r7, #12]
 8006af6:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_STALL;
 8006af8:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8006afc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b00:	f041 0102 	orr.w	r1, r1, #2
    hhcd->hc[ch_num].state = HC_STALL;
 8006b04:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b08:	60f9      	str	r1, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006b0a:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b0e:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006b10:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b12:	60b9      	str	r1, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b14:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006b16:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b18:	f002 fa26 	bl	8008f68 <USB_HC_Halt>
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	e5c7      	b.n	80066b0 <HAL_HCD_IRQHandler+0x168>
    hhcd->hc[ch_num].ErrCnt++;
 8006b20:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8006b24:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b28:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006b2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b2c:	f041 0c02 	orr.w	ip, r1, #2
    hhcd->hc[ch_num].ErrCnt++;
 8006b30:	3201      	adds	r2, #1
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b32:	f04f 0e06 	mov.w	lr, #6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b36:	f8c7 c00c 	str.w	ip, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b3a:	4651      	mov	r1, sl
    hhcd->hc[ch_num].ErrCnt++;
 8006b3c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b3e:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b42:	f002 fa11 	bl	8008f68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	68a1      	ldr	r1, [r4, #8]
 8006b4e:	e5e2      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].ErrCnt++;
 8006b50:	eb03 000a 	add.w	r0, r3, sl
 8006b54:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006b58:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8006b5a:	3101      	adds	r1, #1
 8006b5c:	6581      	str	r1, [r0, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006b5e:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b60:	f04f 0128 	mov.w	r1, #40	; 0x28
 8006b64:	fb01 410a 	mla	r1, r1, sl, r4
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006b68:	d958      	bls.n	8006c1c <HAL_HCD_IRQHandler+0x6d4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b6a:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b6c:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b70:	6588      	str	r0, [r1, #88]	; 0x58
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b72:	f852 000b 	ldr.w	r0, [r2, fp]
 8006b76:	4453      	add	r3, sl
 8006b78:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b7c:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b80:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006b84:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b88:	f842 000b 	str.w	r0, [r2, fp]
 8006b8c:	e680      	b.n	8006890 <HAL_HCD_IRQHandler+0x348>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b8e:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b90:	eb0a 0b8a 	add.w	fp, sl, sl, lsl #2
 8006b94:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b98:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b9c:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ba0:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ba2:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ba4:	f002 f9e0 	bl	8008f68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006ba8:	2301      	movs	r3, #1
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006bb0:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
 8006bb4:	e5af      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006bb6:	f852 700b 	ldr.w	r7, [r2, fp]
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006bc0:	f842 700b 	str.w	r7, [r2, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006bc4:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4651      	mov	r1, sl
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f009 f87f 	bl	800fcd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	e594      	b.n	8006700 <HAL_HCD_IRQHandler+0x1b8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006bd6:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006bda:	f881 c05c 	strb.w	ip, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006bde:	f080 0001 	eor.w	r0, r0, #1
 8006be2:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006be6:	4662      	mov	r2, ip
 8006be8:	4651      	mov	r1, sl
 8006bea:	4620      	mov	r0, r4
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	f009 f86f 	bl	800fcd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bf2:	9b01      	ldr	r3, [sp, #4]
 8006bf4:	e584      	b.n	8006700 <HAL_HCD_IRQHandler+0x1b8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c00:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c02:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006c04:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c08:	f002 f9ae 	bl	8008f68 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006c0c:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
 8006c10:	2205      	movs	r2, #5
 8006c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	68a1      	ldr	r1, [r4, #8]
 8006c1a:	e57c      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c1c:	2002      	movs	r0, #2
 8006c1e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
 8006c22:	e7a6      	b.n	8006b72 <HAL_HCD_IRQHandler+0x62a>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c24:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006c26:	2128      	movs	r1, #40	; 0x28
 8006c28:	fb01 410a 	mla	r1, r1, sl, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c2c:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006c30:	658b      	str	r3, [r1, #88]	; 0x58
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c32:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c34:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c36:	f002 f997 	bl	8008f68 <USB_HC_Halt>
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	e6bf      	b.n	80069be <HAL_HCD_IRQHandler+0x476>
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c3e:	f852 300b 	ldr.w	r3, [r2, fp]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c42:	2028      	movs	r0, #40	; 0x28
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c48:	fb00 400a 	mla	r0, r0, sl, r4
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c50:	2102      	movs	r1, #2
 8006c52:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c56:	f842 300b 	str.w	r3, [r2, fp]
 8006c5a:	e619      	b.n	8006890 <HAL_HCD_IRQHandler+0x348>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c62:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c64:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c66:	f002 f97f 	bl	8008f68 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006c6a:	2328      	movs	r3, #40	; 0x28
 8006c6c:	fb03 4a0a 	mla	sl, r3, sl, r4
 8006c70:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006c72:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006c74:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8006c78:	6820      	ldr	r0, [r4, #0]
 8006c7a:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	e54a      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].ErrCnt++;
 8006c80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c82:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].ErrCnt++;
 8006c86:	3201      	adds	r2, #1
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c88:	2104      	movs	r1, #4
      hhcd->hc[ch_num].ErrCnt++;
 8006c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c8c:	e600      	b.n	8006890 <HAL_HCD_IRQHandler+0x348>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c94:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c96:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c98:	f002 f966 	bl	8008f68 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006c9c:	2328      	movs	r3, #40	; 0x28
 8006c9e:	fb03 4a0a 	mla	sl, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ca2:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ca8:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006cae:	60ba      	str	r2, [r7, #8]
 8006cb0:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006cb2:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 8006cb6:	e52e      	b.n	8006716 <HAL_HCD_IRQHandler+0x1ce>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 8006cbe:	e709      	b.n	8006ad4 <HAL_HCD_IRQHandler+0x58c>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006cc0:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006cc4:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006cc8:	1e93      	subs	r3, r2, #2
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	f63f af02 	bhi.w	8006ad4 <HAL_HCD_IRQHandler+0x58c>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006cd0:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 8006cd4:	f083 0301 	eor.w	r3, r3, #1
 8006cd8:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
 8006cdc:	e6fa      	b.n	8006ad4 <HAL_HCD_IRQHandler+0x58c>
      hhcd->hc[ch_num].ErrCnt++;
 8006cde:	2328      	movs	r3, #40	; 0x28
 8006ce0:	fb03 430a 	mla	r3, r3, sl, r4
 8006ce4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006ce6:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006ce8:	2903      	cmp	r1, #3
      hhcd->hc[ch_num].ErrCnt++;
 8006cea:	6599      	str	r1, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006cec:	d90f      	bls.n	8006d0e <HAL_HCD_IRQHandler+0x7c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006cee:	2100      	movs	r1, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cf0:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006cf4:	6599      	str	r1, [r3, #88]	; 0x58
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cf6:	f852 300b 	ldr.w	r3, [r2, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d02:	f842 300b 	str.w	r3, [r2, fp]
 8006d06:	e6e5      	b.n	8006ad4 <HAL_HCD_IRQHandler+0x58c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006d08:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 8006d0c:	e6e2      	b.n	8006ad4 <HAL_HCD_IRQHandler+0x58c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006d0e:	2102      	movs	r1, #2
 8006d10:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
 8006d14:	e7ef      	b.n	8006cf6 <HAL_HCD_IRQHandler+0x7ae>
 8006d16:	bf00      	nop

08006d18 <HAL_HCD_Start>:
{
 8006d18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8006d1a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d00e      	beq.n	8006d40 <HAL_HCD_Start+0x28>
 8006d22:	4604      	mov	r4, r0
 8006d24:	2501      	movs	r5, #1
 8006d26:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	f001 fe60 	bl	80089f0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006d30:	4629      	mov	r1, r5
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	f001 fedc 	bl	8008af0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006d38:	2000      	movs	r0, #0
 8006d3a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8006d40:	2002      	movs	r0, #2
}
 8006d42:	bd38      	pop	{r3, r4, r5, pc}

08006d44 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006d44:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d00b      	beq.n	8006d64 <HAL_HCD_Stop+0x20>
{
 8006d4c:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4604      	mov	r4, r0
 8006d52:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006d56:	6800      	ldr	r0, [r0, #0]
 8006d58:	f002 f964 	bl	8009024 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006d62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006d64:	2002      	movs	r0, #2
}
 8006d66:	4770      	bx	lr

08006d68 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8006d68:	6800      	ldr	r0, [r0, #0]
 8006d6a:	f001 bea1 	b.w	8008ab0 <USB_ResetPort>
 8006d6e:	bf00      	nop

08006d70 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006d70:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006d74:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006d78:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006d80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006d84:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006d88:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8006d8a:	4770      	bx	lr

08006d8c <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f001 bf65 	b.w	8008c5c <USB_GetCurrentFrame>
 8006d92:	bf00      	nop

08006d94 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8006d94:	6800      	ldr	r0, [r0, #0]
 8006d96:	f001 bf55 	b.w	8008c44 <USB_GetHostSpeed>
 8006d9a:	bf00      	nop

08006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	4607      	mov	r7, r0
 8006da2:	4616      	mov	r6, r2
 8006da4:	4698      	mov	r8, r3
 8006da6:	b28d      	uxth	r5, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006da8:	683c      	ldr	r4, [r7, #0]
 8006daa:	e004      	b.n	8006db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dac:	6961      	ldr	r1, [r4, #20]
 8006dae:	054a      	lsls	r2, r1, #21
 8006db0:	d407      	bmi.n	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x26>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db2:	1c73      	adds	r3, r6, #1
 8006db4:	d11c      	bne.n	8006df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006db6:	6960      	ldr	r0, [r4, #20]
 8006db8:	ea35 0000 	bics.w	r0, r5, r0
 8006dbc:	d1f6      	bne.n	8006dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8006dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dce:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd0:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd2:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd4:	633a      	str	r2, [r7, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dd6:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dda:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006de0:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	643b      	str	r3, [r7, #64]	; 0x40
      return HAL_ERROR;
 8006dea:	2001      	movs	r0, #1
}
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df0:	f7fe fc06 	bl	8005600 <HAL_GetTick>
 8006df4:	eba0 0008 	sub.w	r0, r0, r8
 8006df8:	42b0      	cmp	r0, r6
 8006dfa:	d801      	bhi.n	8006e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8006dfc:	2e00      	cmp	r6, #0
 8006dfe:	d1d3      	bne.n	8006da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e00:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e02:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e04:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0a:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e10:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e14:	f043 0320 	orr.w	r3, r3, #32
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	e7cf      	b.n	8006dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x22>
 8006e1e:	bf00      	nop

08006e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	4606      	mov	r6, r0
 8006e24:	460d      	mov	r5, r1
 8006e26:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e28:	6830      	ldr	r0, [r6, #0]
 8006e2a:	e004      	b.n	8006e36 <I2C_WaitOnTXEFlagUntilTimeout+0x16>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e2c:	6944      	ldr	r4, [r0, #20]
 8006e2e:	0562      	lsls	r2, r4, #21
 8006e30:	d407      	bmi.n	8006e42 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	1c6b      	adds	r3, r5, #1
 8006e34:	d116      	bne.n	8006e64 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e36:	6943      	ldr	r3, [r0, #20]
 8006e38:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006e3c:	d0f6      	beq.n	8006e2c <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  return HAL_OK;
 8006e3e:	2000      	movs	r0, #0
}
 8006e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e42:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e46:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e48:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e4a:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e4c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e50:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e54:	6c32      	ldr	r2, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e56:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e5a:	f042 0204 	orr.w	r2, r2, #4
 8006e5e:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 8006e60:	2001      	movs	r0, #1
}
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e64:	f7fe fbcc 	bl	8005600 <HAL_GetTick>
 8006e68:	1bc0      	subs	r0, r0, r7
 8006e6a:	42a8      	cmp	r0, r5
 8006e6c:	d801      	bhi.n	8006e72 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	d1da      	bne.n	8006e28 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e72:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e74:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e76:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e78:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e7c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e80:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e82:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e86:	f043 0320 	orr.w	r3, r3, #32
 8006e8a:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e8c:	2001      	movs	r0, #1
}
 8006e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	4605      	mov	r5, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e98:	e008      	b.n	8006eac <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e9a:	6951      	ldr	r1, [r2, #20]
 8006e9c:	06c9      	lsls	r1, r1, #27
 8006e9e:	d41b      	bmi.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea0:	f7fe fbae 	bl	8005600 <HAL_GetTick>
 8006ea4:	1b80      	subs	r0, r0, r6
 8006ea6:	42a0      	cmp	r0, r4
 8006ea8:	d807      	bhi.n	8006eba <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8006eaa:	b134      	cbz	r4, 8006eba <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006eac:	682a      	ldr	r2, [r5, #0]
 8006eae:	6953      	ldr	r3, [r2, #20]
 8006eb0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006eb4:	d0f1      	beq.n	8006e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
  return HAL_OK;
 8006eb6:	2000      	movs	r0, #0
}
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eba:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ebc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ebe:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ec0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ec4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006eca:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ece:	f043 0320 	orr.w	r3, r3, #32
 8006ed2:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006ed4:	2001      	movs	r0, #1
}
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ed8:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8006edc:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ede:	6150      	str	r0, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee0:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ee2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006eea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006eec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ef0:	642a      	str	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006ef2:	2001      	movs	r0, #1
}
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
 8006ef6:	bf00      	nop

08006ef8 <I2C_WaitOnFlagUntilTimeout>:
{
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	4681      	mov	r9, r0
 8006efe:	4690      	mov	r8, r2
 8006f00:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f02:	0c0f      	lsrs	r7, r1, #16
 8006f04:	b28c      	uxth	r4, r1
 8006f06:	f8d9 5000 	ldr.w	r5, [r9]
 8006f0a:	e009      	b.n	8006f20 <I2C_WaitOnFlagUntilTimeout+0x28>
 8006f0c:	69a9      	ldr	r1, [r5, #24]
 8006f0e:	ea34 0301 	bics.w	r3, r4, r1
 8006f12:	bf0c      	ite	eq
 8006f14:	2001      	moveq	r0, #1
 8006f16:	2000      	movne	r0, #0
 8006f18:	4580      	cmp	r8, r0
 8006f1a:	d10b      	bne.n	8006f34 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8006f1c:	1c73      	adds	r3, r6, #1
 8006f1e:	d10c      	bne.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f20:	2f01      	cmp	r7, #1
 8006f22:	d1f3      	bne.n	8006f0c <I2C_WaitOnFlagUntilTimeout+0x14>
 8006f24:	696b      	ldr	r3, [r5, #20]
 8006f26:	ea34 0303 	bics.w	r3, r4, r3
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2001      	moveq	r0, #1
 8006f2e:	2000      	movne	r0, #0
 8006f30:	4580      	cmp	r8, r0
 8006f32:	d0f3      	beq.n	8006f1c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006f34:	2000      	movs	r0, #0
}
 8006f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fe fb61 	bl	8005600 <HAL_GetTick>
 8006f3e:	9b08      	ldr	r3, [sp, #32]
 8006f40:	1ac0      	subs	r0, r0, r3
 8006f42:	42b0      	cmp	r0, r6
 8006f44:	d801      	bhi.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x52>
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d1dd      	bne.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f4a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f4c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f4e:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f52:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f56:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f5a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006f5e:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f62:	f043 0320 	orr.w	r3, r3, #32
 8006f66:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	e7e3      	b.n	8006f36 <I2C_WaitOnFlagUntilTimeout+0x3e>
 8006f6e:	bf00      	nop

08006f70 <I2C_RequestMemoryWrite>:
{
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f74:	6806      	ldr	r6, [r0, #0]
{
 8006f76:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f78:	6835      	ldr	r5, [r6, #0]
{
 8006f7a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f7c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
{
 8006f80:	4688      	mov	r8, r1
 8006f82:	4691      	mov	r9, r2
 8006f84:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f86:	6035      	str	r5, [r6, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f8a:	9700      	str	r7, [sp, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8006f92:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f94:	f7ff ffb0 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 8006f98:	b170      	cbz	r0, 8006fb8 <I2C_RequestMemoryWrite+0x48>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	05db      	lsls	r3, r3, #23
 8006fa0:	d403      	bmi.n	8006faa <I2C_RequestMemoryWrite+0x3a>
    return HAL_TIMEOUT;
 8006fa2:	2003      	movs	r0, #3
}
 8006fa4:	b004      	add	sp, #16
 8006fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006faa:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8006fae:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fb0:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006fb2:	b004      	add	sp, #16
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fb8:	6822      	ldr	r2, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fba:	491d      	ldr	r1, [pc, #116]	; (8007030 <I2C_RequestMemoryWrite+0xc0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fbc:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8006fc0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fc8:	f7ff fee8 	bl	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fcc:	b118      	cbz	r0, 8006fd6 <I2C_RequestMemoryWrite+0x66>
      return HAL_ERROR;
 8006fce:	2001      	movs	r0, #1
}
 8006fd0:	b004      	add	sp, #16
 8006fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	9003      	str	r0, [sp, #12]
 8006fda:	695a      	ldr	r2, [r3, #20]
 8006fdc:	9203      	str	r2, [sp, #12]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fe6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f7ff ff19 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fee:	b988      	cbnz	r0, 8007014 <I2C_RequestMemoryWrite+0xa4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ff0:	f1ba 0f01 	cmp.w	sl, #1
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	d016      	beq.n	8007026 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ff8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8006ffc:	610b      	str	r3, [r1, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ffe:	463a      	mov	r2, r7
 8007000:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007002:	4620      	mov	r0, r4
 8007004:	f7ff ff0c 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007008:	b920      	cbnz	r0, 8007014 <I2C_RequestMemoryWrite+0xa4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	fa5f f389 	uxtb.w	r3, r9
 8007010:	6113      	str	r3, [r2, #16]
 8007012:	e7c7      	b.n	8006fa4 <I2C_RequestMemoryWrite+0x34>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007016:	2b04      	cmp	r3, #4
 8007018:	d1d9      	bne.n	8006fce <I2C_RequestMemoryWrite+0x5e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	6813      	ldr	r3, [r2, #0]
 800701e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	e7d3      	b.n	8006fce <I2C_RequestMemoryWrite+0x5e>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007026:	fa5f f389 	uxtb.w	r3, r9
 800702a:	610b      	str	r3, [r1, #16]
 800702c:	e7ba      	b.n	8006fa4 <I2C_RequestMemoryWrite+0x34>
 800702e:	bf00      	nop
 8007030:	00010002 	.word	0x00010002

08007034 <I2C_RequestMemoryRead>:
{
 8007034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007038:	6804      	ldr	r4, [r0, #0]
 800703a:	6826      	ldr	r6, [r4, #0]
 800703c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 8007040:	6026      	str	r6, [r4, #0]
{
 8007042:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007044:	6826      	ldr	r6, [r4, #0]
{
 8007046:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007048:	f446 7680 	orr.w	r6, r6, #256	; 0x100
{
 800704c:	4688      	mov	r8, r1
 800704e:	4691      	mov	r9, r2
 8007050:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007052:	6026      	str	r6, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007056:	9700      	str	r7, [sp, #0]
 8007058:	2200      	movs	r2, #0
 800705a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800705e:	4605      	mov	r5, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007060:	f7ff ff4a 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 8007064:	b158      	cbz	r0, 800707e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	05db      	lsls	r3, r3, #23
 800706c:	d403      	bmi.n	8007076 <I2C_RequestMemoryRead+0x42>
    return HAL_TIMEOUT;
 800706e:	2003      	movs	r0, #3
}
 8007070:	b004      	add	sp, #16
 8007072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707a:	642b      	str	r3, [r5, #64]	; 0x40
 800707c:	e7f7      	b.n	800706e <I2C_RequestMemoryRead+0x3a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800707e:	682b      	ldr	r3, [r5, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007080:	492f      	ldr	r1, [pc, #188]	; (8007140 <I2C_RequestMemoryRead+0x10c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007082:	fa5f f888 	uxtb.w	r8, r8
 8007086:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 800708a:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800708c:	4628      	mov	r0, r5
 800708e:	463b      	mov	r3, r7
 8007090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007092:	f7ff fe83 	bl	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007096:	b118      	cbz	r0, 80070a0 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8007098:	2001      	movs	r0, #1
}
 800709a:	b004      	add	sp, #16
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	9003      	str	r0, [sp, #12]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	9203      	str	r2, [sp, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ac:	463a      	mov	r2, r7
 80070ae:	990c      	ldr	r1, [sp, #48]	; 0x30
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070b0:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff feb4 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b8:	bb48      	cbnz	r0, 800710e <I2C_RequestMemoryRead+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ba:	f1ba 0f01 	cmp.w	sl, #1
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	d12e      	bne.n	8007120 <I2C_RequestMemoryRead+0xec>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070c2:	fa5f f289 	uxtb.w	r2, r9
 80070c6:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c8:	463a      	mov	r2, r7
 80070ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070cc:	4628      	mov	r0, r5
 80070ce:	f7ff fea7 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80070d2:	b9e0      	cbnz	r0, 800710e <I2C_RequestMemoryRead+0xda>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d4:	6829      	ldr	r1, [r5, #0]
 80070d6:	680b      	ldr	r3, [r1, #0]
 80070d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070dc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070de:	4602      	mov	r2, r0
 80070e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e2:	9700      	str	r7, [sp, #0]
 80070e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070e8:	4628      	mov	r0, r5
 80070ea:	f7ff ff05 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d1b9      	bne.n	8007066 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070f2:	6828      	ldr	r0, [r5, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f4:	4912      	ldr	r1, [pc, #72]	; (8007140 <I2C_RequestMemoryRead+0x10c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070f6:	f048 0201 	orr.w	r2, r8, #1
 80070fa:	6102      	str	r2, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070fc:	463b      	mov	r3, r7
 80070fe:	4628      	mov	r0, r5
 8007100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007102:	f7ff fe4b 	bl	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8007106:	3000      	adds	r0, #0
 8007108:	bf18      	it	ne
 800710a:	2001      	movne	r0, #1
 800710c:	e7b0      	b.n	8007070 <I2C_RequestMemoryRead+0x3c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800710e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007110:	2b04      	cmp	r3, #4
 8007112:	d1c1      	bne.n	8007098 <I2C_RequestMemoryRead+0x64>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007114:	682a      	ldr	r2, [r5, #0]
 8007116:	6813      	ldr	r3, [r2, #0]
 8007118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e7bb      	b.n	8007098 <I2C_RequestMemoryRead+0x64>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007120:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8007124:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007126:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007128:	463a      	mov	r2, r7
 800712a:	4628      	mov	r0, r5
 800712c:	f7ff fe78 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007130:	2800      	cmp	r0, #0
 8007132:	d1ec      	bne.n	800710e <I2C_RequestMemoryRead+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007134:	682a      	ldr	r2, [r5, #0]
 8007136:	fa5f f389 	uxtb.w	r3, r9
 800713a:	6113      	str	r3, [r2, #16]
 800713c:	e7c4      	b.n	80070c8 <I2C_RequestMemoryRead+0x94>
 800713e:	bf00      	nop
 8007140:	00010002 	.word	0x00010002

08007144 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	4606      	mov	r6, r0
 8007148:	460d      	mov	r5, r1
 800714a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800714c:	6830      	ldr	r0, [r6, #0]
 800714e:	e004      	b.n	800715a <I2C_WaitOnBTFFlagUntilTimeout+0x16>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007150:	6944      	ldr	r4, [r0, #20]
 8007152:	0562      	lsls	r2, r4, #21
 8007154:	d407      	bmi.n	8007166 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8007156:	1c6b      	adds	r3, r5, #1
 8007158:	d116      	bne.n	8007188 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800715a:	6943      	ldr	r3, [r0, #20]
 800715c:	f013 0304 	ands.w	r3, r3, #4
 8007160:	d0f6      	beq.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
  return HAL_OK;
 8007162:	2000      	movs	r0, #0
}
 8007164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007166:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800716a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800716c:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800716e:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007170:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007174:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007178:	6c32      	ldr	r2, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800717a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800717e:	f042 0204 	orr.w	r2, r2, #4
 8007182:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 8007184:	2001      	movs	r0, #1
}
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007188:	f7fe fa3a 	bl	8005600 <HAL_GetTick>
 800718c:	1bc0      	subs	r0, r0, r7
 800718e:	42a8      	cmp	r0, r5
 8007190:	d801      	bhi.n	8007196 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8007192:	2d00      	cmp	r5, #0
 8007194:	d1da      	bne.n	800714c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007196:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007198:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800719a:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800719c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071a0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80071a6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071aa:	f043 0320 	orr.w	r3, r3, #32
 80071ae:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80071b0:	2001      	movs	r0, #1
}
 80071b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071b4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f000 809f 	beq.w	80072f8 <HAL_I2C_Init+0x144>
{
 80071ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80071c0:	4604      	mov	r4, r0
 80071c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 808f 	beq.w	80072ea <HAL_I2C_Init+0x136>
  __HAL_I2C_DISABLE(hi2c);
 80071cc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80071ce:	2224      	movs	r2, #36	; 0x24
 80071d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071ea:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071ec:	f001 f932 	bl	8008454 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071f0:	6861      	ldr	r1, [r4, #4]
 80071f2:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <HAL_I2C_Init+0x16c>)
 80071f4:	4299      	cmp	r1, r3
 80071f6:	d84b      	bhi.n	8007290 <HAL_I2C_Init+0xdc>
 80071f8:	4b4a      	ldr	r3, [pc, #296]	; (8007324 <HAL_I2C_Init+0x170>)
 80071fa:	4298      	cmp	r0, r3
 80071fc:	d97a      	bls.n	80072f4 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071fe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8007200:	4b49      	ldr	r3, [pc, #292]	; (8007328 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007202:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8007204:	fba3 6300 	umull	r6, r3, r3, r0
 8007208:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800720a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800720e:	431d      	orrs	r5, r3
 8007210:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007212:	6a15      	ldr	r5, [r2, #32]
 8007214:	3301      	adds	r3, #1
 8007216:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800721a:	432b      	orrs	r3, r5
 800721c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800721e:	69d5      	ldr	r5, [r2, #28]
 8007220:	0049      	lsls	r1, r1, #1
 8007222:	1e43      	subs	r3, r0, #1
 8007224:	fbb3 f3f1 	udiv	r3, r3, r1
 8007228:	3301      	adds	r3, #1
 800722a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800722e:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8007232:	2b04      	cmp	r3, #4
 8007234:	bf38      	it	cc
 8007236:	2304      	movcc	r3, #4
 8007238:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800723c:	432b      	orrs	r3, r5
 800723e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007240:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8007244:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007246:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007248:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800724c:	432b      	orrs	r3, r5
 800724e:	4303      	orrs	r3, r0
 8007250:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007252:	6890      	ldr	r0, [r2, #8]
 8007254:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007256:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007258:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 800725c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8007260:	4329      	orrs	r1, r5
 8007262:	4301      	orrs	r1, r0
 8007264:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007266:	68d1      	ldr	r1, [r2, #12]
 8007268:	69a0      	ldr	r0, [r4, #24]
 800726a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800726e:	4303      	orrs	r3, r0
 8007270:	430b      	orrs	r3, r1
 8007272:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007274:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007276:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8007278:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800727c:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800727e:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 8007280:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007282:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007284:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007288:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800728a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007290:	4b26      	ldr	r3, [pc, #152]	; (800732c <HAL_I2C_Init+0x178>)
 8007292:	4298      	cmp	r0, r3
 8007294:	d92e      	bls.n	80072f4 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007296:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8007298:	4b23      	ldr	r3, [pc, #140]	; (8007328 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800729a:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800729c:	4f24      	ldr	r7, [pc, #144]	; (8007330 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 800729e:	fba3 5300 	umull	r5, r3, r3, r0
 80072a2:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072a4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80072a8:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072ae:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072b0:	fb03 f305 	mul.w	r3, r3, r5
 80072b4:	fba7 5303 	umull	r5, r3, r7, r3
 80072b8:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072ba:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072bc:	099b      	lsrs	r3, r3, #6
 80072be:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80072c2:	3301      	adds	r3, #1
 80072c4:	432b      	orrs	r3, r5
 80072c6:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072c8:	69d5      	ldr	r5, [r2, #28]
 80072ca:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80072ce:	3801      	subs	r0, #1
 80072d0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80072d4:	b996      	cbnz	r6, 80072fc <HAL_I2C_Init+0x148>
 80072d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80072da:	fbb0 f0f1 	udiv	r0, r0, r1
 80072de:	3001      	adds	r0, #1
 80072e0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80072e4:	b9c0      	cbnz	r0, 8007318 <HAL_I2C_Init+0x164>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7a8      	b.n	800723c <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 80072ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80072ee:	f7fd f81d 	bl	800432c <HAL_I2C_MspInit>
 80072f2:	e76b      	b.n	80071cc <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80072f4:	2001      	movs	r0, #1
}
 80072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80072f8:	2001      	movs	r0, #1
}
 80072fa:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007300:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007304:	fbb0 f0f1 	udiv	r0, r0, r1
 8007308:	3001      	adds	r0, #1
 800730a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800730e:	2800      	cmp	r0, #0
 8007310:	d0e9      	beq.n	80072e6 <HAL_I2C_Init+0x132>
 8007312:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8007316:	e791      	b.n	800723c <HAL_I2C_Init+0x88>
 8007318:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 800731c:	e78e      	b.n	800723c <HAL_I2C_Init+0x88>
 800731e:	bf00      	nop
 8007320:	000186a0 	.word	0x000186a0
 8007324:	001e847f 	.word	0x001e847f
 8007328:	431bde83 	.word	0x431bde83
 800732c:	003d08ff 	.word	0x003d08ff
 8007330:	10624dd3 	.word	0x10624dd3

08007334 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8007334:	b1b0      	cbz	r0, 8007364 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8007336:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007338:	2324      	movs	r3, #36	; 0x24
{
 800733a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800733c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007340:	6813      	ldr	r3, [r2, #0]
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	4604      	mov	r4, r0
 8007348:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800734a:	f7fd f827 	bl	800439c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800734e:	2300      	movs	r3, #0
 8007350:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8007352:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800735a:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 800735c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800735e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007362:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007364:	2001      	movs	r0, #1
}
 8007366:	4770      	bx	lr

08007368 <HAL_I2C_Mem_Write>:
{
 8007368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800736c:	4604      	mov	r4, r0
 800736e:	b083      	sub	sp, #12
 8007370:	4698      	mov	r8, r3
 8007372:	460e      	mov	r6, r1
 8007374:	4617      	mov	r7, r2
 8007376:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  uint32_t tickstart = HAL_GetTick();
 800737a:	f7fe f941 	bl	8005600 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800737e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007382:	2b20      	cmp	r3, #32
 8007384:	d003      	beq.n	800738e <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8007386:	2002      	movs	r0, #2
}
 8007388:	b003      	add	sp, #12
 800738a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800738e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007390:	9000      	str	r0, [sp, #0]
 8007392:	2319      	movs	r3, #25
 8007394:	2201      	movs	r2, #1
 8007396:	493d      	ldr	r1, [pc, #244]	; (800748c <HAL_I2C_Mem_Write+0x124>)
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff fdad 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d1f1      	bne.n	8007386 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80073a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d0ed      	beq.n	8007386 <HAL_I2C_Mem_Write+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80073ae:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073b0:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 80073b2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073b6:	d402      	bmi.n	80073be <HAL_I2C_Mem_Write+0x56>
      __HAL_I2C_ENABLE(hi2c);
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073be:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073c0:	4833      	ldr	r0, [pc, #204]	; (8007490 <HAL_I2C_Mem_Write+0x128>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073c6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073c8:	2321      	movs	r3, #33	; 0x21
 80073ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073ce:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d0:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073d2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80073d8:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073dc:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80073e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e2:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073e4:	4631      	mov	r1, r6
 80073e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80073e8:	9501      	str	r5, [sp, #4]
 80073ea:	9600      	str	r6, [sp, #0]
 80073ec:	4643      	mov	r3, r8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073ee:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073f0:	463a      	mov	r2, r7
    hi2c->XferSize    = hi2c->XferCount;
 80073f2:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073f6:	4620      	mov	r0, r4
 80073f8:	f7ff fdba 	bl	8006f70 <I2C_RequestMemoryWrite>
 80073fc:	bb18      	cbnz	r0, 8007446 <HAL_I2C_Mem_Write+0xde>
 80073fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007400:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007402:	462a      	mov	r2, r5
 8007404:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8007406:	b1ab      	cbz	r3, 8007434 <HAL_I2C_Mem_Write+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007408:	f7ff fd0a 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 800740c:	b9c0      	cbnz	r0, 8007440 <HAL_I2C_Mem_Write+0xd8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800740e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007410:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8007412:	8d27      	ldrh	r7, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007414:	4631      	mov	r1, r6
      hi2c->XferSize--;
 8007416:	1e7b      	subs	r3, r7, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007418:	f811 2b01 	ldrb.w	r2, [r1], #1
 800741c:	6102      	str	r2, [r0, #16]
      hi2c->XferCount--;
 800741e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007420:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007422:	3a01      	subs	r2, #1
 8007424:	b292      	uxth	r2, r2
 8007426:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007428:	6942      	ldr	r2, [r0, #20]
      hi2c->XferSize--;
 800742a:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800742c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800742e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007430:	d5e6      	bpl.n	8007400 <HAL_I2C_Mem_Write+0x98>
 8007432:	b963      	cbnz	r3, 800744e <HAL_I2C_Mem_Write+0xe6>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007434:	462a      	mov	r2, r5
 8007436:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007438:	4620      	mov	r0, r4
 800743a:	f7ff fe83 	bl	8007144 <I2C_WaitOnBTFFlagUntilTimeout>
 800743e:	b190      	cbz	r0, 8007466 <HAL_I2C_Mem_Write+0xfe>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007442:	2b04      	cmp	r3, #4
 8007444:	d01c      	beq.n	8007480 <HAL_I2C_Mem_Write+0x118>
      return HAL_ERROR;
 8007446:	2001      	movs	r0, #1
}
 8007448:	b003      	add	sp, #12
 800744a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800744e:	7873      	ldrb	r3, [r6, #1]
 8007450:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8007452:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8007454:	1ebb      	subs	r3, r7, #2
        hi2c->XferCount--;
 8007456:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8007458:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800745a:	3602      	adds	r6, #2
        hi2c->XferCount--;
 800745c:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800745e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8007460:	6266      	str	r6, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8007462:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007464:	e7cc      	b.n	8007400 <HAL_I2C_Mem_Write+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	6813      	ldr	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800746a:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800746c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007470:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007472:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8007476:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800747a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800747e:	e783      	b.n	8007388 <HAL_I2C_Mem_Write+0x20>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	e7dc      	b.n	8007446 <HAL_I2C_Mem_Write+0xde>
 800748c:	00100002 	.word	0x00100002
 8007490:	ffff0000 	.word	0xffff0000

08007494 <HAL_I2C_Mem_Read>:
{
 8007494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007498:	4604      	mov	r4, r0
 800749a:	b087      	sub	sp, #28
 800749c:	4698      	mov	r8, r3
 800749e:	460e      	mov	r6, r1
 80074a0:	4617      	mov	r7, r2
 80074a2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  uint32_t tickstart = HAL_GetTick();
 80074a6:	f7fe f8ab 	bl	8005600 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d004      	beq.n	80074bc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80074b2:	2602      	movs	r6, #2
}
 80074b4:	4630      	mov	r0, r6
 80074b6:	b007      	add	sp, #28
 80074b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074bc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074be:	9000      	str	r0, [sp, #0]
 80074c0:	2319      	movs	r3, #25
 80074c2:	2201      	movs	r2, #1
 80074c4:	497c      	ldr	r1, [pc, #496]	; (80076b8 <HAL_I2C_Mem_Read+0x224>)
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7ff fd16 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d1f0      	bne.n	80074b2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80074d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d0ec      	beq.n	80074b2 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80074dc:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074de:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 80074e0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074e4:	d402      	bmi.n	80074ec <HAL_I2C_Mem_Read+0x58>
      __HAL_I2C_ENABLE(hi2c);
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074ec:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ee:	4873      	ldr	r0, [pc, #460]	; (80076bc <HAL_I2C_Mem_Read+0x228>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074f4:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074f6:	2322      	movs	r3, #34	; 0x22
 80074f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074fc:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074fe:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007500:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007504:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8007506:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800750a:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800750e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007510:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007512:	4631      	mov	r1, r6
 8007514:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007516:	9600      	str	r6, [sp, #0]
 8007518:	9501      	str	r5, [sp, #4]
 800751a:	4643      	mov	r3, r8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800751c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800751e:	463a      	mov	r2, r7
    hi2c->XferSize    = hi2c->XferCount;
 8007520:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007524:	4620      	mov	r0, r4
 8007526:	f7ff fd85 	bl	8007034 <I2C_RequestMemoryRead>
 800752a:	4606      	mov	r6, r0
 800752c:	b9a8      	cbnz	r0, 800755a <HAL_I2C_Mem_Read+0xc6>
    if (hi2c->XferSize == 0U)
 800752e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	b9bb      	cbnz	r3, 8007564 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007534:	9002      	str	r0, [sp, #8]
 8007536:	6953      	ldr	r3, [r2, #20]
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	6993      	ldr	r3, [r2, #24]
 800753c:	9302      	str	r3, [sp, #8]
 800753e:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007540:	6813      	ldr	r3, [r2, #0]
 8007542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007546:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007548:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800754a:	2220      	movs	r2, #32
 800754c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8007550:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007554:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8007558:	e7ac      	b.n	80074b4 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 800755a:	2601      	movs	r6, #1
}
 800755c:	4630      	mov	r0, r6
 800755e:	b007      	add	sp, #28
 8007560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (hi2c->XferSize == 1U)
 8007564:	2b01      	cmp	r3, #1
 8007566:	d07b      	beq.n	8007660 <HAL_I2C_Mem_Read+0x1cc>
    else if (hi2c->XferSize == 2U)
 8007568:	2b02      	cmp	r3, #2
 800756a:	f000 8095 	beq.w	8007698 <HAL_I2C_Mem_Read+0x204>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756e:	9005      	str	r0, [sp, #20]
 8007570:	6951      	ldr	r1, [r2, #20]
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	6992      	ldr	r2, [r2, #24]
 8007576:	9205      	str	r2, [sp, #20]
 8007578:	9a05      	ldr	r2, [sp, #20]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800757a:	4f51      	ldr	r7, [pc, #324]	; (80076c0 <HAL_I2C_Mem_Read+0x22c>)
      if (hi2c->XferSize <= 3U)
 800757c:	2b03      	cmp	r3, #3
 800757e:	d850      	bhi.n	8007622 <HAL_I2C_Mem_Read+0x18e>
        if (hi2c->XferSize == 1U)
 8007580:	2b01      	cmp	r3, #1
 8007582:	d07c      	beq.n	800767e <HAL_I2C_Mem_Read+0x1ea>
        else if (hi2c->XferSize == 2U)
 8007584:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007586:	9500      	str	r5, [sp, #0]
 8007588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	4639      	mov	r1, r7
 8007590:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8007592:	d01c      	beq.n	80075ce <HAL_I2C_Mem_Read+0x13a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007594:	f7ff fcb0 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 8007598:	2800      	cmp	r0, #0
 800759a:	d1de      	bne.n	800755a <HAL_I2C_Mem_Read+0xc6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759e:	6a62      	ldr	r2, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80075a6:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 80075ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80075ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80075b0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075b2:	9500      	str	r5, [sp, #0]
          hi2c->XferCount--;
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80075b8:	f102 0c01 	add.w	ip, r2, #1
          hi2c->XferSize--;
 80075bc:	3901      	subs	r1, #1
          hi2c->XferCount--;
 80075be:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
          hi2c->XferSize--;
 80075c2:	8521      	strh	r1, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075c4:	4602      	mov	r2, r0
          hi2c->pBuffPtr++;
 80075c6:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ca:	4639      	mov	r1, r7
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7ff fc93 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d1c1      	bne.n	800755a <HAL_I2C_Mem_Read+0xc6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d6:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80075e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80075e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80075ea:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ec:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075f4:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80075f6:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80075fa:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 80075fc:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007600:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007602:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 8007604:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007606:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007608:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800760a:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800760c:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800760e:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8007610:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8007612:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8007614:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007616:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007618:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 800761a:	2b00      	cmp	r3, #0
 800761c:	d094      	beq.n	8007548 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800761e:	2b03      	cmp	r3, #3
 8007620:	d9ae      	bls.n	8007580 <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007622:	462a      	mov	r2, r5
 8007624:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff fc32 	bl	8006e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800762c:	2800      	cmp	r0, #0
 800762e:	d194      	bne.n	800755a <HAL_I2C_Mem_Read+0xc6>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007634:	6912      	ldr	r2, [r2, #16]
 8007636:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8007638:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800763a:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 800763c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800763e:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8007640:	3a01      	subs	r2, #1
 8007642:	b292      	uxth	r2, r2
 8007644:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007646:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8007648:	3b01      	subs	r3, #1
 800764a:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800764c:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007650:	0752      	lsls	r2, r2, #29
        hi2c->XferSize--;
 8007652:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8007654:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007658:	d5df      	bpl.n	800761a <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765a:	6903      	ldr	r3, [r0, #16]
 800765c:	704b      	strb	r3, [r1, #1]
 800765e:	e7d1      	b.n	8007604 <HAL_I2C_Mem_Read+0x170>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007660:	6811      	ldr	r1, [r2, #0]
 8007662:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007666:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007668:	9003      	str	r0, [sp, #12]
 800766a:	6951      	ldr	r1, [r2, #20]
 800766c:	9103      	str	r1, [sp, #12]
 800766e:	6991      	ldr	r1, [r2, #24]
 8007670:	9103      	str	r1, [sp, #12]
 8007672:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800767a:	6011      	str	r1, [r2, #0]
 800767c:	e77d      	b.n	800757a <HAL_I2C_Mem_Read+0xe6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767e:	462a      	mov	r2, r5
 8007680:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007682:	4620      	mov	r0, r4
 8007684:	f7ff fc04 	bl	8006e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007688:	2800      	cmp	r0, #0
 800768a:	f47f af66 	bne.w	800755a <HAL_I2C_Mem_Read+0xc6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007692:	6912      	ldr	r2, [r2, #16]
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e7b5      	b.n	8007604 <HAL_I2C_Mem_Read+0x170>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007698:	6811      	ldr	r1, [r2, #0]
 800769a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800769e:	6011      	str	r1, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076a0:	6811      	ldr	r1, [r2, #0]
 80076a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80076a6:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a8:	9004      	str	r0, [sp, #16]
 80076aa:	6951      	ldr	r1, [r2, #20]
 80076ac:	9104      	str	r1, [sp, #16]
 80076ae:	6992      	ldr	r2, [r2, #24]
 80076b0:	9204      	str	r2, [sp, #16]
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	e761      	b.n	800757a <HAL_I2C_Mem_Read+0xe6>
 80076b6:	bf00      	nop
 80076b8:	00100002 	.word	0x00100002
 80076bc:	ffff0000 	.word	0xffff0000
 80076c0:	00010004 	.word	0x00010004

080076c4 <HAL_I2C_GetState>:
  return hi2c->State;
 80076c4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80076cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d0:	4680      	mov	r8, r0
 80076d2:	460e      	mov	r6, r1
 80076d4:	4615      	mov	r5, r2
 80076d6:	461f      	mov	r7, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80076d8:	f7fd ff92 	bl	8005600 <HAL_GetTick>
 80076dc:	4681      	mov	r9, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80076de:	f8d8 4000 	ldr.w	r4, [r8]
 80076e2:	e001      	b.n	80076e8 <I2S_WaitFlagStateUntilTimeout+0x1c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076e4:	1c7b      	adds	r3, r7, #1
 80076e6:	d10a      	bne.n	80076fe <I2S_WaitFlagStateUntilTimeout+0x32>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80076e8:	68a0      	ldr	r0, [r4, #8]
 80076ea:	ea36 0300 	bics.w	r3, r6, r0
 80076ee:	bf0c      	ite	eq
 80076f0:	2001      	moveq	r0, #1
 80076f2:	2000      	movne	r0, #0
 80076f4:	42a8      	cmp	r0, r5
 80076f6:	d1f5      	bne.n	80076e4 <I2S_WaitFlagStateUntilTimeout+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80076f8:	2000      	movs	r0, #0
}
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80076fe:	f7fd ff7f 	bl	8005600 <HAL_GetTick>
 8007702:	eba0 0009 	sub.w	r0, r0, r9
 8007706:	42b8      	cmp	r0, r7
 8007708:	d3e9      	bcc.n	80076de <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 800770a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hi2s);
 800770c:	2300      	movs	r3, #0
        hi2s->State = HAL_I2S_STATE_READY;
 800770e:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        return HAL_TIMEOUT;
 8007712:	2003      	movs	r0, #3
        __HAL_UNLOCK(hi2s);
 8007714:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_TIMEOUT;
 8007718:	e7ef      	b.n	80076fa <I2S_WaitFlagStateUntilTimeout+0x2e>
 800771a:	bf00      	nop

0800771c <HAL_I2S_Init>:
  if (hi2s == NULL)
 800771c:	2800      	cmp	r0, #0
 800771e:	f000 8085 	beq.w	800782c <HAL_I2S_Init+0x110>
{
 8007722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007724:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007728:	4604      	mov	r4, r0
 800772a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800772e:	2b00      	cmp	r3, #0
 8007730:	d075      	beq.n	800781e <HAL_I2S_Init+0x102>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8007732:	2202      	movs	r2, #2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007734:	6821      	ldr	r1, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8007736:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800773a:	69c8      	ldr	r0, [r1, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800773c:	6963      	ldr	r3, [r4, #20]
 800773e:	68e5      	ldr	r5, [r4, #12]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007740:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8007744:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007748:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800774a:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 800774c:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800774e:	d027      	beq.n	80077a0 <HAL_I2S_Init+0x84>
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007750:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8007752:	2d00      	cmp	r5, #0
 8007754:	bf0c      	ite	eq
 8007756:	2510      	moveq	r5, #16
 8007758:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800775a:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800775c:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800775e:	bf98      	it	ls
 8007760:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007762:	f000 ff61 	bl	8008628 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007766:	6922      	ldr	r2, [r4, #16]
 8007768:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800776c:	d060      	beq.n	8007830 <HAL_I2S_Init+0x114>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800776e:	fbb0 f0f5 	udiv	r0, r0, r5
 8007772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007776:	0043      	lsls	r3, r0, #1
 8007778:	6960      	ldr	r0, [r4, #20]
 800777a:	fbb3 f3f0 	udiv	r3, r3, r0
 800777e:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8007780:	4935      	ldr	r1, [pc, #212]	; (8007858 <HAL_I2S_Init+0x13c>)
 8007782:	fba1 1303 	umull	r1, r3, r1, r3
 8007786:	08db      	lsrs	r3, r3, #3
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007788:	0859      	lsrs	r1, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800778a:	1e88      	subs	r0, r1, #2
 800778c:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800778e:	f003 0301 	and.w	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007792:	d95a      	bls.n	800784a <HAL_I2S_Init+0x12e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007794:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007796:	f043 0310 	orr.w	r3, r3, #16
 800779a:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 800779c:	2001      	movs	r0, #1
}
 800779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a0:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80077a2:	69a7      	ldr	r7, [r4, #24]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80077a4:	f8d4 e020 	ldr.w	lr, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80077a8:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800786c <HAL_I2S_Init+0x150>
 80077ac:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80077b0:	4313      	orrs	r3, r2
 80077b2:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80077b4:	ea46 0300 	orr.w	r3, r6, r0
 80077b8:	69ca      	ldr	r2, [r1, #28]
 80077ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077be:	433b      	orrs	r3, r7
 80077c0:	432b      	orrs	r3, r5
 80077c2:	ea02 020c 	and.w	r2, r2, ip
 80077c6:	4313      	orrs	r3, r2
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80077c8:	f1be 0f01 	cmp.w	lr, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80077cc:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80077ce:	d120      	bne.n	8007812 <HAL_I2S_Init+0xf6>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077d0:	4a22      	ldr	r2, [pc, #136]	; (800785c <HAL_I2S_Init+0x140>)
 80077d2:	4b23      	ldr	r3, [pc, #140]	; (8007860 <HAL_I2S_Init+0x144>)
 80077d4:	4291      	cmp	r1, r2
 80077d6:	bf0c      	ite	eq
 80077d8:	4619      	moveq	r1, r3
 80077da:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80077de:	4b21      	ldr	r3, [pc, #132]	; (8007864 <HAL_I2S_Init+0x148>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077e0:	69ca      	ldr	r2, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80077e2:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077e4:	ea02 020c 	and.w	r2, r2, ip
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80077e8:	f04f 0c02 	mov.w	ip, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077ec:	61ca      	str	r2, [r1, #28]
 80077ee:	ea40 0307 	orr.w	r3, r0, r7
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80077f2:	f8c1 c020 	str.w	ip, [r1, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80077f6:	69ca      	ldr	r2, [r1, #28]
 80077f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077fc:	432b      	orrs	r3, r5
 80077fe:	4313      	orrs	r3, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007800:	f436 7000 	bics.w	r0, r6, #512	; 0x200
 8007804:	b29b      	uxth	r3, r3
 8007806:	bf14      	ite	ne
 8007808:	2200      	movne	r2, #0
 800780a:	f44f 7280 	moveq.w	r2, #256	; 0x100
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800780e:	4313      	orrs	r3, r2
 8007810:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007812:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8007814:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007816:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007818:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800781c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <HAL_I2S_Init+0x14c>)
    hi2s->Lock = HAL_UNLOCKED;
 8007820:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007824:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8007826:	f7fc fdd5 	bl	80043d4 <HAL_I2S_MspInit>
 800782a:	e782      	b.n	8007732 <HAL_I2S_Init+0x16>
    return HAL_ERROR;
 800782c:	2001      	movs	r0, #1
}
 800782e:	4770      	bx	lr
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007830:	68e3      	ldr	r3, [r4, #12]
 8007832:	6961      	ldr	r1, [r4, #20]
 8007834:	b173      	cbz	r3, 8007854 <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007836:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007838:	fbb0 f0f5 	udiv	r0, r0, r5
 800783c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007840:	0043      	lsls	r3, r0, #1
 8007842:	fbb3 f3f1 	udiv	r3, r3, r1
 8007846:	3305      	adds	r3, #5
 8007848:	e79a      	b.n	8007780 <HAL_I2S_Init+0x64>
 800784a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800784e:	68e5      	ldr	r5, [r4, #12]
 8007850:	6821      	ldr	r1, [r4, #0]
 8007852:	e7a6      	b.n	80077a2 <HAL_I2S_Init+0x86>
 8007854:	00ed      	lsls	r5, r5, #3
 8007856:	e7ef      	b.n	8007838 <HAL_I2S_Init+0x11c>
 8007858:	cccccccd 	.word	0xcccccccd
 800785c:	40003800 	.word	0x40003800
 8007860:	40003400 	.word	0x40003400
 8007864:	08007c99 	.word	0x08007c99
 8007868:	08007b5d 	.word	0x08007b5d
 800786c:	fffff040 	.word	0xfffff040

08007870 <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8007870:	2900      	cmp	r1, #0
 8007872:	d03e      	beq.n	80078f2 <HAL_I2S_Transmit_DMA+0x82>
 8007874:	2a00      	cmp	r2, #0
 8007876:	d03c      	beq.n	80078f2 <HAL_I2S_Transmit_DMA+0x82>
{
 8007878:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2s);
 800787a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800787e:	2b01      	cmp	r3, #1
 8007880:	d04f      	beq.n	8007922 <HAL_I2S_Transmit_DMA+0xb2>
 8007882:	2301      	movs	r3, #1
 8007884:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8007888:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800788c:	2b01      	cmp	r3, #1
 800788e:	d132      	bne.n	80078f6 <HAL_I2S_Transmit_DMA+0x86>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007890:	2403      	movs	r4, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007892:	2300      	movs	r3, #0
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007894:	6805      	ldr	r5, [r0, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007896:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800789a:	6443      	str	r3, [r0, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800789c:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 800789e:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80078a0:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d02b      	beq.n	8007900 <HAL_I2S_Transmit_DMA+0x90>
 80078a8:	2b05      	cmp	r3, #5
 80078aa:	d029      	beq.n	8007900 <HAL_I2S_Transmit_DMA+0x90>
    hi2s->TxXferSize = Size;
 80078ac:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80078ae:	8542      	strh	r2, [r0, #42]	; 0x2a
 80078b0:	4604      	mov	r4, r0
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80078b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_I2S_Transmit_DMA+0xb8>)
                                 hi2s->TxXferSize))
 80078b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80078b8:	6402      	str	r2, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80078ba:	4a1c      	ldr	r2, [pc, #112]	; (800792c <HAL_I2S_Transmit_DMA+0xbc>)
 80078bc:	63c2      	str	r2, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80078be:	4a1c      	ldr	r2, [pc, #112]	; (8007930 <HAL_I2S_Transmit_DMA+0xc0>)
 80078c0:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80078c2:	f105 020c 	add.w	r2, r5, #12
 80078c6:	f7fe fa11 	bl	8005cec <HAL_DMA_Start_IT>
 80078ca:	b9f0      	cbnz	r0, 800790a <HAL_I2S_Transmit_DMA+0x9a>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	0551      	lsls	r1, r2, #21
 80078d2:	d403      	bmi.n	80078dc <HAL_I2S_Transmit_DMA+0x6c>
    __HAL_I2S_ENABLE(hi2s);
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078da:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	0792      	lsls	r2, r2, #30
 80078e0:	d403      	bmi.n	80078ea <HAL_I2S_Transmit_DMA+0x7a>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	f042 0202 	orr.w	r2, r2, #2
 80078e8:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 80078ea:	2300      	movs	r3, #0
 80078ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 80078f2:	2001      	movs	r0, #1
}
 80078f4:	4770      	bx	lr
    __HAL_UNLOCK(hi2s);
 80078f6:	2300      	movs	r3, #0
 80078f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 80078fc:	2002      	movs	r0, #2
}
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = (Size << 1U);
 8007900:	0053      	lsls	r3, r2, #1
 8007902:	b29b      	uxth	r3, r3
 8007904:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007906:	8543      	strh	r3, [r0, #42]	; 0x2a
 8007908:	e7d2      	b.n	80078b0 <HAL_I2S_Transmit_DMA+0x40>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800790a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800790c:	2201      	movs	r2, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800790e:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 8007912:	2100      	movs	r1, #0
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007914:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8007916:	4610      	mov	r0, r2
    hi2s->State = HAL_I2S_STATE_READY;
 8007918:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 800791c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
}
 8007920:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 8007922:	2002      	movs	r0, #2
}
 8007924:	bd38      	pop	{r3, r4, r5, pc}
 8007926:	bf00      	nop
 8007928:	08007b31 	.word	0x08007b31
 800792c:	08007b3d 	.word	0x08007b3d
 8007930:	08007c65 	.word	0x08007c65

08007934 <HAL_I2S_DMAStop>:
{
 8007934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007938:	6843      	ldr	r3, [r0, #4]
 800793a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 800793e:	b085      	sub	sp, #20
 8007940:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007942:	d004      	beq.n	800794e <HAL_I2S_DMAStop+0x1a>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8007944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007948:	d066      	beq.n	8007a18 <HAL_I2S_DMAStop+0xe4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800794a:	2500      	movs	r5, #0
 800794c:	e035      	b.n	80079ba <HAL_I2S_DMAStop+0x86>
    if (hi2s->hdmatx != NULL)
 800794e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007950:	b120      	cbz	r0, 800795c <HAL_I2S_DMAStop+0x28>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007952:	f7fe fa09 	bl	8005d68 <HAL_DMA_Abort>
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 8082 	bne.w	8007a60 <HAL_I2S_DMAStop+0x12c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800795c:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800795e:	2364      	movs	r3, #100	; 0x64
 8007960:	2201      	movs	r2, #1
 8007962:	2102      	movs	r1, #2
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff feb1 	bl	80076cc <I2S_WaitFlagStateUntilTimeout>
 800796a:	b130      	cbz	r0, 800797a <HAL_I2S_DMAStop+0x46>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800796c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800796e:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007970:	4313      	orrs	r3, r2
 8007972:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode   = HAL_ERROR;
 8007974:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 8007976:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800797a:	2364      	movs	r3, #100	; 0x64
 800797c:	2200      	movs	r2, #0
 800797e:	2180      	movs	r1, #128	; 0x80
 8007980:	4620      	mov	r0, r4
 8007982:	f7ff fea3 	bl	80076cc <I2S_WaitFlagStateUntilTimeout>
 8007986:	b130      	cbz	r0, 8007996 <HAL_I2S_DMAStop+0x62>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007988:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800798a:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800798c:	4313      	orrs	r3, r2
 800798e:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode   = HAL_ERROR;
 8007990:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 8007992:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	69da      	ldr	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800799a:	2100      	movs	r1, #0
    __HAL_I2S_DISABLE(hi2s);
 800799c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a0:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80079a2:	9100      	str	r1, [sp, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	9200      	str	r2, [sp, #0]
 80079a8:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	f022 0202 	bic.w	r2, r2, #2
 80079b0:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80079b2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80079b6:	2a05      	cmp	r2, #5
 80079b8:	d006      	beq.n	80079c8 <HAL_I2S_DMAStop+0x94>
  hi2s->State = HAL_I2S_STATE_READY;
 80079ba:	2301      	movs	r3, #1
}
 80079bc:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 80079be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80079c2:	b005      	add	sp, #20
 80079c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (hi2s->hdmarx != NULL)
 80079c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80079ca:	b120      	cbz	r0, 80079d6 <HAL_I2S_DMAStop+0xa2>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80079cc:	f7fe f9cc 	bl	8005d68 <HAL_DMA_Abort>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d14d      	bne.n	8007a70 <HAL_I2S_DMAStop+0x13c>
 80079d4:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE(hi2s);
 80079d6:	4854      	ldr	r0, [pc, #336]	; (8007b28 <HAL_I2S_DMAStop+0x1f4>)
 80079d8:	4a54      	ldr	r2, [pc, #336]	; (8007b2c <HAL_I2S_DMAStop+0x1f8>)
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80079da:	6861      	ldr	r1, [r4, #4]
      __HAL_I2SEXT_DISABLE(hi2s);
 80079dc:	4283      	cmp	r3, r0
 80079de:	bf0c      	ite	eq
 80079e0:	4613      	moveq	r3, r2
 80079e2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80079e6:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE(hi2s);
 80079e8:	69da      	ldr	r2, [r3, #28]
 80079ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ee:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80079f0:	9001      	str	r0, [sp, #4]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	9201      	str	r2, [sp, #4]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	9201      	str	r2, [sp, #4]
 80079fa:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8007a04:	bb51      	cbnz	r1, 8007a5c <HAL_I2S_DMAStop+0x128>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007a06:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007a08:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a0e:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode = HAL_ERROR;
 8007a10:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 8007a12:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8007a16:	e7d0      	b.n	80079ba <HAL_I2S_DMAStop+0x86>
    if (hi2s->hdmarx != NULL)
 8007a18:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007a1a:	b338      	cbz	r0, 8007a6c <HAL_I2S_DMAStop+0x138>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007a1c:	f7fe f9a4 	bl	8005d68 <HAL_DMA_Abort>
 8007a20:	b320      	cbz	r0, 8007a6c <HAL_I2S_DMAStop+0x138>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a24:	f043 0308 	orr.w	r3, r3, #8
 8007a28:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007a2a:	2501      	movs	r5, #1
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007a2c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	d024      	beq.n	8007a7e <HAL_I2S_DMAStop+0x14a>
 8007a34:	6823      	ldr	r3, [r4, #0]
    __HAL_I2S_DISABLE(hi2s);
 8007a36:	69da      	ldr	r2, [r3, #28]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007a38:	6861      	ldr	r1, [r4, #4]
    __HAL_I2S_DISABLE(hi2s);
 8007a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007a3e:	2000      	movs	r0, #0
    __HAL_I2S_DISABLE(hi2s);
 8007a40:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007a42:	9003      	str	r0, [sp, #12]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	9203      	str	r2, [sp, #12]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	9203      	str	r2, [sp, #12]
 8007a4c:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a4e:	685a      	ldr	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007a50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a54:	f022 0201 	bic.w	r2, r2, #1
 8007a58:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007a5a:	d0d4      	beq.n	8007a06 <HAL_I2S_DMAStop+0xd2>
      READ_REG((hi2s->Instance)->DR);
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	e7ac      	b.n	80079ba <HAL_I2S_DMAStop+0x86>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a62:	f043 0308 	orr.w	r3, r3, #8
 8007a66:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007a68:	2501      	movs	r5, #1
 8007a6a:	e778      	b.n	800795e <HAL_I2S_DMAStop+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a6c:	2500      	movs	r5, #0
 8007a6e:	e7dd      	b.n	8007a2c <HAL_I2S_DMAStop+0xf8>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a70:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f042 0208 	orr.w	r2, r2, #8
 8007a78:	6462      	str	r2, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007a7a:	2501      	movs	r5, #1
 8007a7c:	e7ab      	b.n	80079d6 <HAL_I2S_DMAStop+0xa2>
      if (hi2s->hdmatx != NULL)
 8007a7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a80:	b138      	cbz	r0, 8007a92 <HAL_I2S_DMAStop+0x15e>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007a82:	f7fe f971 	bl	8005d68 <HAL_DMA_Abort>
 8007a86:	b120      	cbz	r0, 8007a92 <HAL_I2S_DMAStop+0x15e>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a8a:	f043 0308 	orr.w	r3, r3, #8
 8007a8e:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007a90:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8007a92:	f7fd fdb5 	bl	8005600 <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007a96:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007b28 <HAL_I2S_DMAStop+0x1f4>
 8007a9a:	4f24      	ldr	r7, [pc, #144]	; (8007b2c <HAL_I2S_DMAStop+0x1f8>)
      tickstart = HAL_GetTick();
 8007a9c:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8007a9e:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007aa2:	e004      	b.n	8007aae <HAL_I2S_DMAStop+0x17a>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007aa4:	f7fd fdac 	bl	8005600 <HAL_GetTick>
 8007aa8:	1b80      	subs	r0, r0, r6
 8007aaa:	2864      	cmp	r0, #100	; 0x64
 8007aac:	d82a      	bhi.n	8007b04 <HAL_I2S_DMAStop+0x1d0>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	4543      	cmp	r3, r8
 8007ab2:	bf0c      	ite	eq
 8007ab4:	463a      	moveq	r2, r7
 8007ab6:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8007aba:	6892      	ldr	r2, [r2, #8]
 8007abc:	0792      	lsls	r2, r2, #30
 8007abe:	d5f1      	bpl.n	8007aa4 <HAL_I2S_DMAStop+0x170>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007ac0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007b28 <HAL_I2S_DMAStop+0x1f4>
 8007ac4:	4f19      	ldr	r7, [pc, #100]	; (8007b2c <HAL_I2S_DMAStop+0x1f8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8007ac6:	f04f 0901 	mov.w	r9, #1
 8007aca:	e005      	b.n	8007ad8 <HAL_I2S_DMAStop+0x1a4>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007acc:	f7fd fd98 	bl	8005600 <HAL_GetTick>
 8007ad0:	1b80      	subs	r0, r0, r6
 8007ad2:	2864      	cmp	r0, #100	; 0x64
 8007ad4:	d81e      	bhi.n	8007b14 <HAL_I2S_DMAStop+0x1e0>
 8007ad6:	6823      	ldr	r3, [r4, #0]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007ad8:	4543      	cmp	r3, r8
 8007ada:	bf0c      	ite	eq
 8007adc:	4639      	moveq	r1, r7
 8007ade:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8007ae2:	688a      	ldr	r2, [r1, #8]
 8007ae4:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8007ae8:	d1f0      	bne.n	8007acc <HAL_I2S_DMAStop+0x198>
      __HAL_I2SEXT_DISABLE(hi2s);
 8007aea:	69c8      	ldr	r0, [r1, #28]
 8007aec:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8007af0:	61c8      	str	r0, [r1, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007af2:	9202      	str	r2, [sp, #8]
 8007af4:	688a      	ldr	r2, [r1, #8]
 8007af6:	9202      	str	r2, [sp, #8]
 8007af8:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007afa:	684a      	ldr	r2, [r1, #4]
 8007afc:	f022 0202 	bic.w	r2, r2, #2
 8007b00:	604a      	str	r2, [r1, #4]
 8007b02:	e798      	b.n	8007a36 <HAL_I2S_DMAStop+0x102>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007b04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b06:	f043 0301 	orr.w	r3, r3, #1
 8007b0a:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8007b0c:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8007b0e:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 8007b12:	e7cc      	b.n	8007aae <HAL_I2S_DMAStop+0x17a>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007b14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	f042 0201 	orr.w	r2, r2, #1
 8007b1c:	6462      	str	r2, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8007b1e:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8007b20:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 8007b24:	e7d8      	b.n	8007ad8 <HAL_I2S_DMAStop+0x1a4>
 8007b26:	bf00      	nop
 8007b28:	40003800 	.word	0x40003800
 8007b2c:	40003400 	.word	0x40003400

08007b30 <I2S_DMATxHalfCplt>:
{
 8007b30:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007b32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007b34:	f7fd f9ec 	bl	8004f10 <HAL_I2S_TxHalfCpltCallback>
}
 8007b38:	bd08      	pop	{r3, pc}
 8007b3a:	bf00      	nop

08007b3c <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b3c:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007b40:	b510      	push	{r4, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b42:	b943      	cbnz	r3, 8007b56 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b44:	6801      	ldr	r1, [r0, #0]
 8007b46:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007b48:	2401      	movs	r4, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b4a:	f022 0202 	bic.w	r2, r2, #2
 8007b4e:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8007b50:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007b52:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8007b56:	f7fd f9cf 	bl	8004ef8 <HAL_I2S_TxCpltCallback>
}
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <I2S_IRQHandler>:
{
 8007b5c:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007b5e:	6803      	ldr	r3, [r0, #0]
{
 8007b60:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007b66:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007b6a:	2a04      	cmp	r2, #4
{
 8007b6c:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007b6e:	d034      	beq.n	8007bda <I2S_IRQHandler+0x7e>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007b70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d001      	beq.n	8007b7c <I2S_IRQHandler+0x20>
}
 8007b78:	b004      	add	sp, #16
 8007b7a:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007b7c:	9b01      	ldr	r3, [sp, #4]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	d510      	bpl.n	8007ba4 <I2S_IRQHandler+0x48>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	0610      	lsls	r0, r2, #24
 8007b88:	d50c      	bpl.n	8007ba4 <I2S_IRQHandler+0x48>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b8c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8007b90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8007b94:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8007b96:	3a01      	subs	r2, #1
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8007b9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007b9e:	b292      	uxth	r2, r2
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	d049      	beq.n	8007c38 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007ba4:	9b01      	ldr	r3, [sp, #4]
 8007ba6:	0719      	lsls	r1, r3, #28
 8007ba8:	d5e6      	bpl.n	8007b78 <I2S_IRQHandler+0x1c>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	0692      	lsls	r2, r2, #26
 8007bb0:	d5e2      	bpl.n	8007b78 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bb2:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007bb4:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bba:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007bbc:	9103      	str	r1, [sp, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8007bc2:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007bc4:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8007bc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bcc:	f043 0304 	orr.w	r3, r3, #4
 8007bd0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7fd f9b0 	bl	8004f38 <HAL_I2S_ErrorCallback>
}
 8007bd8:	e7ce      	b.n	8007b78 <I2S_IRQHandler+0x1c>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007bda:	9a01      	ldr	r2, [sp, #4]
 8007bdc:	07d1      	lsls	r1, r2, #31
 8007bde:	d50e      	bpl.n	8007bfe <I2S_IRQHandler+0xa2>
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	0652      	lsls	r2, r2, #25
 8007be4:	d50b      	bpl.n	8007bfe <I2S_IRQHandler+0xa2>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007be6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8007bee:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8007bf0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8007bf8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	b33a      	cbz	r2, 8007c4e <I2S_IRQHandler+0xf2>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	0659      	lsls	r1, r3, #25
 8007c02:	d5b5      	bpl.n	8007b70 <I2S_IRQHandler+0x14>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	0692      	lsls	r2, r2, #26
 8007c0a:	d5b1      	bpl.n	8007b70 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c0c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007c0e:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c14:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007c16:	9102      	str	r1, [sp, #8]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	9202      	str	r2, [sp, #8]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8007c20:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007c22:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8007c24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c2a:	f043 0302 	orr.w	r3, r3, #2
 8007c2e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007c30:	4620      	mov	r0, r4
 8007c32:	f7fd f981 	bl	8004f38 <HAL_I2S_ErrorCallback>
 8007c36:	e79b      	b.n	8007b70 <I2S_IRQHandler+0x14>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c38:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007c3a:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c40:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8007c42:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8007c44:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8007c48:	f7fd f956 	bl	8004ef8 <HAL_I2S_TxCpltCallback>
 8007c4c:	e7aa      	b.n	8007ba4 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c4e:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007c50:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c56:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007c58:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8007c5c:	f7fd f966 	bl	8004f2c <HAL_I2S_RxCpltCallback>
 8007c60:	e7cd      	b.n	8007bfe <I2S_IRQHandler+0xa2>
 8007c62:	bf00      	nop

08007c64 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c64:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007c66:	6801      	ldr	r1, [r0, #0]
 8007c68:	684b      	ldr	r3, [r1, #4]
{
 8007c6a:	b510      	push	{r4, lr}
  hi2s->TxXferCount = 0U;
 8007c6c:	2200      	movs	r2, #0
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
  hi2s->State = HAL_I2S_STATE_READY;
 8007c72:	2401      	movs	r4, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007c74:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8007c76:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8007c78:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8007c7a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007c7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007c80:	f043 0308 	orr.w	r3, r3, #8
 8007c84:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8007c86:	f7fd f957 	bl	8004f38 <HAL_I2S_ErrorCallback>
}
 8007c8a:	bd10      	pop	{r4, pc}

08007c8c <HAL_I2S_GetState>:
  return hi2s->State;
 8007c8c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop

08007c94 <HAL_I2SEx_TxRxCpltCallback>:
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop

08007c98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c98:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007c9a:	4a93      	ldr	r2, [pc, #588]	; (8007ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007c9c:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007c9e:	4b93      	ldr	r3, [pc, #588]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007ca0:	68a9      	ldr	r1, [r5, #8]
{
 8007ca2:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007ca4:	4295      	cmp	r5, r2
 8007ca6:	bf18      	it	ne
 8007ca8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007cac:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007cae:	6899      	ldr	r1, [r3, #8]
 8007cb0:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007cb2:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007cb4:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007cb6:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007cb8:	6859      	ldr	r1, [r3, #4]
 8007cba:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007cbc:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8007cc0:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007cc2:	d075      	beq.n	8007db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007cc4:	9a01      	ldr	r2, [sp, #4]
 8007cc6:	0791      	lsls	r1, r2, #30
 8007cc8:	d51a      	bpl.n	8007d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8007cca:	9a03      	ldr	r2, [sp, #12]
 8007ccc:	0612      	lsls	r2, r2, #24
 8007cce:	d517      	bpl.n	8007d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007cd0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007cd2:	1c91      	adds	r1, r2, #2
 8007cd4:	8812      	ldrh	r2, [r2, #0]
 8007cd6:	6241      	str	r1, [r0, #36]	; 0x24
 8007cd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007cda:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007cdc:	3a01      	subs	r2, #1
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ce2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007ce4:	b292      	uxth	r2, r2
 8007ce6:	b95a      	cbnz	r2, 8007d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007cee:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007cf0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	b923      	cbnz	r3, 8007d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cfc:	f7ff ffca 	bl	8007c94 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	07db      	lsls	r3, r3, #31
 8007d04:	d51c      	bpl.n	8007d40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8007d06:	9b02      	ldr	r3, [sp, #8]
 8007d08:	065d      	lsls	r5, r3, #25
 8007d0a:	d519      	bpl.n	8007d40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	1c98      	adds	r0, r3, #2
 8007d12:	68d1      	ldr	r1, [r2, #12]
 8007d14:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007d16:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8007d18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007d20:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	b963      	cbnz	r3, 8007d40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d26:	6853      	ldr	r3, [r2, #4]
 8007d28:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007d2c:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8007d2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	b92b      	cbnz	r3, 8007d40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff ffaa 	bl	8007c94 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d40:	9b00      	ldr	r3, [sp, #0]
 8007d42:	0658      	lsls	r0, r3, #25
 8007d44:	d51b      	bpl.n	8007d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	0699      	lsls	r1, r3, #26
 8007d4a:	d518      	bpl.n	8007d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d4c:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d4e:	4866      	ldr	r0, [pc, #408]	; (8007ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d50:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d52:	4b66      	ldr	r3, [pc, #408]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d54:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d58:	4282      	cmp	r2, r0
 8007d5a:	bf18      	it	ne
 8007d5c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d60:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d62:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007d64:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d6a:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007d6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007d70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d72:	f043 0302 	orr.w	r3, r3, #2
 8007d76:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7fd f8dd 	bl	8004f38 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	071a      	lsls	r2, r3, #28
 8007d82:	d56e      	bpl.n	8007e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	069b      	lsls	r3, r3, #26
 8007d88:	d56b      	bpl.n	8007e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	4956      	ldr	r1, [pc, #344]	; (8007ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8007d8e:	4b57      	ldr	r3, [pc, #348]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8007d90:	428a      	cmp	r2, r1
 8007d92:	bf18      	it	ne
 8007d94:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8007d98:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d9a:	6859      	ldr	r1, [r3, #4]
 8007d9c:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8007da0:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007da2:	6853      	ldr	r3, [r2, #4]
 8007da4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007da8:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007daa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8007dae:	e04e      	b.n	8007e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007db0:	9b00      	ldr	r3, [sp, #0]
 8007db2:	079a      	lsls	r2, r3, #30
 8007db4:	d502      	bpl.n	8007dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8007db6:	9b02      	ldr	r3, [sp, #8]
 8007db8:	061b      	lsls	r3, r3, #24
 8007dba:	d477      	bmi.n	8007eac <HAL_I2SEx_FullDuplex_IRQHandler+0x214>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007dbc:	9b01      	ldr	r3, [sp, #4]
 8007dbe:	07d8      	lsls	r0, r3, #31
 8007dc0:	d502      	bpl.n	8007dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	0659      	lsls	r1, r3, #25
 8007dc6:	d44e      	bmi.n	8007e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	065a      	lsls	r2, r3, #25
 8007dcc:	d522      	bpl.n	8007e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	069b      	lsls	r3, r3, #26
 8007dd2:	d51f      	bpl.n	8007e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	4944      	ldr	r1, [pc, #272]	; (8007ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8007dd8:	4a44      	ldr	r2, [pc, #272]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8007dda:	428b      	cmp	r3, r1
 8007ddc:	bf18      	it	ne
 8007dde:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007de2:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007de4:	6851      	ldr	r1, [r2, #4]
 8007de6:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8007dea:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007df2:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007df4:	9004      	str	r0, [sp, #16]
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	9204      	str	r2, [sp, #16]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8007dfe:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007e00:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e08:	f043 0302 	orr.w	r3, r3, #2
 8007e0c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7fd f892 	bl	8004f38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e14:	9b00      	ldr	r3, [sp, #0]
 8007e16:	071d      	lsls	r5, r3, #28
 8007e18:	d523      	bpl.n	8007e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8007e1a:	9b02      	ldr	r3, [sp, #8]
 8007e1c:	0698      	lsls	r0, r3, #26
 8007e1e:	d520      	bpl.n	8007e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e20:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e22:	4831      	ldr	r0, [pc, #196]	; (8007ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e24:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e26:	4a31      	ldr	r2, [pc, #196]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e28:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e2c:	4283      	cmp	r3, r0
 8007e2e:	bf18      	it	ne
 8007e30:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e34:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e36:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007e38:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e3a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8007e3e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007e40:	9005      	str	r0, [sp, #20]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e46:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007e48:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8007e4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007e50:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e52:	f043 0304 	orr.w	r3, r3, #4
 8007e56:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007e58:	b007      	add	sp, #28
 8007e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8007e5e:	f7fd b86b 	b.w	8004f38 <HAL_I2S_ErrorCallback>
}
 8007e62:	b007      	add	sp, #28
 8007e64:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007e66:	6820      	ldr	r0, [r4, #0]
 8007e68:	491f      	ldr	r1, [pc, #124]	; (8007ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8007e6a:	4a20      	ldr	r2, [pc, #128]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8007e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e6e:	4288      	cmp	r0, r1
 8007e70:	bf18      	it	ne
 8007e72:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8007e76:	1c98      	adds	r0, r3, #2
 8007e78:	68d1      	ldr	r1, [r2, #12]
 8007e7a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007e7c:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8007e7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007e86:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d19c      	bne.n	8007dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e8e:	6853      	ldr	r3, [r2, #4]
 8007e90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007e94:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8007e96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d194      	bne.n	8007dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f7ff fef5 	bl	8007c94 <HAL_I2SEx_TxRxCpltCallback>
 8007eaa:	e78d      	b.n	8007dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007eae:	1c9a      	adds	r2, r3, #2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	6242      	str	r2, [r0, #36]	; 0x24
 8007eb4:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 8007eb6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8007ebe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f47f af7a 	bne.w	8007dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ec8:	686b      	ldr	r3, [r5, #4]
 8007eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ece:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 8007ed0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f47f af71 	bne.w	8007dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ee0:	f7ff fed8 	bl	8007c94 <HAL_I2SEx_TxRxCpltCallback>
 8007ee4:	e76a      	b.n	8007dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8007ee6:	bf00      	nop
 8007ee8:	40003800 	.word	0x40003800
 8007eec:	40003400 	.word	0x40003400

08007ef0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f000 8132 	beq.w	800815a <HAL_RCC_OscConfig+0x26a>
{
 8007ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007efa:	6803      	ldr	r3, [r0, #0]
 8007efc:	07dd      	lsls	r5, r3, #31
{
 8007efe:	b082      	sub	sp, #8
 8007f00:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f02:	d52f      	bpl.n	8007f64 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f04:	49ac      	ldr	r1, [pc, #688]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 8007f06:	688a      	ldr	r2, [r1, #8]
 8007f08:	f002 020c 	and.w	r2, r2, #12
 8007f0c:	2a04      	cmp	r2, #4
 8007f0e:	f000 80ea 	beq.w	80080e6 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f12:	688a      	ldr	r2, [r1, #8]
 8007f14:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f18:	2a08      	cmp	r2, #8
 8007f1a:	f000 80e0 	beq.w	80080de <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f1e:	6863      	ldr	r3, [r4, #4]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f24:	f000 80e9 	beq.w	80080fa <HAL_RCC_OscConfig+0x20a>
 8007f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f2c:	f000 8178 	beq.w	8008220 <HAL_RCC_OscConfig+0x330>
 8007f30:	4da1      	ldr	r5, [pc, #644]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 8007f32:	682a      	ldr	r2, [r5, #0]
 8007f34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	682a      	ldr	r2, [r5, #0]
 8007f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f40:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 80de 	bne.w	8008104 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f48:	f7fd fb5a 	bl	8005600 <HAL_GetTick>
 8007f4c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f4e:	e005      	b.n	8007f5c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f50:	f7fd fb56 	bl	8005600 <HAL_GetTick>
 8007f54:	1b80      	subs	r0, r0, r6
 8007f56:	2864      	cmp	r0, #100	; 0x64
 8007f58:	f200 80f2 	bhi.w	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	039b      	lsls	r3, r3, #14
 8007f60:	d4f6      	bmi.n	8007f50 <HAL_RCC_OscConfig+0x60>
 8007f62:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f64:	079f      	lsls	r7, r3, #30
 8007f66:	d475      	bmi.n	8008054 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f68:	071a      	lsls	r2, r3, #28
 8007f6a:	d515      	bpl.n	8007f98 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f6c:	6963      	ldr	r3, [r4, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80a5 	beq.w	80080be <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f74:	4b91      	ldr	r3, [pc, #580]	; (80081bc <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f76:	4d90      	ldr	r5, [pc, #576]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007f7c:	f7fd fb40 	bl	8005600 <HAL_GetTick>
 8007f80:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f82:	e005      	b.n	8007f90 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f84:	f7fd fb3c 	bl	8005600 <HAL_GetTick>
 8007f88:	1b80      	subs	r0, r0, r6
 8007f8a:	2802      	cmp	r0, #2
 8007f8c:	f200 80d8 	bhi.w	8008140 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007f92:	079b      	lsls	r3, r3, #30
 8007f94:	d5f6      	bpl.n	8007f84 <HAL_RCC_OscConfig+0x94>
 8007f96:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f98:	0758      	lsls	r0, r3, #29
 8007f9a:	d53b      	bpl.n	8008014 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f9c:	4a86      	ldr	r2, [pc, #536]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 8007f9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007fa0:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	f040 80db 	bne.w	800815e <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007fbc:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fbe:	4d80      	ldr	r5, [pc, #512]	; (80081c0 <HAL_RCC_OscConfig+0x2d0>)
 8007fc0:	682a      	ldr	r2, [r5, #0]
 8007fc2:	05d1      	lsls	r1, r2, #23
 8007fc4:	f140 80ac 	bpl.w	8008120 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc8:	68a3      	ldr	r3, [r4, #8]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	f000 80c9 	beq.w	8008162 <HAL_RCC_OscConfig+0x272>
 8007fd0:	2b05      	cmp	r3, #5
 8007fd2:	f000 812f 	beq.w	8008234 <HAL_RCC_OscConfig+0x344>
 8007fd6:	4d78      	ldr	r5, [pc, #480]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 8007fd8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	672a      	str	r2, [r5, #112]	; 0x70
 8007fe0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8007fe2:	f022 0204 	bic.w	r2, r2, #4
 8007fe6:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 80bf 	bne.w	800816c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fee:	f7fd fb07 	bl	8005600 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007ff6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff8:	e006      	b.n	8008008 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ffa:	f7fd fb01 	bl	8005600 <HAL_GetTick>
 8007ffe:	eba0 0008 	sub.w	r0, r0, r8
 8008002:	42b8      	cmp	r0, r7
 8008004:	f200 809c 	bhi.w	8008140 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008008:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800800a:	0798      	lsls	r0, r3, #30
 800800c:	d4f5      	bmi.n	8007ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800800e:	2e00      	cmp	r6, #0
 8008010:	f040 80dc 	bne.w	80081cc <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008014:	69a0      	ldr	r0, [r4, #24]
 8008016:	b1c8      	cbz	r0, 800804c <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008018:	4d67      	ldr	r5, [pc, #412]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 800801a:	68aa      	ldr	r2, [r5, #8]
 800801c:	f002 020c 	and.w	r2, r2, #12
 8008020:	2a08      	cmp	r2, #8
 8008022:	f000 80d9 	beq.w	80081d8 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008026:	4a67      	ldr	r2, [pc, #412]	; (80081c4 <HAL_RCC_OscConfig+0x2d4>)
 8008028:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800802c:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802e:	f000 810b 	beq.w	8008248 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008032:	f7fd fae5 	bl	8005600 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008036:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8008038:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800803a:	e004      	b.n	8008046 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800803c:	f7fd fae0 	bl	8005600 <HAL_GetTick>
 8008040:	1b40      	subs	r0, r0, r5
 8008042:	2802      	cmp	r0, #2
 8008044:	d87c      	bhi.n	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	019b      	lsls	r3, r3, #6
 800804a:	d4f7      	bmi.n	800803c <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800804c:	2000      	movs	r0, #0
}
 800804e:	b002      	add	sp, #8
 8008050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008054:	4a58      	ldr	r2, [pc, #352]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 8008056:	6891      	ldr	r1, [r2, #8]
 8008058:	f011 0f0c 	tst.w	r1, #12
 800805c:	d024      	beq.n	80080a8 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800805e:	6891      	ldr	r1, [r2, #8]
 8008060:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008064:	2908      	cmp	r1, #8
 8008066:	d01c      	beq.n	80080a2 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008068:	68e3      	ldr	r3, [r4, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8092 	beq.w	8008194 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8008070:	4b55      	ldr	r3, [pc, #340]	; (80081c8 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008072:	4d51      	ldr	r5, [pc, #324]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8008074:	2201      	movs	r2, #1
 8008076:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008078:	f7fd fac2 	bl	8005600 <HAL_GetTick>
 800807c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800807e:	e004      	b.n	800808a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008080:	f7fd fabe 	bl	8005600 <HAL_GetTick>
 8008084:	1b80      	subs	r0, r0, r6
 8008086:	2802      	cmp	r0, #2
 8008088:	d85a      	bhi.n	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800808a:	682b      	ldr	r3, [r5, #0]
 800808c:	0798      	lsls	r0, r3, #30
 800808e:	d5f7      	bpl.n	8008080 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	6922      	ldr	r2, [r4, #16]
 8008094:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008098:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	e762      	b.n	8007f68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080a2:	6852      	ldr	r2, [r2, #4]
 80080a4:	0256      	lsls	r6, r2, #9
 80080a6:	d4df      	bmi.n	8008068 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a8:	4a43      	ldr	r2, [pc, #268]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	0795      	lsls	r5, r2, #30
 80080ae:	d54b      	bpl.n	8008148 <HAL_RCC_OscConfig+0x258>
 80080b0:	68e2      	ldr	r2, [r4, #12]
 80080b2:	2a01      	cmp	r2, #1
 80080b4:	d048      	beq.n	8008148 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 80080b6:	2001      	movs	r0, #1
}
 80080b8:	b002      	add	sp, #8
 80080ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80080be:	4a3f      	ldr	r2, [pc, #252]	; (80081bc <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080c0:	4d3d      	ldr	r5, [pc, #244]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80080c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80080c4:	f7fd fa9c 	bl	8005600 <HAL_GetTick>
 80080c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080ca:	e004      	b.n	80080d6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080cc:	f7fd fa98 	bl	8005600 <HAL_GetTick>
 80080d0:	1b80      	subs	r0, r0, r6
 80080d2:	2802      	cmp	r0, #2
 80080d4:	d834      	bhi.n	8008140 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80080d8:	079f      	lsls	r7, r3, #30
 80080da:	d4f7      	bmi.n	80080cc <HAL_RCC_OscConfig+0x1dc>
 80080dc:	e75b      	b.n	8007f96 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080de:	684a      	ldr	r2, [r1, #4]
 80080e0:	0250      	lsls	r0, r2, #9
 80080e2:	f57f af1c 	bpl.w	8007f1e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e6:	4a34      	ldr	r2, [pc, #208]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	0391      	lsls	r1, r2, #14
 80080ec:	f57f af3a 	bpl.w	8007f64 <HAL_RCC_OscConfig+0x74>
 80080f0:	6862      	ldr	r2, [r4, #4]
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	f47f af36 	bne.w	8007f64 <HAL_RCC_OscConfig+0x74>
 80080f8:	e7dd      	b.n	80080b6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080fa:	4a2f      	ldr	r2, [pc, #188]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008102:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008104:	f7fd fa7c 	bl	8005600 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008108:	4d2b      	ldr	r5, [pc, #172]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800810a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800810c:	e004      	b.n	8008118 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800810e:	f7fd fa77 	bl	8005600 <HAL_GetTick>
 8008112:	1b80      	subs	r0, r0, r6
 8008114:	2864      	cmp	r0, #100	; 0x64
 8008116:	d813      	bhi.n	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	039a      	lsls	r2, r3, #14
 800811c:	d5f7      	bpl.n	800810e <HAL_RCC_OscConfig+0x21e>
 800811e:	e720      	b.n	8007f62 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008120:	682a      	ldr	r2, [r5, #0]
 8008122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008126:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8008128:	f7fd fa6a 	bl	8005600 <HAL_GetTick>
 800812c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800812e:	682b      	ldr	r3, [r5, #0]
 8008130:	05da      	lsls	r2, r3, #23
 8008132:	f53f af49 	bmi.w	8007fc8 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008136:	f7fd fa63 	bl	8005600 <HAL_GetTick>
 800813a:	1bc0      	subs	r0, r0, r7
 800813c:	2802      	cmp	r0, #2
 800813e:	d9f6      	bls.n	800812e <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8008140:	2003      	movs	r0, #3
}
 8008142:	b002      	add	sp, #8
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008148:	491b      	ldr	r1, [pc, #108]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 800814a:	6920      	ldr	r0, [r4, #16]
 800814c:	680a      	ldr	r2, [r1, #0]
 800814e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008152:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8008156:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008158:	e706      	b.n	8007f68 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800815a:	2001      	movs	r0, #1
}
 800815c:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800815e:	2600      	movs	r6, #0
 8008160:	e72d      	b.n	8007fbe <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
 8008164:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800816c:	f7fd fa48 	bl	8005600 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008170:	4d11      	ldr	r5, [pc, #68]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8008172:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008174:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008178:	e005      	b.n	8008186 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800817a:	f7fd fa41 	bl	8005600 <HAL_GetTick>
 800817e:	eba0 0008 	sub.w	r0, r0, r8
 8008182:	42b8      	cmp	r0, r7
 8008184:	d8dc      	bhi.n	8008140 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008186:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008188:	079b      	lsls	r3, r3, #30
 800818a:	d5f6      	bpl.n	800817a <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800818c:	2e00      	cmp	r6, #0
 800818e:	f43f af41 	beq.w	8008014 <HAL_RCC_OscConfig+0x124>
 8008192:	e01b      	b.n	80081cc <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8008194:	4a0c      	ldr	r2, [pc, #48]	; (80081c8 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008196:	4d08      	ldr	r5, [pc, #32]	; (80081b8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8008198:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800819a:	f7fd fa31 	bl	8005600 <HAL_GetTick>
 800819e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081a0:	e004      	b.n	80081ac <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081a2:	f7fd fa2d 	bl	8005600 <HAL_GetTick>
 80081a6:	1b80      	subs	r0, r0, r6
 80081a8:	2802      	cmp	r0, #2
 80081aa:	d8c9      	bhi.n	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	0799      	lsls	r1, r3, #30
 80081b0:	d4f7      	bmi.n	80081a2 <HAL_RCC_OscConfig+0x2b2>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	e6d8      	b.n	8007f68 <HAL_RCC_OscConfig+0x78>
 80081b6:	bf00      	nop
 80081b8:	40023800 	.word	0x40023800
 80081bc:	42470e80 	.word	0x42470e80
 80081c0:	40007000 	.word	0x40007000
 80081c4:	42470060 	.word	0x42470060
 80081c8:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 80081cc:	4a35      	ldr	r2, [pc, #212]	; (80082a4 <HAL_RCC_OscConfig+0x3b4>)
 80081ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081d4:	6413      	str	r3, [r2, #64]	; 0x40
 80081d6:	e71d      	b.n	8008014 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081d8:	2801      	cmp	r0, #1
 80081da:	f43f af6d 	beq.w	80080b8 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80081de:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e0:	69e2      	ldr	r2, [r4, #28]
 80081e2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80081e6:	4291      	cmp	r1, r2
 80081e8:	f47f af65 	bne.w	80080b6 <HAL_RCC_OscConfig+0x1c6>
 80081ec:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081ee:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f2:	4291      	cmp	r1, r2
 80081f4:	f47f af5f 	bne.w	80080b6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80081f8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80081fe:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008200:	428a      	cmp	r2, r1
 8008202:	f47f af58 	bne.w	80080b6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008206:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008208:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800820c:	4291      	cmp	r1, r2
 800820e:	f47f af52 	bne.w	80080b6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008212:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008214:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8008218:	1a18      	subs	r0, r3, r0
 800821a:	bf18      	it	ne
 800821c:	2001      	movne	r0, #1
 800821e:	e74b      	b.n	80080b8 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008220:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <HAL_RCC_OscConfig+0x3b4>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e767      	b.n	8008104 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008234:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <HAL_RCC_OscConfig+0x3b4>)
 8008236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008238:	f042 0204 	orr.w	r2, r2, #4
 800823c:	671a      	str	r2, [r3, #112]	; 0x70
 800823e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	671a      	str	r2, [r3, #112]	; 0x70
 8008246:	e791      	b.n	800816c <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8008248:	f7fd f9da 	bl	8005600 <HAL_GetTick>
 800824c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800824e:	e005      	b.n	800825c <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008250:	f7fd f9d6 	bl	8005600 <HAL_GetTick>
 8008254:	1b80      	subs	r0, r0, r6
 8008256:	2802      	cmp	r0, #2
 8008258:	f63f af72 	bhi.w	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	0199      	lsls	r1, r3, #6
 8008260:	d4f6      	bmi.n	8008250 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008262:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8008266:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800826a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800826c:	4c0d      	ldr	r4, [pc, #52]	; (80082a4 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800826e:	4333      	orrs	r3, r6
 8008270:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008274:	0852      	lsrs	r2, r2, #1
 8008276:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800827a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800827c:	490a      	ldr	r1, [pc, #40]	; (80082a8 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800827e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8008282:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008284:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008286:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8008288:	f7fd f9ba 	bl	8005600 <HAL_GetTick>
 800828c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828e:	e005      	b.n	800829c <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008290:	f7fd f9b6 	bl	8005600 <HAL_GetTick>
 8008294:	1b40      	subs	r0, r0, r5
 8008296:	2802      	cmp	r0, #2
 8008298:	f63f af52 	bhi.w	8008140 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	019a      	lsls	r2, r3, #6
 80082a0:	d5f6      	bpl.n	8008290 <HAL_RCC_OscConfig+0x3a0>
 80082a2:	e6d3      	b.n	800804c <HAL_RCC_OscConfig+0x15c>
 80082a4:	40023800 	.word	0x40023800
 80082a8:	42470060 	.word	0x42470060

080082ac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082ac:	4917      	ldr	r1, [pc, #92]	; (800830c <HAL_RCC_GetSysClockFreq+0x60>)
{
 80082ae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082b0:	688b      	ldr	r3, [r1, #8]
 80082b2:	f003 030c 	and.w	r3, r3, #12
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d01b      	beq.n	80082f2 <HAL_RCC_GetSysClockFreq+0x46>
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d117      	bne.n	80082ee <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082be:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082c0:	684b      	ldr	r3, [r1, #4]
 80082c2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082ca:	d114      	bne.n	80082f6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082cc:	6849      	ldr	r1, [r1, #4]
 80082ce:	4810      	ldr	r0, [pc, #64]	; (8008310 <HAL_RCC_GetSysClockFreq+0x64>)
 80082d0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80082d4:	fba1 0100 	umull	r0, r1, r1, r0
 80082d8:	f7f8 f82a 	bl	8000330 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082dc:	4b0b      	ldr	r3, [pc, #44]	; (800830c <HAL_RCC_GetSysClockFreq+0x60>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80082e4:	3301      	adds	r3, #1
 80082e6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80082e8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80082ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80082ee:	4808      	ldr	r0, [pc, #32]	; (8008310 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80082f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80082f2:	4808      	ldr	r0, [pc, #32]	; (8008314 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80082f4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082f6:	684b      	ldr	r3, [r1, #4]
 80082f8:	4806      	ldr	r0, [pc, #24]	; (8008314 <HAL_RCC_GetSysClockFreq+0x68>)
 80082fa:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80082fe:	fba3 0100 	umull	r0, r1, r3, r0
 8008302:	2300      	movs	r3, #0
 8008304:	f7f8 f814 	bl	8000330 <__aeabi_uldivmod>
 8008308:	e7e8      	b.n	80082dc <HAL_RCC_GetSysClockFreq+0x30>
 800830a:	bf00      	nop
 800830c:	40023800 	.word	0x40023800
 8008310:	00f42400 	.word	0x00f42400
 8008314:	007a1200 	.word	0x007a1200

08008318 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008318:	b160      	cbz	r0, 8008334 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800831a:	4a49      	ldr	r2, [pc, #292]	; (8008440 <HAL_RCC_ClockConfig+0x128>)
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	428b      	cmp	r3, r1
 8008324:	d208      	bcs.n	8008338 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008326:	b2cb      	uxtb	r3, r1
 8008328:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	428b      	cmp	r3, r1
 8008332:	d001      	beq.n	8008338 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8008334:	2001      	movs	r0, #1
}
 8008336:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008338:	6803      	ldr	r3, [r0, #0]
{
 800833a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833e:	079d      	lsls	r5, r3, #30
 8008340:	d514      	bpl.n	800836c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008342:	075c      	lsls	r4, r3, #29
 8008344:	d504      	bpl.n	8008350 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008346:	4c3f      	ldr	r4, [pc, #252]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 8008348:	68a2      	ldr	r2, [r4, #8]
 800834a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800834e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008350:	071a      	lsls	r2, r3, #28
 8008352:	d504      	bpl.n	800835e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008354:	4c3b      	ldr	r4, [pc, #236]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 8008356:	68a2      	ldr	r2, [r4, #8]
 8008358:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800835c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800835e:	4c39      	ldr	r4, [pc, #228]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 8008360:	6885      	ldr	r5, [r0, #8]
 8008362:	68a2      	ldr	r2, [r4, #8]
 8008364:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008368:	432a      	orrs	r2, r5
 800836a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800836c:	07df      	lsls	r7, r3, #31
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
 8008372:	d522      	bpl.n	80083ba <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008374:	6842      	ldr	r2, [r0, #4]
 8008376:	2a01      	cmp	r2, #1
 8008378:	d057      	beq.n	800842a <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800837a:	1e93      	subs	r3, r2, #2
 800837c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800837e:	4b31      	ldr	r3, [pc, #196]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 8008380:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008382:	d959      	bls.n	8008438 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008384:	0799      	lsls	r1, r3, #30
 8008386:	d525      	bpl.n	80083d4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008388:	4e2e      	ldr	r6, [pc, #184]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 800838a:	68b3      	ldr	r3, [r6, #8]
 800838c:	f023 0303 	bic.w	r3, r3, #3
 8008390:	4313      	orrs	r3, r2
 8008392:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008394:	f7fd f934 	bl	8005600 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008398:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800839c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839e:	e005      	b.n	80083ac <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083a0:	f7fd f92e 	bl	8005600 <HAL_GetTick>
 80083a4:	eba0 0008 	sub.w	r0, r0, r8
 80083a8:	42b8      	cmp	r0, r7
 80083aa:	d843      	bhi.n	8008434 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ac:	68b3      	ldr	r3, [r6, #8]
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	f003 030c 	and.w	r3, r3, #12
 80083b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80083b8:	d1f2      	bne.n	80083a0 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083ba:	4a21      	ldr	r2, [pc, #132]	; (8008440 <HAL_RCC_ClockConfig+0x128>)
 80083bc:	6813      	ldr	r3, [r2, #0]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	42ab      	cmp	r3, r5
 80083c4:	d909      	bls.n	80083da <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c6:	b2eb      	uxtb	r3, r5
 80083c8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	d002      	beq.n	80083da <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80083d4:	2001      	movs	r0, #1
}
 80083d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	075a      	lsls	r2, r3, #29
 80083de:	d506      	bpl.n	80083ee <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083e0:	4918      	ldr	r1, [pc, #96]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 80083e2:	68e0      	ldr	r0, [r4, #12]
 80083e4:	688a      	ldr	r2, [r1, #8]
 80083e6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80083ea:	4302      	orrs	r2, r0
 80083ec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ee:	071b      	lsls	r3, r3, #28
 80083f0:	d412      	bmi.n	8008418 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083f2:	f7ff ff5b 	bl	80082ac <HAL_RCC_GetSysClockFreq>
 80083f6:	4b13      	ldr	r3, [pc, #76]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 80083f8:	4c13      	ldr	r4, [pc, #76]	; (8008448 <HAL_RCC_ClockConfig+0x130>)
 80083fa:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80083fc:	4913      	ldr	r1, [pc, #76]	; (800844c <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083fe:	4a14      	ldr	r2, [pc, #80]	; (8008450 <HAL_RCC_ClockConfig+0x138>)
 8008400:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008404:	5ce3      	ldrb	r3, [r4, r3]
 8008406:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 800840a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800840c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800840e:	f7fc f839 	bl	8004484 <HAL_InitTick>
  return HAL_OK;
 8008412:	2000      	movs	r0, #0
}
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008418:	4a0a      	ldr	r2, [pc, #40]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 800841a:	6921      	ldr	r1, [r4, #16]
 800841c:	6893      	ldr	r3, [r2, #8]
 800841e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008422:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008426:	6093      	str	r3, [r2, #8]
 8008428:	e7e3      	b.n	80083f2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800842a:	4b06      	ldr	r3, [pc, #24]	; (8008444 <HAL_RCC_ClockConfig+0x12c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	039e      	lsls	r6, r3, #14
 8008430:	d4aa      	bmi.n	8008388 <HAL_RCC_ClockConfig+0x70>
 8008432:	e7cf      	b.n	80083d4 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8008434:	2003      	movs	r0, #3
 8008436:	e7ed      	b.n	8008414 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008438:	0198      	lsls	r0, r3, #6
 800843a:	d4a5      	bmi.n	8008388 <HAL_RCC_ClockConfig+0x70>
 800843c:	e7ca      	b.n	80083d4 <HAL_RCC_ClockConfig+0xbc>
 800843e:	bf00      	nop
 8008440:	40023c00 	.word	0x40023c00
 8008444:	40023800 	.word	0x40023800
 8008448:	08012778 	.word	0x08012778
 800844c:	2000006c 	.word	0x2000006c
 8008450:	20000004 	.word	0x20000004

08008454 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008456:	4a05      	ldr	r2, [pc, #20]	; (800846c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008458:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800845a:	4905      	ldr	r1, [pc, #20]	; (8008470 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800845c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008460:	6808      	ldr	r0, [r1, #0]
 8008462:	5cd3      	ldrb	r3, [r2, r3]
}
 8008464:	40d8      	lsrs	r0, r3
 8008466:	4770      	bx	lr
 8008468:	40023800 	.word	0x40023800
 800846c:	08012788 	.word	0x08012788
 8008470:	20000004 	.word	0x20000004

08008474 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008476:	220f      	movs	r2, #15
 8008478:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	f002 0203 	and.w	r2, r2, #3
 8008480:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008488:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8008490:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	08db      	lsrs	r3, r3, #3
{
 8008496:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008498:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800849c:	4c05      	ldr	r4, [pc, #20]	; (80084b4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800849e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084a0:	6823      	ldr	r3, [r4, #0]
}
 80084a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	600b      	str	r3, [r1, #0]
}
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40023800 	.word	0x40023800
 80084b4:	40023c00 	.word	0x40023c00

080084b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ba:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084bc:	6800      	ldr	r0, [r0, #0]
 80084be:	f010 0f05 	tst.w	r0, #5
{
 80084c2:	b083      	sub	sp, #12
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084c4:	d15c      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084c6:	f010 0002 	ands.w	r0, r0, #2
 80084ca:	d101      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80084cc:	b003      	add	sp, #12
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80084d0:	4b45      	ldr	r3, [pc, #276]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    PWR->CR |= PWR_CR_DBP;
 80084d2:	4c46      	ldr	r4, [pc, #280]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80084d4:	2200      	movs	r2, #0
 80084d6:	9201      	str	r2, [sp, #4]
 80084d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80084de:	641a      	str	r2, [r3, #64]	; 0x40
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80084f2:	f7fd f885 	bl	8005600 <HAL_GetTick>
 80084f6:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80084f8:	e004      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084fa:	f7fd f881 	bl	8005600 <HAL_GetTick>
 80084fe:	1b80      	subs	r0, r0, r6
 8008500:	2802      	cmp	r0, #2
 8008502:	d83a      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	05d9      	lsls	r1, r3, #23
 8008508:	d5f7      	bpl.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800850a:	4937      	ldr	r1, [pc, #220]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800850c:	68eb      	ldr	r3, [r5, #12]
 800850e:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008510:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8008514:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8008518:	d010      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800851a:	4282      	cmp	r2, r0
 800851c:	d00e      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x84>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800851e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008520:	4a33      	ldr	r2, [pc, #204]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008526:	2401      	movs	r4, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008528:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 800852a:	6014      	str	r4, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800852c:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 800852e:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008530:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8008532:	07da      	lsls	r2, r3, #31
 8008534:	d413      	bmi.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8008536:	68eb      	ldr	r3, [r5, #12]
 8008538:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800853c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8008540:	d047      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8008542:	4929      	ldr	r1, [pc, #164]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800854a:	608a      	str	r2, [r1, #8]
 800854c:	4a26      	ldr	r2, [pc, #152]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800854e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008554:	430b      	orrs	r3, r1
  return HAL_OK;
 8008556:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008558:	6713      	str	r3, [r2, #112]	; 0x70
}
 800855a:	b003      	add	sp, #12
 800855c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855e:	460c      	mov	r4, r1
        tickstart = HAL_GetTick();
 8008560:	f7fd f84e 	bl	8005600 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008564:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008568:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800856a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800856c:	079b      	lsls	r3, r3, #30
 800856e:	d4e2      	bmi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008570:	f7fd f846 	bl	8005600 <HAL_GetTick>
 8008574:	1bc0      	subs	r0, r0, r7
 8008576:	42b0      	cmp	r0, r6
 8008578:	d9f7      	bls.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        return HAL_TIMEOUT;
 800857a:	2003      	movs	r0, #3
}
 800857c:	b003      	add	sp, #12
 800857e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8008580:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008582:	4c19      	ldr	r4, [pc, #100]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_DISABLE();
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008588:	f7fd f83a 	bl	8005600 <HAL_GetTick>
 800858c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800858e:	e004      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xe2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008590:	f7fd f836 	bl	8005600 <HAL_GetTick>
 8008594:	1b80      	subs	r0, r0, r6
 8008596:	2802      	cmp	r0, #2
 8008598:	d8ef      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	011f      	lsls	r7, r3, #4
 800859e:	d4f7      	bmi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085a0:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 80085a4:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085a6:	4e10      	ldr	r6, [pc, #64]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085a8:	071b      	lsls	r3, r3, #28
 80085aa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 80085ae:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80085b4:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80085b6:	f7fd f823 	bl	8005600 <HAL_GetTick>
 80085ba:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085bc:	e004      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80085be:	f7fd f81f 	bl	8005600 <HAL_GetTick>
 80085c2:	1b00      	subs	r0, r0, r4
 80085c4:	2802      	cmp	r0, #2
 80085c6:	d8d8      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085c8:	6833      	ldr	r3, [r6, #0]
 80085ca:	0118      	lsls	r0, r3, #4
 80085cc:	d5f7      	bpl.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x106>
 80085ce:	6828      	ldr	r0, [r5, #0]
 80085d0:	e779      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085d2:	4805      	ldr	r0, [pc, #20]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085d4:	6882      	ldr	r2, [r0, #8]
 80085d6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80085da:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80085de:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80085e2:	430a      	orrs	r2, r1
 80085e4:	6082      	str	r2, [r0, #8]
 80085e6:	e7b1      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x94>
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40007000 	.word	0x40007000
 80085f0:	42470e40 	.word	0x42470e40
 80085f4:	42470068 	.word	0x42470068

080085f8 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80085f8:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80085fa:	2303      	movs	r3, #3
 80085fc:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80085fe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8008602:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8008606:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008608:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800860c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8008610:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008612:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008614:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008616:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800861a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861e:	4313      	orrs	r3, r2
 8008620:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8008622:	4770      	bx	lr
 8008624:	40023800 	.word	0x40023800

08008628 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8008628:	2801      	cmp	r0, #1
 800862a:	d109      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800862c:	4a12      	ldr	r2, [pc, #72]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800862e:	6893      	ldr	r3, [r2, #8]
      switch (srcclk)
 8008630:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8008634:	d006      	beq.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8008636:	2b01      	cmp	r3, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008638:	4810      	ldr	r0, [pc, #64]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 800863a:	bf18      	it	ne
 800863c:	2000      	movne	r0, #0
 800863e:	4770      	bx	lr
 8008640:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8008642:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008644:	6853      	ldr	r3, [r2, #4]
 8008646:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800864a:	6853      	ldr	r3, [r2, #4]
 800864c:	bf14      	ite	ne
 800864e:	480c      	ldrne	r0, [pc, #48]	; (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008650:	480c      	ldreq	r0, [pc, #48]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>)
 8008652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008656:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800865c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008664:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8008668:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800866c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8008670:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40023800 	.word	0x40023800
 800867c:	00bb8000 	.word	0x00bb8000
 8008680:	007a1200 	.word	0x007a1200
 8008684:	00f42400 	.word	0x00f42400

08008688 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop

0800868c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800868c:	6803      	ldr	r3, [r0, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869c:	2a06      	cmp	r2, #6
 800869e:	d003      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x1c>
  {
    __HAL_TIM_ENABLE(htim);
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr

080086ac <HAL_TIM_OC_DelayElapsedCallback>:
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop

080086b0 <HAL_TIM_IC_CaptureCallback>:
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop

080086b4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop

080086b8 <HAL_TIM_TriggerCallback>:
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop

080086bc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086bc:	6803      	ldr	r3, [r0, #0]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	0791      	lsls	r1, r2, #30
{
 80086c2:	b510      	push	{r4, lr}
 80086c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086c6:	d502      	bpl.n	80086ce <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	0792      	lsls	r2, r2, #30
 80086cc:	d45f      	bmi.n	800878e <HAL_TIM_IRQHandler+0xd2>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	0750      	lsls	r0, r2, #29
 80086d2:	d502      	bpl.n	80086da <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	0751      	lsls	r1, r2, #29
 80086d8:	d446      	bmi.n	8008768 <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	0712      	lsls	r2, r2, #28
 80086de:	d502      	bpl.n	80086e6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	0710      	lsls	r0, r2, #28
 80086e4:	d42e      	bmi.n	8008744 <HAL_TIM_IRQHandler+0x88>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	06d2      	lsls	r2, r2, #27
 80086ea:	d502      	bpl.n	80086f2 <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	06d0      	lsls	r0, r2, #27
 80086f0:	d418      	bmi.n	8008724 <HAL_TIM_IRQHandler+0x68>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	07d1      	lsls	r1, r2, #31
 80086f6:	d502      	bpl.n	80086fe <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	07d2      	lsls	r2, r2, #31
 80086fc:	d45d      	bmi.n	80087ba <HAL_TIM_IRQHandler+0xfe>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	0610      	lsls	r0, r2, #24
 8008702:	d502      	bpl.n	800870a <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	0611      	lsls	r1, r2, #24
 8008708:	d45f      	bmi.n	80087ca <HAL_TIM_IRQHandler+0x10e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	0652      	lsls	r2, r2, #25
 800870e:	d502      	bpl.n	8008716 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	0650      	lsls	r0, r2, #25
 8008714:	d461      	bmi.n	80087da <HAL_TIM_IRQHandler+0x11e>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	0691      	lsls	r1, r2, #26
 800871a:	d502      	bpl.n	8008722 <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	0692      	lsls	r2, r2, #26
 8008720:	d443      	bmi.n	80087aa <HAL_TIM_IRQHandler+0xee>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008722:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008724:	f06f 0210 	mvn.w	r2, #16
 8008728:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800872a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800872c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800872e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008732:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008734:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008736:	d064      	beq.n	8008802 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008738:	f7ff ffba 	bl	80086b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873c:	2200      	movs	r2, #0
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	7722      	strb	r2, [r4, #28]
 8008742:	e7d6      	b.n	80086f2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008744:	f06f 0208 	mvn.w	r2, #8
 8008748:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800874c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008750:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008752:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008754:	d152      	bne.n	80087fc <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008756:	f7ff ffa9 	bl	80086ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff ffaa 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008760:	2200      	movs	r2, #0
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	7722      	strb	r2, [r4, #28]
 8008766:	e7be      	b.n	80086e6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008768:	f06f 0204 	mvn.w	r2, #4
 800876c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800876e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008770:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008772:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008776:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008778:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800877a:	d13c      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877c:	f7ff ff96 	bl	80086ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008780:	4620      	mov	r0, r4
 8008782:	f7ff ff97 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008786:	2200      	movs	r2, #0
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	7722      	strb	r2, [r4, #28]
 800878c:	e7a5      	b.n	80086da <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800878e:	f06f 0202 	mvn.w	r2, #2
 8008792:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008794:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008796:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008798:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800879a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800879c:	d025      	beq.n	80087ea <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800879e:	f7ff ff87 	bl	80086b0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a2:	2200      	movs	r2, #0
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	7722      	strb	r2, [r4, #28]
 80087a8:	e791      	b.n	80086ce <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087aa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80087ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087b0:	611a      	str	r2, [r3, #16]
}
 80087b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80087b6:	f000 b8b9 	b.w	800892c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087ba:	f06f 0201 	mvn.w	r2, #1
 80087be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7f8 f853 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	e799      	b.n	80086fe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80087d0:	4620      	mov	r0, r4
 80087d2:	f000 f8ad 	bl	8008930 <HAL_TIMEx_BreakCallback>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	e797      	b.n	800870a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff ff69 	bl	80086b8 <HAL_TIM_TriggerCallback>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	e795      	b.n	8008716 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ea:	f7ff ff5f 	bl	80086ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff ff60 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80087f4:	e7d5      	b.n	80087a2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80087f6:	f7ff ff5b 	bl	80086b0 <HAL_TIM_IC_CaptureCallback>
 80087fa:	e7c4      	b.n	8008786 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80087fc:	f7ff ff58 	bl	80086b0 <HAL_TIM_IC_CaptureCallback>
 8008800:	e7ae      	b.n	8008760 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008802:	f7ff ff53 	bl	80086ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008806:	4620      	mov	r0, r4
 8008808:	f7ff ff54 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
 800880c:	e796      	b.n	800873c <HAL_TIM_IRQHandler+0x80>
 800880e:	bf00      	nop

08008810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008810:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008812:	4e36      	ldr	r6, [pc, #216]	; (80088ec <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8008814:	6803      	ldr	r3, [r0, #0]
 8008816:	694d      	ldr	r5, [r1, #20]
 8008818:	688c      	ldr	r4, [r1, #8]
 800881a:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800881c:	42b0      	cmp	r0, r6
 800881e:	d055      	beq.n	80088cc <TIM_Base_SetConfig+0xbc>
 8008820:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008824:	d029      	beq.n	800887a <TIM_Base_SetConfig+0x6a>
 8008826:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800882a:	42b0      	cmp	r0, r6
 800882c:	d037      	beq.n	800889e <TIM_Base_SetConfig+0x8e>
 800882e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008832:	42b0      	cmp	r0, r6
 8008834:	d033      	beq.n	800889e <TIM_Base_SetConfig+0x8e>
 8008836:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800883a:	42b0      	cmp	r0, r6
 800883c:	d02f      	beq.n	800889e <TIM_Base_SetConfig+0x8e>
 800883e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8008842:	42b0      	cmp	r0, r6
 8008844:	d02b      	beq.n	800889e <TIM_Base_SetConfig+0x8e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008846:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800884a:	42b0      	cmp	r0, r6
 800884c:	d013      	beq.n	8008876 <TIM_Base_SetConfig+0x66>
 800884e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008852:	42b0      	cmp	r0, r6
 8008854:	d00f      	beq.n	8008876 <TIM_Base_SetConfig+0x66>
 8008856:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800885a:	42b0      	cmp	r0, r6
 800885c:	d00b      	beq.n	8008876 <TIM_Base_SetConfig+0x66>
 800885e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8008862:	42b0      	cmp	r0, r6
 8008864:	d007      	beq.n	8008876 <TIM_Base_SetConfig+0x66>
 8008866:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800886a:	42b0      	cmp	r0, r6
 800886c:	d003      	beq.n	8008876 <TIM_Base_SetConfig+0x66>
 800886e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008872:	42b0      	cmp	r0, r6
 8008874:	d109      	bne.n	800888a <TIM_Base_SetConfig+0x7a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008876:	68c9      	ldr	r1, [r1, #12]
 8008878:	e004      	b.n	8008884 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 800887a:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800887c:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800887e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008882:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8008884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008888:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800888a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800888e:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8008890:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008892:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008894:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008896:	2301      	movs	r3, #1
 8008898:	6143      	str	r3, [r0, #20]
}
 800889a:	bcf0      	pop	{r4, r5, r6, r7}
 800889c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800889e:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088a0:	4f13      	ldr	r7, [pc, #76]	; (80088f0 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088a6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088a8:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80088aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ae:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088b4:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088b6:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 80088b8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088ba:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088bc:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088be:	d1ea      	bne.n	8008896 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 80088c0:	690b      	ldr	r3, [r1, #16]
 80088c2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80088c4:	2301      	movs	r3, #1
 80088c6:	6143      	str	r3, [r0, #20]
}
 80088c8:	bcf0      	pop	{r4, r5, r6, r7}
 80088ca:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80088cc:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ce:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088d4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80088d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088da:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80088e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088e6:	6282      	str	r2, [r0, #40]	; 0x28
 80088e8:	e7ea      	b.n	80088c0 <TIM_Base_SetConfig+0xb0>
 80088ea:	bf00      	nop
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40010400 	.word	0x40010400

080088f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80088f4:	b1b8      	cbz	r0, 8008926 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80088f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80088fa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80088fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008900:	4604      	mov	r4, r0
 8008902:	b15b      	cbz	r3, 800891c <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8008904:	2302      	movs	r3, #2
 8008906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800890a:	6820      	ldr	r0, [r4, #0]
 800890c:	1d21      	adds	r1, r4, #4
 800890e:	f7ff ff7f 	bl	8008810 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8008912:	2301      	movs	r3, #1
 8008914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008918:	2000      	movs	r0, #0
}
 800891a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800891c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008920:	f7ff feb2 	bl	8008688 <HAL_TIM_Base_MspInit>
 8008924:	e7ee      	b.n	8008904 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8008926:	2001      	movs	r0, #1
}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop

0800892c <HAL_TIMEx_CommutCallback>:
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop

08008930 <HAL_TIMEx_BreakCallback>:
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop

08008934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <USB_CoreReset+0x30>)
 8008936:	e001      	b.n	800893c <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008938:	3b01      	subs	r3, #1
 800893a:	d010      	beq.n	800895e <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800893c:	6902      	ldr	r2, [r0, #16]
 800893e:	2a00      	cmp	r2, #0
 8008940:	dafa      	bge.n	8008938 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008942:	6903      	ldr	r3, [r0, #16]
 8008944:	4a07      	ldr	r2, [pc, #28]	; (8008964 <USB_CoreReset+0x30>)
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	6103      	str	r3, [r0, #16]
 800894c:	e001      	b.n	8008952 <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 800894e:	3a01      	subs	r2, #1
 8008950:	d005      	beq.n	800895e <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008952:	6903      	ldr	r3, [r0, #16]
 8008954:	f013 0301 	ands.w	r3, r3, #1
 8008958:	d1f9      	bne.n	800894e <USB_CoreReset+0x1a>

  return HAL_OK;
 800895a:	4618      	mov	r0, r3
}
 800895c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800895e:	2003      	movs	r0, #3
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	00030d40 	.word	0x00030d40

08008968 <USB_CoreInit>:
{
 8008968:	b084      	sub	sp, #16
 800896a:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800896c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 800896e:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008970:	2d01      	cmp	r5, #1
{
 8008972:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8008976:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008978:	d122      	bne.n	80089c0 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800897c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008982:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008984:	68c3      	ldr	r3, [r0, #12]
 8008986:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800898a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008990:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8008992:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008994:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008998:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800899a:	d023      	beq.n	80089e4 <USB_CoreInit+0x7c>
    ret = USB_CoreReset(USBx);
 800899c:	4608      	mov	r0, r1
 800899e:	f7ff ffc9 	bl	8008934 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80089a2:	9b08      	ldr	r3, [sp, #32]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d107      	bne.n	80089b8 <USB_CoreInit+0x50>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089a8:	688b      	ldr	r3, [r1, #8]
 80089aa:	f043 0306 	orr.w	r3, r3, #6
 80089ae:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089b0:	688b      	ldr	r3, [r1, #8]
 80089b2:	f043 0320 	orr.w	r3, r3, #32
 80089b6:	608b      	str	r3, [r1, #8]
}
 80089b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089bc:	b004      	add	sp, #16
 80089be:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089c0:	68c3      	ldr	r3, [r0, #12]
 80089c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80089c8:	f7ff ffb4 	bl	8008934 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80089cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ce:	b923      	cbnz	r3, 80089da <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089d0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80089d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d6:	638b      	str	r3, [r1, #56]	; 0x38
 80089d8:	e7e3      	b.n	80089a2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089da:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80089dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e0:	638b      	str	r3, [r1, #56]	; 0x38
 80089e2:	e7de      	b.n	80089a2 <USB_CoreInit+0x3a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089e4:	68c3      	ldr	r3, [r0, #12]
 80089e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ea:	60c3      	str	r3, [r0, #12]
 80089ec:	e7d6      	b.n	800899c <USB_CoreInit+0x34>
 80089ee:	bf00      	nop

080089f0 <USB_EnableGlobalInt>:
{
 80089f0:	4602      	mov	r2, r0
}
 80089f2:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089f4:	6893      	ldr	r3, [r2, #8]
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	6093      	str	r3, [r2, #8]
}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <USB_DisableGlobalInt>:
{
 8008a00:	4602      	mov	r2, r0
}
 8008a02:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a04:	6893      	ldr	r3, [r2, #8]
 8008a06:	f023 0301 	bic.w	r3, r3, #1
 8008a0a:	6093      	str	r3, [r2, #8]
}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop

08008a10 <USB_SetCurrentMode>:
{
 8008a10:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a12:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008a14:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a16:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a1a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008a1c:	d00b      	beq.n	8008a36 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8008a1e:	b941      	cbnz	r1, 8008a32 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a20:	68c3      	ldr	r3, [r0, #12]
 8008a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a26:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8008a28:	2032      	movs	r0, #50	; 0x32
 8008a2a:	f7fc fdef 	bl	800560c <HAL_Delay>
  return HAL_OK;
 8008a2e:	2000      	movs	r0, #0
}
 8008a30:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8008a32:	2001      	movs	r0, #1
}
 8008a34:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a36:	68c3      	ldr	r3, [r0, #12]
 8008a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a3c:	60c3      	str	r3, [r0, #12]
 8008a3e:	e7f3      	b.n	8008a28 <USB_SetCurrentMode+0x18>

08008a40 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008a40:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8008a42:	0892      	lsrs	r2, r2, #2
 8008a44:	d00c      	beq.n	8008a60 <USB_ReadPacket+0x20>
{
 8008a46:	b410      	push	{r4}
 8008a48:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8008a4c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8008a56:	4281      	cmp	r1, r0
 8008a58:	d1fa      	bne.n	8008a50 <USB_ReadPacket+0x10>
}
 8008a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5e:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8008a60:	4608      	mov	r0, r1
}
 8008a62:	4770      	bx	lr

08008a64 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008a64:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008a66:	6980      	ldr	r0, [r0, #24]
}
 8008a68:	4010      	ands	r0, r2
 8008a6a:	4770      	bx	lr

08008a6c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008a6c:	6940      	ldr	r0, [r0, #20]
}
 8008a6e:	f000 0001 	and.w	r0, r0, #1
 8008a72:	4770      	bx	lr

08008a74 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008a74:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a80:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8008a84:	f001 0303 	and.w	r3, r1, #3
 8008a88:	4313      	orrs	r3, r2

  if (freq == HCFG_48_MHZ)
 8008a8a:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a8c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008a90:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  if (freq == HCFG_48_MHZ)
 8008a94:	d006      	beq.n	8008aa4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8008a96:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 8008a98:	bf04      	itt	eq
 8008a9a:	f241 7370 	movweq	r3, #6000	; 0x1770
 8008a9e:	6043      	streq	r3, [r0, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8008aa4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008aa8:	6043      	str	r3, [r0, #4]
}
 8008aaa:	2000      	movs	r0, #0
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop

08008ab0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab0:	b530      	push	{r4, r5, lr}
 8008ab2:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008ab8:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008abc:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ac4:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8008acc:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008ace:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ad2:	2064      	movs	r0, #100	; 0x64
 8008ad4:	f7fc fd9a 	bl	800560c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ad8:	9b01      	ldr	r3, [sp, #4]
 8008ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ade:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8008ae2:	200a      	movs	r0, #10
 8008ae4:	f7fc fd92 	bl	800560c <HAL_Delay>

  return HAL_OK;
}
 8008ae8:	4628      	mov	r0, r5
 8008aea:	b003      	add	sp, #12
 8008aec:	bd30      	pop	{r4, r5, pc}
 8008aee:	bf00      	nop

08008af0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008af0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008af6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008afa:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008afc:	9b01      	ldr	r3, [sp, #4]
 8008afe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b02:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b0a:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b0c:	d101      	bne.n	8008b12 <USB_DriveVbus+0x22>
 8008b0e:	2901      	cmp	r1, #1
 8008b10:	d00a      	beq.n	8008b28 <USB_DriveVbus+0x38>
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b12:	04db      	lsls	r3, r3, #19
 8008b14:	d505      	bpl.n	8008b22 <USB_DriveVbus+0x32>
 8008b16:	b921      	cbnz	r1, 8008b22 <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8008b22:	2000      	movs	r0, #0
 8008b24:	b002      	add	sp, #8
 8008b26:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b2c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b30:	9b01      	ldr	r3, [sp, #4]
}
 8008b32:	2000      	movs	r0, #0
 8008b34:	b002      	add	sp, #8
 8008b36:	4770      	bx	lr

08008b38 <USB_HostInit>:
{
 8008b38:	b084      	sub	sp, #16
 8008b3a:	b538      	push	{r3, r4, r5, lr}
 8008b3c:	4604      	mov	r4, r0
  USBx_PCGCCTL = 0U;
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008b46:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8008b4a:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008b4e:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8008b52:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
{
 8008b56:	ad05      	add	r5, sp, #20
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b58:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
{
 8008b5c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b60:	63a0      	str	r0, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b64:	9906      	ldr	r1, [sp, #24]
 8008b66:	05dd      	lsls	r5, r3, #23
 8008b68:	d557      	bpl.n	8008c1a <USB_HostInit+0xe2>
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b6a:	9b07      	ldr	r3, [sp, #28]
 8008b6c:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b6e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b72:	d055      	beq.n	8008c20 <USB_HostInit+0xe8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b74:	f023 0304 	bic.w	r3, r3, #4
 8008b78:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	4b2a      	ldr	r3, [pc, #168]	; (8008c2c <USB_HostInit+0xf4>)
 8008b84:	e001      	b.n	8008b8a <USB_HostInit+0x52>
    if (++count > 200000U)
 8008b86:	3b01      	subs	r3, #1
 8008b88:	d002      	beq.n	8008b90 <USB_HostInit+0x58>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b8a:	6922      	ldr	r2, [r4, #16]
 8008b8c:	0690      	lsls	r0, r2, #26
 8008b8e:	d4fa      	bmi.n	8008b86 <USB_HostInit+0x4e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b90:	2310      	movs	r3, #16
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <USB_HostInit+0xf4>)
 8008b96:	e001      	b.n	8008b9c <USB_HostInit+0x64>
    if (++count > 200000U)
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	d002      	beq.n	8008ba2 <USB_HostInit+0x6a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b9c:	6922      	ldr	r2, [r4, #16]
 8008b9e:	06d2      	lsls	r2, r2, #27
 8008ba0:	d4fa      	bmi.n	8008b98 <USB_HostInit+0x60>
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ba2:	b161      	cbz	r1, 8008bbe <USB_HostInit+0x86>
 8008ba4:	2200      	movs	r2, #0
    USBx_HC(i)->HCINTMSK = 0U;
 8008ba6:	4615      	mov	r5, r2
 8008ba8:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	428a      	cmp	r2, r1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bb4:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008bb6:	60dd      	str	r5, [r3, #12]
 8008bb8:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bbc:	d1f8      	bne.n	8008bb0 <USB_HostInit+0x78>
  (void)USB_DriveVbus(USBx, 1U);
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff ff95 	bl	8008af0 <USB_DriveVbus>
  HAL_Delay(200U);
 8008bc6:	20c8      	movs	r0, #200	; 0xc8
 8008bc8:	f7fc fd20 	bl	800560c <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008bd4:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008bd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bd8:	05db      	lsls	r3, r3, #23
 8008bda:	d516      	bpl.n	8008c0a <USB_HostInit+0xd2>
    USBx->GRXFSIZ  = 0x200U;
 8008bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008be0:	4a13      	ldr	r2, [pc, #76]	; (8008c30 <USB_HostInit+0xf8>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008be2:	4b14      	ldr	r3, [pc, #80]	; (8008c34 <USB_HostInit+0xfc>)
    USBx->GRXFSIZ  = 0x200U;
 8008be4:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008be6:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008be8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	b91b      	cbnz	r3, 8008bf8 <USB_HostInit+0xc0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bf0:	69a3      	ldr	r3, [r4, #24]
 8008bf2:	f043 0310 	orr.w	r3, r3, #16
 8008bf6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008bf8:	69a2      	ldr	r2, [r4, #24]
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <USB_HostInit+0x100>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61a3      	str	r3, [r4, #24]
}
 8008c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c04:	2000      	movs	r0, #0
 8008c06:	b004      	add	sp, #16
 8008c08:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8008c0a:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c0c:	4a0b      	ldr	r2, [pc, #44]	; (8008c3c <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x80U;
 8008c10:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c12:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c14:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008c18:	e7e8      	b.n	8008bec <USB_HostInit+0xb4>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c1a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008c1e:	e7a9      	b.n	8008b74 <USB_HostInit+0x3c>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c20:	f043 0304 	orr.w	r3, r3, #4
 8008c24:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008c28:	e7a8      	b.n	8008b7c <USB_HostInit+0x44>
 8008c2a:	bf00      	nop
 8008c2c:	00030d40 	.word	0x00030d40
 8008c30:	01000200 	.word	0x01000200
 8008c34:	00e00300 	.word	0x00e00300
 8008c38:	a3200008 	.word	0xa3200008
 8008c3c:	00600080 	.word	0x00600080
 8008c40:	004000e0 	.word	0x004000e0

08008c44 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c44:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008c4a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008c4e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c50:	9801      	ldr	r0, [sp, #4]
}
 8008c52:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8008c56:	b002      	add	sp, #8
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop

08008c5c <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c5c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008c60:	6880      	ldr	r0, [r0, #8]
}
 8008c62:	b280      	uxth	r0, r0
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop

08008c68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c6c:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8008c70:	f505 6ca0 	add.w	ip, r5, #1280	; 0x500
{
 8008c74:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8008c78:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8008c7c:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c80:	f04f 3eff 	mov.w	lr, #4294967295
 8008c84:	f001 010f 	and.w	r1, r1, #15
 8008c88:	f04f 0801 	mov.w	r8, #1
 8008c8c:	f8cc e008 	str.w	lr, [ip, #8]
 8008c90:	fa08 f101 	lsl.w	r1, r8, r1
 8008c94:	fa4f fe82 	sxtb.w	lr, r2
 8008c98:	f500 6980 	add.w	r9, r0, #1024	; 0x400

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008c9c:	2c03      	cmp	r4, #3
 8008c9e:	d85d      	bhi.n	8008d5c <USB_HC_Init+0xf4>
 8008ca0:	e8df f004 	tbb	[pc, r4]
 8008ca4:	02493b49 	.word	0x02493b49
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ca8:	f240 689d 	movw	r8, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008cac:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cb0:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008cb4:	db64      	blt.n	8008d80 <USB_HC_Init+0x118>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008cb6:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8008cba:	ea48 0101 	orr.w	r1, r8, r1
 8008cbe:	f8c9 1018 	str.w	r1, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008cc2:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	f04c 7c00 	orr.w	ip, ip, #33554432	; 0x2000000
 8008ccc:	f8c0 c018 	str.w	ip, [r0, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8008cd0:	4608      	mov	r0, r1
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008cd2:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008cd4:	f3c7 070a 	ubfx	r7, r7, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008cd8:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008cda:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008cde:	433b      	orrs	r3, r7
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008ce0:	f402 47f0 	and.w	r7, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008ce4:	04a2      	lsls	r2, r4, #18
 8008ce6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008cea:	433b      	orrs	r3, r7
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008cec:	2e02      	cmp	r6, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008cee:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008cf2:	ea43 0300 	orr.w	r3, r3, r0
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008cf6:	bf14      	ite	ne
 8008cf8:	2200      	movne	r2, #0
 8008cfa:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008cfe:	4313      	orrs	r3, r2

  if (ep_type == EP_TYPE_INTR)
 8008d00:	2c03      	cmp	r4, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d02:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8008d06:	d105      	bne.n	8008d14 <USB_HC_Init+0xac>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008d08:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8008d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d10:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 8008d14:	4608      	mov	r0, r1
 8008d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d1a:	f240 2825 	movw	r8, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8008d1e:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d22:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008d26:	dac6      	bge.n	8008cb6 <USB_HC_Init+0x4e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d28:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8008d2c:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 8008d30:	f8cc e00c 	str.w	lr, [ip, #12]
 8008d34:	e02a      	b.n	8008d8c <USB_HC_Init+0x124>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d36:	f240 489d 	movw	r8, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 8008d3a:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d3e:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008d42:	db1d      	blt.n	8008d80 <USB_HC_Init+0x118>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d44:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008d48:	f41e 7f80 	tst.w	lr, #256	; 0x100
 8008d4c:	d0b3      	beq.n	8008cb6 <USB_HC_Init+0x4e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008d4e:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8008d52:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 8008d56:	f8cc e00c 	str.w	lr, [ip, #12]
 8008d5a:	e7ac      	b.n	8008cb6 <USB_HC_Init+0x4e>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008d5c:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8008d60:	ea48 0101 	orr.w	r1, r8, r1
 8008d64:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d68:	6981      	ldr	r1, [r0, #24]
      ret = HAL_ERROR;
 8008d6a:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d6e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008d72:	6181      	str	r1, [r0, #24]
      ret = HAL_ERROR;
 8008d74:	bfac      	ite	ge
 8008d76:	2000      	movge	r0, #0
 8008d78:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	e7a8      	b.n	8008cd2 <USB_HC_Init+0x6a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008d80:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8008d84:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8008d88:	f8cc e00c 	str.w	lr, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008d8c:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8008d90:	ea41 0108 	orr.w	r1, r1, r8
 8008d94:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d98:	6981      	ldr	r1, [r0, #24]
 8008d9a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008d9e:	6181      	str	r1, [r0, #24]
 8008da0:	2100      	movs	r1, #0
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008da2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008da6:	e794      	b.n	8008cd2 <USB_HC_Init+0x6a>

08008da8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008dac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008dae:	784f      	ldrb	r7, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008db0:	05db      	lsls	r3, r3, #23
 8008db2:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 8008db6:	f504 6ca0 	add.w	ip, r4, #1280	; 0x500
 8008dba:	d50d      	bpl.n	8008dd8 <USB_HC_StartXfer+0x30>
 8008dbc:	790b      	ldrb	r3, [r1, #4]
 8008dbe:	b95b      	cbnz	r3, 8008dd8 <USB_HC_StartXfer+0x30>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 808b 	beq.w	8008edc <USB_HC_StartXfer+0x134>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 8008dc6:	2a01      	cmp	r2, #1
 8008dc8:	d106      	bne.n	8008dd8 <USB_HC_StartXfer+0x30>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008dca:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8008dce:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8008dd2:	f8cc 500c 	str.w	r5, [ip, #12]
      hc->do_ping = 0U;
 8008dd6:	714b      	strb	r3, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008dd8:	690b      	ldr	r3, [r1, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d14a      	bne.n	8008e74 <USB_HC_StartXfer+0xcc>
 8008dde:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8008de2:	2501      	movs	r5, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 8008de4:	78ce      	ldrb	r6, [r1, #3]
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	d153      	bne.n	8008e92 <USB_HC_StartXfer+0xea>
 8008dea:	690d      	ldr	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008dec:	7a8b      	ldrb	r3, [r1, #10]
 8008dee:	075b      	lsls	r3, r3, #29
 8008df0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008df4:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008df8:	f3c5 0e12 	ubfx	lr, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008dfc:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e00:	f8cc 3010 	str.w	r3, [ip, #16]

  if (dma != 0U)
 8008e04:	b112      	cbz	r2, 8008e0c <USB_HC_StartXfer+0x64>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008e06:	68cb      	ldr	r3, [r1, #12]
 8008e08:	f8cc 3014 	str.w	r3, [ip, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008e0c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8008e10:	f8de 3008 	ldr.w	r3, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008e14:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e18:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8008f58 <USB_HC_StartXfer+0x1b0>
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008e1c:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
 8008e20:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008e24:	43db      	mvns	r3, r3
 8008e26:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
 8008e2a:	075b      	lsls	r3, r3, #29
 8008e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e30:	ea43 0308 	orr.w	r3, r3, r8
 8008e34:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e38:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8008e3c:	f8cc 3000 	str.w	r3, [ip]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e40:	f8dc 3000 	ldr.w	r3, [ip]
 8008e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e48:	f8cc 3000 	str.w	r3, [ip]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e4c:	f8dc 3000 	ldr.w	r3, [ip]
  if (hc->ep_is_in != 0U)
 8008e50:	b326      	cbz	r6, 8008e9c <USB_HC_StartXfer+0xf4>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e56:	f8cc 3000 	str.w	r3, [ip]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e62:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e66:	f8dc 3000 	ldr.w	r3, [ip]
 8008e6a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
  }

  return HAL_OK;
}
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008e74:	890d      	ldrh	r5, [r1, #8]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	442b      	add	r3, r5
 8008e7a:	fbb3 f3f5 	udiv	r3, r3, r5
    if (num_packets > max_hc_pkt_count)
 8008e7e:	b29e      	uxth	r6, r3
 8008e80:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8008e84:	d823      	bhi.n	8008ece <USB_HC_StartXfer+0x126>
 8008e86:	4635      	mov	r5, r6
  if (hc->ep_is_in != 0U)
 8008e88:	78ce      	ldrb	r6, [r1, #3]
 8008e8a:	ea4f 4ec3 	mov.w	lr, r3, lsl #19
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	d0ab      	beq.n	8008dea <USB_HC_StartXfer+0x42>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008e92:	890b      	ldrh	r3, [r1, #8]
 8008e94:	fb05 f503 	mul.w	r5, r5, r3
 8008e98:	610d      	str	r5, [r1, #16]
 8008e9a:	e7a7      	b.n	8008dec <USB_HC_StartXfer+0x44>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ea0:	f8cc 3000 	str.w	r3, [ip]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ea4:	f8dc 3000 	ldr.w	r3, [ip]
 8008ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008eac:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008eb0:	f8dc 3000 	ldr.w	r3, [ip]
 8008eb4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	d1d8      	bne.n	8008e6e <USB_HC_StartXfer+0xc6>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	d0d6      	beq.n	8008e6e <USB_HC_StartXfer+0xc6>
    switch (hc->ep_type)
 8008ec0:	79cb      	ldrb	r3, [r1, #7]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d822      	bhi.n	8008f0c <USB_HC_StartXfer+0x164>
 8008ec6:	e8df f003 	tbb	[pc, r3]
 8008eca:	1934      	.short	0x1934
 8008ecc:	1934      	.short	0x1934
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008ece:	022d      	lsls	r5, r5, #8
 8008ed0:	610d      	str	r5, [r1, #16]
 8008ed2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8008ed6:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008eda:	e783      	b.n	8008de4 <USB_HC_StartXfer+0x3c>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008edc:	794b      	ldrb	r3, [r1, #5]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	f47f af7a 	bne.w	8008dd8 <USB_HC_StartXfer+0x30>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <USB_HC_StartXfer+0x1ac>)
 8008ee6:	f8cc 3010 	str.w	r3, [ip, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008eea:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ef6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      return HAL_OK;
 8008efa:	e7b8      	b.n	8008e6e <USB_HC_StartXfer+0xc6>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008efc:	f8de 2010 	ldr.w	r2, [lr, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f00:	1ceb      	adds	r3, r5, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f02:	b292      	uxth	r2, r2
 8008f04:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d31e      	bcc.n	8008f4a <USB_HC_StartXfer+0x1a2>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f0c:	b2ab      	uxth	r3, r5
 8008f0e:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8008f10:	089b      	lsrs	r3, r3, #2
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f12:	68ca      	ldr	r2, [r1, #12]
    for (i = 0U; i < count32b; i++)
 8008f14:	d0ab      	beq.n	8008e6e <USB_HC_StartXfer+0xc6>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f16:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 8008f1a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8008f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f22:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f26:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d1fa      	bne.n	8008f22 <USB_HC_StartXfer+0x17a>
}
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008f32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f34:	1ceb      	adds	r3, r5, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008f36:	b292      	uxth	r2, r2
 8008f38:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d2e5      	bcs.n	8008f0c <USB_HC_StartXfer+0x164>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008f40:	6983      	ldr	r3, [r0, #24]
 8008f42:	f043 0320 	orr.w	r3, r3, #32
 8008f46:	6183      	str	r3, [r0, #24]
 8008f48:	e7e0      	b.n	8008f0c <USB_HC_StartXfer+0x164>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f4a:	6983      	ldr	r3, [r0, #24]
 8008f4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f50:	6183      	str	r3, [r0, #24]
 8008f52:	e7db      	b.n	8008f0c <USB_HC_StartXfer+0x164>
 8008f54:	80080000 	.word	0x80080000
 8008f58:	2000737c 	.word	0x2000737c

08008f5c <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f5c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008f60:	6940      	ldr	r0, [r0, #20]
}
 8008f62:	b280      	uxth	r0, r0
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop

08008f68 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f68:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 8008f6c:	b410      	push	{r4}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f6e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f72:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f76:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f7e:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f82:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f86:	d022      	beq.n	8008fce <USB_HC_Halt+0x66>
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f88:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8008f8c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f90:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f94:	d13d      	bne.n	8009012 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f9e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fa6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008faa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008fae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fb2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8008fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008fba:	e001      	b.n	8008fc0 <USB_HC_Halt+0x58>
        if (++count > 1000U)
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	d002      	beq.n	8008fc6 <USB_HC_Halt+0x5e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	dbfa      	blt.n	8008fbc <USB_HC_Halt+0x54>
}
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fcc:	4770      	bx	lr
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008fce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008fd0:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fd4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008fd8:	d11b      	bne.n	8009012 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fde:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fe2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008fee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008ff2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ff6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8008ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ffe:	e001      	b.n	8009004 <USB_HC_Halt+0x9c>
        if (++count > 1000U)
 8009000:	3b01      	subs	r3, #1
 8009002:	d0e0      	beq.n	8008fc6 <USB_HC_Halt+0x5e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	2a00      	cmp	r2, #0
 8009008:	dbfa      	blt.n	8009000 <USB_HC_Halt+0x98>
}
 800900a:	2000      	movs	r0, #0
 800900c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009010:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 8009016:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009018:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800901c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009024:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009026:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <USB_StopHost+0x8c>)
 8009028:	f44f 6184 	mov.w	r1, #1056	; 0x420
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800902c:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009030:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009032:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009034:	6101      	str	r1, [r0, #16]
 8009036:	e001      	b.n	800903c <USB_StopHost+0x18>
    if (++count > 200000U)
 8009038:	3b01      	subs	r3, #1
 800903a:	d002      	beq.n	8009042 <USB_StopHost+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800903c:	6902      	ldr	r2, [r0, #16]
 800903e:	0691      	lsls	r1, r2, #26
 8009040:	d4fa      	bmi.n	8009038 <USB_StopHost+0x14>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009042:	2310      	movs	r3, #16
 8009044:	6103      	str	r3, [r0, #16]
 8009046:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <USB_StopHost+0x8c>)
 8009048:	e001      	b.n	800904e <USB_StopHost+0x2a>
    if (++count > 200000U)
 800904a:	3b01      	subs	r3, #1
 800904c:	d002      	beq.n	8009054 <USB_StopHost+0x30>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800904e:	6902      	ldr	r2, [r0, #16]
 8009050:	06d2      	lsls	r2, r2, #27
 8009052:	d4fa      	bmi.n	800904a <USB_StopHost+0x26>
 8009054:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009058:	460c      	mov	r4, r1
 800905a:	f500 62e0 	add.w	r2, r0, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8009068:	f844 3b20 	str.w	r3, [r4], #32
  for (i = 0U; i <= 15U; i++)
 800906c:	4294      	cmp	r4, r2
 800906e:	d1f6      	bne.n	800905e <USB_StopHost+0x3a>
  uint32_t count = 0U;
 8009070:	2300      	movs	r3, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8009072:	680a      	ldr	r2, [r1, #0]
 8009074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009078:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800907c:	600a      	str	r2, [r1, #0]
 800907e:	e002      	b.n	8009086 <USB_StopHost+0x62>
    {
      if (++count > 1000U)
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009080:	680a      	ldr	r2, [r1, #0]
 8009082:	2a00      	cmp	r2, #0
 8009084:	da03      	bge.n	800908e <USB_StopHost+0x6a>
      if (++count > 1000U)
 8009086:	3301      	adds	r3, #1
 8009088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800908c:	d9f8      	bls.n	8009080 <USB_StopHost+0x5c>
 800908e:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 8009090:	42a1      	cmp	r1, r4
 8009092:	d1ee      	bne.n	8009072 <USB_StopHost+0x4e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009094:	f04f 33ff 	mov.w	r3, #4294967295
 8009098:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800909c:	6143      	str	r3, [r0, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800909e:	6883      	ldr	r3, [r0, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80090a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090a4:	f043 0301 	orr.w	r3, r3, #1
 80090a8:	6083      	str	r3, [r0, #8]
}
 80090aa:	2000      	movs	r0, #0
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	00030d40 	.word	0x00030d40

080090b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80090b4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80090b6:	4903      	ldr	r1, [pc, #12]	; (80090c4 <MX_FATFS_Init+0x10>)
 80090b8:	4803      	ldr	r0, [pc, #12]	; (80090c8 <MX_FATFS_Init+0x14>)
 80090ba:	f003 ff53 	bl	800cf64 <FATFS_LinkDriver>
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <MX_FATFS_Init+0x18>)
 80090c0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80090c2:	bd08      	pop	{r3, pc}
 80090c4:	2000d798 	.word	0x2000d798
 80090c8:	08012828 	.word	0x08012828
 80090cc:	2000f808 	.word	0x2000f808

080090d0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80090d0:	2000      	movs	r0, #0
 80090d2:	4770      	bx	lr

080090d4 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 80090d4:	2000      	movs	r0, #0
 80090d6:	4770      	bx	lr

080090d8 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80090d8:	4601      	mov	r1, r0
{
 80090da:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80090dc:	4803      	ldr	r0, [pc, #12]	; (80090ec <USBH_status+0x14>)
 80090de:	f000 fadf 	bl	80096a0 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 80090e2:	fab0 f080 	clz	r0, r0
 80090e6:	0940      	lsrs	r0, r0, #5
 80090e8:	bd08      	pop	{r3, pc}
 80090ea:	bf00      	nop
 80090ec:	2000f8f4 	.word	0x2000f8f4

080090f0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80090f0:	b510      	push	{r4, lr}
 80090f2:	b090      	sub	sp, #64	; 0x40
 80090f4:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	480d      	ldr	r0, [pc, #52]	; (8009130 <USBH_read+0x40>)
 80090fa:	460b      	mov	r3, r1
 80090fc:	4621      	mov	r1, r4
 80090fe:	f000 fb03 	bl	8009708 <USBH_MSC_Read>
 8009102:	b908      	cbnz	r0, 8009108 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8009104:	b010      	add	sp, #64	; 0x40
 8009106:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009108:	4621      	mov	r1, r4
 800910a:	aa03      	add	r2, sp, #12
 800910c:	4808      	ldr	r0, [pc, #32]	; (8009130 <USBH_read+0x40>)
 800910e:	f000 fad9 	bl	80096c4 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8009112:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009116:	2b28      	cmp	r3, #40	; 0x28
 8009118:	d006      	beq.n	8009128 <USBH_read+0x38>
 800911a:	2b3a      	cmp	r3, #58	; 0x3a
 800911c:	d004      	beq.n	8009128 <USBH_read+0x38>
 800911e:	2b04      	cmp	r3, #4
 8009120:	d002      	beq.n	8009128 <USBH_read+0x38>
      res = RES_ERROR;
 8009122:	2001      	movs	r0, #1
}
 8009124:	b010      	add	sp, #64	; 0x40
 8009126:	bd10      	pop	{r4, pc}
      res = RES_NOTRDY;
 8009128:	2003      	movs	r0, #3
}
 800912a:	b010      	add	sp, #64	; 0x40
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	2000f8f4 	.word	0x2000f8f4

08009134 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009134:	b510      	push	{r4, lr}
 8009136:	4614      	mov	r4, r2
 8009138:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 800913a:	2903      	cmp	r1, #3
 800913c:	d82a      	bhi.n	8009194 <USBH_ioctl+0x60>
 800913e:	e8df f001 	tbb	[pc, r1]
 8009142:	1c02      	.short	0x1c02
 8009144:	0511      	.short	0x0511
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009146:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8009148:	b00e      	add	sp, #56	; 0x38
 800914a:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800914c:	4601      	mov	r1, r0
 800914e:	aa01      	add	r2, sp, #4
 8009150:	4812      	ldr	r0, [pc, #72]	; (800919c <USBH_ioctl+0x68>)
 8009152:	f000 fab7 	bl	80096c4 <USBH_MSC_GetLUNInfo>
 8009156:	b9d0      	cbnz	r0, 800918e <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009158:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800915c:	0a5b      	lsrs	r3, r3, #9
 800915e:	6023      	str	r3, [r4, #0]
}
 8009160:	b00e      	add	sp, #56	; 0x38
 8009162:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009164:	4601      	mov	r1, r0
 8009166:	aa01      	add	r2, sp, #4
 8009168:	480c      	ldr	r0, [pc, #48]	; (800919c <USBH_ioctl+0x68>)
 800916a:	f000 faab 	bl	80096c4 <USBH_MSC_GetLUNInfo>
 800916e:	b970      	cbnz	r0, 800918e <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size;
 8009170:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009174:	6023      	str	r3, [r4, #0]
}
 8009176:	b00e      	add	sp, #56	; 0x38
 8009178:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800917a:	4601      	mov	r1, r0
 800917c:	aa01      	add	r2, sp, #4
 800917e:	4807      	ldr	r0, [pc, #28]	; (800919c <USBH_ioctl+0x68>)
 8009180:	f000 faa0 	bl	80096c4 <USBH_MSC_GetLUNInfo>
 8009184:	b918      	cbnz	r0, 800918e <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 8009186:	9b02      	ldr	r3, [sp, #8]
 8009188:	6023      	str	r3, [r4, #0]
}
 800918a:	b00e      	add	sp, #56	; 0x38
 800918c:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 800918e:	2001      	movs	r0, #1
}
 8009190:	b00e      	add	sp, #56	; 0x38
 8009192:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 8009194:	2004      	movs	r0, #4
}
 8009196:	b00e      	add	sp, #56	; 0x38
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	2000f8f4 	.word	0x2000f8f4

080091a0 <USBH_write>:
{
 80091a0:	b510      	push	{r4, lr}
 80091a2:	b090      	sub	sp, #64	; 0x40
 80091a4:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	4810      	ldr	r0, [pc, #64]	; (80091ec <USBH_write+0x4c>)
 80091aa:	460b      	mov	r3, r1
 80091ac:	4621      	mov	r1, r4
 80091ae:	f000 faf1 	bl	8009794 <USBH_MSC_Write>
 80091b2:	b908      	cbnz	r0, 80091b8 <USBH_write+0x18>
}
 80091b4:	b010      	add	sp, #64	; 0x40
 80091b6:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80091b8:	4621      	mov	r1, r4
 80091ba:	aa03      	add	r2, sp, #12
 80091bc:	480b      	ldr	r0, [pc, #44]	; (80091ec <USBH_write+0x4c>)
 80091be:	f000 fa81 	bl	80096c4 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80091c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80091c6:	2b27      	cmp	r3, #39	; 0x27
 80091c8:	d00c      	beq.n	80091e4 <USBH_write+0x44>
 80091ca:	d906      	bls.n	80091da <USBH_write+0x3a>
 80091cc:	2b28      	cmp	r3, #40	; 0x28
 80091ce:	d006      	beq.n	80091de <USBH_write+0x3e>
 80091d0:	2b3a      	cmp	r3, #58	; 0x3a
 80091d2:	d004      	beq.n	80091de <USBH_write+0x3e>
      res = RES_ERROR;
 80091d4:	2001      	movs	r0, #1
}
 80091d6:	b010      	add	sp, #64	; 0x40
 80091d8:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d1fa      	bne.n	80091d4 <USBH_write+0x34>
      res = RES_NOTRDY;
 80091de:	2003      	movs	r0, #3
}
 80091e0:	b010      	add	sp, #64	; 0x40
 80091e2:	bd10      	pop	{r4, pc}
      res = RES_WRPRT;
 80091e4:	2002      	movs	r0, #2
}
 80091e6:	b010      	add	sp, #64	; 0x40
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop
 80091ec:	2000f8f4 	.word	0x2000f8f4

080091f0 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 80091f0:	2000      	movs	r0, #0
 80091f2:	4770      	bx	lr

080091f4 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091f4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80091f8:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091fa:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 80091fc:	7b2a      	ldrb	r2, [r5, #12]
 80091fe:	b122      	cbz	r2, 800920a <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY;
 8009200:	f112 30ff 	adds.w	r0, r2, #4294967295
 8009204:	bf18      	it	ne
 8009206:	2001      	movne	r0, #1
}
 8009208:	bd70      	pop	{r4, r5, r6, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800920a:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 800920e:	782b      	ldrb	r3, [r5, #0]
 8009210:	428b      	cmp	r3, r1
 8009212:	4604      	mov	r4, r0
 8009214:	d939      	bls.n	800928a <USBH_MSC_Process+0x96>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009216:	2334      	movs	r3, #52	; 0x34
 8009218:	fb03 5301 	mla	r3, r3, r1, r5
 800921c:	2001      	movs	r0, #1
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800921e:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009222:	f883 0091 	strb.w	r0, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009226:	2a08      	cmp	r2, #8
 8009228:	d825      	bhi.n	8009276 <USBH_MSC_Process+0x82>
 800922a:	e8df f002 	tbb	[pc, r2]
 800922e:	2445      	.short	0x2445
 8009230:	78665005 	.word	0x78665005
 8009234:	2424      	.short	0x2424
 8009236:	41          	.byte	0x41
 8009237:	00          	.byte	0x00
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009238:	b2c9      	uxtb	r1, r1
 800923a:	4620      	mov	r0, r4
 800923c:	f000 fc48 	bl	8009ad0 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8009240:	2800      	cmp	r0, #0
 8009242:	f040 80af 	bne.w	80093a4 <USBH_MSC_Process+0x1b0>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009246:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800924a:	2234      	movs	r2, #52	; 0x34
 800924c:	fb02 5203 	mla	r2, r2, r3, r5
 8009250:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 8009254:	2900      	cmp	r1, #0
 8009256:	f000 80cd 	beq.w	80093f4 <USBH_MSC_Process+0x200>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800925a:	2101      	movs	r1, #1
 800925c:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009260:	2234      	movs	r2, #52	; 0x34
 8009262:	fb02 5503 	mla	r5, r2, r3, r5
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009266:	2300      	movs	r3, #0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009268:	2203      	movs	r2, #3
 800926a:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800926e:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009272:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009276:	2104      	movs	r1, #4
 8009278:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800927c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8009280:	2200      	movs	r2, #0
 8009282:	f004 f805 	bl	800d290 <osMessagePut>
  USBH_StatusTypeDef error = USBH_BUSY;
 8009286:	2001      	movs	r0, #1
}
 8009288:	bd70      	pop	{r4, r5, r6, pc}
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800928a:	2304      	movs	r3, #4
        MSC_Handle->state = MSC_IDLE;
 800928c:	2601      	movs	r6, #1
        MSC_Handle->current_lun = 0U;
 800928e:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009292:	732e      	strb	r6, [r5, #12]
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009294:	4619      	mov	r1, r3
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009296:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800929a:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800929e:	f003 fff7 	bl	800d290 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80092a2:	4620      	mov	r0, r4
 80092a4:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80092a8:	2102      	movs	r1, #2
 80092aa:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 80092ac:	4630      	mov	r0, r6
}
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
            MSC_Handle->current_lun++;
 80092b0:	3101      	adds	r1, #1
 80092b2:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
            break;
 80092b6:	e7de      	b.n	8009276 <USBH_MSC_Process+0x82>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80092b8:	2334      	movs	r3, #52	; 0x34
 80092ba:	fb03 5101 	mla	r1, r3, r1, r5
 80092be:	2204      	movs	r2, #4
            MSC_Handle->timer = phost->Timer;
 80092c0:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80092c4:	f881 2090 	strb.w	r2, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 80092c8:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
            break;
 80092cc:	e7d3      	b.n	8009276 <USBH_MSC_Process+0x82>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80092ce:	2634      	movs	r6, #52	; 0x34
 80092d0:	fb06 5201 	mla	r2, r6, r1, r5
 80092d4:	3294      	adds	r2, #148	; 0x94
 80092d6:	b2c9      	uxtb	r1, r1
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fc21 	bl	8009b20 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 80092de:	bbd8      	cbnz	r0, 8009358 <USBH_MSC_Process+0x164>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80092e0:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092e4:	fb06 5603 	mla	r6, r6, r3, r5
 80092e8:	2201      	movs	r2, #1
              MSC_Handle->current_lun++;
 80092ea:	3301      	adds	r3, #1
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80092ec:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092f0:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
              MSC_Handle->current_lun++;
 80092f4:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 80092f8:	e7bd      	b.n	8009276 <USBH_MSC_Process+0x82>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80092fa:	2634      	movs	r6, #52	; 0x34
 80092fc:	fb06 5201 	mla	r2, r6, r1, r5
 8009300:	329f      	adds	r2, #159	; 0x9f
 8009302:	b2c9      	uxtb	r1, r1
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fc43 	bl	8009b90 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 800930a:	2800      	cmp	r0, #0
 800930c:	d145      	bne.n	800939a <USBH_MSC_Process+0x1a6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800930e:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8009312:	fb06 5503 	mla	r5, r6, r3, r5
 8009316:	2302      	movs	r3, #2
 8009318:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 800931c:	e7ab      	b.n	8009276 <USBH_MSC_Process+0x82>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800931e:	2634      	movs	r6, #52	; 0x34
 8009320:	fb06 5201 	mla	r2, r6, r1, r5
 8009324:	329c      	adds	r2, #156	; 0x9c
 8009326:	b2c9      	uxtb	r1, r1
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fc9d 	bl	8009c68 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 800932e:	bb50      	cbnz	r0, 8009386 <USBH_MSC_Process+0x192>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009330:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8009334:	fb06 5603 	mla	r6, r6, r3, r5
 8009338:	f896 209c 	ldrb.w	r2, [r6, #156]	; 0x9c
 800933c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8009340:	2a02      	cmp	r2, #2
 8009342:	d04b      	beq.n	80093dc <USBH_MSC_Process+0x1e8>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009344:	2234      	movs	r2, #52	; 0x34
 8009346:	fb02 5203 	mla	r2, r2, r3, r5
 800934a:	2101      	movs	r1, #1
              MSC_Handle->current_lun++;
 800934c:	3301      	adds	r3, #1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800934e:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 8009352:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 8009356:	e78e      	b.n	8009276 <USBH_MSC_Process+0x82>
            else if (scsi_status == USBH_FAIL)
 8009358:	2802      	cmp	r0, #2
 800935a:	d00c      	beq.n	8009376 <USBH_MSC_Process+0x182>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800935c:	2804      	cmp	r0, #4
 800935e:	d18a      	bne.n	8009276 <USBH_MSC_Process+0x82>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009360:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8009364:	fb06 5503 	mla	r5, r6, r3, r5
 8009368:	2201      	movs	r2, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800936a:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800936c:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009370:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 8009374:	e77f      	b.n	8009276 <USBH_MSC_Process+0x82>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009376:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800937a:	fb06 5503 	mla	r5, r6, r3, r5
 800937e:	2305      	movs	r3, #5
 8009380:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8009384:	e777      	b.n	8009276 <USBH_MSC_Process+0x82>
            if (scsi_status == USBH_FAIL)
 8009386:	2802      	cmp	r0, #2
 8009388:	d109      	bne.n	800939e <USBH_MSC_Process+0x1aa>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800938a:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800938e:	fb06 5503 	mla	r5, r6, r3, r5
 8009392:	2308      	movs	r3, #8
 8009394:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8009398:	e76d      	b.n	8009276 <USBH_MSC_Process+0x82>
            if (scsi_status == USBH_FAIL)
 800939a:	2802      	cmp	r0, #2
 800939c:	d0eb      	beq.n	8009376 <USBH_MSC_Process+0x182>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800939e:	2804      	cmp	r0, #4
 80093a0:	d0de      	beq.n	8009360 <USBH_MSC_Process+0x16c>
 80093a2:	e768      	b.n	8009276 <USBH_MSC_Process+0x82>
            if (ready_status == USBH_FAIL)
 80093a4:	2802      	cmp	r0, #2
 80093a6:	d128      	bne.n	80093fa <USBH_MSC_Process+0x206>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80093a8:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80093ac:	2234      	movs	r2, #52	; 0x34
 80093ae:	fb02 5203 	mla	r2, r2, r3, r5
 80093b2:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 80093b6:	2902      	cmp	r1, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80093b8:	bf14      	ite	ne
 80093ba:	2101      	movne	r1, #1
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80093bc:	2100      	moveq	r1, #0
 80093be:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80093c2:	2234      	movs	r2, #52	; 0x34
 80093c4:	fb02 5503 	mla	r5, r2, r3, r5
 80093c8:	2105      	movs	r1, #5
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80093ca:	2201      	movs	r2, #1
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80093cc:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80093ce:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80093d2:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80093d6:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 80093da:	e74c      	b.n	8009276 <USBH_MSC_Process+0x82>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80093dc:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 80093e0:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 80093e4:	1a09      	subs	r1, r1, r0
 80093e6:	f242 700f 	movw	r0, #9999	; 0x270f
 80093ea:	4281      	cmp	r1, r0
 80093ec:	d8aa      	bhi.n	8009344 <USBH_MSC_Process+0x150>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80093ee:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
                  break;
 80093f2:	e740      	b.n	8009276 <USBH_MSC_Process+0x82>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80093f4:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 80093f8:	e732      	b.n	8009260 <USBH_MSC_Process+0x6c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80093fa:	2804      	cmp	r0, #4
 80093fc:	f47f af3b 	bne.w	8009276 <USBH_MSC_Process+0x82>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009400:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8009404:	2234      	movs	r2, #52	; 0x34
 8009406:	fb02 5503 	mla	r5, r2, r3, r5
 800940a:	2201      	movs	r2, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800940c:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800940e:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009412:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 8009416:	e72e      	b.n	8009276 <USBH_MSC_Process+0x82>

08009418 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009418:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 800941c:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800941e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8009420:	7ba3      	ldrb	r3, [r4, #14]
 8009422:	2b02      	cmp	r3, #2
{
 8009424:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8009426:	d004      	beq.n	8009432 <USBH_MSC_ClassRequest+0x1a>
 8009428:	2b03      	cmp	r3, #3
 800942a:	d01a      	beq.n	8009462 <USBH_MSC_ClassRequest+0x4a>
 800942c:	b10b      	cbz	r3, 8009432 <USBH_MSC_ClassRequest+0x1a>
  USBH_StatusTypeDef status = USBH_BUSY;
 800942e:	2001      	movs	r0, #1
}
 8009430:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009432:	4610      	mov	r0, r2
 8009434:	4621      	mov	r1, r4
 8009436:	f000 f9f3 	bl	8009820 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 800943a:	2803      	cmp	r0, #3
 800943c:	d01a      	beq.n	8009474 <USBH_MSC_ClassRequest+0x5c>
      if (status == USBH_OK)
 800943e:	2800      	cmp	r0, #0
 8009440:	d1f6      	bne.n	8009430 <USBH_MSC_ClassRequest+0x18>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009442:	7823      	ldrb	r3, [r4, #0]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d91e      	bls.n	8009486 <USBH_MSC_ClassRequest+0x6e>
 8009448:	2302      	movs	r3, #2
          MSC_Handle->unit[i].state_changed = 0U;
 800944a:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800944e:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009450:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8009454:	2300      	movs	r3, #0
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009456:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
 8009458:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800945c:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
}
 8009460:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009462:	2100      	movs	r1, #0
 8009464:	f001 fad0 	bl	800aa08 <USBH_ClrFeature>
 8009468:	2800      	cmp	r0, #0
 800946a:	d1e0      	bne.n	800942e <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800946c:	7be3      	ldrb	r3, [r4, #15]
 800946e:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009470:	2001      	movs	r0, #1
}
 8009472:	bd10      	pop	{r4, pc}
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009474:	2201      	movs	r2, #1
          MSC_Handle->unit[i].state_changed = 0U;
 8009476:	2000      	movs	r0, #0
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009478:	2302      	movs	r3, #2
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800947a:	7022      	strb	r2, [r4, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800947c:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009480:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
}
 8009484:	bd10      	pop	{r4, pc}
 8009486:	3301      	adds	r3, #1
 8009488:	b2db      	uxtb	r3, r3
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800948a:	2202      	movs	r2, #2
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800948c:	2b01      	cmp	r3, #1
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800948e:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009490:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009494:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009498:	d1dc      	bne.n	8009454 <USBH_MSC_ClassRequest+0x3c>
}
 800949a:	bd10      	pop	{r4, pc}

0800949c <USBH_MSC_InterfaceDeInit>:
{
 800949c:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800949e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80094a2:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 80094a4:	7969      	ldrb	r1, [r5, #5]
{
 80094a6:	4604      	mov	r4, r0
  if (MSC_Handle->OutPipe)
 80094a8:	b969      	cbnz	r1, 80094c6 <USBH_MSC_InterfaceDeInit+0x2a>
  if (MSC_Handle->InPipe)
 80094aa:	7929      	ldrb	r1, [r5, #4]
 80094ac:	b9b1      	cbnz	r1, 80094dc <USBH_MSC_InterfaceDeInit+0x40>
  if (phost->pActiveClass->pData)
 80094ae:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80094b2:	69d8      	ldr	r0, [r3, #28]
 80094b4:	b128      	cbz	r0, 80094c2 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 80094b6:	f006 fd33 	bl	800ff20 <free>
    phost->pActiveClass->pData = 0U;
 80094ba:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80094be:	2200      	movs	r2, #0
 80094c0:	61da      	str	r2, [r3, #28]
}
 80094c2:	2000      	movs	r0, #0
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80094c6:	f001 fb1b 	bl	800ab00 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80094ca:	7969      	ldrb	r1, [r5, #5]
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 fb37 	bl	800ab40 <USBH_FreePipe>
  if (MSC_Handle->InPipe)
 80094d2:	7929      	ldrb	r1, [r5, #4]
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80094d4:	2300      	movs	r3, #0
 80094d6:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 80094d8:	2900      	cmp	r1, #0
 80094da:	d0e8      	beq.n	80094ae <USBH_MSC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80094dc:	4620      	mov	r0, r4
 80094de:	f001 fb0f 	bl	800ab00 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80094e2:	7929      	ldrb	r1, [r5, #4]
 80094e4:	4620      	mov	r0, r4
 80094e6:	f001 fb2b 	bl	800ab40 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80094ea:	2300      	movs	r3, #0
 80094ec:	712b      	strb	r3, [r5, #4]
 80094ee:	e7de      	b.n	80094ae <USBH_MSC_InterfaceDeInit+0x12>

080094f0 <USBH_MSC_InterfaceInit>:
{
 80094f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80094f4:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
{
 80094f8:	b084      	sub	sp, #16
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80094fa:	2350      	movs	r3, #80	; 0x50
 80094fc:	2206      	movs	r2, #6
 80094fe:	7909      	ldrb	r1, [r1, #4]
{
 8009500:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009502:	f000 fcfb 	bl	8009efc <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009506:	2801      	cmp	r0, #1
 8009508:	d904      	bls.n	8009514 <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 800950a:	2702      	movs	r7, #2
}
 800950c:	4638      	mov	r0, r7
 800950e:	b004      	add	sp, #16
 8009510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 8009514:	4601      	mov	r1, r0
 8009516:	4606      	mov	r6, r0
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fce5 	bl	8009ee8 <USBH_SelectInterface>
  if (status != USBH_OK)
 800951e:	4607      	mov	r7, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d1f2      	bne.n	800950a <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009524:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009528:	f8d4 837c 	ldr.w	r8, [r4, #892]	; 0x37c
 800952c:	f006 fcf0 	bl	800ff10 <malloc>
 8009530:	4605      	mov	r5, r0
 8009532:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8009536:	2800      	cmp	r0, #0
 8009538:	d0e7      	beq.n	800950a <USBH_MSC_InterfaceInit+0x1a>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800953a:	4639      	mov	r1, r7
 800953c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009540:	f006 fd29 	bl	800ff96 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009544:	231a      	movs	r3, #26
 8009546:	fb03 4306 	mla	r3, r3, r6, r4
 800954a:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 800954e:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8009552:	0611      	lsls	r1, r2, #24
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009554:	bf4c      	ite	mi
 8009556:	816b      	strhmi	r3, [r5, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009558:	812b      	strhpl	r3, [r5, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800955a:	f04f 031a 	mov.w	r3, #26
 800955e:	fb03 4606 	mla	r6, r3, r6, r4
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009562:	bf48      	it	mi
 8009564:	71ea      	strbmi	r2, [r5, #7]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009566:	f896 1356 	ldrb.w	r1, [r6, #854]	; 0x356
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800956a:	bf58      	it	pl
 800956c:	71aa      	strbpl	r2, [r5, #6]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800956e:	060a      	lsls	r2, r1, #24
 8009570:	f8b6 3358 	ldrh.w	r3, [r6, #856]	; 0x358
 8009574:	d43e      	bmi.n	80095f4 <USBH_MSC_InterfaceInit+0x104>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009576:	71a9      	strb	r1, [r5, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009578:	812b      	strh	r3, [r5, #8]
  MSC_Handle->state = MSC_INIT;
 800957a:	2600      	movs	r6, #0
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800957c:	4620      	mov	r0, r4
  MSC_Handle->state = MSC_INIT;
 800957e:	732e      	strb	r6, [r5, #12]
  MSC_Handle->error = MSC_OK;
 8009580:	736e      	strb	r6, [r5, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009582:	73ae      	strb	r6, [r5, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009584:	f001 fac2 	bl	800ab0c <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009588:	79e9      	ldrb	r1, [r5, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800958a:	7168      	strb	r0, [r5, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800958c:	4620      	mov	r0, r4
 800958e:	f001 fabd 	bl	800ab0c <USBH_AllocPipe>
 8009592:	7128      	strb	r0, [r5, #4]
  USBH_MSC_BOT_Init(phost);
 8009594:	4620      	mov	r0, r4
 8009596:	f000 f94f 	bl	8009838 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800959a:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800959e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 80095a2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80095a6:	79aa      	ldrb	r2, [r5, #6]
 80095a8:	7969      	ldrb	r1, [r5, #5]
 80095aa:	f8cd c008 	str.w	ip, [sp, #8]
 80095ae:	f04f 0802 	mov.w	r8, #2
 80095b2:	e9cd 0800 	strd	r0, r8, [sp]
 80095b6:	4620      	mov	r0, r4
 80095b8:	f001 fa92 	bl	800aae0 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80095bc:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 80095c0:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 80095c4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80095c8:	79ea      	ldrb	r2, [r5, #7]
 80095ca:	7929      	ldrb	r1, [r5, #4]
 80095cc:	9000      	str	r0, [sp, #0]
 80095ce:	e9cd 8c01 	strd	r8, ip, [sp, #4]
 80095d2:	4620      	mov	r0, r4
 80095d4:	f001 fa84 	bl	800aae0 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80095d8:	4632      	mov	r2, r6
 80095da:	7929      	ldrb	r1, [r5, #4]
 80095dc:	4620      	mov	r0, r4
 80095de:	f006 fc3f 	bl	800fe60 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80095e2:	4632      	mov	r2, r6
 80095e4:	7969      	ldrb	r1, [r5, #5]
 80095e6:	4620      	mov	r0, r4
 80095e8:	f006 fc3a 	bl	800fe60 <USBH_LL_SetToggle>
}
 80095ec:	4638      	mov	r0, r7
 80095ee:	b004      	add	sp, #16
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80095f4:	71e9      	strb	r1, [r5, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095f6:	816b      	strh	r3, [r5, #10]
 80095f8:	79a9      	ldrb	r1, [r5, #6]
 80095fa:	e7be      	b.n	800957a <USBH_MSC_InterfaceInit+0x8a>

080095fc <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095fc:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009600:	b5f0      	push	{r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009602:	69dc      	ldr	r4, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009604:	2734      	movs	r7, #52	; 0x34
 8009606:	fb07 4601 	mla	r6, r7, r1, r4
{
 800960a:	b083      	sub	sp, #12
  switch (MSC_Handle->unit[lun].state)
 800960c:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 8009610:	2b06      	cmp	r3, #6
{
 8009612:	4605      	mov	r5, r0
  switch (MSC_Handle->unit[lun].state)
 8009614:	d029      	beq.n	800966a <USBH_MSC_RdWrProcess+0x6e>
 8009616:	2b07      	cmp	r3, #7
 8009618:	d012      	beq.n	8009640 <USBH_MSC_RdWrProcess+0x44>
 800961a:	2b05      	cmp	r3, #5
 800961c:	d003      	beq.n	8009626 <USBH_MSC_RdWrProcess+0x2a>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800961e:	2401      	movs	r4, #1
    default:
      break;

  }
  return error;
}
 8009620:	4620      	mov	r0, r4
 8009622:	b003      	add	sp, #12
 8009624:	bdf0      	pop	{r4, r5, r6, r7, pc}
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009626:	fb07 4201 	mla	r2, r7, r1, r4
 800962a:	329c      	adds	r2, #156	; 0x9c
 800962c:	f000 fb1c 	bl	8009c68 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8009630:	bb48      	cbnz	r0, 8009686 <USBH_MSC_RdWrProcess+0x8a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009632:	2301      	movs	r3, #1
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009634:	2402      	movs	r4, #2
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009636:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800963a:	f886 4091 	strb.w	r4, [r6, #145]	; 0x91
 800963e:	e009      	b.n	8009654 <USBH_MSC_RdWrProcess+0x58>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009640:	2300      	movs	r3, #0
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	f000 fb57 	bl	8009cf8 <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 800964a:	4604      	mov	r4, r0
 800964c:	b9a8      	cbnz	r0, 800967a <USBH_MSC_RdWrProcess+0x7e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800964e:	2301      	movs	r3, #1
 8009650:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009654:	2104      	movs	r1, #4
 8009656:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800965a:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 800965e:	2200      	movs	r2, #0
 8009660:	f003 fe16 	bl	800d290 <osMessagePut>
}
 8009664:	4620      	mov	r0, r4
 8009666:	b003      	add	sp, #12
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800966a:	2300      	movs	r3, #0
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	f000 fb88 	bl	8009d84 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 8009674:	4604      	mov	r4, r0
 8009676:	2800      	cmp	r0, #0
 8009678:	d0e9      	beq.n	800964e <USBH_MSC_RdWrProcess+0x52>
      else if (scsi_status == USBH_FAIL)
 800967a:	2c02      	cmp	r4, #2
 800967c:	d00a      	beq.n	8009694 <USBH_MSC_RdWrProcess+0x98>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800967e:	2c04      	cmp	r4, #4
 8009680:	d003      	beq.n	800968a <USBH_MSC_RdWrProcess+0x8e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009682:	2401      	movs	r4, #1
 8009684:	e7e6      	b.n	8009654 <USBH_MSC_RdWrProcess+0x58>
      if (scsi_status == USBH_FAIL)
 8009686:	2804      	cmp	r0, #4
 8009688:	d1fb      	bne.n	8009682 <USBH_MSC_RdWrProcess+0x86>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800968a:	2308      	movs	r3, #8
 800968c:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
          error = USBH_FAIL;
 8009690:	2402      	movs	r4, #2
 8009692:	e7df      	b.n	8009654 <USBH_MSC_RdWrProcess+0x58>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009694:	2305      	movs	r3, #5
 8009696:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800969a:	2401      	movs	r4, #1
 800969c:	e7da      	b.n	8009654 <USBH_MSC_RdWrProcess+0x58>
 800969e:	bf00      	nop

080096a0 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80096a0:	7803      	ldrb	r3, [r0, #0]
 80096a2:	2b0b      	cmp	r3, #11
 80096a4:	d001      	beq.n	80096aa <USBH_MSC_UnitIsReady+0xa>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 80096a6:	2000      	movs	r0, #0
  }

  return res;
}
 80096a8:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096aa:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	2234      	movs	r2, #52	; 0x34
 80096b2:	fb02 3101 	mla	r1, r2, r1, r3
 80096b6:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 1U;
 80096ba:	fab0 f080 	clz	r0, r0
 80096be:	0940      	lsrs	r0, r0, #5
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop

080096c4 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 80096c4:	7803      	ldrb	r3, [r0, #0]
 80096c6:	2b0b      	cmp	r3, #11
 80096c8:	d001      	beq.n	80096ce <USBH_MSC_GetLUNInfo+0xa>
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 80096ca:	2002      	movs	r0, #2
  }
}
 80096cc:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ce:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80096d2:	b470      	push	{r4, r5, r6}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	2034      	movs	r0, #52	; 0x34
 80096d8:	2490      	movs	r4, #144	; 0x90
 80096da:	fb10 4101 	smlabb	r1, r0, r1, r4
 80096de:	4419      	add	r1, r3
 80096e0:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80096e4:	680d      	ldr	r5, [r1, #0]
 80096e6:	684c      	ldr	r4, [r1, #4]
 80096e8:	6888      	ldr	r0, [r1, #8]
 80096ea:	68ce      	ldr	r6, [r1, #12]
 80096ec:	60d6      	str	r6, [r2, #12]
 80096ee:	3110      	adds	r1, #16
 80096f0:	4299      	cmp	r1, r3
 80096f2:	6015      	str	r5, [r2, #0]
 80096f4:	6054      	str	r4, [r2, #4]
 80096f6:	6090      	str	r0, [r2, #8]
 80096f8:	f102 0210 	add.w	r2, r2, #16
 80096fc:	d1f2      	bne.n	80096e4 <USBH_MSC_GetLUNInfo+0x20>
 80096fe:	680b      	ldr	r3, [r1, #0]
 8009700:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 8009702:	2000      	movs	r0, #0
}
 8009704:	bc70      	pop	{r4, r5, r6}
 8009706:	4770      	bx	lr

08009708 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800970c:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 8009710:	b082      	sub	sp, #8
  if ((phost->device.is_connected == 0U) ||
 8009712:	b17d      	cbz	r5, 8009734 <USBH_MSC_Read+0x2c>
      (phost->gState != HOST_CLASS) ||
 8009714:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8009716:	2d0b      	cmp	r5, #11
 8009718:	4604      	mov	r4, r0
 800971a:	d10b      	bne.n	8009734 <USBH_MSC_Read+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800971c:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 8009720:	69ee      	ldr	r6, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009722:	2534      	movs	r5, #52	; 0x34
 8009724:	fb05 6501 	mla	r5, r5, r1, r6
 8009728:	460f      	mov	r7, r1
      (phost->gState != HOST_CLASS) ||
 800972a:	f895 c090 	ldrb.w	ip, [r5, #144]	; 0x90
 800972e:	f1bc 0f01 	cmp.w	ip, #1
 8009732:	d003      	beq.n	800973c <USBH_MSC_Read+0x34>
  {
    return  USBH_FAIL;
 8009734:	2002      	movs	r0, #2
    }
  }
  MSC_Handle->state = MSC_IDLE;

  return USBH_OK;
}
 8009736:	b002      	add	sp, #8
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MSC_Handle->state = MSC_READ;
 800973c:	f04f 0c06 	mov.w	ip, #6
 8009740:	f886 c00c 	strb.w	ip, [r6, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009744:	f885 c090 	strb.w	ip, [r5, #144]	; 0x90
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009748:	9d08      	ldr	r5, [sp, #32]
  MSC_Handle->rw_lun = lun;
 800974a:	f8a6 10fa 	strh.w	r1, [r6, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800974e:	9500      	str	r5, [sp, #0]
 8009750:	f000 fb18 	bl	8009d84 <USBH_MSC_SCSI_Read>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009754:	9b08      	ldr	r3, [sp, #32]
  timeout = phost->Timer;
 8009756:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800975a:	f242 7510 	movw	r5, #10000	; 0x2710
 800975e:	fb05 f503 	mul.w	r5, r5, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009762:	e008      	b.n	8009776 <USBH_MSC_Read+0x6e>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009764:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8009768:	eba3 0308 	sub.w	r3, r3, r8
 800976c:	42ab      	cmp	r3, r5
 800976e:	d80c      	bhi.n	800978a <USBH_MSC_Read+0x82>
 8009770:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8009774:	b14b      	cbz	r3, 800978a <USBH_MSC_Read+0x82>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009776:	4639      	mov	r1, r7
 8009778:	4620      	mov	r0, r4
 800977a:	f7ff ff3f 	bl	80095fc <USBH_MSC_RdWrProcess>
 800977e:	2801      	cmp	r0, #1
 8009780:	d0f0      	beq.n	8009764 <USBH_MSC_Read+0x5c>
  MSC_Handle->state = MSC_IDLE;
 8009782:	2301      	movs	r3, #1
 8009784:	7333      	strb	r3, [r6, #12]
  return USBH_OK;
 8009786:	2000      	movs	r0, #0
 8009788:	e7d5      	b.n	8009736 <USBH_MSC_Read+0x2e>
      MSC_Handle->state = MSC_IDLE;
 800978a:	2301      	movs	r3, #1
 800978c:	7333      	strb	r3, [r6, #12]
      return USBH_FAIL;
 800978e:	2002      	movs	r0, #2
 8009790:	e7d1      	b.n	8009736 <USBH_MSC_Read+0x2e>
 8009792:	bf00      	nop

08009794 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8009798:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 800979c:	b082      	sub	sp, #8
  if ((phost->device.is_connected == 0U) ||
 800979e:	b17d      	cbz	r5, 80097c0 <USBH_MSC_Write+0x2c>
      (phost->gState != HOST_CLASS) ||
 80097a0:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80097a2:	2d0b      	cmp	r5, #11
 80097a4:	4604      	mov	r4, r0
 80097a6:	d10b      	bne.n	80097c0 <USBH_MSC_Write+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097a8:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 80097ac:	69ee      	ldr	r6, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80097ae:	2534      	movs	r5, #52	; 0x34
 80097b0:	fb05 6501 	mla	r5, r5, r1, r6
 80097b4:	460f      	mov	r7, r1
      (phost->gState != HOST_CLASS) ||
 80097b6:	f895 c090 	ldrb.w	ip, [r5, #144]	; 0x90
 80097ba:	f1bc 0f01 	cmp.w	ip, #1
 80097be:	d003      	beq.n	80097c8 <USBH_MSC_Write+0x34>
  {
    return  USBH_FAIL;
 80097c0:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
  return USBH_OK;
}
 80097c2:	b002      	add	sp, #8
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MSC_Handle->state = MSC_WRITE;
 80097c8:	f04f 0c07 	mov.w	ip, #7
 80097cc:	f886 c00c 	strb.w	ip, [r6, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80097d0:	f885 c090 	strb.w	ip, [r5, #144]	; 0x90
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80097d4:	9d08      	ldr	r5, [sp, #32]
  MSC_Handle->rw_lun = lun;
 80097d6:	f8a6 10fa 	strh.w	r1, [r6, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80097da:	9500      	str	r5, [sp, #0]
 80097dc:	f000 fa8c 	bl	8009cf8 <USBH_MSC_SCSI_Write>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097e0:	9b08      	ldr	r3, [sp, #32]
  timeout = phost->Timer;
 80097e2:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097e6:	f242 7510 	movw	r5, #10000	; 0x2710
 80097ea:	fb05 f503 	mul.w	r5, r5, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097ee:	e008      	b.n	8009802 <USBH_MSC_Write+0x6e>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097f0:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80097f4:	eba3 0308 	sub.w	r3, r3, r8
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	d80c      	bhi.n	8009816 <USBH_MSC_Write+0x82>
 80097fc:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8009800:	b14b      	cbz	r3, 8009816 <USBH_MSC_Write+0x82>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009802:	4639      	mov	r1, r7
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff fef9 	bl	80095fc <USBH_MSC_RdWrProcess>
 800980a:	2801      	cmp	r0, #1
 800980c:	d0f0      	beq.n	80097f0 <USBH_MSC_Write+0x5c>
  MSC_Handle->state = MSC_IDLE;
 800980e:	2301      	movs	r3, #1
 8009810:	7333      	strb	r3, [r6, #12]
  return USBH_OK;
 8009812:	2000      	movs	r0, #0
 8009814:	e7d5      	b.n	80097c2 <USBH_MSC_Write+0x2e>
      MSC_Handle->state = MSC_IDLE;
 8009816:	2301      	movs	r3, #1
 8009818:	7333      	strb	r3, [r6, #12]
      return USBH_FAIL;
 800981a:	2002      	movs	r0, #2
 800981c:	e7d1      	b.n	80097c2 <USBH_MSC_Write+0x2e>
 800981e:	bf00      	nop

08009820 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009820:	b410      	push	{r4}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 8009822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009826:	f64f 64a1 	movw	r4, #65185	; 0xfea1
 800982a:	e9c0 4204 	strd	r4, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 800982e:	2201      	movs	r2, #1
}
 8009830:	f85d 4b04 	ldr.w	r4, [sp], #4
  return USBH_CtlReq(phost, Maxlun, 1U);
 8009834:	f000 be58 	b.w	800a4e8 <USBH_CtlReq>

08009838 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009838:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800983c:	4a05      	ldr	r2, [pc, #20]	; (8009854 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800983e:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009840:	4905      	ldr	r1, [pc, #20]	; (8009858 <USBH_MSC_BOT_Init+0x20>)
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009842:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009844:	2201      	movs	r2, #1
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009846:	6599      	str	r1, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800984c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8009850:	2000      	movs	r0, #0
 8009852:	4770      	bx	lr
 8009854:	43425355 	.word	0x43425355
 8009858:	20304050 	.word	0x20304050

0800985c <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800985c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009860:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009862:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8009864:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8009868:	3b01      	subs	r3, #1
{
 800986a:	b082      	sub	sp, #8
 800986c:	4605      	mov	r5, r0
  switch (MSC_Handle->hbot.state)
 800986e:	2b0a      	cmp	r3, #10
 8009870:	d810      	bhi.n	8009894 <USBH_MSC_BOT_Process+0x38>
 8009872:	e8df f003 	tbb	[pc, r3]
 8009876:	3022      	.short	0x3022
 8009878:	877b0647 	.word	0x877b0647
 800987c:	72675d52 	.word	0x72675d52
 8009880:	13          	.byte	0x13
 8009881:	00          	.byte	0x00

      break;

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009882:	7921      	ldrb	r1, [r4, #4]
 8009884:	f006 fad6 	bl	800fe34 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 8009888:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800988a:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 800988c:	f000 80b9 	beq.w	8009a02 <USBH_MSC_BOT_Process+0x1a6>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      else if (URB_Status == USBH_URB_STALL)
 8009890:	2805      	cmp	r0, #5
 8009892:	d055      	beq.n	8009940 <USBH_MSC_BOT_Process+0xe4>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009894:	2601      	movs	r6, #1

    default:
      break;
  }
  return status;
}
 8009896:	4630      	mov	r0, r6
 8009898:	b002      	add	sp, #8
 800989a:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.wValue.w = 0U;
 800989c:	2200      	movs	r2, #0
 800989e:	f64f 7321 	movw	r3, #65313	; 0xff21
 80098a2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  return USBH_CtlReq(phost, 0U, 0U);
 80098a6:	4611      	mov	r1, r2
 80098a8:	f000 fe1e 	bl	800a4e8 <USBH_CtlReq>
      if (status == USBH_OK)
 80098ac:	4606      	mov	r6, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d1f1      	bne.n	8009896 <USBH_MSC_BOT_Process+0x3a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80098b8:	e7ed      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098ba:	2202      	movs	r2, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098bc:	2601      	movs	r6, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80098be:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098c2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098c6:	7963      	ldrb	r3, [r4, #5]
 80098c8:	9600      	str	r6, [sp, #0]
 80098ca:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80098ce:	221f      	movs	r2, #31
 80098d0:	f001 f8e0 	bl	800aa94 <USBH_BulkSendData>
      break;
 80098d4:	e7df      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098d6:	7961      	ldrb	r1, [r4, #5]
 80098d8:	f006 faac 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80098dc:	2801      	cmp	r0, #1
 80098de:	d076      	beq.n	80099ce <USBH_MSC_BOT_Process+0x172>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098e0:	2802      	cmp	r0, #2
 80098e2:	d068      	beq.n	80099b6 <USBH_MSC_BOT_Process+0x15a>
      else if (URB_Status == USBH_URB_STALL)
 80098e4:	2805      	cmp	r0, #5
 80098e6:	d1d5      	bne.n	8009894 <USBH_MSC_BOT_Process+0x38>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80098e8:	220a      	movs	r2, #10
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80098ea:	2302      	movs	r3, #2
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80098ec:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098f0:	4619      	mov	r1, r3
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80098f2:	f8c5 33e0 	str.w	r3, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098f6:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80098fa:	2200      	movs	r2, #0
 80098fc:	f003 fcc8 	bl	800d290 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009900:	2601      	movs	r6, #1
 8009902:	e7c8      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009904:	7923      	ldrb	r3, [r4, #4]
 8009906:	8962      	ldrh	r2, [r4, #10]
 8009908:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800990c:	f001 f8d8 	bl	800aac0 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009910:	2304      	movs	r3, #4
 8009912:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009916:	2601      	movs	r6, #1
      break;
 8009918:	e7bd      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800991a:	7923      	ldrb	r3, [r4, #4]
 800991c:	220d      	movs	r2, #13
 800991e:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8009922:	f001 f8cd 	bl	800aac0 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009926:	2308      	movs	r3, #8
 8009928:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800992c:	2601      	movs	r6, #1
      break;
 800992e:	e7b2      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009930:	7921      	ldrb	r1, [r4, #4]
 8009932:	f006 fa7f 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8009936:	2801      	cmp	r0, #1
 8009938:	f000 809d 	beq.w	8009a76 <USBH_MSC_BOT_Process+0x21a>
      else if (URB_Status == USBH_URB_STALL)
 800993c:	2805      	cmp	r0, #5
 800993e:	d1a9      	bne.n	8009894 <USBH_MSC_BOT_Process+0x38>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009940:	2209      	movs	r2, #9
 8009942:	e7d2      	b.n	80098ea <USBH_MSC_BOT_Process+0x8e>

  switch (dir)
  {
    case BOT_DIR_IN :
      /* send ClrFeture on Bulk IN endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009944:	79e1      	ldrb	r1, [r4, #7]
 8009946:	f001 f85f 	bl	800aa08 <USBH_ClrFeature>
      if (error == USBH_OK)
 800994a:	b378      	cbz	r0, 80099ac <USBH_MSC_BOT_Process+0x150>
      else if (error == USBH_UNRECOVERED_ERROR)
 800994c:	2804      	cmp	r0, #4
 800994e:	d1a1      	bne.n	8009894 <USBH_MSC_BOT_Process+0x38>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009950:	230b      	movs	r3, #11
 8009952:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009956:	2601      	movs	r6, #1
 8009958:	e79d      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>

      break;

    case BOT_DIR_OUT :
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800995a:	79a1      	ldrb	r1, [r4, #6]
 800995c:	f001 f854 	bl	800aa08 <USBH_ClrFeature>
      if (error == USBH_OK)
 8009960:	4606      	mov	r6, r0
 8009962:	2800      	cmp	r0, #0
 8009964:	d072      	beq.n	8009a4c <USBH_MSC_BOT_Process+0x1f0>
        if (error == USBH_UNRECOVERED_ERROR)
 8009966:	2804      	cmp	r0, #4
 8009968:	d194      	bne.n	8009894 <USBH_MSC_BOT_Process+0x38>
 800996a:	e7f1      	b.n	8009950 <USBH_MSC_BOT_Process+0xf4>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800996c:	2601      	movs	r6, #1
 800996e:	7963      	ldrb	r3, [r4, #5]
 8009970:	8922      	ldrh	r2, [r4, #8]
 8009972:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009976:	9600      	str	r6, [sp, #0]
 8009978:	f001 f88c 	bl	800aa94 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800997c:	2306      	movs	r3, #6
 800997e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      break;
 8009982:	e788      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009984:	7961      	ldrb	r1, [r4, #5]
 8009986:	f006 fa55 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800998a:	2801      	cmp	r0, #1
 800998c:	d04b      	beq.n	8009a26 <USBH_MSC_BOT_Process+0x1ca>
      else if (URB_Status == USBH_URB_NOTREADY)
 800998e:	2802      	cmp	r0, #2
 8009990:	d1a8      	bne.n	80098e4 <USBH_MSC_BOT_Process+0x88>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009992:	2305      	movs	r3, #5
 8009994:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009998:	4601      	mov	r1, r0
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800999a:	f8c5 03e0 	str.w	r0, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800999e:	2200      	movs	r2, #0
 80099a0:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80099a4:	f003 fc74 	bl	800d290 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099a8:	2601      	movs	r6, #1
 80099aa:	e774      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80099ac:	2307      	movs	r3, #7
 80099ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099b2:	2601      	movs	r6, #1
 80099b4:	e76f      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099b6:	2601      	movs	r6, #1
 80099b8:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099bc:	4601      	mov	r1, r0
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80099be:	f8c5 03e0 	str.w	r0, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099c2:	2200      	movs	r2, #0
 80099c4:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80099c8:	f003 fc62 	bl	800d290 <osMessagePut>
 80099cc:	e763      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80099ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80099d0:	b19b      	cbz	r3, 80099fa <USBH_MSC_BOT_Process+0x19e>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80099d2:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80099d6:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80099d8:	bfb4      	ite	lt
 80099da:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80099dc:	2305      	movge	r3, #5
 80099de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80099e2:	2102      	movs	r1, #2
 80099e4:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099e8:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80099ec:	2200      	movs	r2, #0
 80099ee:	f003 fc4f 	bl	800d290 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099f2:	2601      	movs	r6, #1
 80099f4:	e74f      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099fa:	2307      	movs	r3, #7
 80099fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009a00:	e7ef      	b.n	80099e2 <USBH_MSC_BOT_Process+0x186>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009a02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009a04:	8962      	ldrh	r2, [r4, #10]
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d954      	bls.n	8009ab4 <USBH_MSC_BOT_Process+0x258>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a0a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009a0e:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a10:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009a12:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a14:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d04d      	beq.n	8009ab8 <USBH_MSC_BOT_Process+0x25c>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009a1c:	7923      	ldrb	r3, [r4, #4]
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f001 f84e 	bl	800aac0 <USBH_BulkReceiveData>
 8009a24:	e737      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009a28:	8922      	ldrh	r2, [r4, #8]
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d9e3      	bls.n	80099f6 <USBH_MSC_BOT_Process+0x19a>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a2e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a32:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a34:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a36:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a38:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0dc      	beq.n	80099fa <USBH_MSC_BOT_Process+0x19e>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a40:	7963      	ldrb	r3, [r4, #5]
 8009a42:	9000      	str	r0, [sp, #0]
 8009a44:	4628      	mov	r0, r5
 8009a46:	f001 f825 	bl	800aa94 <USBH_BulkSendData>
 8009a4a:	e7ca      	b.n	80099e2 <USBH_MSC_BOT_Process+0x186>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009a4c:	7961      	ldrb	r1, [r4, #5]
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f006 fa18 	bl	800fe84 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009a54:	f1c0 0201 	rsb	r2, r0, #1
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	7961      	ldrb	r1, [r4, #5]
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f006 f9ff 	bl	800fe60 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009a62:	4632      	mov	r2, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	7921      	ldrb	r1, [r4, #4]
 8009a68:	f006 f9fa 	bl	800fe60 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009a6c:	2309      	movs	r3, #9
 8009a6e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009a72:	2601      	movs	r6, #1
 8009a74:	e70f      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a76:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a7a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7e:	69de      	ldr	r6, [r3, #28]
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009a80:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009a84:	7931      	ldrb	r1, [r6, #4]
 8009a86:	4628      	mov	r0, r5
 8009a88:	f006 f990 	bl	800fdac <USBH_LL_GetLastXferSize>
 8009a8c:	280d      	cmp	r0, #13
 8009a8e:	d107      	bne.n	8009aa0 <USBH_MSC_BOT_Process+0x244>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <USBH_MSC_BOT_Process+0x270>)
 8009a92:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d103      	bne.n	8009aa0 <USBH_MSC_BOT_Process+0x244>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009a98:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 8009a9a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d00d      	beq.n	8009abc <USBH_MSC_BOT_Process+0x260>
          status = USBH_FAIL;
 8009aa0:	2602      	movs	r6, #2
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009aa8:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8009aac:	2200      	movs	r2, #0
 8009aae:	f003 fbef 	bl	800d290 <osMessagePut>
 8009ab2:	e6f0      	b.n	8009896 <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009ab8:	2207      	movs	r2, #7
 8009aba:	e716      	b.n	80098ea <USBH_MSC_BOT_Process+0x8e>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009abc:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
          status = USBH_OK;
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bf14      	ite	ne
 8009ac4:	2602      	movne	r6, #2
 8009ac6:	2600      	moveq	r6, #0
 8009ac8:	e7eb      	b.n	8009aa2 <USBH_MSC_BOT_Process+0x246>
 8009aca:	bf00      	nop
 8009acc:	53425355 	.word	0x53425355

08009ad0 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ad0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009ad4:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009ad6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8009ada:	2a01      	cmp	r2, #1
 8009adc:	d005      	beq.n	8009aea <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8009ade:	2a02      	cmp	r2, #2
 8009ae0:	d101      	bne.n	8009ae6 <USBH_MSC_SCSI_TestUnitReady+0x16>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ae2:	f7ff bebb 	b.w	800985c <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ae6:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8009ae8:	4770      	bx	lr
{
 8009aea:	b430      	push	{r4, r5}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009aec:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009aee:	250a      	movs	r5, #10
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009af0:	2402      	movs	r4, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009af2:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
 8009af6:	f8c3 1067 	str.w	r1, [r3, #103]	; 0x67
 8009afa:	f8c3 106b 	str.w	r1, [r3, #107]	; 0x6b
 8009afe:	f8c3 106f 	str.w	r1, [r3, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b02:	f883 5062 	strb.w	r5, [r3, #98]	; 0x62
      error = USBH_BUSY;
 8009b06:	4610      	mov	r0, r2
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b08:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009b0c:	65d9      	str	r1, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009b0e:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009b12:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8009b1a:	bc30      	pop	{r4, r5}
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b20:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8009b24:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b26:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009b28:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d010      	beq.n	8009b52 <USBH_MSC_SCSI_ReadCapacity+0x32>
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d10c      	bne.n	8009b4e <USBH_MSC_SCSI_ReadCapacity+0x2e>
 8009b34:	4615      	mov	r5, r2
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 8009b36:	f7ff fe91 	bl	800985c <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 8009b3a:	b938      	cbnz	r0, 8009b4c <USBH_MSC_SCSI_ReadCapacity+0x2c>
      {
        /*assign the capacity*/
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b3c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009b40:	6813      	ldr	r3, [r2, #0]
 8009b42:	ba1b      	rev	r3, r3
 8009b44:	602b      	str	r3, [r5, #0]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

        /*assign the page length*/
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009b46:	88d3      	ldrh	r3, [r2, #6]
 8009b48:	ba5b      	rev16	r3, r3
 8009b4a:	80ab      	strh	r3, [r5, #4]
    default:
      break;
  }

  return error;
}
 8009b4c:	bd70      	pop	{r4, r5, r6, pc}
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009b4e:	2001      	movs	r0, #1
}
 8009b50:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009b52:	2208      	movs	r2, #8
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b54:	2580      	movs	r5, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009b56:	65e2      	str	r2, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b5e:	200a      	movs	r0, #10
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b60:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009b64:	2625      	movs	r6, #37	; 0x25
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b66:	2502      	movs	r5, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b68:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 8009b6c:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 8009b70:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009b74:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b78:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b7c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      error = USBH_BUSY;
 8009b80:	4618      	mov	r0, r3
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009b82:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b86:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009b8a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}

08009b90 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b92:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009b96:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009b98:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d03e      	beq.n	8009c1e <USBH_MSC_SCSI_Inquiry+0x8e>
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d002      	beq.n	8009baa <USBH_MSC_SCSI_Inquiry+0x1a>
  USBH_StatusTypeDef error = USBH_FAIL;
 8009ba4:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009baa:	4616      	mov	r6, r2
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bac:	f7ff fe56 	bl	800985c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1f7      	bne.n	8009ba6 <USBH_MSC_SCSI_Inquiry+0x16>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	2222      	movs	r2, #34	; 0x22
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f006 f9eb 	bl	800ff96 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009bc0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009bcc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009bd6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009bde:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8009be0:	bfba      	itte	lt
 8009be2:	2301      	movlt	r3, #1
 8009be4:	70b3      	strblt	r3, [r6, #2]
          inquiry->RemovableMedia = 0U;
 8009be6:	70b5      	strbge	r5, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009be8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bec:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f8c6 3007 	str.w	r3, [r6, #7]
 8009bf6:	f8c6 2003 	str.w	r2, [r6, #3]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009bfa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bfe:	f853 7f10 	ldr.w	r7, [r3, #16]!
 8009c02:	6858      	ldr	r0, [r3, #4]
 8009c04:	6899      	ldr	r1, [r3, #8]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	61b3      	str	r3, [r6, #24]
 8009c0a:	6130      	str	r0, [r6, #16]
 8009c0c:	60f7      	str	r7, [r6, #12]
 8009c0e:	6171      	str	r1, [r6, #20]
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009c10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	f8c6 301d 	str.w	r3, [r6, #29]
}
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009c1e:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009c20:	014d      	lsls	r5, r1, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009c22:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c24:	2780      	movs	r7, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c26:	260a      	movs	r6, #10
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009c28:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      error = USBH_BUSY;
 8009c30:	461d      	mov	r5, r3
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009c32:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009c34:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009c38:	2012      	movs	r0, #18
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c3a:	2102      	movs	r1, #2
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c3c:	f104 0310 	add.w	r3, r4, #16
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009c40:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009c44:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c48:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c4c:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009c50:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009c54:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009c58:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c5c:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8009c64:	4628      	mov	r0, r5
 8009c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c68 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c6a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009c6e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009c70:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d016      	beq.n	8009ca6 <USBH_MSC_SCSI_RequestSense+0x3e>
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d112      	bne.n	8009ca2 <USBH_MSC_SCSI_RequestSense+0x3a>
 8009c7c:	4615      	mov	r5, r2
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 8009c7e:	f7ff fded 	bl	800985c <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 8009c82:	b968      	cbnz	r0, 8009ca0 <USBH_MSC_SCSI_RequestSense+0x38>
      {
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009c84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c88:	789b      	ldrb	r3, [r3, #2]
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009c90:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c94:	7b1b      	ldrb	r3, [r3, #12]
 8009c96:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009c98:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c9c:	7b5b      	ldrb	r3, [r3, #13]
 8009c9e:	70ab      	strb	r3, [r5, #2]
    default:
      break;
  }

  return error;
}
 8009ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ca2:	2002      	movs	r0, #2
}
 8009ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ca6:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009ca8:	014d      	lsls	r5, r1, #5
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009caa:	260a      	movs	r6, #10
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009cac:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cb0:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009cb2:	210e      	movs	r1, #14
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cb4:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009cb8:	2703      	movs	r7, #3
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009cba:	2602      	movs	r6, #2
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009cbc:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cc0:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009cc4:	f104 0510 	add.w	r5, r4, #16
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cc8:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 8009ccc:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009cd0:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009cd2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009cd6:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009cda:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009cde:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ce2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      error = USBH_BUSY;
 8009ce6:	4618      	mov	r0, r3
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009ce8:	f884 7063 	strb.w	r7, [r4, #99]	; 0x63
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009cec:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009cf0:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8009cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf6:	bf00      	nop

08009cf8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cfa:	f8d0 437c 	ldr.w	r4, [r0, #892]	; 0x37c
{
 8009cfe:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d00:	69e4      	ldr	r4, [r4, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009d02:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8009d06:	2d01      	cmp	r5, #1
 8009d08:	d007      	beq.n	8009d1a <USBH_MSC_SCSI_Write+0x22>
 8009d0a:	2d02      	cmp	r5, #2
 8009d0c:	d103      	bne.n	8009d16 <USBH_MSC_SCSI_Write+0x1e>
    default:
      break;
  }

  return error;
}
 8009d0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d12:	f7ff bda3 	b.w	800985c <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d16:	2002      	movs	r0, #2
}
 8009d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d1a:	f8b4 7098 	ldrh.w	r7, [r4, #152]	; 0x98
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d1e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d22:	fb06 f707 	mul.w	r7, r6, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d26:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d28:	65e7      	str	r7, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d2a:	270a      	movs	r7, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d2c:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8009d30:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009d34:	f3c6 2e07 	ubfx	lr, r6, #8, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d38:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d3c:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d40:	f884 7062 	strb.w	r7, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d44:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009d48:	f3c2 6707 	ubfx	r7, r2, #24, #8
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009d4c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009d50:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009d54:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d58:	2102      	movs	r1, #2
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009d5a:	f3c2 4607 	ubfx	r6, r2, #16, #8
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009d5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009d62:	f884 e06a 	strb.w	lr, [r4, #106]	; 0x6a
      MSC_Handle->hbot.pbuf = pbuf;
 8009d66:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 8009d6a:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009d6c:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009d70:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009d74:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009d78:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d7c:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
}
 8009d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d82:	bf00      	nop

08009d84 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d86:	f8d0 437c 	ldr.w	r4, [r0, #892]	; 0x37c
{
 8009d8a:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d8c:	69e4      	ldr	r4, [r4, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8009d8e:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8009d92:	2d01      	cmp	r5, #1
 8009d94:	d007      	beq.n	8009da6 <USBH_MSC_SCSI_Read+0x22>
 8009d96:	2d02      	cmp	r5, #2
 8009d98:	d103      	bne.n	8009da2 <USBH_MSC_SCSI_Read+0x1e>
    default:
      break;
  }

  return error;
}
 8009d9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d9e:	f7ff bd5d 	b.w	800985c <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009da2:	2002      	movs	r0, #2
}
 8009da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009da6:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009daa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009dae:	fb06 f101 	mul.w	r1, r6, r1
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009db2:	f04f 0c80 	mov.w	ip, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009db6:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009db8:	270a      	movs	r7, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dba:	2100      	movs	r1, #0
 8009dbc:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8009dc0:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009dc4:	f3c6 2e07 	ubfx	lr, r6, #8, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dc8:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009dcc:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009dd0:	f884 7062 	strb.w	r7, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dd4:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009dd8:	f3c2 6707 	ubfx	r7, r2, #24, #8
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009ddc:	f04f 0c28 	mov.w	ip, #40	; 0x28
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009de0:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009de4:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009de8:	2102      	movs	r1, #2
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009dea:	f3c2 4607 	ubfx	r6, r2, #16, #8
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009dee:	f3c2 2207 	ubfx	r2, r2, #8, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009df2:	f884 e06a 	strb.w	lr, [r4, #106]	; 0x6a
      MSC_Handle->hbot.pbuf = pbuf;
 8009df6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 8009dfa:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009dfc:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009e00:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009e04:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009e08:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e0c:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
}
 8009e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e12:	bf00      	nop

08009e14 <USBH_Init>:
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d054      	beq.n	8009ec2 <USBH_Init+0xae>
{
 8009e18:	b570      	push	{r4, r5, r6, lr}

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e1a:	2300      	movs	r3, #0
  phost->id = id;
 8009e1c:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8009e20:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e24:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8009e28:	461a      	mov	r2, r3
{
 8009e2a:	b08c      	sub	sp, #48	; 0x30
 8009e2c:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8009e30:	f500 746f 	add.w	r4, r0, #956	; 0x3bc
    phost->Pipes[i] = 0U;
 8009e34:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	d1fb      	bne.n	8009e34 <USBH_Init+0x20>
 8009e3c:	f200 131b 	addw	r3, r0, #283	; 0x11b
 8009e40:	f200 341b 	addw	r4, r0, #795	; 0x31b
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8009e44:	2200      	movs	r2, #0
 8009e46:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d1fb      	bne.n	8009e46 <USBH_Init+0x32>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8009e4e:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009e50:	2540      	movs	r5, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e52:	f44f 7480 	mov.w	r4, #256	; 0x100
  phost->gState = HOST_IDLE;
 8009e56:	7002      	strb	r2, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8009e58:	7042      	strb	r2, [r0, #1]
  phost->Timer = 0U;
 8009e5a:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  phost->Control.errorcount = 0U;
 8009e5e:	7642      	strb	r2, [r0, #25]
  phost->device.is_connected = 0U;
 8009e60:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e64:	f880 2323 	strb.w	r2, [r0, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 8009e68:	f880 2321 	strb.w	r2, [r0, #801]	; 0x321
  phost->RequestState = CMD_SEND;
 8009e6c:	7083      	strb	r3, [r0, #2]
  phost->device.is_ReEnumerated = 0U;
 8009e6e:	f880 2322 	strb.w	r2, [r0, #802]	; 0x322
  phost->Control.state = CTRL_SETUP;
 8009e72:	7603      	strb	r3, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009e74:	7185      	strb	r5, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e76:	f8c0 431c 	str.w	r4, [r0, #796]	; 0x31c
  if (pUsrFunc != NULL)
 8009e7a:	b109      	cbz	r1, 8009e80 <USBH_Init+0x6c>
    phost->pUser = pUsrFunc;
 8009e7c:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009e80:	4d11      	ldr	r5, [pc, #68]	; (8009ec8 <USBH_Init+0xb4>)
 8009e82:	4604      	mov	r4, r0
 8009e84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009e88:	ae01      	add	r6, sp, #4
 8009e8a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009e8e:	4630      	mov	r0, r6
 8009e90:	2100      	movs	r1, #0
 8009e92:	f003 f9e7 	bl	800d264 <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009e96:	3510      	adds	r5, #16
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009e98:	f8c4 03d8 	str.w	r0, [r4, #984]	; 0x3d8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e9e:	ae05      	add	r6, sp, #20
 8009ea0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ea2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ea6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009eaa:	4621      	mov	r1, r4
 8009eac:	a805      	add	r0, sp, #20
 8009eae:	f003 f915 	bl	800d0dc <osThreadCreate>
 8009eb2:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
  USBH_LL_Init(phost);
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f005 ff16 	bl	800fce8 <USBH_LL_Init>
  return USBH_OK;
 8009ebc:	2000      	movs	r0, #0
}
 8009ebe:	b00c      	add	sp, #48	; 0x30
 8009ec0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8009ec2:	2002      	movs	r0, #2
}
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	0801081c 	.word	0x0801081c

08009ecc <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8009ecc:	b149      	cbz	r1, 8009ee2 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ece:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8009ed2:	b933      	cbnz	r3, 8009ee2 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
 8009eda:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	4770      	bx	lr
    status = USBH_FAIL;
 8009ee2:	2302      	movs	r3, #2
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	4770      	bx	lr

08009ee8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ee8:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8009eec:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8009eee:	bf86      	itte	hi
 8009ef0:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8009ef4:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009ef6:	2002      	movls	r0, #2
  }

  return status;
}
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop

08009efc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009efc:	b470      	push	{r4, r5, r6}
 8009efe:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f00:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8009f04:	428e      	cmp	r6, r1
 8009f06:	b2e5      	uxtb	r5, r4
 8009f08:	d007      	beq.n	8009f1a <USBH_FindInterface+0x1e>
 8009f0a:	29ff      	cmp	r1, #255	; 0xff
 8009f0c:	d005      	beq.n	8009f1a <USBH_FindInterface+0x1e>
 8009f0e:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f10:	b194      	cbz	r4, 8009f38 <USBH_FindInterface+0x3c>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8009f12:	25ff      	movs	r5, #255	; 0xff
}
 8009f14:	4628      	mov	r0, r5
 8009f16:	bc70      	pop	{r4, r5, r6}
 8009f18:	4770      	bx	lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f1a:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 8009f1e:	4296      	cmp	r6, r2
 8009f20:	d001      	beq.n	8009f26 <USBH_FindInterface+0x2a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f22:	2aff      	cmp	r2, #255	; 0xff
 8009f24:	d1f3      	bne.n	8009f0e <USBH_FindInterface+0x12>
 8009f26:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 8009f2a:	429e      	cmp	r6, r3
 8009f2c:	d0f2      	beq.n	8009f14 <USBH_FindInterface+0x18>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f2e:	2bff      	cmp	r3, #255	; 0xff
 8009f30:	d0f0      	beq.n	8009f14 <USBH_FindInterface+0x18>
 8009f32:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f34:	2c00      	cmp	r4, #0
 8009f36:	d1ec      	bne.n	8009f12 <USBH_FindInterface+0x16>
 8009f38:	2401      	movs	r4, #1
 8009f3a:	e7e1      	b.n	8009f00 <USBH_FindInterface+0x4>

08009f3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009f40:	f005 fefc 	bl	800fd3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009f44:	4620      	mov	r0, r4
 8009f46:	2101      	movs	r1, #1
 8009f48:	f005 ff78 	bl	800fe3c <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	bd10      	pop	{r4, pc}

08009f50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f52:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009f54:	2302      	movs	r3, #2
 8009f56:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009f5a:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8009f5e:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009f60:	bf04      	itt	eq
 8009f62:	2303      	moveq	r3, #3
 8009f64:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8009f66:	7803      	ldrb	r3, [r0, #0]
{
 8009f68:	4604      	mov	r4, r0
  switch (phost->gState)
 8009f6a:	2b0b      	cmp	r3, #11
 8009f6c:	d849      	bhi.n	800a002 <USBH_Process+0xb2>
 8009f6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009f72:	0052      	.short	0x0052
 8009f74:	000c006b 	.word	0x000c006b
 8009f78:	00480082 	.word	0x00480082
 8009f7c:	00ca00bc 	.word	0x00ca00bc
 8009f80:	00f800e6 	.word	0x00f800e6
 8009f84:	01120100 	.word	0x01120100
 8009f88:	004b      	.short	0x004b
#endif
      break;

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f8a:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8009f8e:	b10b      	cbz	r3, 8009f94 <USBH_Process+0x44>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f90:	2104      	movs	r1, #4
 8009f92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f94:	2064      	movs	r0, #100	; 0x64
 8009f96:	f005 ff85 	bl	800fea4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f005 feea 	bl	800fd74 <USBH_LL_GetSpeed>

      phost->gState = HOST_ENUMERATION;
 8009fa0:	2305      	movs	r3, #5
 8009fa2:	7023      	strb	r3, [r4, #0]
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009fa4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 fdae 	bl	800ab0c <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009fb0:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009fb2:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f000 fda9 	bl	800ab0c <USBH_AllocPipe>
 8009fba:	4601      	mov	r1, r0

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fbc:	79a0      	ldrb	r0, [r4, #6]
 8009fbe:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8009fc2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009fc6:	7121      	strb	r1, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fc8:	2500      	movs	r5, #0
 8009fca:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8009fce:	9200      	str	r2, [sp, #0]
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	2280      	movs	r2, #128	; 0x80
 8009fd4:	f000 fd84 	bl	800aae0 <USBH_OpenPipe>
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fd8:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8009fdc:	79a6      	ldrb	r6, [r4, #6]
 8009fde:	7961      	ldrb	r1, [r4, #5]
 8009fe0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009fe4:	9000      	str	r0, [sp, #0]
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	9501      	str	r5, [sp, #4]
 8009fea:	9602      	str	r6, [sp, #8]
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 fd77 	bl	800aae0 <USBH_OpenPipe>
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ff2:	2101      	movs	r1, #1
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ff4:	462a      	mov	r2, r5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ff6:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ffa:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8009ffe:	f003 f947 	bl	800d290 <osMessagePut>
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 800a002:	2000      	movs	r0, #0
 800a004:	b007      	add	sp, #28
 800a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pActiveClass != NULL)
 800a008:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0f8      	beq.n	800a002 <USBH_Process+0xb2>
        phost->pActiveClass->BgndProcess(phost);
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	4798      	blx	r3
 800a014:	e7f5      	b.n	800a002 <USBH_Process+0xb2>
      if (phost->device.is_connected)
 800a016:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0f1      	beq.n	800a002 <USBH_Process+0xb2>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a01e:	2501      	movs	r5, #1
 800a020:	7005      	strb	r5, [r0, #0]
        USBH_Delay(200U);
 800a022:	20c8      	movs	r0, #200	; 0xc8
 800a024:	f005 ff3e 	bl	800fea4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a028:	4620      	mov	r0, r4
 800a02a:	f005 feb1 	bl	800fd90 <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a02e:	2200      	movs	r2, #0
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a030:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a034:	4629      	mov	r1, r5
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a036:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 800a03a:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a03e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a042:	f003 f925 	bl	800d290 <osMessagePut>
 800a046:	e7dc      	b.n	800a002 <USBH_Process+0xb2>
      if (phost->device.PortEnabled == 1U)
 800a048:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	f000 816b 	beq.w	800a328 <USBH_Process+0x3d8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a052:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800a056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a05a:	f240 80bb 	bls.w	800a1d4 <USBH_Process+0x284>
          phost->device.RstCnt++;
 800a05e:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800a062:	3301      	adds	r3, #1
 800a064:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800a066:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800a068:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
            phost->gState = HOST_ABORT_STATE;
 800a06c:	bf8c      	ite	hi
 800a06e:	230d      	movhi	r3, #13
            phost->gState = HOST_IDLE;
 800a070:	2300      	movls	r3, #0
 800a072:	7003      	strb	r3, [r0, #0]
 800a074:	e084      	b.n	800a180 <USBH_Process+0x230>
      phost->device.is_disconnected = 0U;
 800a076:	2200      	movs	r2, #0
 800a078:	f880 2321 	strb.w	r2, [r0, #801]	; 0x321
 800a07c:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800a080:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
    phost->Pipes[i] = 0U;
 800a084:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a088:	4299      	cmp	r1, r3
 800a08a:	d1fb      	bne.n	800a084 <USBH_Process+0x134>
 800a08c:	f204 131b 	addw	r3, r4, #283	; 0x11b
 800a090:	f204 321b 	addw	r2, r4, #795	; 0x31b
    phost->device.Data[i] = 0U;
 800a094:	2500      	movs	r5, #0
 800a096:	f803 5f01 	strb.w	r5, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d1fb      	bne.n	800a096 <USBH_Process+0x146>
      if (phost->pActiveClass != NULL)
 800a09e:	f8d4 237c 	ldr.w	r2, [r4, #892]	; 0x37c
  phost->gState = HOST_IDLE;
 800a0a2:	7025      	strb	r5, [r4, #0]
  phost->RequestState = CMD_SEND;
 800a0a4:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0a6:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0a8:	f44f 7180 	mov.w	r1, #256	; 0x100
  phost->EnumState = ENUM_IDLE;
 800a0ac:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 800a0ae:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  phost->Control.errorcount = 0U;
 800a0b2:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 800a0b4:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800a0b6:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0b8:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0ba:	f8c4 131c 	str.w	r1, [r4, #796]	; 0x31c
      if (phost->pActiveClass != NULL)
 800a0be:	b122      	cbz	r2, 800a0ca <USBH_Process+0x17a>
        phost->pActiveClass->DeInit(phost);
 800a0c0:	68d3      	ldr	r3, [r2, #12]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0c6:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 800a0ca:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800a0ce:	b113      	cbz	r3, 800a0d6 <USBH_Process+0x186>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a0d0:	2105      	movs	r1, #5
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800a0d6:	f894 5322 	ldrb.w	r5, [r4, #802]	; 0x322
 800a0da:	b2ed      	uxtb	r5, r5
 800a0dc:	2d01      	cmp	r5, #1
 800a0de:	f000 8118 	beq.w	800a312 <USBH_Process+0x3c2>
        USBH_LL_Start(phost);
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f005 fe2a 	bl	800fd3c <USBH_LL_Start>
 800a0e8:	e04a      	b.n	800a180 <USBH_Process+0x230>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800a0ea:	7843      	ldrb	r3, [r0, #1]
 800a0ec:	2b07      	cmp	r3, #7
 800a0ee:	f200 8089 	bhi.w	800a204 <USBH_Process+0x2b4>
 800a0f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a0f6:	00d2      	.short	0x00d2
 800a0f8:	00ba00c9 	.word	0x00ba00c9
 800a0fc:	009b00b1 	.word	0x009b00b1
 800a100:	00f40076 	.word	0x00f40076
 800a104:	00ee      	.short	0x00ee
      if (phost->pActiveClass != NULL)
 800a106:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800a10a:	b15b      	cbz	r3, 800a124 <USBH_Process+0x1d4>
        status = phost->pActiveClass->Requests(phost);
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	4798      	blx	r3
 800a110:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800a114:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d058      	beq.n	800a1ce <USBH_Process+0x27e>
        else if (status == USBH_FAIL)
 800a11c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d101      	bne.n	800a128 <USBH_Process+0x1d8>
        phost->gState = HOST_ABORT_STATE;
 800a124:	230d      	movs	r3, #13
 800a126:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a128:	2105      	movs	r1, #5
 800a12a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a12e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a132:	2200      	movs	r2, #0
 800a134:	f003 f8ac 	bl	800d290 <osMessagePut>
}
 800a138:	2000      	movs	r0, #0
 800a13a:	b007      	add	sp, #28
 800a13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pUser != NULL)
 800a13e:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800a142:	2b00      	cmp	r3, #0
 800a144:	f43f af5d 	beq.w	800a002 <USBH_Process+0xb2>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a148:	2101      	movs	r1, #1
 800a14a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a14c:	2308      	movs	r3, #8
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a14e:	2105      	movs	r1, #5
        phost->gState = HOST_SET_CONFIGURATION;
 800a150:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a152:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a156:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a15a:	2200      	movs	r2, #0
 800a15c:	f003 f898 	bl	800d290 <osMessagePut>
 800a160:	e74f      	b.n	800a002 <USBH_Process+0xb2>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a162:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 800a166:	f000 fc33 	bl	800a9d0 <USBH_SetCfg>
 800a16a:	b948      	cbnz	r0, 800a180 <USBH_Process+0x230>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a16c:	2309      	movs	r3, #9
 800a16e:	7023      	strb	r3, [r4, #0]
 800a170:	e006      	b.n	800a180 <USBH_Process+0x230>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a172:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 800a176:	069b      	lsls	r3, r3, #26
 800a178:	f100 80dc 	bmi.w	800a334 <USBH_Process+0x3e4>
        phost->gState = HOST_CHECK_CLASS;
 800a17c:	230a      	movs	r3, #10
 800a17e:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a180:	2101      	movs	r1, #1
 800a182:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a186:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a18a:	2200      	movs	r2, #0
 800a18c:	f003 f880 	bl	800d290 <osMessagePut>
}
 800a190:	2000      	movs	r0, #0
 800a192:	b007      	add	sp, #28
 800a194:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->ClassNumber == 0U)
 800a196:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0c4      	beq.n	800a128 <USBH_Process+0x1d8>
        phost->pActiveClass = NULL;
 800a19e:	2200      	movs	r2, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a1a0:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
        phost->pActiveClass = NULL;
 800a1a4:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a1a8:	7919      	ldrb	r1, [r3, #4]
 800a1aa:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 800a1ae:	4291      	cmp	r1, r2
 800a1b0:	d1b8      	bne.n	800a124 <USBH_Process+0x1d4>
            phost->pActiveClass = phost->pClass[idx];
 800a1b2:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	4798      	blx	r3
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d1b2      	bne.n	800a124 <USBH_Process+0x1d4>
            phost->gState = HOST_CLASS_REQUEST;
 800a1be:	2306      	movs	r3, #6
 800a1c0:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a1c2:	2103      	movs	r1, #3
 800a1c4:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4798      	blx	r3
 800a1cc:	e7ac      	b.n	800a128 <USBH_Process+0x1d8>
          phost->gState = HOST_CLASS;
 800a1ce:	230b      	movs	r3, #11
 800a1d0:	7023      	strb	r3, [r4, #0]
 800a1d2:	e7a9      	b.n	800a128 <USBH_Process+0x1d8>
          phost->Timeout += 10U;
 800a1d4:	330a      	adds	r3, #10
 800a1d6:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 800a1da:	200a      	movs	r0, #10
 800a1dc:	f005 fe62 	bl	800fea4 <USBH_Delay>
 800a1e0:	e7ce      	b.n	800a180 <USBH_Process+0x230>
        /* .. */
      }
      break;

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a1e2:	f890 2334 	ldrb.w	r2, [r0, #820]	; 0x334
 800a1e6:	2a00      	cmp	r2, #0
 800a1e8:	f000 80b6 	beq.w	800a358 <USBH_Process+0x408>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	23ff      	movs	r3, #255	; 0xff
 800a1f0:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800a1f4:	f000 fbac 	bl	800a950 <USBH_Get_StringDesc>
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	f000 80de 	beq.w	800a3ba <USBH_Process+0x46a>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1fe:	2803      	cmp	r0, #3
 800a200:	f000 80db 	beq.w	800a3ba <USBH_Process+0x46a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a204:	2301      	movs	r3, #1
      status = USBH_HandleEnum(phost);
 800a206:	f88d 3017 	strb.w	r3, [sp, #23]
      if (status == USBH_OK)
 800a20a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a20e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a212:	2b00      	cmp	r3, #0
 800a214:	f47f aef5 	bne.w	800a002 <USBH_Process+0xb2>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a218:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 800a21c:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a220:	2b01      	cmp	r3, #1
          phost->gState = HOST_SET_CONFIGURATION;
 800a222:	bf0c      	ite	eq
 800a224:	2308      	moveq	r3, #8
          phost->gState = HOST_INPUT;
 800a226:	2307      	movne	r3, #7
 800a228:	7023      	strb	r3, [r4, #0]
 800a22a:	e77d      	b.n	800a128 <USBH_Process+0x1d8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a22c:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 800a230:	f000 faf2 	bl	800a818 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800a234:	2800      	cmp	r0, #0
 800a236:	f000 8091 	beq.w	800a35c <USBH_Process+0x40c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a23a:	2803      	cmp	r0, #3
 800a23c:	d1e2      	bne.n	800a204 <USBH_Process+0x2b4>
        phost->device.EnumCnt++;
 800a23e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800a242:	3301      	adds	r3, #1
 800a244:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800a246:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800a248:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a24c:	f240 80b7 	bls.w	800a3be <USBH_Process+0x46e>
          phost->gState = HOST_ABORT_STATE;
 800a250:	230d      	movs	r3, #13
 800a252:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a254:	2301      	movs	r3, #1
 800a256:	e7d6      	b.n	800a206 <USBH_Process+0x2b6>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a258:	2109      	movs	r1, #9
 800a25a:	f000 fadd 	bl	800a818 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800a25e:	2800      	cmp	r0, #0
 800a260:	d1eb      	bne.n	800a23a <USBH_Process+0x2ea>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a262:	2304      	movs	r3, #4
 800a264:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a266:	2301      	movs	r3, #1
 800a268:	e7cd      	b.n	800a206 <USBH_Process+0x2b6>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a26a:	2101      	movs	r1, #1
 800a26c:	f000 fba2 	bl	800a9b4 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800a270:	4606      	mov	r6, r0
 800a272:	2800      	cmp	r0, #0
 800a274:	f000 80b0 	beq.w	800a3d8 <USBH_Process+0x488>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a278:	2803      	cmp	r0, #3
 800a27a:	d1c3      	bne.n	800a204 <USBH_Process+0x2b4>
        phost->EnumState = ENUM_IDLE;
 800a27c:	2300      	movs	r3, #0
        phost->gState = HOST_ABORT_STATE;
 800a27e:	220d      	movs	r2, #13
        phost->EnumState = ENUM_IDLE;
 800a280:	7063      	strb	r3, [r4, #1]
        phost->gState = HOST_ABORT_STATE;
 800a282:	7022      	strb	r2, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a284:	2301      	movs	r3, #1
 800a286:	e7be      	b.n	800a206 <USBH_Process+0x2b6>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a288:	2112      	movs	r1, #18
 800a28a:	f000 fa75 	bl	800a778 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800a28e:	2800      	cmp	r0, #0
 800a290:	d1d3      	bne.n	800a23a <USBH_Process+0x2ea>
        phost->EnumState = ENUM_SET_ADDR;
 800a292:	2302      	movs	r3, #2
 800a294:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a296:	2301      	movs	r3, #1
 800a298:	e7b5      	b.n	800a206 <USBH_Process+0x2b6>
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a29a:	2108      	movs	r1, #8
 800a29c:	f000 fa6c 	bl	800a778 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d069      	beq.n	800a37a <USBH_Process+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2a6:	2803      	cmp	r0, #3
 800a2a8:	d1ac      	bne.n	800a204 <USBH_Process+0x2b4>
        phost->device.EnumCnt++;
 800a2aa:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800a2b2:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800a2b4:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2b8:	d8ca      	bhi.n	800a250 <USBH_Process+0x300>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2ba:	7961      	ldrb	r1, [r4, #5]
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fc3f 	bl	800ab40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2c2:	7921      	ldrb	r1, [r4, #4]
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 fc3b 	bl	800ab40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e799      	b.n	800a206 <USBH_Process+0x2b6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a2d2:	f890 1336 	ldrb.w	r1, [r0, #822]	; 0x336
 800a2d6:	2900      	cmp	r1, #0
 800a2d8:	d144      	bne.n	800a364 <USBH_Process+0x414>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e793      	b.n	800a206 <USBH_Process+0x2b6>
      if (phost->device.DevDesc.iProduct != 0U)
 800a2de:	f890 2335 	ldrb.w	r2, [r0, #821]	; 0x335
 800a2e2:	b372      	cbz	r2, 800a342 <USBH_Process+0x3f2>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	23ff      	movs	r3, #255	; 0xff
 800a2e8:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800a2ec:	f000 fb30 	bl	800a950 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f000 8082 	beq.w	800a3fa <USBH_Process+0x4aa>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2f6:	2803      	cmp	r0, #3
 800a2f8:	d184      	bne.n	800a204 <USBH_Process+0x2b4>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a2fa:	2307      	movs	r3, #7
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a2fc:	2105      	movs	r1, #5
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a2fe:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a300:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a304:	2200      	movs	r2, #0
 800a306:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a30a:	f002 ffc1 	bl	800d290 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a30e:	2301      	movs	r3, #1
 800a310:	e779      	b.n	800a206 <USBH_Process+0x2b6>
        phost->device.is_ReEnumerated = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  USBH_LL_Start(phost);
 800a318:	4620      	mov	r0, r4
 800a31a:	f005 fd0f 	bl	800fd3c <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 800a31e:	4629      	mov	r1, r5
 800a320:	4620      	mov	r0, r4
 800a322:	f005 fd8b 	bl	800fe3c <USBH_LL_DriverVBUS>
 800a326:	e72b      	b.n	800a180 <USBH_Process+0x230>
        phost->device.RstCnt = 0U;
 800a328:	2200      	movs	r2, #0
        phost->gState = HOST_DEV_ATTACHED;
 800a32a:	2302      	movs	r3, #2
        phost->device.RstCnt = 0U;
 800a32c:	f880 231f 	strb.w	r2, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a330:	7003      	strb	r3, [r0, #0]
 800a332:	e725      	b.n	800a180 <USBH_Process+0x230>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a334:	2101      	movs	r1, #1
 800a336:	f000 fb59 	bl	800a9ec <USBH_SetFeature>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f43f af1e 	beq.w	800a17c <USBH_Process+0x22c>
 800a340:	e71e      	b.n	800a180 <USBH_Process+0x230>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a342:	2307      	movs	r3, #7
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a344:	2105      	movs	r1, #5
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a346:	7063      	strb	r3, [r4, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a348:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a34c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a350:	f002 ff9e 	bl	800d290 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a354:	2301      	movs	r3, #1
 800a356:	e756      	b.n	800a206 <USBH_Process+0x2b6>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a358:	2306      	movs	r3, #6
 800a35a:	e7f3      	b.n	800a344 <USBH_Process+0x3f4>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a35c:	2305      	movs	r3, #5
 800a35e:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a360:	2301      	movs	r3, #1
 800a362:	e750      	b.n	800a206 <USBH_Process+0x2b6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a364:	23ff      	movs	r3, #255	; 0xff
 800a366:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800a36a:	f000 faf1 	bl	800a950 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800a36e:	2800      	cmp	r0, #0
 800a370:	d0b3      	beq.n	800a2da <USBH_Process+0x38a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a372:	1ec3      	subs	r3, r0, #3
 800a374:	bf18      	it	ne
 800a376:	2301      	movne	r3, #1
 800a378:	e745      	b.n	800a206 <USBH_Process+0x2b6>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a37a:	f894 232d 	ldrb.w	r2, [r4, #813]	; 0x32d
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a37e:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800a382:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a386:	7921      	ldrb	r1, [r4, #4]
 800a388:	9601      	str	r6, [sp, #4]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a38a:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a38c:	71a2      	strb	r2, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a38e:	9202      	str	r2, [sp, #8]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a390:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a392:	9000      	str	r0, [sp, #0]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a394:	2280      	movs	r2, #128	; 0x80
 800a396:	4620      	mov	r0, r4
 800a398:	f000 fba2 	bl	800aae0 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a39c:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800a3a0:	79a7      	ldrb	r7, [r4, #6]
 800a3a2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a3a6:	7961      	ldrb	r1, [r4, #5]
 800a3a8:	9000      	str	r0, [sp, #0]
 800a3aa:	9601      	str	r6, [sp, #4]
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	9702      	str	r7, [sp, #8]
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fb95 	bl	800aae0 <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	e725      	b.n	800a206 <USBH_Process+0x2b6>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3ba:	2306      	movs	r3, #6
 800a3bc:	e79e      	b.n	800a2fc <USBH_Process+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3be:	7961      	ldrb	r1, [r4, #5]
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fbbd 	bl	800ab40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3c6:	7921      	ldrb	r1, [r4, #4]
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fbb9 	bl	800ab40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800a3d2:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e716      	b.n	800a206 <USBH_Process+0x2b6>
        USBH_Delay(2U);
 800a3d8:	2002      	movs	r0, #2
 800a3da:	f005 fd63 	bl	800fea4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a3de:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3e0:	79a0      	ldrb	r0, [r4, #6]
 800a3e2:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800a3e6:	7921      	ldrb	r1, [r4, #4]
 800a3e8:	9601      	str	r6, [sp, #4]
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a3ea:	2703      	movs	r7, #3
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a3ec:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a3f0:	7067      	strb	r7, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	9002      	str	r0, [sp, #8]
 800a3f6:	9200      	str	r2, [sp, #0]
 800a3f8:	e7cc      	b.n	800a394 <USBH_Process+0x444>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a3fa:	2307      	movs	r3, #7
 800a3fc:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e701      	b.n	800a206 <USBH_Process+0x2b6>
 800a402:	bf00      	nop

0800a404 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a404:	b500      	push	{lr}
 800a406:	4604      	mov	r4, r0
 800a408:	b085      	sub	sp, #20
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a40a:	f04f 32ff 	mov.w	r2, #4294967295
 800a40e:	f8d4 13d8 	ldr.w	r1, [r4, #984]	; 0x3d8
 800a412:	a801      	add	r0, sp, #4
 800a414:	f002 ff70 	bl	800d2f8 <osMessageGet>
    if (event.status == osEventMessage)
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d1f5      	bne.n	800a40a <USBH_Process_OS+0x6>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a41e:	4620      	mov	r0, r4
 800a420:	f7ff fd96 	bl	8009f50 <USBH_Process>
 800a424:	e7f1      	b.n	800a40a <USBH_Process_OS+0x6>
 800a426:	bf00      	nop

0800a428 <USBH_LL_SetTimer>:
  phost->Timer = time;
 800a428:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop

0800a430 <USBH_LL_IncTimer>:
  phost->Timer++;
 800a430:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 800a434:	3201      	adds	r2, #1
 800a436:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a43a:	7802      	ldrb	r2, [r0, #0]
 800a43c:	2a0b      	cmp	r2, #11
 800a43e:	d000      	beq.n	800a442 <USBH_LL_IncTimer+0x12>
}
 800a440:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a442:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0fa      	beq.n	800a440 <USBH_LL_IncTimer+0x10>
    phost->pActiveClass->SOFProcess(phost);
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	4718      	bx	r3
 800a44e:	bf00      	nop

0800a450 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800a450:	2101      	movs	r1, #1
 800a452:	f880 1323 	strb.w	r1, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a456:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800a460:	f002 bf16 	b.w	800d290 <osMessagePut>

0800a464 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 800a46a:	4770      	bx	lr

0800a46c <USBH_LL_Connect>:
{
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4603      	mov	r3, r0
  phost->device.is_disconnected = 0U;
 800a470:	2400      	movs	r4, #0
  phost->device.is_connected = 1U;
 800a472:	2101      	movs	r1, #1
 800a474:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a478:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  phost->device.is_disconnected = 0U;
 800a47c:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a480:	4622      	mov	r2, r4
 800a482:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
  phost->device.is_ReEnumerated = 0U;
 800a486:	f883 4322 	strb.w	r4, [r3, #802]	; 0x322
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a48a:	f002 ff01 	bl	800d290 <osMessagePut>
}
 800a48e:	4620      	mov	r0, r4
 800a490:	bd10      	pop	{r4, pc}
 800a492:	bf00      	nop

0800a494 <USBH_LL_Disconnect>:
{
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	4604      	mov	r4, r0
  phost->device.is_connected = 0U;
 800a498:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 800a49a:	2601      	movs	r6, #1
 800a49c:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 800a4a0:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a4a4:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  USBH_LL_Stop(phost);
 800a4a8:	f005 fc56 	bl	800fd58 <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ac:	7921      	ldrb	r1, [r4, #4]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 fb46 	bl	800ab40 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4b4:	7961      	ldrb	r1, [r4, #5]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fb42 	bl	800ab40 <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4bc:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	f002 fee2 	bl	800d290 <osMessagePut>
}
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}

0800a4d0 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a4d0:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800a4de:	f002 fed7 	bl	800d290 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	bd08      	pop	{r3, pc}
 800a4e6:	bf00      	nop

0800a4e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a4e8:	b530      	push	{r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800a4ea:	7883      	ldrb	r3, [r0, #2]
 800a4ec:	2b01      	cmp	r3, #1
{
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800a4f2:	d011      	beq.n	800a518 <USBH_CtlReq+0x30>
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d003      	beq.n	800a500 <USBH_CtlReq+0x18>
  status = USBH_BUSY;
 800a4f8:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	b003      	add	sp, #12
 800a4fe:	bd30      	pop	{r4, r5, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800a500:	7e03      	ldrb	r3, [r0, #24]
 800a502:	3b01      	subs	r3, #1
 800a504:	2b0a      	cmp	r3, #10
 800a506:	d823      	bhi.n	800a550 <USBH_CtlReq+0x68>
 800a508:	e8df f003 	tbb	[pc, r3]
 800a50c:	6d18554a 	.word	0x6d18554a
 800a510:	cba3897a 	.word	0xcba3897a
 800a514:	bdae      	.short	0xbdae
 800a516:	2e          	.byte	0x2e
 800a517:	00          	.byte	0x00
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a518:	2003      	movs	r0, #3
      phost->RequestState = CMD_WAIT;
 800a51a:	2502      	movs	r5, #2
      phost->Control.buff = buff;
 800a51c:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 800a51e:	81a2      	strh	r2, [r4, #12]
      phost->RequestState = CMD_WAIT;
 800a520:	70a5      	strb	r5, [r4, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a522:	f8c4 03e0 	str.w	r0, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a526:	4601      	mov	r1, r0
      phost->Control.state = CTRL_SETUP;
 800a528:	7623      	strb	r3, [r4, #24]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a52a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a52e:	2200      	movs	r2, #0
      status = USBH_BUSY;
 800a530:	461d      	mov	r5, r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a532:	f002 fead 	bl	800d290 <osMessagePut>
}
 800a536:	4628      	mov	r0, r5
 800a538:	b003      	add	sp, #12
 800a53a:	bd30      	pop	{r4, r5, pc}
      }
      break;

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a53c:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 800a540:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a542:	8982      	ldrh	r2, [r0, #12]
 800a544:	7903      	ldrb	r3, [r0, #4]
 800a546:	6881      	ldr	r1, [r0, #8]
 800a548:	f000 fa94 	bl	800aa74 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a54c:	2304      	movs	r3, #4
 800a54e:	7623      	strb	r3, [r4, #24]
 800a550:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a554:	2501      	movs	r5, #1
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a556:	2103      	movs	r1, #3
 800a558:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a55c:	2200      	movs	r2, #0
 800a55e:	f002 fe97 	bl	800d290 <osMessagePut>
}
 800a562:	4628      	mov	r0, r5
 800a564:	b003      	add	sp, #12
 800a566:	bd30      	pop	{r4, r5, pc}
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a568:	7e43      	ldrb	r3, [r0, #25]
 800a56a:	3301      	adds	r3, #1
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	7643      	strb	r3, [r0, #25]
 800a572:	f240 80d3 	bls.w	800a71c <USBH_CtlReq+0x234>
        phost->Control.state = CTRL_SETUP;
        phost->RequestState = CMD_SEND;
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a576:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800a57a:	2106      	movs	r1, #6
        phost->Control.errorcount = 0U;
 800a57c:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a57e:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a580:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 800a582:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fadb 	bl	800ab40 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a58a:	7921      	ldrb	r1, [r4, #4]
 800a58c:	4620      	mov	r0, r4
 800a58e:	f000 fad7 	bl	800ab40 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800a592:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 800a594:	2301      	movs	r3, #1
 800a596:	70a3      	strb	r3, [r4, #2]
 800a598:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a59c:	2502      	movs	r5, #2
 800a59e:	e7da      	b.n	800a556 <USBH_CtlReq+0x6e>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a5a0:	7942      	ldrb	r2, [r0, #5]
 800a5a2:	f100 0110 	add.w	r1, r0, #16
 800a5a6:	f000 fa3d 	bl	800aa24 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	7623      	strb	r3, [r4, #24]
 800a5ae:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a5b2:	2501      	movs	r5, #1
 800a5b4:	e7cf      	b.n	800a556 <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5b6:	7941      	ldrb	r1, [r0, #5]
 800a5b8:	f005 fc3c 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a5bc:	2801      	cmp	r0, #1
 800a5be:	f000 8096 	beq.w	800a6ee <USBH_CtlReq+0x206>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a5c2:	2804      	cmp	r0, #4
 800a5c4:	d001      	beq.n	800a5ca <USBH_CtlReq+0xe2>
 800a5c6:	2802      	cmp	r0, #2
 800a5c8:	d1c2      	bne.n	800a550 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_ERROR;
 800a5ca:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5cc:	2103      	movs	r1, #3
        phost->Control.state = CTRL_DATA_OUT;
 800a5ce:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5d0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a5da:	f002 fe59 	bl	800d290 <osMessagePut>
 800a5de:	2501      	movs	r5, #1
 800a5e0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a5e4:	e7b7      	b.n	800a556 <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5e6:	7901      	ldrb	r1, [r0, #4]
 800a5e8:	f005 fc24 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a5ec:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5ee:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800a5f0:	f000 809b 	beq.w	800a72a <USBH_CtlReq+0x242>
      if (URB_Status == USBH_URB_STALL)
 800a5f4:	2805      	cmp	r0, #5
 800a5f6:	f000 80b1 	beq.w	800a75c <USBH_CtlReq+0x274>
        if (URB_Status == USBH_URB_ERROR)
 800a5fa:	2804      	cmp	r0, #4
 800a5fc:	d1a8      	bne.n	800a550 <USBH_CtlReq+0x68>
 800a5fe:	e7e4      	b.n	800a5ca <USBH_CtlReq+0xe2>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a600:	2501      	movs	r5, #1
 800a602:	7943      	ldrb	r3, [r0, #5]
 800a604:	8982      	ldrh	r2, [r0, #12]
 800a606:	6881      	ldr	r1, [r0, #8]
 800a608:	9500      	str	r5, [sp, #0]
 800a60a:	f000 fa1b 	bl	800aa44 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800a60e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800a612:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a614:	2306      	movs	r3, #6
 800a616:	7623      	strb	r3, [r4, #24]
 800a618:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a61c:	e79b      	b.n	800a556 <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a61e:	7941      	ldrb	r1, [r0, #5]
 800a620:	f005 fc08 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a624:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a626:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800a628:	f000 808c 	beq.w	800a744 <USBH_CtlReq+0x25c>
      else if (URB_Status == USBH_URB_STALL)
 800a62c:	2805      	cmp	r0, #5
 800a62e:	f000 809f 	beq.w	800a770 <USBH_CtlReq+0x288>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a632:	2802      	cmp	r0, #2
 800a634:	f000 8090 	beq.w	800a758 <USBH_CtlReq+0x270>
        if (URB_Status == USBH_URB_ERROR)
 800a638:	2804      	cmp	r0, #4
 800a63a:	d189      	bne.n	800a550 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_ERROR;
 800a63c:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a63e:	2103      	movs	r1, #3
          phost->Control.state = CTRL_ERROR;
 800a640:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a642:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a646:	2200      	movs	r2, #0
 800a648:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a64c:	f002 fe20 	bl	800d290 <osMessagePut>
 800a650:	e7a0      	b.n	800a594 <USBH_CtlReq+0xac>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a652:	2200      	movs	r2, #0
 800a654:	7903      	ldrb	r3, [r0, #4]
 800a656:	4611      	mov	r1, r2
 800a658:	f000 fa0c 	bl	800aa74 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800a65c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800a660:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a662:	2308      	movs	r3, #8
 800a664:	7623      	strb	r3, [r4, #24]
 800a666:	e773      	b.n	800a550 <USBH_CtlReq+0x68>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a668:	2200      	movs	r2, #0
 800a66a:	2501      	movs	r5, #1
 800a66c:	7943      	ldrb	r3, [r0, #5]
 800a66e:	9500      	str	r5, [sp, #0]
 800a670:	4611      	mov	r1, r2
 800a672:	f000 f9e7 	bl	800aa44 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800a676:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800a67a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a67c:	230a      	movs	r3, #10
 800a67e:	7623      	strb	r3, [r4, #24]
 800a680:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a684:	e767      	b.n	800a556 <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a686:	7941      	ldrb	r1, [r0, #5]
 800a688:	f005 fbd4 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a68c:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a68e:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800a690:	d021      	beq.n	800a6d6 <USBH_CtlReq+0x1ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a692:	2b02      	cmp	r3, #2
 800a694:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a698:	d05c      	beq.n	800a754 <USBH_CtlReq+0x26c>
        if (URB_Status == USBH_URB_ERROR)
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d032      	beq.n	800a704 <USBH_CtlReq+0x21c>
 800a69e:	2501      	movs	r5, #1
 800a6a0:	e759      	b.n	800a556 <USBH_CtlReq+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6a2:	7901      	ldrb	r1, [r0, #4]
 800a6a4:	f005 fbc6 	bl	800fe34 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a6a8:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6aa:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800a6ac:	d013      	beq.n	800a6d6 <USBH_CtlReq+0x1ee>
      else if (URB_Status == USBH_URB_ERROR)
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a6b4:	d026      	beq.n	800a704 <USBH_CtlReq+0x21c>
        if (URB_Status == USBH_URB_STALL)
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d1f1      	bne.n	800a69e <USBH_CtlReq+0x1b6>
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6ba:	2103      	movs	r1, #3
 800a6bc:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	f002 fde4 	bl	800d290 <osMessagePut>
        phost->RequestState = CMD_SEND;
 800a6c8:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800a6ca:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 800a6cc:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800a6ce:	7623      	strb	r3, [r4, #24]
 800a6d0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a6d4:	e73f      	b.n	800a556 <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_COMPLETE;
 800a6d6:	230d      	movs	r3, #13
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6d8:	2103      	movs	r1, #3
        phost->Control.state = CTRL_COMPLETE;
 800a6da:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6dc:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a6e6:	f002 fdd3 	bl	800d290 <osMessagePut>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	e7ec      	b.n	800a6c8 <USBH_CtlReq+0x1e0>
        if (phost->Control.setup.b.wLength.w != 0U)
 800a6ee:	8ae3      	ldrh	r3, [r4, #22]
 800a6f0:	f994 2010 	ldrsb.w	r2, [r4, #16]
 800a6f4:	b343      	cbz	r3, 800a748 <USBH_CtlReq+0x260>
          if (direction == USB_D2H)
 800a6f6:	2a00      	cmp	r2, #0
            phost->Control.state = CTRL_DATA_IN;
 800a6f8:	bfb4      	ite	lt
 800a6fa:	2303      	movlt	r3, #3
            phost->Control.state = CTRL_DATA_OUT;
 800a6fc:	2305      	movge	r3, #5
 800a6fe:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a700:	2103      	movs	r1, #3
 800a702:	e765      	b.n	800a5d0 <USBH_CtlReq+0xe8>
          phost->Control.state = CTRL_ERROR;
 800a704:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a706:	2103      	movs	r1, #3
          phost->Control.state = CTRL_ERROR;
 800a708:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a70a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a70e:	2200      	movs	r2, #0
 800a710:	f002 fdbe 	bl	800d290 <osMessagePut>
 800a714:	2501      	movs	r5, #1
 800a716:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a71a:	e71c      	b.n	800a556 <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_SETUP;
 800a71c:	2301      	movs	r3, #1
 800a71e:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 800a720:	7083      	strb	r3, [r0, #2]
 800a722:	461d      	mov	r5, r3
 800a724:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800a728:	e715      	b.n	800a556 <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_STATUS_OUT;
 800a72a:	2209      	movs	r2, #9
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a72c:	2103      	movs	r1, #3
        phost->Control.state = CTRL_STATUS_IN;
 800a72e:	7622      	strb	r2, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a730:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a734:	2200      	movs	r2, #0
 800a736:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a73a:	f002 fda9 	bl	800d290 <osMessagePut>
 800a73e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a742:	e708      	b.n	800a556 <USBH_CtlReq+0x6e>
        phost->Control.state = CTRL_STATUS_IN;
 800a744:	2207      	movs	r2, #7
 800a746:	e7f1      	b.n	800a72c <USBH_CtlReq+0x244>
          if (direction == USB_D2H)
 800a748:	2a00      	cmp	r2, #0
            phost->Control.state = CTRL_STATUS_OUT;
 800a74a:	bfb4      	ite	lt
 800a74c:	2309      	movlt	r3, #9
            phost->Control.state = CTRL_STATUS_IN;
 800a74e:	2307      	movge	r3, #7
 800a750:	7623      	strb	r3, [r4, #24]
 800a752:	e7d5      	b.n	800a700 <USBH_CtlReq+0x218>
        phost->Control.state = CTRL_STATUS_OUT;
 800a754:	2309      	movs	r3, #9
 800a756:	e7d6      	b.n	800a706 <USBH_CtlReq+0x21e>
        phost->Control.state = CTRL_DATA_OUT;
 800a758:	2305      	movs	r3, #5
 800a75a:	e737      	b.n	800a5cc <USBH_CtlReq+0xe4>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a75c:	2103      	movs	r1, #3
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a75e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a762:	2200      	movs	r2, #0
 800a764:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800a768:	460d      	mov	r5, r1
 800a76a:	f002 fd91 	bl	800d290 <osMessagePut>
 800a76e:	e7ab      	b.n	800a6c8 <USBH_CtlReq+0x1e0>
        phost->Control.state = CTRL_STALLED;
 800a770:	230c      	movs	r3, #12
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a772:	2103      	movs	r1, #3
        phost->Control.state = CTRL_STALLED;
 800a774:	7623      	strb	r3, [r4, #24]
 800a776:	e7f2      	b.n	800a75e <USBH_CtlReq+0x276>

0800a778 <USBH_Get_DevDesc>:
{
 800a778:	b538      	push	{r3, r4, r5, lr}
  if (phost->RequestState == CMD_SEND)
 800a77a:	7883      	ldrb	r3, [r0, #2]
 800a77c:	2b01      	cmp	r3, #1
  if ((status = USBH_GetDescriptor(phost,
 800a77e:	460d      	mov	r5, r1
{
 800a780:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 800a782:	f500 718e 	add.w	r1, r0, #284	; 0x11c
  if (phost->RequestState == CMD_SEND)
 800a786:	d104      	bne.n	800a792 <USBH_Get_DevDesc+0x1a>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a788:	4a22      	ldr	r2, [pc, #136]	; (800a814 <USBH_Get_DevDesc+0x9c>)
    phost->Control.setup.b.wLength.w = length;
 800a78a:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 800a78c:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a78e:	6102      	str	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800a790:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800a792:	462a      	mov	r2, r5
 800a794:	4620      	mov	r0, r4
 800a796:	f7ff fea7 	bl	800a4e8 <USBH_CtlReq>
  if ((status = USBH_GetDescriptor(phost,
 800a79a:	b100      	cbz	r0, 800a79e <USBH_Get_DevDesc+0x26>
}
 800a79c:	bd38      	pop	{r3, r4, r5, pc}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a79e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a7a2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a7a6:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a7aa:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a7ae:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a7b2:	f884 1327 	strb.w	r1, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a7b6:	f8a4 2328 	strh.w	r2, [r4, #808]	; 0x328
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a7ba:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a7be:	f894 2122 	ldrb.w	r2, [r4, #290]	; 0x122
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a7c2:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  if (length > 8U)
 800a7c6:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a7c8:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a7cc:	f884 132b 	strb.w	r1, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a7d0:	f884 232c 	strb.w	r2, [r4, #812]	; 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a7d4:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
  if (length > 8U)
 800a7d8:	d9e0      	bls.n	800a79c <USBH_Get_DevDesc+0x24>
    dev_desc->idVendor           = LE16(buf +  8);
 800a7da:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16(buf + 10);
 800a7de:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a7e2:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a7e6:	f894 512a 	ldrb.w	r5, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16(buf +  8);
 800a7ea:	f8a4 132e 	strh.w	r1, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 800a7ee:	f8a4 2330 	strh.w	r2, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a7f2:	f894 112b 	ldrb.w	r1, [r4, #299]	; 0x12b
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a7f6:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a7fa:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a7fe:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a802:	f884 5334 	strb.w	r5, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a806:	f884 1335 	strb.w	r1, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a80a:	f884 2336 	strb.w	r2, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a80e:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	01000680 	.word	0x01000680

0800a818 <USBH_Get_CfgDesc>:
  if (phost->RequestState == CMD_SEND)
 800a818:	7883      	ldrb	r3, [r0, #2]
 800a81a:	2b01      	cmp	r3, #1
{
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	4605      	mov	r5, r0
 800a822:	460e      	mov	r6, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a824:	f100 041c 	add.w	r4, r0, #28
  if (phost->RequestState == CMD_SEND)
 800a828:	d104      	bne.n	800a834 <USBH_Get_CfgDesc+0x1c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a82a:	4a48      	ldr	r2, [pc, #288]	; (800a94c <USBH_Get_CfgDesc+0x134>)
    phost->Control.setup.b.wLength.w = length;
 800a82c:	82e9      	strh	r1, [r5, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 800a82e:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a830:	6102      	str	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800a832:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800a834:	4632      	mov	r2, r6
 800a836:	4621      	mov	r1, r4
 800a838:	4628      	mov	r0, r5
 800a83a:	f7ff fe55 	bl	800a4e8 <USBH_CtlReq>
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a83e:	b108      	cbz	r0, 800a844 <USBH_Get_CfgDesc+0x2c>
}
 800a840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a844:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a846:	7f6a      	ldrb	r2, [r5, #29]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a848:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a84c:	f895 3020 	ldrb.w	r3, [r5, #32]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a850:	f885 2339 	strb.w	r2, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a854:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a858:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a85c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a860:	8be9      	ldrh	r1, [r5, #30]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a862:	f885 233d 	strb.w	r2, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a866:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a86a:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a86e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a872:	f8a5 133a 	strh.w	r1, [r5, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a876:	2e09      	cmp	r6, #9
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a878:	f885 233f 	strb.w	r2, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a87c:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a880:	d9de      	bls.n	800a840 <USBH_Get_CfgDesc+0x28>
 800a882:	462f      	mov	r7, r5
 800a884:	4684      	mov	ip, r0
    ptr = USB_LEN_CFG_DESC;
 800a886:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a888:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a88c:	4291      	cmp	r1, r2
 800a88e:	d802      	bhi.n	800a896 <USBH_Get_CfgDesc+0x7e>
 800a890:	e7d6      	b.n	800a840 <USBH_Get_CfgDesc+0x28>
 800a892:	428a      	cmp	r2, r1
 800a894:	d2d4      	bcs.n	800a840 <USBH_Get_CfgDesc+0x28>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a896:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a898:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a89a:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a89c:	7866      	ldrb	r6, [r4, #1]
 800a89e:	2e04      	cmp	r6, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8a0:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a8a2:	d1f6      	bne.n	800a892 <USBH_Get_CfgDesc+0x7a>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a8a4:	7823      	ldrb	r3, [r4, #0]
 800a8a6:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a8aa:	7863      	ldrb	r3, [r4, #1]
 800a8ac:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a8b0:	78a3      	ldrb	r3, [r4, #2]
 800a8b2:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a8b6:	78e3      	ldrb	r3, [r4, #3]
 800a8b8:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a8bc:	f894 9004 	ldrb.w	r9, [r4, #4]
 800a8c0:	f887 9346 	strb.w	r9, [r7, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a8c4:	7963      	ldrb	r3, [r4, #5]
 800a8c6:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a8ca:	79a3      	ldrb	r3, [r4, #6]
 800a8cc:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a8d0:	79e3      	ldrb	r3, [r4, #7]
 800a8d2:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a8d6:	7a23      	ldrb	r3, [r4, #8]
 800a8d8:	f887 334a 	strb.w	r3, [r7, #842]	; 0x34a
        ep_ix = 0U;
 800a8dc:	2600      	movs	r6, #0
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a8de:	fb0e f80c 	mul.w	r8, lr, ip
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8e2:	454e      	cmp	r6, r9
 800a8e4:	d22a      	bcs.n	800a93c <USBH_Get_CfgDesc+0x124>
 800a8e6:	4291      	cmp	r1, r2
 800a8e8:	d928      	bls.n	800a93c <USBH_Get_CfgDesc+0x124>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8ea:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a8ec:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8ee:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a8f0:	f894 a001 	ldrb.w	sl, [r4, #1]
 800a8f4:	f1ba 0f05 	cmp.w	sl, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8f8:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a8fa:	d1f2      	bne.n	800a8e2 <USBH_Get_CfgDesc+0xca>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a8fc:	3601      	adds	r6, #1
 800a8fe:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 800a902:	442b      	add	r3, r5
 800a904:	f894 9000 	ldrb.w	r9, [r4]
 800a908:	f883 9344 	strb.w	r9, [r3, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a90c:	f894 9001 	ldrb.w	r9, [r4, #1]
 800a910:	f883 9345 	strb.w	r9, [r3, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a914:	f894 9002 	ldrb.w	r9, [r4, #2]
 800a918:	f883 9346 	strb.w	r9, [r3, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a91c:	f894 9003 	ldrb.w	r9, [r4, #3]
 800a920:	f883 9347 	strb.w	r9, [r3, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a924:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 800a928:	f8a3 9348 	strh.w	r9, [r3, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a92c:	f894 9006 	ldrb.w	r9, [r4, #6]
 800a930:	f883 934a 	strb.w	r9, [r3, #842]	; 0x34a
 800a934:	f897 9346 	ldrb.w	r9, [r7, #838]	; 0x346
            ep_ix++;
 800a938:	b2f6      	uxtb	r6, r6
 800a93a:	e7d2      	b.n	800a8e2 <USBH_Get_CfgDesc+0xca>
 800a93c:	371a      	adds	r7, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a93e:	f1bc 0f00 	cmp.w	ip, #0
 800a942:	f47f af7d 	bne.w	800a840 <USBH_Get_CfgDesc+0x28>
 800a946:	f04f 0c01 	mov.w	ip, #1
 800a94a:	e79f      	b.n	800a88c <USBH_Get_CfgDesc+0x74>
 800a94c:	02000680 	.word	0x02000680

0800a950 <USBH_Get_StringDesc>:
{
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	4604      	mov	r4, r0
  if (phost->RequestState == CMD_SEND)
 800a954:	7880      	ldrb	r0, [r0, #2]
 800a956:	2801      	cmp	r0, #1
{
 800a958:	4615      	mov	r5, r2
 800a95a:	461f      	mov	r7, r3
                                   phost->device.Data, length)) == USBH_OK)
 800a95c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
  if (phost->RequestState == CMD_SEND)
 800a960:	d109      	bne.n	800a976 <USBH_Get_StringDesc+0x26>
  if ((status = USBH_GetDescriptor(phost,
 800a962:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a966:	f44f 62d0 	mov.w	r2, #1664	; 0x680
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a96a:	f240 4309 	movw	r3, #1033	; 0x409
    phost->Control.setup.b.wValue.w = value_idx;
 800a96e:	8261      	strh	r1, [r4, #18]
    phost->Control.setup.b.wLength.w = length;
 800a970:	82e7      	strh	r7, [r4, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a972:	8222      	strh	r2, [r4, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a974:	82a3      	strh	r3, [r4, #20]
  return USBH_CtlReq(phost, buff, length);
 800a976:	463a      	mov	r2, r7
 800a978:	4631      	mov	r1, r6
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7ff fdb4 	bl	800a4e8 <USBH_CtlReq>
  if ((status = USBH_GetDescriptor(phost,
 800a980:	b918      	cbnz	r0, 800a98a <USBH_Get_StringDesc+0x3a>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a982:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800a986:	2b03      	cmp	r3, #3
 800a988:	d000      	beq.n	800a98c <USBH_Get_StringDesc+0x3c>
}
 800a98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a98c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800a990:	3b02      	subs	r3, #2
 800a992:	429f      	cmp	r7, r3
 800a994:	bf28      	it	cs
 800a996:	461f      	movcs	r7, r3
 800a998:	b2b9      	uxth	r1, r7
    for (idx = 0U; idx < strlength; idx += 2U)
 800a99a:	b147      	cbz	r7, 800a9ae <USBH_Get_StringDesc+0x5e>
 800a99c:	4603      	mov	r3, r0
      *pdest =  psrc[idx];
 800a99e:	18f2      	adds	r2, r6, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	b29b      	uxth	r3, r3
      *pdest =  psrc[idx];
 800a9a4:	7892      	ldrb	r2, [r2, #2]
 800a9a6:	f805 2b01 	strb.w	r2, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9aa:	4299      	cmp	r1, r3
 800a9ac:	d8f7      	bhi.n	800a99e <USBH_Get_StringDesc+0x4e>
    *pdest = 0U; /* mark end of string */
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	702b      	strb	r3, [r5, #0]
}
 800a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9b4 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 800a9b4:	7883      	ldrb	r3, [r0, #2]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d105      	bne.n	800a9c6 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a9ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    phost->Control.setup.b.wIndex.w = 0U;
 800a9be:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a9c0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a9c2:	8202      	strh	r2, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9c4:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	f7ff bd8d 	b.w	800a4e8 <USBH_CtlReq>
 800a9ce:	bf00      	nop

0800a9d0 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 800a9d0:	7883      	ldrb	r3, [r0, #2]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d105      	bne.n	800a9e2 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
    phost->Control.setup.b.wIndex.w = 0U;
 800a9da:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a9dc:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9de:	8202      	strh	r2, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9e0:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	f7ff bd7f 	b.w	800a4e8 <USBH_CtlReq>
 800a9ea:	bf00      	nop

0800a9ec <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 800a9ec:	7883      	ldrb	r3, [r0, #2]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d105      	bne.n	800a9fe <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9f2:	f44f 7240 	mov.w	r2, #768	; 0x300
    phost->Control.setup.b.wIndex.w = 0U;
 800a9f6:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 800a9f8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9fa:	8202      	strh	r2, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9fc:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4611      	mov	r1, r2
 800aa02:	f7ff bd71 	b.w	800a4e8 <USBH_CtlReq>
 800aa06:	bf00      	nop

0800aa08 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 800aa08:	7883      	ldrb	r3, [r0, #2]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d105      	bne.n	800aa1a <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa0e:	f44f 7281 	mov.w	r2, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 800aa12:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 800aa14:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa16:	6102      	str	r2, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 800aa18:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	f7ff bd63 	b.w	800a4e8 <USBH_CtlReq>
 800aa22:	bf00      	nop

0800aa24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa24:	b530      	push	{r4, r5, lr}
 800aa26:	b085      	sub	sp, #20

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa28:	2400      	movs	r4, #0
 800aa2a:	2508      	movs	r5, #8
 800aa2c:	9101      	str	r1, [sp, #4]
 800aa2e:	9403      	str	r4, [sp, #12]
 800aa30:	4611      	mov	r1, r2
 800aa32:	9400      	str	r4, [sp, #0]
 800aa34:	4623      	mov	r3, r4
 800aa36:	4622      	mov	r2, r4
 800aa38:	9502      	str	r5, [sp, #8]
 800aa3a:	f005 f9e1 	bl	800fe00 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 800aa3e:	4620      	mov	r0, r4
 800aa40:	b005      	add	sp, #20
 800aa42:	bd30      	pop	{r4, r5, pc}

0800aa44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa44:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa46:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800aa4a:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa4c:	2d00      	cmp	r5, #0
{
 800aa4e:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa52:	9202      	str	r2, [sp, #8]
{
 800aa54:	461d      	mov	r5, r3
    do_ping = 0U;
 800aa56:	bf18      	it	ne
 800aa58:	2400      	movne	r4, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	9101      	str	r1, [sp, #4]
 800aa60:	9200      	str	r2, [sp, #0]
 800aa62:	9403      	str	r4, [sp, #12]
 800aa64:	4629      	mov	r1, r5
 800aa66:	461a      	mov	r2, r3
 800aa68:	f005 f9ca 	bl	800fe00 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	b005      	add	sp, #20
 800aa70:	bd30      	pop	{r4, r5, pc}
 800aa72:	bf00      	nop

0800aa74 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa74:	b530      	push	{r4, r5, lr}
 800aa76:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa78:	2400      	movs	r4, #0
 800aa7a:	2501      	movs	r5, #1
 800aa7c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800aa80:	9403      	str	r4, [sp, #12]
 800aa82:	4619      	mov	r1, r3
 800aa84:	9500      	str	r5, [sp, #0]
 800aa86:	4623      	mov	r3, r4
 800aa88:	462a      	mov	r2, r5
 800aa8a:	f005 f9b9 	bl	800fe00 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 800aa8e:	4620      	mov	r0, r4
 800aa90:	b005      	add	sp, #20
 800aa92:	bd30      	pop	{r4, r5, pc}

0800aa94 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa94:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa96:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800aa9a:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa9c:	2d00      	cmp	r5, #0
{
 800aa9e:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaa2:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800aaa4:	bf18      	it	ne
 800aaa6:	2400      	movne	r4, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	9101      	str	r1, [sp, #4]
 800aaac:	9200      	str	r2, [sp, #0]
 800aaae:	4619      	mov	r1, r3
 800aab0:	9403      	str	r4, [sp, #12]
 800aab2:	2302      	movs	r3, #2
 800aab4:	2200      	movs	r2, #0
 800aab6:	f005 f9a3 	bl	800fe00 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800aaba:	2000      	movs	r0, #0
 800aabc:	b005      	add	sp, #20
 800aabe:	bd30      	pop	{r4, r5, pc}

0800aac0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aac0:	b530      	push	{r4, r5, lr}
 800aac2:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aac4:	2400      	movs	r4, #0
 800aac6:	2501      	movs	r5, #1
 800aac8:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800aacc:	9403      	str	r4, [sp, #12]
 800aace:	4619      	mov	r1, r3
 800aad0:	9500      	str	r5, [sp, #0]
 800aad2:	462a      	mov	r2, r5
 800aad4:	2302      	movs	r3, #2
 800aad6:	f005 f993 	bl	800fe00 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800aada:	4620      	mov	r0, r4
 800aadc:	b005      	add	sp, #20
 800aade:	bd30      	pop	{r4, r5, pc}

0800aae0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aae0:	b530      	push	{r4, r5, lr}
 800aae2:	b085      	sub	sp, #20
 800aae4:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800aae8:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aaec:	9400      	str	r4, [sp, #0]
{
 800aaee:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aaf2:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800aaf6:	f005 f95d 	bl	800fdb4 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 800aafa:	2000      	movs	r0, #0
 800aafc:	b005      	add	sp, #20
 800aafe:	bd30      	pop	{r4, r5, pc}

0800ab00 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab00:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 800ab02:	f005 f96f 	bl	800fde4 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 800ab06:	2000      	movs	r0, #0
 800ab08:	bd08      	pop	{r3, pc}
 800ab0a:	bf00      	nop

0800ab0c <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab0c:	b430      	push	{r4, r5}
 800ab0e:	f500 7260 	add.w	r2, r0, #896	; 0x380
 800ab12:	2300      	movs	r3, #0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab14:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800ab18:	0424      	lsls	r4, r4, #16
 800ab1a:	b2dd      	uxtb	r5, r3
 800ab1c:	d506      	bpl.n	800ab2c <USBH_AllocPipe+0x20>
 800ab1e:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 800ab20:	2b0b      	cmp	r3, #11
 800ab22:	d1f7      	bne.n	800ab14 <USBH_AllocPipe+0x8>
 800ab24:	25ff      	movs	r5, #255	; 0xff
}
 800ab26:	4628      	mov	r0, r5
 800ab28:	bc30      	pop	{r4, r5}
 800ab2a:	4770      	bx	lr
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ab2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ab30:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ab34:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 800ab38:	4628      	mov	r0, r5
 800ab3a:	bc30      	pop	{r4, r5}
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop

0800ab40 <USBH_FreePipe>:
  if (idx < 11U)
 800ab40:	290a      	cmp	r1, #10
 800ab42:	d807      	bhi.n	800ab54 <USBH_FreePipe+0x14>
 800ab44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 800ab48:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800ab4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ab50:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
}
 800ab54:	2000      	movs	r0, #0
 800ab56:	4770      	bx	lr

0800ab58 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab58:	4b03      	ldr	r3, [pc, #12]	; (800ab68 <disk_status+0x10>)
 800ab5a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ab5e:	4403      	add	r3, r0
 800ab60:	6852      	ldr	r2, [r2, #4]
 800ab62:	7a18      	ldrb	r0, [r3, #8]
 800ab64:	6853      	ldr	r3, [r2, #4]
 800ab66:	4718      	bx	r3
 800ab68:	200073a8 	.word	0x200073a8

0800ab6c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800ab6c:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <disk_initialize+0x1c>)
 800ab6e:	5c1a      	ldrb	r2, [r3, r0]
 800ab70:	b942      	cbnz	r2, 800ab84 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab72:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 800ab76:	2101      	movs	r1, #1
 800ab78:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab7a:	6852      	ldr	r2, [r2, #4]
 800ab7c:	4403      	add	r3, r0
 800ab7e:	6812      	ldr	r2, [r2, #0]
 800ab80:	7a18      	ldrb	r0, [r3, #8]
 800ab82:	4710      	bx	r2
  }
  return stat;
}
 800ab84:	2000      	movs	r0, #0
 800ab86:	4770      	bx	lr
 800ab88:	200073a8 	.word	0x200073a8

0800ab8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab8c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ab8e:	4c05      	ldr	r4, [pc, #20]	; (800aba4 <disk_read+0x18>)
 800ab90:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ab94:	4404      	add	r4, r0
 800ab96:	686d      	ldr	r5, [r5, #4]
 800ab98:	7a20      	ldrb	r0, [r4, #8]
 800ab9a:	68ac      	ldr	r4, [r5, #8]
 800ab9c:	46a4      	mov	ip, r4
  return res;
}
 800ab9e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aba0:	4760      	bx	ip
 800aba2:	bf00      	nop
 800aba4:	200073a8 	.word	0x200073a8

0800aba8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aba8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abaa:	4c05      	ldr	r4, [pc, #20]	; (800abc0 <disk_write+0x18>)
 800abac:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800abb0:	4404      	add	r4, r0
 800abb2:	686d      	ldr	r5, [r5, #4]
 800abb4:	7a20      	ldrb	r0, [r4, #8]
 800abb6:	68ec      	ldr	r4, [r5, #12]
 800abb8:	46a4      	mov	ip, r4
  return res;
}
 800abba:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abbc:	4760      	bx	ip
 800abbe:	bf00      	nop
 800abc0:	200073a8 	.word	0x200073a8

0800abc4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <disk_ioctl+0x18>)
{
 800abc6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abc8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800abcc:	4403      	add	r3, r0
 800abce:	6864      	ldr	r4, [r4, #4]
 800abd0:	7a18      	ldrb	r0, [r3, #8]
 800abd2:	6923      	ldr	r3, [r4, #16]
  return res;
}
 800abd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abd8:	4718      	bx	r3
 800abda:	bf00      	nop
 800abdc:	200073a8 	.word	0x200073a8

0800abe0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800abe0:	4a1e      	ldr	r2, [pc, #120]	; (800ac5c <chk_lock+0x7c>)
 800abe2:	6813      	ldr	r3, [r2, #0]
{
 800abe4:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d035      	beq.n	800ac56 <chk_lock+0x76>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abea:	6804      	ldr	r4, [r0, #0]
 800abec:	429c      	cmp	r4, r3
 800abee:	d00d      	beq.n	800ac0c <chk_lock+0x2c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abf0:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
 800abf2:	6913      	ldr	r3, [r2, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d02b      	beq.n	800ac50 <chk_lock+0x70>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abf8:	6805      	ldr	r5, [r0, #0]
 800abfa:	42ab      	cmp	r3, r5
 800abfc:	d01a      	beq.n	800ac34 <chk_lock+0x54>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800abfe:	bb3c      	cbnz	r4, 800ac50 <chk_lock+0x70>
 800ac00:	2902      	cmp	r1, #2
 800ac02:	bf0c      	ite	eq
 800ac04:	2000      	moveq	r0, #0
 800ac06:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800ac08:	bc30      	pop	{r4, r5}
 800ac0a:	4770      	bx	lr
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac0c:	6854      	ldr	r4, [r2, #4]
 800ac0e:	6883      	ldr	r3, [r0, #8]
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d1ed      	bne.n	800abf0 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800ac14:	6894      	ldr	r4, [r2, #8]
 800ac16:	6943      	ldr	r3, [r0, #20]
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	d1e9      	bne.n	800abf0 <chk_lock+0x10>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac1c:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac1e:	b9a1      	cbnz	r1, 800ac4a <chk_lock+0x6a>
 800ac20:	eb02 1203 	add.w	r2, r2, r3, lsl #4
}
 800ac24:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac26:	8993      	ldrh	r3, [r2, #12]
 800ac28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2c:	bf14      	ite	ne
 800ac2e:	2000      	movne	r0, #0
 800ac30:	2010      	moveq	r0, #16
}
 800ac32:	4770      	bx	lr
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac34:	6955      	ldr	r5, [r2, #20]
 800ac36:	6883      	ldr	r3, [r0, #8]
 800ac38:	429d      	cmp	r5, r3
 800ac3a:	d1e0      	bne.n	800abfe <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800ac3c:	6943      	ldr	r3, [r0, #20]
 800ac3e:	6990      	ldr	r0, [r2, #24]
 800ac40:	4298      	cmp	r0, r3
 800ac42:	d1dc      	bne.n	800abfe <chk_lock+0x1e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac44:	2301      	movs	r3, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac46:	2900      	cmp	r1, #0
 800ac48:	d0ea      	beq.n	800ac20 <chk_lock+0x40>
 800ac4a:	2010      	movs	r0, #16
}
 800ac4c:	bc30      	pop	{r4, r5}
 800ac4e:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac50:	2000      	movs	r0, #0
}
 800ac52:	bc30      	pop	{r4, r5}
 800ac54:	4770      	bx	lr
			be = 1;
 800ac56:	2401      	movs	r4, #1
 800ac58:	e7cb      	b.n	800abf2 <chk_lock+0x12>
 800ac5a:	bf00      	nop
 800ac5c:	20007384 	.word	0x20007384

0800ac60 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800ac60:	4b24      	ldr	r3, [pc, #144]	; (800acf4 <inc_lock+0x94>)
{
 800ac62:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	6804      	ldr	r4, [r0, #0]
 800ac68:	4294      	cmp	r4, r2
 800ac6a:	d01a      	beq.n	800aca2 <inc_lock+0x42>
 800ac6c:	691d      	ldr	r5, [r3, #16]
 800ac6e:	42a5      	cmp	r5, r4
 800ac70:	d006      	beq.n	800ac80 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac72:	b302      	cbz	r2, 800acb6 <inc_lock+0x56>
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	d033      	beq.n	800ace0 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac78:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	bcf0      	pop	{r4, r5, r6, r7}
 800ac7e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800ac80:	695f      	ldr	r7, [r3, #20]
 800ac82:	6886      	ldr	r6, [r0, #8]
 800ac84:	42b7      	cmp	r7, r6
 800ac86:	d1f4      	bne.n	800ac72 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800ac88:	699f      	ldr	r7, [r3, #24]
 800ac8a:	6946      	ldr	r6, [r0, #20]
 800ac8c:	42b7      	cmp	r7, r6
 800ac8e:	d1f0      	bne.n	800ac72 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac90:	2201      	movs	r2, #1
 800ac92:	0115      	lsls	r5, r2, #4
 800ac94:	1958      	adds	r0, r3, r5
 800ac96:	8980      	ldrh	r0, [r0, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ac98:	bb29      	cbnz	r1, 800ace6 <inc_lock+0x86>
 800ac9a:	1c41      	adds	r1, r0, #1
 800ac9c:	b289      	uxth	r1, r1
 800ac9e:	1c56      	adds	r6, r2, #1
 800aca0:	e019      	b.n	800acd6 <inc_lock+0x76>
		if (Files[i].fs == dp->obj.fs &&
 800aca2:	6886      	ldr	r6, [r0, #8]
 800aca4:	685d      	ldr	r5, [r3, #4]
 800aca6:	42ae      	cmp	r6, r5
 800aca8:	d1e0      	bne.n	800ac6c <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800acaa:	6946      	ldr	r6, [r0, #20]
 800acac:	689d      	ldr	r5, [r3, #8]
 800acae:	42ae      	cmp	r6, r5
 800acb0:	d1dc      	bne.n	800ac6c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acb2:	2200      	movs	r2, #0
 800acb4:	e7ed      	b.n	800ac92 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acb6:	2601      	movs	r6, #1
		Files[i].fs = dp->obj.fs;
 800acb8:	0115      	lsls	r5, r2, #4
		Files[i].clu = dp->obj.sclust;
 800acba:	6887      	ldr	r7, [r0, #8]
		Files[i].ofs = dp->dptr;
 800acbc:	6940      	ldr	r0, [r0, #20]
		Files[i].fs = dp->obj.fs;
 800acbe:	515c      	str	r4, [r3, r5]
 800acc0:	195a      	adds	r2, r3, r5
		Files[i].ofs = dp->dptr;
 800acc2:	e9c2 7001 	strd	r7, r0, [r2, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800acc6:	2900      	cmp	r1, #0
		Files[i].ctr = 0;
 800acc8:	f04f 0100 	mov.w	r1, #0
 800accc:	8191      	strh	r1, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800acce:	bf14      	ite	ne
 800acd0:	f44f 7180 	movne.w	r1, #256	; 0x100
 800acd4:	2101      	moveq	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acd6:	442b      	add	r3, r5
}
 800acd8:	4630      	mov	r0, r6
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acda:	8199      	strh	r1, [r3, #12]
}
 800acdc:	bcf0      	pop	{r4, r5, r6, r7}
 800acde:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ace0:	2602      	movs	r6, #2
 800ace2:	2201      	movs	r2, #1
 800ace4:	e7e8      	b.n	800acb8 <inc_lock+0x58>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d1c6      	bne.n	800ac78 <inc_lock+0x18>
 800acea:	1c56      	adds	r6, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acf0:	e7f1      	b.n	800acd6 <inc_lock+0x76>
 800acf2:	bf00      	nop
 800acf4:	20007384 	.word	0x20007384

0800acf8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800acf8:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800acfa:	6804      	ldr	r4, [r0, #0]
 800acfc:	b1f4      	cbz	r4, 800ad3c <get_ldnumber+0x44>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800acfe:	7825      	ldrb	r5, [r4, #0]
 800ad00:	2d1f      	cmp	r5, #31
 800ad02:	d90b      	bls.n	800ad1c <get_ldnumber+0x24>
 800ad04:	2d3a      	cmp	r5, #58	; 0x3a
 800ad06:	d019      	beq.n	800ad3c <get_ldnumber+0x44>
 800ad08:	4623      	mov	r3, r4
 800ad0a:	e002      	b.n	800ad12 <get_ldnumber+0x1a>
 800ad0c:	2a3a      	cmp	r2, #58	; 0x3a
 800ad0e:	d009      	beq.n	800ad24 <get_ldnumber+0x2c>
 800ad10:	460b      	mov	r3, r1
 800ad12:	785a      	ldrb	r2, [r3, #1]
 800ad14:	2a1f      	cmp	r2, #31
 800ad16:	f103 0101 	add.w	r1, r3, #1
 800ad1a:	d8f7      	bhi.n	800ad0c <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad1c:	2200      	movs	r2, #0
#endif
	}
	return vol;
}
 800ad1e:	4610      	mov	r0, r2
 800ad20:	bc30      	pop	{r4, r5}
 800ad22:	4770      	bx	lr
			i = *tp++ - '0';
 800ad24:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad26:	42a1      	cmp	r1, r4
			i = *tp++ - '0';
 800ad28:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad2c:	d106      	bne.n	800ad3c <get_ldnumber+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad2e:	2d30      	cmp	r5, #48	; 0x30
 800ad30:	d104      	bne.n	800ad3c <get_ldnumber+0x44>
					*path = ++tt;
 800ad32:	3302      	adds	r3, #2
 800ad34:	6003      	str	r3, [r0, #0]
}
 800ad36:	bc30      	pop	{r4, r5}
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4770      	bx	lr
	int vol = -1;
 800ad3c:	f04f 32ff 	mov.w	r2, #4294967295
}
 800ad40:	4610      	mov	r0, r2
 800ad42:	bc30      	pop	{r4, r5}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop

0800ad48 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad48:	440a      	add	r2, r1
 800ad4a:	3801      	subs	r0, #1
			*d++ = *s++;
 800ad4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad50:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800ad54:	4291      	cmp	r1, r2
 800ad56:	d1f9      	bne.n	800ad4c <mem_cpy.part.0+0x4>
}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop

0800ad5c <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800ad5e:	6b85      	ldr	r5, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad60:	f100 073c 	add.w	r7, r0, #60	; 0x3c
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ad64:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad66:	462a      	mov	r2, r5
 800ad68:	7840      	ldrb	r0, [r0, #1]
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f7ff ff1b 	bl	800aba8 <disk_write>
 800ad72:	b9b0      	cbnz	r0, 800ada2 <sync_window.part.5+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad76:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 800ad78:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad7a:	1aaa      	subs	r2, r5, r2
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d20e      	bcs.n	800ad9e <sync_window.part.5+0x42>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad80:	78a6      	ldrb	r6, [r4, #2]
 800ad82:	2e01      	cmp	r6, #1
 800ad84:	d801      	bhi.n	800ad8a <sync_window.part.5+0x2e>
 800ad86:	e00a      	b.n	800ad9e <sync_window.part.5+0x42>
 800ad88:	6a63      	ldr	r3, [r4, #36]	; 0x24
					disk_write(fs->drv, fs->win, wsect, 1);
 800ad8a:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800ad8c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad8e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ad90:	462a      	mov	r2, r5
 800ad92:	2301      	movs	r3, #1
 800ad94:	4639      	mov	r1, r7
 800ad96:	f7ff ff07 	bl	800aba8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad9a:	2e01      	cmp	r6, #1
 800ad9c:	d1f4      	bne.n	800ad88 <sync_window.part.5+0x2c>
	FRESULT res = FR_OK;
 800ad9e:	2000      	movs	r0, #0
}
 800ada0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 800ada2:	2001      	movs	r0, #1
}
 800ada4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada6:	bf00      	nop

0800ada8 <sync_fs>:
{
 800ada8:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800adaa:	78c3      	ldrb	r3, [r0, #3]
{
 800adac:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800adae:	b95b      	cbnz	r3, 800adc8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800adb0:	7823      	ldrb	r3, [r4, #0]
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d00f      	beq.n	800add6 <sync_fs+0x2e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800adb6:	2200      	movs	r2, #0
 800adb8:	7860      	ldrb	r0, [r4, #1]
 800adba:	4611      	mov	r1, r2
 800adbc:	f7ff ff02 	bl	800abc4 <disk_ioctl>
 800adc0:	3000      	adds	r0, #0
 800adc2:	bf18      	it	ne
 800adc4:	2001      	movne	r0, #1
}
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	f7ff ffc8 	bl	800ad5c <sync_window.part.5>
	if (res == FR_OK) {
 800adcc:	2800      	cmp	r0, #0
 800adce:	d1fa      	bne.n	800adc6 <sync_fs+0x1e>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800add0:	7823      	ldrb	r3, [r4, #0]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d1ef      	bne.n	800adb6 <sync_fs+0xe>
 800add6:	7923      	ldrb	r3, [r4, #4]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d1ec      	bne.n	800adb6 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800addc:	89a2      	ldrh	r2, [r4, #12]
 800adde:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ade2:	440a      	add	r2, r1
	BYTE *d = (BYTE*)dst;
 800ade4:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
 800ade6:	2500      	movs	r5, #0
 800ade8:	f803 5b01 	strb.w	r5, [r3], #1
	} while (--cnt);
 800adec:	4293      	cmp	r3, r2
 800adee:	d1fb      	bne.n	800ade8 <sync_fs+0x40>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800adf0:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800adf4:	0a06      	lsrs	r6, r0, #8
 800adf6:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
	*ptr++ = (BYTE)val; val >>= 8;
 800adfa:	f884 6225 	strb.w	r6, [r4, #549]	; 0x225
 800adfe:	0c06      	lsrs	r6, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ae00:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800ae02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 800ae04:	f884 6226 	strb.w	r6, [r4, #550]	; 0x226
	*ptr++ = (BYTE)val;
 800ae08:	f884 0227 	strb.w	r0, [r4, #551]	; 0x227
	*ptr++ = (BYTE)val; val >>= 8;
 800ae0c:	0a1e      	lsrs	r6, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800ae0e:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ae10:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
	*ptr++ = (BYTE)val; val >>= 8;
 800ae14:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800ae16:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
	*ptr++ = (BYTE)val; val >>= 8;
 800ae1a:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	*ptr++ = (BYTE)val; val >>= 8;
 800ae1e:	2655      	movs	r6, #85	; 0x55
	*ptr++ = (BYTE)val;
 800ae20:	20aa      	movs	r0, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800ae22:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
	*ptr++ = (BYTE)val; val >>= 8;
 800ae26:	2352      	movs	r3, #82	; 0x52
			fs->winsect = fs->volbase + 1;
 800ae28:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ae2a:	f884 623a 	strb.w	r6, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
 800ae2e:	f884 023b 	strb.w	r0, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
 800ae32:	2661      	movs	r6, #97	; 0x61
	*ptr++ = (BYTE)val;
 800ae34:	2041      	movs	r0, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800ae36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 800ae3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
 800ae3e:	2372      	movs	r3, #114	; 0x72
	*ptr++ = (BYTE)val;
 800ae40:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 800ae44:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val; val >>= 8;
 800ae48:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 800ae4c:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
			fs->winsect = fs->volbase + 1;
 800ae50:	63a2      	str	r2, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 800ae52:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
	*ptr++ = (BYTE)val;
 800ae56:	f884 6223 	strb.w	r6, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	7860      	ldrb	r0, [r4, #1]
 800ae5e:	f7ff fea3 	bl	800aba8 <disk_write>
			fs->fsi_flag = 0;
 800ae62:	7125      	strb	r5, [r4, #4]
 800ae64:	e7a7      	b.n	800adb6 <sync_fs+0xe>
 800ae66:	bf00      	nop

0800ae68 <move_window.part.6>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ae68:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae6a:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae70:	b113      	cbz	r3, 800ae78 <move_window.part.6+0x10>
 800ae72:	f7ff ff73 	bl	800ad5c <sync_window.part.5>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae76:	b970      	cbnz	r0, 800ae96 <move_window.part.6+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae78:	462a      	mov	r2, r5
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ae80:	7860      	ldrb	r0, [r4, #1]
 800ae82:	f7ff fe83 	bl	800ab8c <disk_read>
				res = FR_DISK_ERR;
 800ae86:	2800      	cmp	r0, #0
 800ae88:	bf18      	it	ne
 800ae8a:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800ae8e:	63a5      	str	r5, [r4, #56]	; 0x38
				res = FR_DISK_ERR;
 800ae90:	bf0c      	ite	eq
 800ae92:	2000      	moveq	r0, #0
 800ae94:	2001      	movne	r0, #1
}
 800ae96:	bd38      	pop	{r3, r4, r5, pc}

0800ae98 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae98:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9c:	2200      	movs	r2, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae9e:	4299      	cmp	r1, r3
{
 800aea0:	b510      	push	{r4, lr}
 800aea2:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aea4:	70c2      	strb	r2, [r0, #3]
 800aea6:	6383      	str	r3, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800aea8:	d134      	bne.n	800af14 <check_fs+0x7c>
	rv = rv << 8 | ptr[0];
 800aeaa:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 800aeae:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeb2:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800aeb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d128      	bne.n	800af10 <check_fs+0x78>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aebe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800aec2:	2be9      	cmp	r3, #233	; 0xe9
 800aec4:	d005      	beq.n	800aed2 <check_fs+0x3a>
 800aec6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aec8:	4a17      	ldr	r2, [pc, #92]	; (800af28 <check_fs+0x90>)
 800aeca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800aece:	4293      	cmp	r3, r2
 800aed0:	d126      	bne.n	800af20 <check_fs+0x88>
	rv = rv << 8 | ptr[2];
 800aed2:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 800aed6:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 800aeda:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aede:	4913      	ldr	r1, [pc, #76]	; (800af2c <check_fs+0x94>)
	rv = rv << 8 | ptr[1];
 800aee0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800aee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aeec:	428b      	cmp	r3, r1
 800aeee:	d019      	beq.n	800af24 <check_fs+0x8c>
	rv = rv << 8 | ptr[2];
 800aef0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 800aef4:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 800aef8:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aefc:	4a0c      	ldr	r2, [pc, #48]	; (800af30 <check_fs+0x98>)
	rv = rv << 8 | ptr[1];
 800aefe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800af02:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af06:	4290      	cmp	r0, r2
 800af08:	bf14      	ite	ne
 800af0a:	2002      	movne	r0, #2
 800af0c:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800af0e:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af10:	2003      	movs	r0, #3
}
 800af12:	bd10      	pop	{r4, pc}
 800af14:	f7ff ffa8 	bl	800ae68 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af18:	2800      	cmp	r0, #0
 800af1a:	d0c6      	beq.n	800aeaa <check_fs+0x12>
 800af1c:	2004      	movs	r0, #4
}
 800af1e:	bd10      	pop	{r4, pc}
	return 2;
 800af20:	2002      	movs	r0, #2
}
 800af22:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af24:	2000      	movs	r0, #0
}
 800af26:	bd10      	pop	{r4, pc}
 800af28:	009000eb 	.word	0x009000eb
 800af2c:	00544146 	.word	0x00544146
 800af30:	33544146 	.word	0x33544146

0800af34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af38:	2300      	movs	r3, #0
{
 800af3a:	b085      	sub	sp, #20
	*rfs = 0;
 800af3c:	600b      	str	r3, [r1, #0]
{
 800af3e:	460f      	mov	r7, r1
 800af40:	4614      	mov	r4, r2
	vol = get_ldnumber(path);
 800af42:	f7ff fed9 	bl	800acf8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800af46:	1e06      	subs	r6, r0, #0
 800af48:	f2c0 80fa 	blt.w	800b140 <find_volume+0x20c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af4c:	4bbd      	ldr	r3, [pc, #756]	; (800b244 <find_volume+0x310>)
 800af4e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af52:	2d00      	cmp	r5, #0
 800af54:	f000 80f0 	beq.w	800b138 <find_volume+0x204>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800af58:	6968      	ldr	r0, [r5, #20]
 800af5a:	f002 f8b3 	bl	800d0c4 <ff_req_grant>
 800af5e:	b918      	cbnz	r0, 800af68 <find_volume+0x34>

	ENTER_FF(fs);						/* Lock the volume */
 800af60:	200f      	movs	r0, #15
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800af62:	b005      	add	sp, #20
 800af64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	*rfs = fs;							/* Return pointer to the file system object */
 800af68:	603d      	str	r5, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800af6a:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af6c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800af70:	b163      	cbz	r3, 800af8c <find_volume+0x58>
		stat = disk_status(fs->drv);
 800af72:	7868      	ldrb	r0, [r5, #1]
 800af74:	f7ff fdf0 	bl	800ab58 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af78:	07c1      	lsls	r1, r0, #31
 800af7a:	d407      	bmi.n	800af8c <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af7c:	2c00      	cmp	r4, #0
 800af7e:	f000 810a 	beq.w	800b196 <find_volume+0x262>
 800af82:	f010 0004 	ands.w	r0, r0, #4
 800af86:	d0ec      	beq.n	800af62 <find_volume+0x2e>
				return FR_WRITE_PROTECTED;
 800af88:	200a      	movs	r0, #10
 800af8a:	e7ea      	b.n	800af62 <find_volume+0x2e>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af8c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800af8e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af90:	7068      	strb	r0, [r5, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 800af92:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af94:	f7ff fdea 	bl	800ab6c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af98:	07c2      	lsls	r2, r0, #31
 800af9a:	f100 80fa 	bmi.w	800b192 <find_volume+0x25e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af9e:	b10c      	cbz	r4, 800afa4 <find_volume+0x70>
 800afa0:	0743      	lsls	r3, r0, #29
 800afa2:	d4f1      	bmi.n	800af88 <find_volume+0x54>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800afa4:	f105 020c 	add.w	r2, r5, #12
 800afa8:	2102      	movs	r1, #2
 800afaa:	7868      	ldrb	r0, [r5, #1]
 800afac:	f7ff fe0a 	bl	800abc4 <disk_ioctl>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f040 80ea 	bne.w	800b18a <find_volume+0x256>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800afbc:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800afc0:	f200 80e3 	bhi.w	800b18a <find_volume+0x256>
 800afc4:	1e5a      	subs	r2, r3, #1
 800afc6:	ea12 0403 	ands.w	r4, r2, r3
 800afca:	f040 80de 	bne.w	800b18a <find_volume+0x256>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	f7ff ff61 	bl	800ae98 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800afd6:	2802      	cmp	r0, #2
 800afd8:	f000 80b6 	beq.w	800b148 <find_volume+0x214>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afdc:	2804      	cmp	r0, #4
 800afde:	f000 80d4 	beq.w	800b18a <find_volume+0x256>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800afe2:	2801      	cmp	r0, #1
 800afe4:	f200 80d9 	bhi.w	800b19a <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800afe8:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800afec:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800aff0:	89a9      	ldrh	r1, [r5, #12]
 800aff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aff6:	4299      	cmp	r1, r3
 800aff8:	f040 80cf 	bne.w	800b19a <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800affc:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
 800b000:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b004:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800b008:	d109      	bne.n	800b01e <find_volume+0xea>
	rv = rv << 8 | ptr[2];
 800b00a:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 800b00e:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 800b012:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 800b016:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800b01a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b01e:	f895 c04c 	ldrb.w	ip, [r5, #76]	; 0x4c
		fs->fsize = fasize;
 800b022:	626b      	str	r3, [r5, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b024:	f10c 32ff 	add.w	r2, ip, #4294967295
 800b028:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b02a:	f885 c002 	strb.w	ip, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b02e:	f200 80b4 	bhi.w	800b19a <find_volume+0x266>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b032:	f895 e049 	ldrb.w	lr, [r5, #73]	; 0x49
 800b036:	fa1f f28e 	uxth.w	r2, lr
 800b03a:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b03c:	2a00      	cmp	r2, #0
 800b03e:	f000 80ac 	beq.w	800b19a <find_volume+0x266>
 800b042:	f10e 32ff 	add.w	r2, lr, #4294967295
 800b046:	ea12 0f0e 	tst.w	r2, lr
 800b04a:	f040 80a6 	bne.w	800b19a <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b04e:	f895 004e 	ldrb.w	r0, [r5, #78]	; 0x4e
 800b052:	f895 604d 	ldrb.w	r6, [r5, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b056:	094a      	lsrs	r2, r1, #5
	rv = rv << 8 | ptr[0];
 800b058:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b05c:	fbb6 f9f2 	udiv	r9, r6, r2
 800b060:	fb02 6219 	mls	r2, r2, r9, r6
 800b064:	b292      	uxth	r2, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b066:	812e      	strh	r6, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b068:	2a00      	cmp	r2, #0
 800b06a:	f040 8096 	bne.w	800b19a <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b06e:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
 800b072:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b076:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 800b07a:	d109      	bne.n	800b090 <find_volume+0x15c>
	rv = rv << 8 | ptr[2];
 800b07c:	f8b5 705e 	ldrh.w	r7, [r5, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 800b080:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 800b084:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 800b088:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800b08c:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800b090:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 800b094:	f895 704a 	ldrb.w	r7, [r5, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b098:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
 800b09c:	d07d      	beq.n	800b19a <find_volume+0x266>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b09e:	fb03 f80c 	mul.w	r8, r3, ip
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0a2:	eb09 0007 	add.w	r0, r9, r7
 800b0a6:	eb00 0c08 	add.w	ip, r0, r8
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b0aa:	4562      	cmp	r2, ip
 800b0ac:	d375      	bcc.n	800b19a <find_volume+0x266>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b0ae:	eba2 020c 	sub.w	r2, r2, ip
 800b0b2:	fbb2 f2fe 	udiv	r2, r2, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	d06f      	beq.n	800b19a <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0ba:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800b0be:	4282      	cmp	r2, r0
 800b0c0:	d874      	bhi.n	800b1ac <find_volume+0x278>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b0c2:	f640 7ef5 	movw	lr, #4085	; 0xff5
 800b0c6:	4572      	cmp	r2, lr
 800b0c8:	eb07 0004 	add.w	r0, r7, r4
 800b0cc:	44a4      	add	ip, r4
 800b0ce:	f102 0702 	add.w	r7, r2, #2
 800b0d2:	f200 809e 	bhi.w	800b212 <find_volume+0x2de>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b0d6:	622f      	str	r7, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b0d8:	e9c5 400a 	strd	r4, r0, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b0dc:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b0e0:	2e00      	cmp	r6, #0
 800b0e2:	d05a      	beq.n	800b19a <find_volume+0x266>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b0e4:	f007 0201 	and.w	r2, r7, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0e8:	1e4c      	subs	r4, r1, #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b0ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0ee:	4422      	add	r2, r4
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b0f0:	4440      	add	r0, r8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0f2:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 800b0f6:	fbb2 f1f1 	udiv	r1, r2, r1
 800b0fa:	428b      	cmp	r3, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b0fc:	6328      	str	r0, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0fe:	d34c      	bcc.n	800b19a <find_volume+0x266>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b100:	f04f 33ff 	mov.w	r3, #4294967295
 800b104:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fs->fsi_flag = 0x80;
 800b108:	2280      	movs	r2, #128	; 0x80
 800b10a:	712a      	strb	r2, [r5, #4]
 800b10c:	2201      	movs	r2, #1
	fs->id = ++Fsid;		/* File system mount ID */
 800b10e:	484e      	ldr	r0, [pc, #312]	; (800b248 <find_volume+0x314>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b110:	494e      	ldr	r1, [pc, #312]	; (800b24c <find_volume+0x318>)
	fs->id = ++Fsid;		/* File system mount ID */
 800b112:	8803      	ldrh	r3, [r0, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b114:	680c      	ldr	r4, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 800b116:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b118:	3301      	adds	r3, #1
 800b11a:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b11c:	42a5      	cmp	r5, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800b11e:	8003      	strh	r3, [r0, #0]
 800b120:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b122:	bf04      	itt	eq
 800b124:	2300      	moveq	r3, #0
 800b126:	600b      	streq	r3, [r1, #0]
 800b128:	690b      	ldr	r3, [r1, #16]
 800b12a:	429d      	cmp	r5, r3
 800b12c:	f04f 0000 	mov.w	r0, #0
 800b130:	f47f af17 	bne.w	800af62 <find_volume+0x2e>
 800b134:	6108      	str	r0, [r1, #16]
 800b136:	e714      	b.n	800af62 <find_volume+0x2e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b138:	200c      	movs	r0, #12
}
 800b13a:	b005      	add	sp, #20
 800b13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800b140:	200b      	movs	r0, #11
}
 800b142:	b005      	add	sp, #20
 800b144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b148:	466e      	mov	r6, sp
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b14a:	4631      	mov	r1, r6
 800b14c:	f505 7301 	add.w	r3, r5, #516	; 0x204
 800b150:	f505 7411 	add.w	r4, r5, #580	; 0x244
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b154:	f813 2c06 	ldrb.w	r2, [r3, #-6]
 800b158:	b142      	cbz	r2, 800b16c <find_volume+0x238>
	rv = rv << 8 | ptr[2];
 800b15a:	881f      	ldrh	r7, [r3, #0]
	rv = rv << 8 | ptr[1];
 800b15c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
	rv = rv << 8 | ptr[0];
 800b160:	f813 2c02 	ldrb.w	r2, [r3, #-2]
	rv = rv << 8 | ptr[1];
 800b164:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800b168:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b16c:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b16e:	42a3      	cmp	r3, r4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b170:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b174:	d1ee      	bne.n	800b154 <find_volume+0x220>
 800b176:	f106 0710 	add.w	r7, r6, #16
			bsect = br[i];
 800b17a:	f856 4b04 	ldr.w	r4, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b17e:	b974      	cbnz	r4, 800b19e <find_volume+0x26a>
 800b180:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b182:	42b7      	cmp	r7, r6
 800b184:	d1f9      	bne.n	800b17a <find_volume+0x246>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b186:	2804      	cmp	r0, #4
 800b188:	d107      	bne.n	800b19a <find_volume+0x266>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b18a:	2001      	movs	r0, #1
}
 800b18c:	b005      	add	sp, #20
 800b18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b192:	2003      	movs	r0, #3
 800b194:	e6e5      	b.n	800af62 <find_volume+0x2e>
			return FR_OK;				/* The file system object is valid */
 800b196:	4620      	mov	r0, r4
 800b198:	e6e3      	b.n	800af62 <find_volume+0x2e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b19a:	200d      	movs	r0, #13
 800b19c:	e6e1      	b.n	800af62 <find_volume+0x2e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f7ff fe79 	bl	800ae98 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1a6:	2801      	cmp	r0, #1
 800b1a8:	d8eb      	bhi.n	800b182 <find_volume+0x24e>
 800b1aa:	e71d      	b.n	800afe8 <find_volume+0xb4>
	rv = rv << 8 | ptr[0];
 800b1ac:	f895 8067 	ldrb.w	r8, [r5, #103]	; 0x67
 800b1b0:	f895 e066 	ldrb.w	lr, [r5, #102]	; 0x66
		fs->volbase = bsect;							/* Volume start sector */
 800b1b4:	62ac      	str	r4, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b1b6:	eb0c 0004 	add.w	r0, ip, r4
 800b1ba:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b1bc:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800b1be:	6368      	str	r0, [r5, #52]	; 0x34
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b1c0:	ea5e 2008 	orrs.w	r0, lr, r8, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b1c4:	622a      	str	r2, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b1c6:	62ef      	str	r7, [r5, #44]	; 0x2c
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b1c8:	d1e7      	bne.n	800b19a <find_volume+0x266>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1ca:	2e00      	cmp	r6, #0
 800b1cc:	d1e5      	bne.n	800b19a <find_volume+0x266>
	rv = rv << 8 | ptr[2];
 800b1ce:	f8b5 706a 	ldrh.w	r7, [r5, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800b1d2:	f895 0069 	ldrb.w	r0, [r5, #105]	; 0x69
	rv = rv << 8 | ptr[0];
 800b1d6:	f895 6068 	ldrb.w	r6, [r5, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800b1da:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800b1de:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1e2:	1e48      	subs	r0, r1, #1
 800b1e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b1e8:	fbb2 f1f1 	udiv	r1, r2, r1
 800b1ec:	428b      	cmp	r3, r1
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1ee:	632e      	str	r6, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1f0:	d3d3      	bcc.n	800b19a <find_volume+0x266>
	rv = rv << 8 | ptr[0];
 800b1f2:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
 800b1f6:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 800b1fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800b202:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b204:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b206:	e9c5 2206 	strd	r2, r2, [r5, #24]
		fs->fsi_flag = 0x80;
 800b20a:	7129      	strb	r1, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b20c:	d020      	beq.n	800b250 <find_volume+0x31c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b20e:	2203      	movs	r2, #3
 800b210:	e77d      	b.n	800b10e <find_volume+0x1da>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b212:	622f      	str	r7, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b214:	e9c5 400a 	strd	r4, r0, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b218:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b21c:	2e00      	cmp	r6, #0
 800b21e:	d0bc      	beq.n	800b19a <find_volume+0x266>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b220:	1e4a      	subs	r2, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b222:	4440      	add	r0, r8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b224:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 800b228:	fbb2 f1f1 	udiv	r1, r2, r1
 800b22c:	4299      	cmp	r1, r3
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b22e:	6328      	str	r0, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b230:	d8b3      	bhi.n	800b19a <find_volume+0x266>
		fs->fsi_flag = 0x80;
 800b232:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b234:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b238:	712a      	strb	r2, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b23a:	e9c5 3306 	strd	r3, r3, [r5, #24]
 800b23e:	2202      	movs	r2, #2
 800b240:	e765      	b.n	800b10e <find_volume+0x1da>
 800b242:	bf00      	nop
 800b244:	20007380 	.word	0x20007380
 800b248:	200073a4 	.word	0x200073a4
 800b24c:	20007384 	.word	0x20007384
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b250:	6bab      	ldr	r3, [r5, #56]	; 0x38
			&& move_window(fs, bsect + 1) == FR_OK)
 800b252:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b254:	4299      	cmp	r1, r3
 800b256:	d13f      	bne.n	800b2d8 <find_volume+0x3a4>
	rv = rv << 8 | ptr[0];
 800b258:	f895 223b 	ldrb.w	r2, [r5, #571]	; 0x23b
 800b25c:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
 800b260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b264:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800b268:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b26a:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 800b26c:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b26e:	d1ce      	bne.n	800b20e <find_volume+0x2da>
	rv = rv << 8 | ptr[2];
 800b270:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
	rv = rv << 8 | ptr[1];
 800b272:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
	rv = rv << 8 | ptr[0];
 800b276:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b27a:	491a      	ldr	r1, [pc, #104]	; (800b2e4 <find_volume+0x3b0>)
	rv = rv << 8 | ptr[1];
 800b27c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800b280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b284:	428b      	cmp	r3, r1
 800b286:	d1c2      	bne.n	800b20e <find_volume+0x2da>
	rv = rv << 8 | ptr[2];
 800b288:	f8b5 0222 	ldrh.w	r0, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 800b28c:	f895 2221 	ldrb.w	r2, [r5, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 800b290:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b294:	f101 51ff 	add.w	r1, r1, #534773760	; 0x1fe00000
 800b298:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
	rv = rv << 8 | ptr[1];
 800b29c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2a0:	3120      	adds	r1, #32
	rv = rv << 8 | ptr[0];
 800b2a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2a6:	428b      	cmp	r3, r1
 800b2a8:	d1b1      	bne.n	800b20e <find_volume+0x2da>
	rv = rv << 8 | ptr[2];
 800b2aa:	f8b5 6226 	ldrh.w	r6, [r5, #550]	; 0x226
	rv = rv << 8 | ptr[1];
 800b2ae:	f895 0225 	ldrb.w	r0, [r5, #549]	; 0x225
	rv = rv << 8 | ptr[2];
 800b2b2:	f8b5 422a 	ldrh.w	r4, [r5, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 800b2b6:	f895 1229 	ldrb.w	r1, [r5, #553]	; 0x229
	rv = rv << 8 | ptr[0];
 800b2ba:	f895 2224 	ldrb.w	r2, [r5, #548]	; 0x224
 800b2be:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
	rv = rv << 8 | ptr[1];
 800b2c2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800b2c6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	rv = rv << 8 | ptr[0];
 800b2ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b2ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2d2:	e9c5 3206 	strd	r3, r2, [r5, #24]
 800b2d6:	e79a      	b.n	800b20e <find_volume+0x2da>
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f7ff fdc5 	bl	800ae68 <move_window.part.6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d0ba      	beq.n	800b258 <find_volume+0x324>
 800b2e2:	e794      	b.n	800b20e <find_volume+0x2da>
 800b2e4:	41615252 	.word	0x41615252

0800b2e8 <put_fat.part.8>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 800b2ec:	7803      	ldrb	r3, [r0, #0]
 800b2ee:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800b2f6:	d069      	beq.n	800b3cc <put_fat.part.8+0xe4>
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d043      	beq.n	800b384 <put_fat.part.8+0x9c>
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d002      	beq.n	800b306 <put_fat.part.8+0x1e>
	FRESULT res = FR_INT_ERR;
 800b300:	2002      	movs	r0, #2
}
 800b302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b306:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b308:	6b82      	ldr	r2, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b30a:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800b30e:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b312:	fbb7 f3fc 	udiv	r3, r7, ip
 800b316:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b318:	4291      	cmp	r1, r2
 800b31a:	d176      	bne.n	800b40a <put_fat.part.8+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b31c:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 800b320:	fb0c 7313 	mls	r3, ip, r3, r7
 800b324:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 800b328:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b32c:	d07e      	beq.n	800b42c <put_fat.part.8+0x144>
 800b32e:	f818 1003 	ldrb.w	r1, [r8, r3]
 800b332:	0132      	lsls	r2, r6, #4
 800b334:	f001 010f 	and.w	r1, r1, #15
 800b338:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b33c:	430a      	orrs	r2, r1
 800b33e:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b342:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b344:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b346:	89a0      	ldrh	r0, [r4, #12]
 800b348:	fbb7 f3f0 	udiv	r3, r7, r0
 800b34c:	4419      	add	r1, r3
			fs->wflag = 1;
 800b34e:	f04f 0c01 	mov.w	ip, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b352:	4291      	cmp	r1, r2
			fs->wflag = 1;
 800b354:	f884 c003 	strb.w	ip, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b358:	d007      	beq.n	800b36a <put_fat.part.8+0x82>
 800b35a:	4620      	mov	r0, r4
 800b35c:	f7ff fd84 	bl	800ae68 <move_window.part.6>
			if (res != FR_OK) break;
 800b360:	2800      	cmp	r0, #0
 800b362:	d1ce      	bne.n	800b302 <put_fat.part.8+0x1a>
 800b364:	89a0      	ldrh	r0, [r4, #12]
 800b366:	fbb7 f3f0 	udiv	r3, r7, r0
			p = fs->win + bc % SS(fs);
 800b36a:	fb00 7713 	mls	r7, r0, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b36e:	2d00      	cmp	r5, #0
 800b370:	d05e      	beq.n	800b430 <put_fat.part.8+0x148>
 800b372:	f3c6 1607 	ubfx	r6, r6, #4, #8
			fs->wflag = 1;
 800b376:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b378:	f808 6007 	strb.w	r6, [r8, r7]
			fs->wflag = 1;
 800b37c:	70e3      	strb	r3, [r4, #3]
 800b37e:	2000      	movs	r0, #0
}
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b384:	8987      	ldrh	r7, [r0, #12]
 800b386:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b388:	6b83      	ldr	r3, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b38a:	08b9      	lsrs	r1, r7, #2
 800b38c:	fbb5 f1f1 	udiv	r1, r5, r1
 800b390:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b392:	4299      	cmp	r1, r3
 800b394:	d143      	bne.n	800b41e <put_fat.part.8+0x136>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b396:	00ad      	lsls	r5, r5, #2
 800b398:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b39c:	fbb5 f3f7 	udiv	r3, r5, r7
 800b3a0:	fb07 5513 	mls	r5, r7, r3, r5
 800b3a4:	194b      	adds	r3, r1, r5
 800b3a6:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[2];
 800b3aa:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[0];
 800b3ac:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3ae:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b3b2:	4332      	orrs	r2, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b3b4:	554a      	strb	r2, [r1, r5]
 800b3b6:	0a16      	lsrs	r6, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800b3b8:	0c10      	lsrs	r0, r2, #16
			fs->wflag = 1;
 800b3ba:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b3bc:	0e12      	lsrs	r2, r2, #24
 800b3be:	7098      	strb	r0, [r3, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3c0:	705e      	strb	r6, [r3, #1]
	*ptr++ = (BYTE)val;
 800b3c2:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
 800b3c4:	70e1      	strb	r1, [r4, #3]
 800b3c6:	2000      	movs	r0, #0
}
 800b3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b3cc:	8987      	ldrh	r7, [r0, #12]
 800b3ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b3d2:	0879      	lsrs	r1, r7, #1
 800b3d4:	fbb5 f1f1 	udiv	r1, r5, r1
 800b3d8:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	d004      	beq.n	800b3e8 <put_fat.part.8+0x100>
 800b3de:	f7ff fd43 	bl	800ae68 <move_window.part.6>
			if (res != FR_OK) break;
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d18d      	bne.n	800b302 <put_fat.part.8+0x1a>
 800b3e6:	89a7      	ldrh	r7, [r4, #12]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b3e8:	006d      	lsls	r5, r5, #1
 800b3ea:	fbb5 f3f7 	udiv	r3, r5, r7
 800b3ee:	fb07 5713 	mls	r7, r7, r3, r5
 800b3f2:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b3f6:	19da      	adds	r2, r3, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800b3f8:	55de      	strb	r6, [r3, r7]
 800b3fa:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 800b3fe:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800b400:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
 800b402:	70e3      	strb	r3, [r4, #3]
 800b404:	2000      	movs	r0, #0
}
 800b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40a:	f7ff fd2d 	bl	800ae68 <move_window.part.6>
			if (res != FR_OK) break;
 800b40e:	2800      	cmp	r0, #0
 800b410:	f47f af77 	bne.w	800b302 <put_fat.part.8+0x1a>
 800b414:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 800b418:	fbb7 f3fc 	udiv	r3, r7, ip
 800b41c:	e77e      	b.n	800b31c <put_fat.part.8+0x34>
 800b41e:	f7ff fd23 	bl	800ae68 <move_window.part.6>
			if (res != FR_OK) break;
 800b422:	2800      	cmp	r0, #0
 800b424:	f47f af6d 	bne.w	800b302 <put_fat.part.8+0x1a>
 800b428:	89a7      	ldrh	r7, [r4, #12]
 800b42a:	e7b4      	b.n	800b396 <put_fat.part.8+0xae>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b42c:	b2f2      	uxtb	r2, r6
 800b42e:	e786      	b.n	800b33e <put_fat.part.8+0x56>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b430:	f818 3007 	ldrb.w	r3, [r8, r7]
 800b434:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800b438:	f023 060f 	bic.w	r6, r3, #15
 800b43c:	4316      	orrs	r6, r2
 800b43e:	e79a      	b.n	800b376 <put_fat.part.8+0x8e>

0800b440 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b440:	2901      	cmp	r1, #1
 800b442:	d931      	bls.n	800b4a8 <get_fat.isra.9+0x68>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b446:	6a03      	ldr	r3, [r0, #32]
 800b448:	4299      	cmp	r1, r3
 800b44a:	4604      	mov	r4, r0
 800b44c:	d22a      	bcs.n	800b4a4 <get_fat.isra.9+0x64>
		switch (fs->fs_type) {
 800b44e:	7803      	ldrb	r3, [r0, #0]
 800b450:	2b02      	cmp	r3, #2
 800b452:	460d      	mov	r5, r1
 800b454:	d044      	beq.n	800b4e0 <get_fat.isra.9+0xa0>
 800b456:	2b03      	cmp	r3, #3
 800b458:	d028      	beq.n	800b4ac <get_fat.isra.9+0x6c>
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d122      	bne.n	800b4a4 <get_fat.isra.9+0x64>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b45e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b460:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b464:	8982      	ldrh	r2, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800b466:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b46a:	fbb6 f3f2 	udiv	r3, r6, r2
 800b46e:	185f      	adds	r7, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b470:	4567      	cmp	r7, ip
 800b472:	d153      	bne.n	800b51c <get_fat.isra.9+0xdc>
			wc = fs->win[bc++ % SS(fs)];
 800b474:	fb02 6313 	mls	r3, r2, r3, r6
 800b478:	1c77      	adds	r7, r6, #1
 800b47a:	4423      	add	r3, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b47c:	fbb7 f0f2 	udiv	r0, r7, r2
 800b480:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b482:	4561      	cmp	r1, ip
			wc = fs->win[bc++ % SS(fs)];
 800b484:	f893 603c 	ldrb.w	r6, [r3, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b488:	d153      	bne.n	800b532 <get_fat.isra.9+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b48a:	fb02 7710 	mls	r7, r2, r0, r7
 800b48e:	443c      	add	r4, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b490:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b492:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800b496:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b49a:	bf4c      	ite	mi
 800b49c:	0900      	lsrmi	r0, r0, #4
 800b49e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800b4a4:	2001      	movs	r0, #1
}
 800b4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b4a8:	2001      	movs	r0, #1
}
 800b4aa:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4ac:	8983      	ldrh	r3, [r0, #12]
 800b4ae:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4b2:	0899      	lsrs	r1, r3, #2
 800b4b4:	fbb5 f1f1 	udiv	r1, r5, r1
 800b4b8:	4431      	add	r1, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4ba:	4291      	cmp	r1, r2
 800b4bc:	d129      	bne.n	800b512 <get_fat.isra.9+0xd2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4be:	00a9      	lsls	r1, r5, #2
 800b4c0:	343c      	adds	r4, #60	; 0x3c
 800b4c2:	fbb1 f5f3 	udiv	r5, r1, r3
 800b4c6:	fb03 1115 	mls	r1, r3, r5, r1
 800b4ca:	1862      	adds	r2, r4, r1
	rv = rv << 8 | ptr[0];
 800b4cc:	5c60      	ldrb	r0, [r4, r1]
	rv = rv << 8 | ptr[1];
 800b4ce:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 800b4d0:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800b4d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800b4d6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4da:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800b4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4e0:	8982      	ldrh	r2, [r0, #12]
 800b4e2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4e6:	0851      	lsrs	r1, r2, #1
 800b4e8:	fbb5 f1f1 	udiv	r1, r5, r1
 800b4ec:	4431      	add	r1, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4ee:	4299      	cmp	r1, r3
 800b4f0:	d003      	beq.n	800b4fa <get_fat.isra.9+0xba>
 800b4f2:	f7ff fcb9 	bl	800ae68 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4f6:	bb20      	cbnz	r0, 800b542 <get_fat.isra.9+0x102>
 800b4f8:	89a2      	ldrh	r2, [r4, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b4fa:	0069      	lsls	r1, r5, #1
 800b4fc:	343c      	adds	r4, #60	; 0x3c
 800b4fe:	fbb1 f3f2 	udiv	r3, r1, r2
 800b502:	fb02 1113 	mls	r1, r2, r3, r1
 800b506:	1863      	adds	r3, r4, r1
	rv = rv << 8 | ptr[0];
 800b508:	5c60      	ldrb	r0, [r4, r1]
 800b50a:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b50c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800b510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b512:	f7ff fca9 	bl	800ae68 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b516:	b9a0      	cbnz	r0, 800b542 <get_fat.isra.9+0x102>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	e7d0      	b.n	800b4be <get_fat.isra.9+0x7e>
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7ff fca3 	bl	800ae68 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b522:	b970      	cbnz	r0, 800b542 <get_fat.isra.9+0x102>
 800b524:	89a2      	ldrh	r2, [r4, #12]
 800b526:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b528:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 800b52c:	fbb6 f3f2 	udiv	r3, r6, r2
 800b530:	e7a0      	b.n	800b474 <get_fat.isra.9+0x34>
 800b532:	4620      	mov	r0, r4
 800b534:	f7ff fc98 	bl	800ae68 <move_window.part.6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b538:	b918      	cbnz	r0, 800b542 <get_fat.isra.9+0x102>
 800b53a:	89a2      	ldrh	r2, [r4, #12]
 800b53c:	fbb7 f0f2 	udiv	r0, r7, r2
 800b540:	e7a3      	b.n	800b48a <get_fat.isra.9+0x4a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b548 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b54c:	d22b      	bcs.n	800b5a6 <dir_sdi+0x5e>
 800b54e:	06ca      	lsls	r2, r1, #27
{
 800b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b552:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b554:	d125      	bne.n	800b5a2 <dir_sdi+0x5a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b556:	6881      	ldr	r1, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800b558:	6144      	str	r4, [r0, #20]
 800b55a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800b55c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b55e:	bb29      	cbnz	r1, 800b5ac <dir_sdi+0x64>
 800b560:	7833      	ldrb	r3, [r6, #0]
 800b562:	2b02      	cmp	r3, #2
 800b564:	d901      	bls.n	800b56a <dir_sdi+0x22>
		clst = fs->dirbase;
 800b566:	6b33      	ldr	r3, [r6, #48]	; 0x30
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b568:	b9fb      	cbnz	r3, 800b5aa <dir_sdi+0x62>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b56a:	8933      	ldrh	r3, [r6, #8]
 800b56c:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800b570:	d917      	bls.n	800b5a2 <dir_sdi+0x5a>
		dp->sect = fs->dirbase;
 800b572:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b574:	61eb      	str	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800b576:	61a9      	str	r1, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b578:	b19b      	cbz	r3, 800b5a2 <dir_sdi+0x5a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b57a:	89b1      	ldrh	r1, [r6, #12]
 800b57c:	fbb4 f2f1 	udiv	r2, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b580:	363c      	adds	r6, #60	; 0x3c
 800b582:	fb01 4412 	mls	r4, r1, r2, r4
 800b586:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b588:	4413      	add	r3, r2
 800b58a:	e9c5 3407 	strd	r3, r4, [r5, #28]
	return FR_OK;
 800b58e:	2000      	movs	r0, #0
}
 800b590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b592:	6a33      	ldr	r3, [r6, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b594:	3b02      	subs	r3, #2
	clst -= 2;
 800b596:	1e8a      	subs	r2, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b598:	429a      	cmp	r2, r3
 800b59a:	d320      	bcc.n	800b5de <dir_sdi+0x96>
		dp->sect = clust2sect(fs, clst);
 800b59c:	2300      	movs	r3, #0
 800b59e:	e9c5 1306 	strd	r1, r3, [r5, #24]
		return FR_INT_ERR;
 800b5a2:	2002      	movs	r0, #2
}
 800b5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
 800b5a6:	2002      	movs	r0, #2
}
 800b5a8:	4770      	bx	lr
 800b5aa:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b5ac:	8973      	ldrh	r3, [r6, #10]
 800b5ae:	89b7      	ldrh	r7, [r6, #12]
 800b5b0:	fb07 f703 	mul.w	r7, r7, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5b4:	42bc      	cmp	r4, r7
 800b5b6:	d3ec      	bcc.n	800b592 <dir_sdi+0x4a>
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	e007      	b.n	800b5cc <dir_sdi+0x84>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5bc:	2801      	cmp	r0, #1
 800b5be:	d9f0      	bls.n	800b5a2 <dir_sdi+0x5a>
 800b5c0:	6a33      	ldr	r3, [r6, #32]
 800b5c2:	4283      	cmp	r3, r0
 800b5c4:	d9ed      	bls.n	800b5a2 <dir_sdi+0x5a>
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5c6:	42a7      	cmp	r7, r4
 800b5c8:	d8e4      	bhi.n	800b594 <dir_sdi+0x4c>
 800b5ca:	6828      	ldr	r0, [r5, #0]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b5cc:	f7ff ff38 	bl	800b440 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5d0:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b5d2:	4601      	mov	r1, r0
			ofs -= csz;
 800b5d4:	eba4 0407 	sub.w	r4, r4, r7
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5d8:	d1f0      	bne.n	800b5bc <dir_sdi+0x74>
 800b5da:	2001      	movs	r0, #1
}
 800b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return clst * fs->csize + fs->database;
 800b5de:	8973      	ldrh	r3, [r6, #10]
 800b5e0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800b5e2:	fb02 0303 	mla	r3, r2, r3, r0
		dp->sect = clust2sect(fs, clst);
 800b5e6:	61eb      	str	r3, [r5, #28]
 800b5e8:	e7c5      	b.n	800b576 <dir_sdi+0x2e>
 800b5ea:	bf00      	nop

0800b5ec <create_chain>:
{
 800b5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f0:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800b5f2:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 800b5f4:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800b5f6:	bb29      	cbnz	r1, 800b644 <create_chain+0x58>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b5f8:	69b5      	ldr	r5, [r6, #24]
 800b5fa:	6a33      	ldr	r3, [r6, #32]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b5fc:	b9f5      	cbnz	r5, 800b63c <create_chain+0x50>
 800b5fe:	2501      	movs	r5, #1
 800b600:	462c      	mov	r4, r5
 800b602:	e006      	b.n	800b612 <create_chain+0x26>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b604:	2801      	cmp	r0, #1
 800b606:	d015      	beq.n	800b634 <create_chain+0x48>
 800b608:	3001      	adds	r0, #1
 800b60a:	d031      	beq.n	800b670 <create_chain+0x84>
			if (ncl == scl) return 0;		/* No free cluster */
 800b60c:	42ac      	cmp	r4, r5
 800b60e:	d034      	beq.n	800b67a <create_chain+0x8e>
 800b610:	6a33      	ldr	r3, [r6, #32]
			ncl++;							/* Next cluster */
 800b612:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b614:	429c      	cmp	r4, r3
 800b616:	d302      	bcc.n	800b61e <create_chain+0x32>
				if (ncl > scl) return 0;	/* No free cluster */
 800b618:	2d01      	cmp	r5, #1
 800b61a:	d92e      	bls.n	800b67a <create_chain+0x8e>
				ncl = 2;
 800b61c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b61e:	4621      	mov	r1, r4
 800b620:	6838      	ldr	r0, [r7, #0]
 800b622:	f7ff ff0d 	bl	800b440 <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800b626:	2800      	cmp	r0, #0
 800b628:	d1ec      	bne.n	800b604 <create_chain+0x18>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b62a:	2c01      	cmp	r4, #1
 800b62c:	d902      	bls.n	800b634 <create_chain+0x48>
 800b62e:	6a33      	ldr	r3, [r6, #32]
 800b630:	429c      	cmp	r4, r3
 800b632:	d314      	bcc.n	800b65e <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b634:	2401      	movs	r4, #1
}
 800b636:	4620      	mov	r0, r4
 800b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b63c:	429d      	cmp	r5, r3
 800b63e:	bf28      	it	cs
 800b640:	2501      	movcs	r5, #1
 800b642:	e7dd      	b.n	800b600 <create_chain+0x14>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b644:	4630      	mov	r0, r6
 800b646:	f7ff fefb 	bl	800b440 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b64a:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b64c:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b64e:	d9f1      	bls.n	800b634 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d00d      	beq.n	800b670 <create_chain+0x84>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b654:	6a33      	ldr	r3, [r6, #32]
 800b656:	4283      	cmp	r3, r0
 800b658:	d8ed      	bhi.n	800b636 <create_chain+0x4a>
 800b65a:	4645      	mov	r5, r8
 800b65c:	e7d0      	b.n	800b600 <create_chain+0x14>
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295
 800b662:	4621      	mov	r1, r4
 800b664:	4630      	mov	r0, r6
 800b666:	f7ff fe3f 	bl	800b2e8 <put_fat.part.8>
		if (res == FR_OK && clst != 0) {
 800b66a:	b150      	cbz	r0, 800b682 <create_chain+0x96>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b66c:	2801      	cmp	r0, #1
 800b66e:	d1e1      	bne.n	800b634 <create_chain+0x48>
				ncl = 2;
 800b670:	f04f 34ff 	mov.w	r4, #4294967295
}
 800b674:	4620      	mov	r0, r4
 800b676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (ncl > scl) return 0;	/* No free cluster */
 800b67a:	2400      	movs	r4, #0
}
 800b67c:	4620      	mov	r0, r4
 800b67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (res == FR_OK && clst != 0) {
 800b682:	f1b8 0f00 	cmp.w	r8, #0
 800b686:	d00c      	beq.n	800b6a2 <create_chain+0xb6>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b688:	f1b8 0f01 	cmp.w	r8, #1
 800b68c:	d9d2      	bls.n	800b634 <create_chain+0x48>
 800b68e:	6a33      	ldr	r3, [r6, #32]
 800b690:	4598      	cmp	r8, r3
 800b692:	d2cf      	bcs.n	800b634 <create_chain+0x48>
 800b694:	4641      	mov	r1, r8
 800b696:	4622      	mov	r2, r4
 800b698:	4630      	mov	r0, r6
 800b69a:	f7ff fe25 	bl	800b2e8 <put_fat.part.8>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d1e4      	bne.n	800b66c <create_chain+0x80>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6a2:	e9d6 2307 	ldrd	r2, r3, [r6, #28]
 800b6a6:	3b02      	subs	r3, #2
 800b6a8:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 800b6aa:	61b4      	str	r4, [r6, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6ac:	d801      	bhi.n	800b6b2 <create_chain+0xc6>
 800b6ae:	3a01      	subs	r2, #1
 800b6b0:	61f2      	str	r2, [r6, #28]
		fs->fsi_flag |= 1;
 800b6b2:	7933      	ldrb	r3, [r6, #4]
 800b6b4:	f043 0301 	orr.w	r3, r3, #1
 800b6b8:	7133      	strb	r3, [r6, #4]
 800b6ba:	e7bc      	b.n	800b636 <create_chain+0x4a>

0800b6bc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b6bc:	2901      	cmp	r1, #1
 800b6be:	d93f      	bls.n	800b740 <remove_chain+0x84>
{
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800b6c2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b6c4:	6a2b      	ldr	r3, [r5, #32]
 800b6c6:	428b      	cmp	r3, r1
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	d92c      	bls.n	800b728 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b6ce:	bb3a      	cbnz	r2, 800b720 <remove_chain+0x64>
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	e01b      	b.n	800b70c <remove_chain+0x50>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6d4:	2e01      	cmp	r6, #1
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	d026      	beq.n	800b728 <remove_chain+0x6c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6da:	1c73      	adds	r3, r6, #1
 800b6dc:	d032      	beq.n	800b744 <remove_chain+0x88>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b6de:	2c01      	cmp	r4, #1
 800b6e0:	d922      	bls.n	800b728 <remove_chain+0x6c>
 800b6e2:	6a2b      	ldr	r3, [r5, #32]
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	d21f      	bcs.n	800b728 <remove_chain+0x6c>
 800b6e8:	f7ff fdfe 	bl	800b2e8 <put_fat.part.8>
			if (res != FR_OK) return res;
 800b6ec:	b9b8      	cbnz	r0, 800b71e <remove_chain+0x62>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b6ee:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 800b6f2:	1e91      	subs	r1, r2, #2
 800b6f4:	428b      	cmp	r3, r1
 800b6f6:	d205      	bcs.n	800b704 <remove_chain+0x48>
			fs->fsi_flag |= 1;
 800b6f8:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 800b6fa:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 800b6fc:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 800b700:	61eb      	str	r3, [r5, #28]
			fs->fsi_flag |= 1;
 800b702:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b704:	42b2      	cmp	r2, r6
 800b706:	d909      	bls.n	800b71c <remove_chain+0x60>
 800b708:	6838      	ldr	r0, [r7, #0]
 800b70a:	4634      	mov	r4, r6
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b70c:	4621      	mov	r1, r4
 800b70e:	f7ff fe97 	bl	800b440 <get_fat.isra.9>
 800b712:	4621      	mov	r1, r4
		if (nxt == 0) break;				/* Empty cluster? */
 800b714:	4606      	mov	r6, r0
 800b716:	2200      	movs	r2, #0
 800b718:	2800      	cmp	r0, #0
 800b71a:	d1db      	bne.n	800b6d4 <remove_chain+0x18>
	return FR_OK;
 800b71c:	2000      	movs	r0, #0
}
 800b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b720:	2a01      	cmp	r2, #1
 800b722:	d901      	bls.n	800b728 <remove_chain+0x6c>
 800b724:	4293      	cmp	r3, r2
 800b726:	d801      	bhi.n	800b72c <remove_chain+0x70>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b728:	2002      	movs	r0, #2
}
 800b72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b72c:	4611      	mov	r1, r2
 800b72e:	4628      	mov	r0, r5
 800b730:	f04f 32ff 	mov.w	r2, #4294967295
 800b734:	f7ff fdd8 	bl	800b2e8 <put_fat.part.8>
		if (res != FR_OK) return res;
 800b738:	2800      	cmp	r0, #0
 800b73a:	d1f0      	bne.n	800b71e <remove_chain+0x62>
 800b73c:	6838      	ldr	r0, [r7, #0]
 800b73e:	e7e5      	b.n	800b70c <remove_chain+0x50>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b740:	2002      	movs	r0, #2
}
 800b742:	4770      	bx	lr
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b744:	2001      	movs	r0, #1
}
 800b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b748 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b748:	69c2      	ldr	r2, [r0, #28]
 800b74a:	b312      	cbz	r2, 800b792 <dir_next+0x4a>
{
 800b74c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b750:	6945      	ldr	r5, [r0, #20]
 800b752:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b754:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800b758:	d218      	bcs.n	800b78c <dir_next+0x44>
	FATFS *fs = dp->obj.fs;
 800b75a:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b75c:	89b3      	ldrh	r3, [r6, #12]
 800b75e:	4604      	mov	r4, r0
 800b760:	fbb5 f0f3 	udiv	r0, r5, r3
 800b764:	fb03 5310 	mls	r3, r3, r0, r5
 800b768:	460f      	mov	r7, r1
 800b76a:	b93b      	cbnz	r3, 800b77c <dir_next+0x34>
		if (!dp->clust) {		/* Static table */
 800b76c:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800b76e:	3201      	adds	r2, #1
 800b770:	61e2      	str	r2, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800b772:	b981      	cbnz	r1, 800b796 <dir_next+0x4e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b774:	8932      	ldrh	r2, [r6, #8]
 800b776:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800b77a:	d933      	bls.n	800b7e4 <dir_next+0x9c>
 800b77c:	f106 073c 	add.w	r7, r6, #60	; 0x3c
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b780:	443b      	add	r3, r7
 800b782:	6223      	str	r3, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 800b784:	6165      	str	r5, [r4, #20]
	return FR_OK;
 800b786:	2000      	movs	r0, #0
}
 800b788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b78c:	2004      	movs	r0, #4
}
 800b78e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b792:	2004      	movs	r0, #4
}
 800b794:	4770      	bx	lr
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b796:	8972      	ldrh	r2, [r6, #10]
 800b798:	3a01      	subs	r2, #1
 800b79a:	4202      	tst	r2, r0
 800b79c:	d1ee      	bne.n	800b77c <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7ff fe4e 	bl	800b440 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b7a4:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b7a6:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b7a8:	d963      	bls.n	800b872 <dir_next+0x12a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b7aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7ae:	d021      	beq.n	800b7f4 <dir_next+0xac>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b7b0:	6a33      	ldr	r3, [r6, #32]
 800b7b2:	4283      	cmp	r3, r0
 800b7b4:	d920      	bls.n	800b7f8 <dir_next+0xb0>
 800b7b6:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 800b7ba:	f1a0 0902 	sub.w	r9, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7be:	3b02      	subs	r3, #2
 800b7c0:	454b      	cmp	r3, r9
	return clst * fs->csize + fs->database;
 800b7c2:	bf84      	itt	hi
 800b7c4:	8972      	ldrhhi	r2, [r6, #10]
 800b7c6:	6b73      	ldrhi	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 800b7c8:	f8c4 8018 	str.w	r8, [r4, #24]
	return clst * fs->csize + fs->database;
 800b7cc:	bf88      	it	hi
 800b7ce:	fb09 3202 	mlahi	r2, r9, r2, r3
 800b7d2:	89b3      	ldrh	r3, [r6, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7d4:	bf98      	it	ls
 800b7d6:	2200      	movls	r2, #0
				dp->sect = clust2sect(fs, clst);
 800b7d8:	61e2      	str	r2, [r4, #28]
 800b7da:	fbb5 f2f3 	udiv	r2, r5, r3
 800b7de:	fb03 5312 	mls	r3, r3, r2, r5
 800b7e2:	e7cd      	b.n	800b780 <dir_next+0x38>
				dp->sect = 0; return FR_NO_FILE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61e3      	str	r3, [r4, #28]
 800b7e8:	2004      	movs	r0, #4
 800b7ea:	e7d0      	b.n	800b78e <dir_next+0x46>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7ff fab5 	bl	800ad5c <sync_window.part.5>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b7f2:	b190      	cbz	r0, 800b81a <dir_next+0xd2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	e7ca      	b.n	800b78e <dir_next+0x46>
					if (!stretch) {								/* If no stretch, report EOT */
 800b7f8:	2f00      	cmp	r7, #0
 800b7fa:	d0f3      	beq.n	800b7e4 <dir_next+0x9c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b7fc:	69a1      	ldr	r1, [r4, #24]
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7ff fef4 	bl	800b5ec <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b804:	4680      	mov	r8, r0
 800b806:	2800      	cmp	r0, #0
 800b808:	d035      	beq.n	800b876 <dir_next+0x12e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b80a:	2801      	cmp	r0, #1
 800b80c:	d031      	beq.n	800b872 <dir_next+0x12a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b80e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b812:	d0ef      	beq.n	800b7f4 <dir_next+0xac>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b814:	78f3      	ldrb	r3, [r6, #3]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1e8      	bne.n	800b7ec <dir_next+0xa4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b81a:	89b2      	ldrh	r2, [r6, #12]
 800b81c:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 800b820:	443a      	add	r2, r7
	BYTE *d = (BYTE*)dst;
 800b822:	463b      	mov	r3, r7
		*d++ = (BYTE)val;
 800b824:	2100      	movs	r1, #0
 800b826:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d1fb      	bne.n	800b826 <dir_next+0xde>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b82e:	6a33      	ldr	r3, [r6, #32]
 800b830:	8971      	ldrh	r1, [r6, #10]
 800b832:	1e9a      	subs	r2, r3, #2
	clst -= 2;
 800b834:	f1a8 0902 	sub.w	r9, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b838:	4591      	cmp	r9, r2
	return clst * fs->csize + fs->database;
 800b83a:	bf36      	itet	cc
 800b83c:	6b72      	ldrcc	r2, [r6, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b83e:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
 800b840:	fb09 2201 	mlacc	r2, r9, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b844:	63b2      	str	r2, [r6, #56]	; 0x38
 800b846:	b1e9      	cbz	r1, 800b884 <dir_next+0x13c>
 800b848:	f04f 0b00 	mov.w	fp, #0
						fs->wflag = 1;
 800b84c:	f04f 0a01 	mov.w	sl, #1
 800b850:	e005      	b.n	800b85e <dir_next+0x116>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b852:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800b854:	8973      	ldrh	r3, [r6, #10]
 800b856:	3201      	adds	r2, #1
 800b858:	455b      	cmp	r3, fp
 800b85a:	63b2      	str	r2, [r6, #56]	; 0x38
 800b85c:	d90d      	bls.n	800b87a <dir_next+0x132>
						fs->wflag = 1;
 800b85e:	f886 a003 	strb.w	sl, [r6, #3]
 800b862:	4630      	mov	r0, r6
 800b864:	f7ff fa7a 	bl	800ad5c <sync_window.part.5>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b868:	f10b 0b01 	add.w	fp, fp, #1
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d0f0      	beq.n	800b852 <dir_next+0x10a>
 800b870:	e7c0      	b.n	800b7f4 <dir_next+0xac>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b872:	2002      	movs	r0, #2
 800b874:	e78b      	b.n	800b78e <dir_next+0x46>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b876:	2007      	movs	r0, #7
 800b878:	e789      	b.n	800b78e <dir_next+0x46>
 800b87a:	6a33      	ldr	r3, [r6, #32]
					fs->winsect -= n;							/* Restore window offset */
 800b87c:	eba2 020b 	sub.w	r2, r2, fp
 800b880:	63b2      	str	r2, [r6, #56]	; 0x38
 800b882:	e79c      	b.n	800b7be <dir_next+0x76>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b884:	468b      	mov	fp, r1
 800b886:	e7f9      	b.n	800b87c <dir_next+0x134>

0800b888 <dir_find>:
{
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b88c:	2100      	movs	r1, #0
{
 800b88e:	b087      	sub	sp, #28
 800b890:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800b892:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b894:	f7ff fe58 	bl	800b548 <dir_sdi>
	if (res != FR_OK) return res;
 800b898:	4682      	mov	sl, r0
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d145      	bne.n	800b92a <dir_find+0xa2>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b89e:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a2:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800b8a6:	632b      	str	r3, [r5, #48]	; 0x30
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8a8:	4698      	mov	r8, r3
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8aa:	46d9      	mov	r9, fp
 800b8ac:	e00b      	b.n	800b8c6 <dir_find+0x3e>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b8ae:	2b0f      	cmp	r3, #15
 800b8b0:	d03f      	beq.n	800b932 <dir_find+0xaa>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8b2:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
 800b8b6:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f7ff ff43 	bl	800b748 <dir_next>
	} while (res == FR_OK);
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d14c      	bne.n	800b960 <dir_find+0xd8>
		res = move_window(fs, dp->sect);
 800b8c6:	69e9      	ldr	r1, [r5, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	4299      	cmp	r1, r3
 800b8cc:	d004      	beq.n	800b8d8 <dir_find+0x50>
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7ff faca 	bl	800ae68 <move_window.part.6>
		if (res != FR_OK) break;
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d143      	bne.n	800b960 <dir_find+0xd8>
		c = dp->dir[DIR_Name];
 800b8d8:	6a2c      	ldr	r4, [r5, #32]
 800b8da:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b8dc:	2e00      	cmp	r6, #0
 800b8de:	d05b      	beq.n	800b998 <dir_find+0x110>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b8e0:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b8e2:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b8e4:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800b8e8:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b8ea:	d0e2      	beq.n	800b8b2 <dir_find+0x2a>
 800b8ec:	0712      	lsls	r2, r2, #28
 800b8ee:	d4de      	bmi.n	800b8ae <dir_find+0x26>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b8f0:	2b0f      	cmp	r3, #15
 800b8f2:	d01e      	beq.n	800b932 <dir_find+0xaa>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b8f4:	f1b9 0f00 	cmp.w	r9, #0
 800b8f8:	d037      	beq.n	800b96a <dir_find+0xe2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b8fa:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b8fe:	07db      	lsls	r3, r3, #31
 800b900:	d4d7      	bmi.n	800b8b2 <dir_find+0x2a>
		r = *d++ - *s++;
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f810 3b0b 	ldrb.w	r3, [r0], #11
 800b90a:	f811 2f24 	ldrb.w	r2, [r1, #36]!
 800b90e:	3401      	adds	r4, #1
 800b910:	1a9b      	subs	r3, r3, r2
	} while (--cnt && r == 0);
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1cd      	bne.n	800b8b2 <dir_find+0x2a>
		r = *d++ - *s++;
 800b916:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b91a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	} while (--cnt && r == 0);
 800b91e:	4284      	cmp	r4, r0
		r = *d++ - *s++;
 800b920:	eba3 0302 	sub.w	r3, r3, r2
	} while (--cnt && r == 0);
 800b924:	d1f5      	bne.n	800b912 <dir_find+0x8a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1c3      	bne.n	800b8b2 <dir_find+0x2a>
}
 800b92a:	4650      	mov	r0, sl
 800b92c:	b007      	add	sp, #28
 800b92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b932:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b936:	0658      	lsls	r0, r3, #25
 800b938:	d4bf      	bmi.n	800b8ba <dir_find+0x32>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b93a:	0671      	lsls	r1, r6, #25
 800b93c:	d527      	bpl.n	800b98e <dir_find+0x106>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b93e:	696b      	ldr	r3, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 800b940:	f894 b00d 	ldrb.w	fp, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b944:	632b      	str	r3, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b946:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b94a:	7b63      	ldrb	r3, [r4, #13]
 800b94c:	455b      	cmp	r3, fp
 800b94e:	d029      	beq.n	800b9a4 <dir_find+0x11c>
 800b950:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800b954:	2100      	movs	r1, #0
 800b956:	4628      	mov	r0, r5
 800b958:	f7ff fef6 	bl	800b748 <dir_next>
	} while (res == FR_OK);
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d0b2      	beq.n	800b8c6 <dir_find+0x3e>
 800b960:	4682      	mov	sl, r0
}
 800b962:	4650      	mov	r0, sl
 800b964:	b007      	add	sp, #28
 800b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96a:	f104 000b 	add.w	r0, r4, #11
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b96e:	4621      	mov	r1, r4
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b970:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b974:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 800b978:	ea43 0959 	orr.w	r9, r3, r9, lsr #1
 800b97c:	fa52 f989 	uxtab	r9, r2, r9
	} while (--n);
 800b980:	4281      	cmp	r1, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b982:	fa5f f989 	uxtb.w	r9, r9
	} while (--n);
 800b986:	d1f3      	bne.n	800b970 <dir_find+0xe8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b988:	45cb      	cmp	fp, r9
 800b98a:	d1b6      	bne.n	800b8fa <dir_find+0x72>
 800b98c:	e7cd      	b.n	800b92a <dir_find+0xa2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b98e:	45b1      	cmp	r9, r6
 800b990:	d0db      	beq.n	800b94a <dir_find+0xc2>
 800b992:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800b996:	e7dd      	b.n	800b954 <dir_find+0xcc>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b998:	f04f 0a04 	mov.w	sl, #4
}
 800b99c:	4650      	mov	r0, sl
 800b99e:	b007      	add	sp, #28
 800b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rv = rv << 8 | ptr[0];
 800b9a4:	7ee2      	ldrb	r2, [r4, #27]
 800b9a6:	7ea3      	ldrb	r3, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b9a8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800b9ac:	d1d0      	bne.n	800b950 <dir_find+0xc8>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b9ae:	7823      	ldrb	r3, [r4, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9b0:	6939      	ldr	r1, [r7, #16]
 800b9b2:	4a2a      	ldr	r2, [pc, #168]	; (800ba5c <dir_find+0x1d4>)
 800b9b4:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b9b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800b9c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800b9c4:	2101      	movs	r1, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b9c6:	e9cd b700 	strd	fp, r7, [sp]
 800b9ca:	e9cd a502 	strd	sl, r5, [sp, #8]
 800b9ce:	9f04      	ldr	r7, [sp, #16]
 800b9d0:	9605      	str	r6, [sp, #20]
 800b9d2:	4625      	mov	r5, r4
 800b9d4:	4691      	mov	r9, r2
 800b9d6:	461c      	mov	r4, r3
 800b9d8:	460b      	mov	r3, r1
 800b9da:	e011      	b.n	800ba00 <dir_find+0x178>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b9dc:	2cfe      	cmp	r4, #254	; 0xfe
 800b9de:	d81d      	bhi.n	800ba1c <dir_find+0x194>
 800b9e0:	f001 fb08 	bl	800cff4 <ff_wtoupper>
 800b9e4:	4683      	mov	fp, r0
 800b9e6:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b9ea:	f001 fb03 	bl	800cff4 <ff_wtoupper>
 800b9ee:	4583      	cmp	fp, r0
 800b9f0:	d114      	bne.n	800ba1c <dir_find+0x194>
	rv = rv << 8 | ptr[0];
 800b9f2:	4633      	mov	r3, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b9f4:	4654      	mov	r4, sl
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9f6:	4a1a      	ldr	r2, [pc, #104]	; (800ba60 <dir_find+0x1d8>)
 800b9f8:	454a      	cmp	r2, r9
 800b9fa:	d016      	beq.n	800ba2a <dir_find+0x1a2>
 800b9fc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
	rv = rv << 8 | ptr[0];
 800ba00:	5c6e      	ldrb	r6, [r5, r1]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ba02:	1868      	adds	r0, r5, r1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba04:	f104 0a01 	add.w	sl, r4, #1
	rv = rv << 8 | ptr[0];
 800ba08:	7840      	ldrb	r0, [r0, #1]
 800ba0a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba0e:	4630      	mov	r0, r6
		if (wc) {
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e3      	bne.n	800b9dc <dir_find+0x154>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ba14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba18:	4296      	cmp	r6, r2
 800ba1a:	d0ec      	beq.n	800b9f6 <dir_find+0x16e>
 800ba1c:	e9dd b700 	ldrd	fp, r7, [sp]
 800ba20:	e9dd a502 	ldrd	sl, r5, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba24:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800ba28:	e747      	b.n	800b8ba <dir_find+0x32>
 800ba2a:	469c      	mov	ip, r3
 800ba2c:	4623      	mov	r3, r4
 800ba2e:	462c      	mov	r4, r5
 800ba30:	e9dd b700 	ldrd	fp, r7, [sp]
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ba34:	7822      	ldrb	r2, [r4, #0]
 800ba36:	9e05      	ldr	r6, [sp, #20]
 800ba38:	0652      	lsls	r2, r2, #25
 800ba3a:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800ba3e:	d508      	bpl.n	800ba52 <dir_find+0x1ca>
 800ba40:	f1bc 0f00 	cmp.w	ip, #0
 800ba44:	d005      	beq.n	800ba52 <dir_find+0x1ca>
 800ba46:	9a04      	ldr	r2, [sp, #16]
 800ba48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f47f af7f 	bne.w	800b950 <dir_find+0xc8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba52:	3e01      	subs	r6, #1
 800ba54:	fa5f f986 	uxtb.w	r9, r6
 800ba58:	e72f      	b.n	800b8ba <dir_find+0x32>
 800ba5a:	bf00      	nop
 800ba5c:	080128cc 	.word	0x080128cc
 800ba60:	080128d8 	.word	0x080128d8

0800ba64 <follow_path>:
{
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800ba68:	f8d0 b000 	ldr.w	fp, [r0]
{
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	4607      	mov	r7, r0
 800ba70:	460e      	mov	r6, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba76:	2b2f      	cmp	r3, #47	; 0x2f
 800ba78:	d0fa      	beq.n	800ba70 <follow_path+0xc>
 800ba7a:	2b5c      	cmp	r3, #92	; 0x5c
 800ba7c:	d0f8      	beq.n	800ba70 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800ba7e:	2100      	movs	r1, #0
 800ba80:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba82:	7830      	ldrb	r0, [r6, #0]
 800ba84:	281f      	cmp	r0, #31
 800ba86:	f240 8133 	bls.w	800bcf0 <follow_path+0x28c>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ba8a:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800ba8c:	465b      	mov	r3, fp
		w = p[si++];					/* Get a character */
 800ba8e:	b280      	uxth	r0, r0
		if (w < ' ') break;				/* Break if end of the path name */
 800ba90:	281f      	cmp	r0, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ba92:	691d      	ldr	r5, [r3, #16]
		if (w < ' ') break;				/* Break if end of the path name */
 800ba94:	d946      	bls.n	800bb24 <follow_path+0xc0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ba96:	282f      	cmp	r0, #47	; 0x2f
 800ba98:	d02c      	beq.n	800baf4 <follow_path+0x90>
 800ba9a:	285c      	cmp	r0, #92	; 0x5c
 800ba9c:	d02a      	beq.n	800baf4 <follow_path+0x90>
 800ba9e:	f1a5 0902 	sub.w	r9, r5, #2
 800baa2:	46b0      	mov	r8, r6
		w = p[si++];					/* Get a character */
 800baa4:	2401      	movs	r4, #1
 800baa6:	e010      	b.n	800baca <follow_path+0x66>
		lfn[di++] = w;					/* Store the Unicode character */
 800baa8:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800baac:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800bab0:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 800bab2:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800bab6:	f240 8117 	bls.w	800bce8 <follow_path+0x284>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800baba:	282f      	cmp	r0, #47	; 0x2f
 800babc:	d01c      	beq.n	800baf8 <follow_path+0x94>
 800babe:	285c      	cmp	r0, #92	; 0x5c
 800bac0:	d01a      	beq.n	800baf8 <follow_path+0x94>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bac6:	d011      	beq.n	800baec <follow_path+0x88>
 800bac8:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800baca:	2101      	movs	r1, #1
 800bacc:	f001 fa6e 	bl	800cfac <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bad0:	b160      	cbz	r0, 800baec <follow_path+0x88>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bad2:	287f      	cmp	r0, #127	; 0x7f
 800bad4:	d8e8      	bhi.n	800baa8 <follow_path+0x44>
	while (*str && *str != chr) str++;
 800bad6:	2822      	cmp	r0, #34	; 0x22
 800bad8:	d008      	beq.n	800baec <follow_path+0x88>
 800bada:	4a96      	ldr	r2, [pc, #600]	; (800bd34 <follow_path+0x2d0>)
 800badc:	232a      	movs	r3, #42	; 0x2a
 800bade:	e003      	b.n	800bae8 <follow_path+0x84>
 800bae0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0df      	beq.n	800baa8 <follow_path+0x44>
 800bae8:	4298      	cmp	r0, r3
 800baea:	d1f9      	bne.n	800bae0 <follow_path+0x7c>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800baec:	2006      	movs	r0, #6
}
 800baee:	b005      	add	sp, #20
 800baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800baf4:	2400      	movs	r4, #0
		w = p[si++];					/* Get a character */
 800baf6:	2301      	movs	r3, #1
 800baf8:	4433      	add	r3, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bafa:	781a      	ldrb	r2, [r3, #0]
 800bafc:	2a2f      	cmp	r2, #47	; 0x2f
 800bafe:	461e      	mov	r6, r3
 800bb00:	f103 0301 	add.w	r3, r3, #1
 800bb04:	d0f9      	beq.n	800bafa <follow_path+0x96>
 800bb06:	2a5c      	cmp	r2, #92	; 0x5c
 800bb08:	d0f7      	beq.n	800bafa <follow_path+0x96>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bb0a:	b15c      	cbz	r4, 800bb24 <follow_path+0xc0>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bb0c:	f04f 0900 	mov.w	r9, #0
 800bb10:	eb05 0244 	add.w	r2, r5, r4, lsl #1
		w = lfn[di - 1];
 800bb14:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800bb18:	2b20      	cmp	r3, #32
 800bb1a:	d001      	beq.n	800bb20 <follow_path+0xbc>
 800bb1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb1e:	d104      	bne.n	800bb2a <follow_path+0xc6>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bb20:	3c01      	subs	r4, #1
 800bb22:	d1f7      	bne.n	800bb14 <follow_path+0xb0>
	lfn[di] = 0;						/* LFN is created */
 800bb24:	2300      	movs	r3, #0
 800bb26:	802b      	strh	r3, [r5, #0]
 800bb28:	e7e0      	b.n	800baec <follow_path+0x88>
 800bb2a:	9b01      	ldr	r3, [sp, #4]
 800bb2c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 800bb30:	eb05 0244 	add.w	r2, r5, r4, lsl #1
	mem_set(dp->fn, ' ', 11);
 800bb34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb38:	f107 002f 	add.w	r0, r7, #47	; 0x2f
		*d++ = (BYTE)val;
 800bb3c:	2120      	movs	r1, #32
 800bb3e:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 800bb42:	4283      	cmp	r3, r0
 800bb44:	d1fb      	bne.n	800bb3e <follow_path+0xda>
 800bb46:	1eab      	subs	r3, r5, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bb48:	f04f 0800 	mov.w	r8, #0
 800bb4c:	e001      	b.n	800bb52 <follow_path+0xee>
 800bb4e:	f108 0801 	add.w	r8, r8, #1
 800bb52:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 800bb56:	2820      	cmp	r0, #32
 800bb58:	d0f9      	beq.n	800bb4e <follow_path+0xea>
 800bb5a:	282e      	cmp	r0, #46	; 0x2e
 800bb5c:	d0f7      	beq.n	800bb4e <follow_path+0xea>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bb5e:	f1b8 0f00 	cmp.w	r8, #0
 800bb62:	d001      	beq.n	800bb68 <follow_path+0x104>
 800bb64:	f049 0903 	orr.w	r9, r9, #3
 800bb68:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bb6a:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800bb6e:	2a2e      	cmp	r2, #46	; 0x2e
 800bb70:	d001      	beq.n	800bb76 <follow_path+0x112>
 800bb72:	3c01      	subs	r4, #1
 800bb74:	d1f9      	bne.n	800bb6a <follow_path+0x106>
		dp->fn[i++] = (BYTE)w;
 800bb76:	2300      	movs	r3, #0
 800bb78:	469a      	mov	sl, r3
 800bb7a:	2208      	movs	r2, #8
		w = lfn[si++];					/* Get an LFN character */
 800bb7c:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 800bb80:	b340      	cbz	r0, 800bbd4 <follow_path+0x170>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bb82:	2820      	cmp	r0, #32
 800bb84:	d073      	beq.n	800bc6e <follow_path+0x20a>
 800bb86:	282e      	cmp	r0, #46	; 0x2e
 800bb88:	d076      	beq.n	800bc78 <follow_path+0x214>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d21a      	bcs.n	800bbc4 <follow_path+0x160>
 800bb8e:	4544      	cmp	r4, r8
 800bb90:	d074      	beq.n	800bc7c <follow_path+0x218>
		if (w >= 0x80) {				/* Non ASCII character */
 800bb92:	287f      	cmp	r0, #127	; 0x7f
 800bb94:	f200 808f 	bhi.w	800bcb6 <follow_path+0x252>
	while (*str && *str != chr) str++;
 800bb98:	282b      	cmp	r0, #43	; 0x2b
 800bb9a:	f000 809d 	beq.w	800bcd8 <follow_path+0x274>
 800bb9e:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800bd3c <follow_path+0x2d8>
 800bba2:	212c      	movs	r1, #44	; 0x2c
 800bba4:	4281      	cmp	r1, r0
 800bba6:	f000 8097 	beq.w	800bcd8 <follow_path+0x274>
 800bbaa:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d1f8      	bne.n	800bba4 <follow_path+0x140>
				if (IsUpper(w)) {		/* ASCII large capital */
 800bbb2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800bbb6:	2919      	cmp	r1, #25
 800bbb8:	f200 80a3 	bhi.w	800bd02 <follow_path+0x29e>
					b |= 2;
 800bbbc:	f04a 0a02 	orr.w	sl, sl, #2
 800bbc0:	b2c0      	uxtb	r0, r0
 800bbc2:	e08c      	b.n	800bcde <follow_path+0x27a>
			if (ni == 11) {				/* Long extension */
 800bbc4:	2a0b      	cmp	r2, #11
 800bbc6:	f000 80aa 	beq.w	800bd1e <follow_path+0x2ba>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bbca:	4544      	cmp	r4, r8
 800bbcc:	d058      	beq.n	800bc80 <follow_path+0x21c>
 800bbce:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 800bbd2:	d255      	bcs.n	800bc80 <follow_path+0x21c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bbd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbd8:	2be5      	cmp	r3, #229	; 0xe5
 800bbda:	bf04      	itt	eq
 800bbdc:	2305      	moveq	r3, #5
 800bbde:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800bbe2:	2a08      	cmp	r2, #8
 800bbe4:	bf04      	itt	eq
 800bbe6:	ea4f 0a8a 	moveq.w	sl, sl, lsl #2
 800bbea:	fa5f fa8a 	uxtbeq.w	sl, sl
 800bbee:	f00a 030c 	and.w	r3, sl, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bbf2:	2b0c      	cmp	r3, #12
 800bbf4:	d04c      	beq.n	800bc90 <follow_path+0x22c>
 800bbf6:	f00a 0a03 	and.w	sl, sl, #3
 800bbfa:	f1ba 0f03 	cmp.w	sl, #3
 800bbfe:	d047      	beq.n	800bc90 <follow_path+0x22c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bc00:	f019 0f02 	tst.w	r9, #2
 800bc04:	d108      	bne.n	800bc18 <follow_path+0x1b4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bc06:	f1ba 0f01 	cmp.w	sl, #1
 800bc0a:	bf08      	it	eq
 800bc0c:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	bf08      	it	eq
 800bc14:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc18:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f7ff fe33 	bl	800b888 <dir_find>
			ns = dp->fn[NSFLAG];
 800bc22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d13d      	bne.n	800bca6 <follow_path+0x242>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc2a:	075a      	lsls	r2, r3, #29
 800bc2c:	f53f af5f 	bmi.w	800baee <follow_path+0x8a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc30:	79bb      	ldrb	r3, [r7, #6]
 800bc32:	06db      	lsls	r3, r3, #27
 800bc34:	d56f      	bpl.n	800bd16 <follow_path+0x2b2>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc36:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 800bc3a:	6978      	ldr	r0, [r7, #20]
 800bc3c:	fbb0 f2f1 	udiv	r2, r0, r1
 800bc40:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
 800bc44:	fb01 0212 	mls	r2, r1, r2, r0
 800bc48:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 800bc4a:	f89b 1000 	ldrb.w	r1, [fp]
	rv = rv << 8 | ptr[0];
 800bc4e:	7ed8      	ldrb	r0, [r3, #27]
 800bc50:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800bc52:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800bc54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800bc58:	d105      	bne.n	800bc66 <follow_path+0x202>
	rv = rv << 8 | ptr[0];
 800bc5a:	7d59      	ldrb	r1, [r3, #21]
 800bc5c:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bc62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc66:	60ba      	str	r2, [r7, #8]
 800bc68:	7830      	ldrb	r0, [r6, #0]
 800bc6a:	683b      	ldr	r3, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc6c:	e70f      	b.n	800ba8e <follow_path+0x2a>
			cf |= NS_LOSS | NS_LFN; continue;
 800bc6e:	f049 0903 	orr.w	r9, r9, #3
 800bc72:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 800bc76:	e781      	b.n	800bb7c <follow_path+0x118>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bc78:	4544      	cmp	r4, r8
 800bc7a:	d1f8      	bne.n	800bc6e <follow_path+0x20a>
			if (ni == 11) {				/* Long extension */
 800bc7c:	2a0b      	cmp	r2, #11
 800bc7e:	d04e      	beq.n	800bd1e <follow_path+0x2ba>
			b <<= 2; continue;
 800bc80:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800bc84:	fa5f fa8a 	uxtb.w	sl, sl
 800bc88:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bc8a:	220b      	movs	r2, #11
 800bc8c:	2308      	movs	r3, #8
 800bc8e:	e7f0      	b.n	800bc72 <follow_path+0x20e>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc90:	f049 0902 	orr.w	r9, r9, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc94:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff fdf5 	bl	800b888 <dir_find>
			ns = dp->fn[NSFLAG];
 800bc9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d0c1      	beq.n	800bc2a <follow_path+0x1c6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bca6:	2804      	cmp	r0, #4
 800bca8:	f47f af21 	bne.w	800baee <follow_path+0x8a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bcac:	f013 0f04 	tst.w	r3, #4
 800bcb0:	bf08      	it	eq
 800bcb2:	2005      	moveq	r0, #5
 800bcb4:	e71b      	b.n	800baee <follow_path+0x8a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bcbc:	f001 f976 	bl	800cfac <ff_convert>
 800bcc0:	f049 0902 	orr.w	r9, r9, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bcc4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bcc8:	b130      	cbz	r0, 800bcd8 <follow_path+0x274>
 800bcca:	491b      	ldr	r1, [pc, #108]	; (800bd38 <follow_path+0x2d4>)
 800bccc:	4408      	add	r0, r1
 800bcce:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	f47f af60 	bne.w	800bb98 <follow_path+0x134>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bcd8:	f049 0903 	orr.w	r9, r9, #3
 800bcdc:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800bcde:	18f9      	adds	r1, r7, r3
 800bce0:	3301      	adds	r3, #1
 800bce2:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800bce6:	e7c4      	b.n	800bc72 <follow_path+0x20e>
	*path = &p[si];						/* Return pointer to the next segment */
 800bce8:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bcea:	f04f 0904 	mov.w	r9, #4
 800bcee:	e70f      	b.n	800bb10 <follow_path+0xac>
		dp->fn[NSFLAG] = NS_NONAME;
 800bcf0:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800bcf2:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800bcf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800bcf8:	b005      	add	sp, #20
 800bcfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800bcfe:	f7ff bc23 	b.w	800b548 <dir_sdi>
					if (IsLower(w)) {	/* ASCII small capital */
 800bd02:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800bd06:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800bd08:	bf97      	itett	ls
 800bd0a:	3820      	subls	r0, #32
 800bd0c:	b2c0      	uxtbhi	r0, r0
 800bd0e:	b2c0      	uxtbls	r0, r0
 800bd10:	f04a 0a01 	orrls.w	sl, sl, #1
 800bd14:	e7e3      	b.n	800bcde <follow_path+0x27a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd16:	2005      	movs	r0, #5
}
 800bd18:	b005      	add	sp, #20
 800bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd22:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 800bd24:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd28:	f47f af61 	bne.w	800bbee <follow_path+0x18a>
 800bd2c:	2305      	movs	r3, #5
 800bd2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800bd32:	e75c      	b.n	800bbee <follow_path+0x18a>
 800bd34:	080128dd 	.word	0x080128dd
 800bd38:	0801284c 	.word	0x0801284c
 800bd3c:	080128e9 	.word	0x080128e9

0800bd40 <dir_register>:
{
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd44:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800bd48:	f013 07a0 	ands.w	r7, r3, #160	; 0xa0
{
 800bd4c:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd4e:	f040 80f0 	bne.w	800bf32 <dir_register+0x1f2>
	FATFS *fs = dp->obj.fs;
 800bd52:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bd56:	f8da 3010 	ldr.w	r3, [sl, #16]
 800bd5a:	881a      	ldrh	r2, [r3, #0]
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	f000 817c 	beq.w	800c05a <dir_register+0x31a>
 800bd62:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800bd66:	3701      	adds	r7, #1
 800bd68:	2a00      	cmp	r2, #0
 800bd6a:	d1fa      	bne.n	800bd62 <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
 800bd6c:	f100 0524 	add.w	r5, r0, #36	; 0x24
 800bd70:	4604      	mov	r4, r0
 800bd72:	4629      	mov	r1, r5
 800bd74:	a807      	add	r0, sp, #28
 800bd76:	220c      	movs	r2, #12
 800bd78:	f7fe ffe6 	bl	800ad48 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bd7c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bd80:	07de      	lsls	r6, r3, #31
 800bd82:	d454      	bmi.n	800be2e <dir_register+0xee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bd84:	079b      	lsls	r3, r3, #30
 800bd86:	f140 80d2 	bpl.w	800bf2e <dir_register+0x1ee>
 800bd8a:	4bb5      	ldr	r3, [pc, #724]	; (800c060 <dir_register+0x320>)
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	fba3 3707 	umull	r3, r7, r3, r7
 800bd92:	08bf      	lsrs	r7, r7, #2
 800bd94:	3701      	adds	r7, #1
	res = dir_sdi(dp, 0);
 800bd96:	2100      	movs	r1, #0
 800bd98:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800bd9a:	f8d4 8000 	ldr.w	r8, [r4]
	res = dir_sdi(dp, 0);
 800bd9e:	f7ff fbd3 	bl	800b548 <dir_sdi>
	if (res == FR_OK) {
 800bda2:	4683      	mov	fp, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f040 80ae 	bne.w	800bf06 <dir_register+0x1c6>
		n = 0;
 800bdaa:	4606      	mov	r6, r0
 800bdac:	e008      	b.n	800bdc0 <dir_register+0x80>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bdae:	b1bb      	cbz	r3, 800bde0 <dir_register+0xa0>
				n = 0;					/* Not a blank entry. Restart to search */
 800bdb0:	2600      	movs	r6, #0
			res = dir_next(dp, 1);
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f7ff fcc7 	bl	800b748 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f040 80a2 	bne.w	800bf04 <dir_register+0x1c4>
			res = move_window(fs, dp->sect);
 800bdc0:	69e3      	ldr	r3, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bdc2:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	4640      	mov	r0, r8
 800bdca:	4619      	mov	r1, r3
 800bdcc:	d004      	beq.n	800bdd8 <dir_register+0x98>
 800bdce:	f7ff f84b 	bl	800ae68 <move_window.part.6>
			if (res != FR_OK) break;
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	f040 8096 	bne.w	800bf04 <dir_register+0x1c4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bdd8:	6a23      	ldr	r3, [r4, #32]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2be5      	cmp	r3, #229	; 0xe5
 800bdde:	d1e6      	bne.n	800bdae <dir_register+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bde0:	3601      	adds	r6, #1
 800bde2:	42b7      	cmp	r7, r6
 800bde4:	d1e5      	bne.n	800bdb2 <dir_register+0x72>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bde6:	1e7b      	subs	r3, r7, #1
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	f040 80b3 	bne.w	800bf54 <dir_register+0x214>
		res = move_window(fs, dp->sect);
 800bdee:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bdf0:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800bdf4:	4299      	cmp	r1, r3
 800bdf6:	f040 80a2 	bne.w	800bf3e <dir_register+0x1fe>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bdfa:	6a23      	ldr	r3, [r4, #32]
		*d++ = (BYTE)val;
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	f103 0220 	add.w	r2, r3, #32
 800be02:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 800be06:	4293      	cmp	r3, r2
 800be08:	d1fb      	bne.n	800be02 <dir_register+0xc2>
 800be0a:	4629      	mov	r1, r5
 800be0c:	220b      	movs	r2, #11
 800be0e:	6a20      	ldr	r0, [r4, #32]
 800be10:	f7fe ff9a 	bl	800ad48 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800be14:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800be18:	6a21      	ldr	r1, [r4, #32]
 800be1a:	f003 0318 	and.w	r3, r3, #24
			fs->wflag = 1;
 800be1e:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800be20:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800be22:	f88a 2003 	strb.w	r2, [sl, #3]
}
 800be26:	4658      	mov	r0, fp
 800be28:	b00b      	add	sp, #44	; 0x2c
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be2e:	2340      	movs	r3, #64	; 0x40
 800be30:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800be34:	220b      	movs	r2, #11
 800be36:	a907      	add	r1, sp, #28
 800be38:	4628      	mov	r0, r5
		for (n = 1; n < 100; n++) {
 800be3a:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800be3e:	4e89      	ldr	r6, [pc, #548]	; (800c064 <dir_register+0x324>)
 800be40:	f7fe ff82 	bl	800ad48 <mem_cpy.part.0>
		for (n = 1; n < 100; n++) {
 800be44:	4643      	mov	r3, r8
 800be46:	f10d 0c1b 	add.w	ip, sp, #27
 800be4a:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 800be4c:	f003 000f 	and.w	r0, r3, #15
 800be50:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 800be54:	2939      	cmp	r1, #57	; 0x39
 800be56:	bf88      	it	hi
 800be58:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 800be5c:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 800be5e:	f102 32ff 	add.w	r2, r2, #4294967295
 800be62:	f80c 1901 	strb.w	r1, [ip], #-1
	} while (seq);
 800be66:	d1f1      	bne.n	800be4c <dir_register+0x10c>
	ns[i] = '~';
 800be68:	a90a      	add	r1, sp, #40	; 0x28
 800be6a:	4411      	add	r1, r2
 800be6c:	207e      	movs	r0, #126	; 0x7e
 800be6e:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800be72:	2a00      	cmp	r2, #0
 800be74:	d050      	beq.n	800bf18 <dir_register+0x1d8>
 800be76:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800be7a:	2920      	cmp	r1, #32
 800be7c:	d008      	beq.n	800be90 <dir_register+0x150>
 800be7e:	4629      	mov	r1, r5
 800be80:	e003      	b.n	800be8a <dir_register+0x14a>
 800be82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be86:	2820      	cmp	r0, #32
 800be88:	d002      	beq.n	800be90 <dir_register+0x150>
 800be8a:	3301      	adds	r3, #1
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d1f8      	bne.n	800be82 <dir_register+0x142>
 800be90:	1e59      	subs	r1, r3, #1
 800be92:	4429      	add	r1, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800be94:	a80a      	add	r0, sp, #40	; 0x28
 800be96:	4410      	add	r0, r2
 800be98:	2a07      	cmp	r2, #7
 800be9a:	f103 0301 	add.w	r3, r3, #1
 800be9e:	bf96      	itet	ls
 800bea0:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
 800bea4:	2020      	movhi	r0, #32
 800bea6:	3201      	addls	r2, #1
	} while (j < 8);
 800bea8:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800beaa:	f801 0f01 	strb.w	r0, [r1, #1]!
	} while (j < 8);
 800beae:	d9f1      	bls.n	800be94 <dir_register+0x154>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800beb0:	4620      	mov	r0, r4
 800beb2:	f7ff fce9 	bl	800b888 <dir_find>
 800beb6:	4683      	mov	fp, r0
			if (res != FR_OK) break;
 800beb8:	bb80      	cbnz	r0, 800bf1c <dir_register+0x1dc>
		for (n = 1; n < 100; n++) {
 800beba:	f108 0801 	add.w	r8, r8, #1
 800bebe:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800bec2:	d023      	beq.n	800bf0c <dir_register+0x1cc>
 800bec4:	220b      	movs	r2, #11
 800bec6:	a907      	add	r1, sp, #28
 800bec8:	4628      	mov	r0, r5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800beca:	f8da 9010 	ldr.w	r9, [sl, #16]
 800bece:	f7fe ff3b 	bl	800ad48 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bed2:	f1b8 0f05 	cmp.w	r8, #5
 800bed6:	d913      	bls.n	800bf00 <dir_register+0x1c0>
 800bed8:	f1a9 0c02 	sub.w	ip, r9, #2
 800bedc:	4643      	mov	r3, r8
		while (*lfn) {	/* Create a CRC */
 800bede:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	d0af      	beq.n	800be46 <dir_register+0x106>
 800bee6:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800bee8:	f002 0001 	and.w	r0, r2, #1
 800beec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800bef0:	03d8      	lsls	r0, r3, #15
 800bef2:	bf48      	it	mi
 800bef4:	4073      	eormi	r3, r6
			for (i = 0; i < 16; i++) {
 800bef6:	3901      	subs	r1, #1
				wc >>= 1;
 800bef8:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 800befc:	d1f4      	bne.n	800bee8 <dir_register+0x1a8>
 800befe:	e7ee      	b.n	800bede <dir_register+0x19e>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf00:	4643      	mov	r3, r8
 800bf02:	e7a0      	b.n	800be46 <dir_register+0x106>
			if (res != FR_OK) break;
 800bf04:	4683      	mov	fp, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bf06:	f1bb 0f04 	cmp.w	fp, #4
 800bf0a:	d18c      	bne.n	800be26 <dir_register+0xe6>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bf0c:	f04f 0b07 	mov.w	fp, #7
}
 800bf10:	4658      	mov	r0, fp
 800bf12:	b00b      	add	sp, #44	; 0x2c
 800bf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bf18:	4613      	mov	r3, r2
 800bf1a:	e7b9      	b.n	800be90 <dir_register+0x150>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bf1c:	2804      	cmp	r0, #4
 800bf1e:	d182      	bne.n	800be26 <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bf20:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bf24:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf28:	079b      	lsls	r3, r3, #30
 800bf2a:	f53f af2e 	bmi.w	800bd8a <dir_register+0x4a>
 800bf2e:	2701      	movs	r7, #1
 800bf30:	e731      	b.n	800bd96 <dir_register+0x56>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bf32:	f04f 0b06 	mov.w	fp, #6
}
 800bf36:	4658      	mov	r0, fp
 800bf38:	b00b      	add	sp, #44	; 0x2c
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	4650      	mov	r0, sl
 800bf40:	f7fe ff92 	bl	800ae68 <move_window.part.6>
		if (res == FR_OK) {
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f43f af58 	beq.w	800bdfa <dir_register+0xba>
 800bf4a:	4683      	mov	fp, r0
}
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	b00b      	add	sp, #44	; 0x2c
 800bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bf54:	6961      	ldr	r1, [r4, #20]
 800bf56:	9b00      	ldr	r3, [sp, #0]
 800bf58:	4620      	mov	r0, r4
 800bf5a:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 800bf5e:	f7ff faf3 	bl	800b548 <dir_sdi>
		if (res == FR_OK) {
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d1f1      	bne.n	800bf4a <dir_register+0x20a>
	BYTE sum = 0;
 800bf66:	4602      	mov	r2, r0
		if (res == FR_OK) {
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bf6e:	01d3      	lsls	r3, r2, #7
 800bf70:	f811 6b01 	ldrb.w	r6, [r1], #1
 800bf74:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800bf78:	fa56 f383 	uxtab	r3, r6, r3
	} while (--n);
 800bf7c:	4281      	cmp	r1, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bf7e:	b2da      	uxtb	r2, r3
	} while (--n);
 800bf80:	d1f5      	bne.n	800bf6e <dir_register+0x22e>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bf82:	e9cd 5b02 	strd	r5, fp, [sp, #8]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bf86:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800c068 <dir_register+0x328>
 800bf8a:	9201      	str	r2, [sp, #4]
				res = move_window(fs, dp->sect);
 800bf8c:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf8e:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800bf92:	4299      	cmp	r1, r3
 800bf94:	d004      	beq.n	800bfa0 <dir_register+0x260>
 800bf96:	4650      	mov	r0, sl
 800bf98:	f7fe ff66 	bl	800ae68 <move_window.part.6>
				if (res != FR_OK) break;
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d1d4      	bne.n	800bf4a <dir_register+0x20a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bfa0:	f89d b000 	ldrb.w	fp, [sp]
 800bfa4:	6a21      	ldr	r1, [r4, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bfa6:	9e01      	ldr	r6, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bfa8:	f8da e010 	ldr.w	lr, [sl, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bfac:	734e      	strb	r6, [r1, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bfae:	f10b 32ff 	add.w	r2, fp, #4294967295
	dir[LDIR_Type] = 0;
 800bfb2:	2500      	movs	r5, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bfb4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bfb8:	f04f 060f 	mov.w	r6, #15
	dir[LDIR_Type] = 0;
 800bfbc:	730d      	strb	r5, [r1, #12]
	s = wc = 0;
 800bfbe:	462b      	mov	r3, r5
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bfc0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 800bfc4:	768d      	strb	r5, [r1, #26]
	s = wc = 0;
 800bfc6:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 800bfc8:	76cd      	strb	r5, [r1, #27]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bfca:	72ce      	strb	r6, [r1, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bfcc:	2501      	movs	r5, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bfce:	f64f 78ff 	movw	r8, #65535	; 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800bfd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800bfd6:	e016      	b.n	800c006 <dir_register+0x2c6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bfd8:	f83e 3012 	ldrh.w	r3, [lr, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfdc:	554b      	strb	r3, [r1, r5]
 800bfde:	0a1d      	lsrs	r5, r3, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bfe0:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val;
 800bfe2:	707d      	strb	r5, [r7, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bfe4:	bbbb      	cbnz	r3, 800c056 <dir_register+0x316>
	} while (++s < 13);
 800bfe6:	2e0c      	cmp	r6, #12
 800bfe8:	d821      	bhi.n	800c02e <dir_register+0x2ee>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bfea:	f819 3006 	ldrb.w	r3, [r9, r6]
 800bfee:	18cd      	adds	r5, r1, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800bff0:	f801 c003 	strb.w	ip, [r1, r3]
 800bff4:	3002      	adds	r0, #2
	*ptr++ = (BYTE)val;
 800bff6:	f885 c001 	strb.w	ip, [r5, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
	} while (++s < 13);
 800bffe:	280c      	cmp	r0, #12
 800c000:	d80e      	bhi.n	800c020 <dir_register+0x2e0>
 800c002:	f819 5000 	ldrb.w	r5, [r9, r0]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c006:	4543      	cmp	r3, r8
 800c008:	eb01 0705 	add.w	r7, r1, r5
 800c00c:	f100 0601 	add.w	r6, r0, #1
 800c010:	d1e2      	bne.n	800bfd8 <dir_register+0x298>
	*ptr++ = (BYTE)val;
 800c012:	4630      	mov	r0, r6
	} while (++s < 13);
 800c014:	280c      	cmp	r0, #12
	*ptr++ = (BYTE)val; val >>= 8;
 800c016:	f801 c005 	strb.w	ip, [r1, r5]
	*ptr++ = (BYTE)val;
 800c01a:	f887 c001 	strb.w	ip, [r7, #1]
	} while (++s < 13);
 800c01e:	d9f0      	bls.n	800c002 <dir_register+0x2c2>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c020:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c024:	4283      	cmp	r3, r0
 800c026:	d002      	beq.n	800c02e <dir_register+0x2ee>
 800c028:	f83e 3012 	ldrh.w	r3, [lr, r2, lsl #1]
 800c02c:	b90b      	cbnz	r3, 800c032 <dir_register+0x2f2>
 800c02e:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
				fs->wflag = 1;
 800c032:	2301      	movs	r3, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c034:	f881 b000 	strb.w	fp, [r1]
				res = dir_next(dp, 0);	/* Next entry */
 800c038:	4620      	mov	r0, r4
 800c03a:	2100      	movs	r1, #0
				fs->wflag = 1;
 800c03c:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c040:	f7ff fb82 	bl	800b748 <dir_next>
			} while (res == FR_OK && --nent);
 800c044:	2800      	cmp	r0, #0
 800c046:	d180      	bne.n	800bf4a <dir_register+0x20a>
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	d19d      	bne.n	800bf8c <dir_register+0x24c>
 800c050:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800c054:	e6cb      	b.n	800bdee <dir_register+0xae>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c056:	4630      	mov	r0, r6
 800c058:	e7d1      	b.n	800bffe <dir_register+0x2be>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c05a:	4617      	mov	r7, r2
 800c05c:	e686      	b.n	800bd6c <dir_register+0x2c>
 800c05e:	bf00      	nop
 800c060:	4ec4ec4f 	.word	0x4ec4ec4f
 800c064:	00011021 	.word	0x00011021
 800c068:	080128cc 	.word	0x080128cc

0800c06c <unlock_fs.part.10>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c06c:	290f      	cmp	r1, #15
 800c06e:	d002      	beq.n	800c076 <unlock_fs.part.10+0xa>
		ff_rel_grant(fs->sobj);
 800c070:	6940      	ldr	r0, [r0, #20]
 800c072:	f001 b831 	b.w	800d0d8 <ff_rel_grant>
}
 800c076:	4770      	bx	lr

0800c078 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800c078:	2300      	movs	r3, #0
{
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800c07e:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800c080:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c082:	69c2      	ldr	r2, [r0, #28]
 800c084:	2a00      	cmp	r2, #0
 800c086:	d067      	beq.n	800c158 <get_fileinfo+0xe0>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c088:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800c08a:	3201      	adds	r2, #1
 800c08c:	460d      	mov	r5, r1
 800c08e:	4680      	mov	r8, r0
 800c090:	d064      	beq.n	800c15c <get_fileinfo+0xe4>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	8818      	ldrh	r0, [r3, #0]
 800c096:	b198      	cbz	r0, 800c0c0 <get_fileinfo+0x48>
 800c098:	f101 0615 	add.w	r6, r1, #21
 800c09c:	2401      	movs	r4, #1
 800c09e:	e00a      	b.n	800c0b6 <get_fileinfo+0x3e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c0a0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800c0a4:	d00c      	beq.n	800c0c0 <get_fileinfo+0x48>
				fno->fname[i++] = (TCHAR)w;
 800c0a6:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800c0b0:	1c63      	adds	r3, r4, #1
 800c0b2:	b130      	cbz	r0, 800c0c2 <get_fileinfo+0x4a>
 800c0b4:	461c      	mov	r4, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	f000 ff78 	bl	800cfac <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1ef      	bne.n	800c0a0 <get_fileinfo+0x28>
			i = j = 0;
 800c0c0:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c0c2:	442c      	add	r4, r5
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	75a3      	strb	r3, [r4, #22]
 800c0c8:	7daf      	ldrb	r7, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 800c0ca:	f8d8 1020 	ldr.w	r1, [r8, #32]
	i = j = 0;
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f101 0c0b 	add.w	ip, r1, #11
		c = (TCHAR)dp->dir[i++];
 800c0d4:	460a      	mov	r2, r1
			fno->altname[j++] = '.';
 800c0d6:	f04f 082e 	mov.w	r8, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 800c0da:	f812 3b01 	ldrb.w	r3, [r2], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800c0de:	2b20      	cmp	r3, #32
 800c0e0:	d01b      	beq.n	800c11a <get_fileinfo+0xa2>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c0e2:	2b05      	cmp	r3, #5
 800c0e4:	eba2 0601 	sub.w	r6, r2, r1
 800c0e8:	bf08      	it	eq
 800c0ea:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800c0ec:	2e09      	cmp	r6, #9
 800c0ee:	d037      	beq.n	800c160 <get_fileinfo+0xe8>
		fno->altname[j] = c;
 800c0f0:	182c      	adds	r4, r5, r0
 800c0f2:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 800c0f4:	b987      	cbnz	r7, 800c118 <get_fileinfo+0xa0>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c0f6:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 800c0fa:	f1be 0f19 	cmp.w	lr, #25
 800c0fe:	d80a      	bhi.n	800c116 <get_fileinfo+0x9e>
 800c100:	2e08      	cmp	r6, #8
 800c102:	f891 e00c 	ldrb.w	lr, [r1, #12]
 800c106:	bf8c      	ite	hi
 800c108:	2610      	movhi	r6, #16
 800c10a:	2608      	movls	r6, #8
 800c10c:	ea1e 0f06 	tst.w	lr, r6
				c += 0x20;			/* To lower */
 800c110:	bf1c      	itt	ne
 800c112:	3320      	addne	r3, #32
 800c114:	b2db      	uxtbne	r3, r3
			fno->fname[j] = c;
 800c116:	75a3      	strb	r3, [r4, #22]
		j++;
 800c118:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 800c11a:	4562      	cmp	r2, ip
 800c11c:	d1dd      	bne.n	800c0da <get_fileinfo+0x62>
		fno->fname[j] = 0;
 800c11e:	182c      	adds	r4, r5, r0
	if (!lfv) {
 800c120:	b927      	cbnz	r7, 800c12c <get_fileinfo+0xb4>
		fno->fname[j] = 0;
 800c122:	75a7      	strb	r7, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c124:	7b0b      	ldrb	r3, [r1, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	bf08      	it	eq
 800c12a:	462c      	moveq	r4, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c12c:	2300      	movs	r3, #0
 800c12e:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c130:	7acb      	ldrb	r3, [r1, #11]
 800c132:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 800c134:	8bc8      	ldrh	r0, [r1, #30]
	rv = rv << 8 | ptr[1];
 800c136:	7f4a      	ldrb	r2, [r1, #29]
	rv = rv << 8 | ptr[0];
 800c138:	7f0b      	ldrb	r3, [r1, #28]
	rv = rv << 8 | ptr[1];
 800c13a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800c13e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c142:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 800c144:	8b08      	ldrh	r0, [r1, #24]
	rv = rv << 8 | ptr[1];
 800c146:	7dca      	ldrb	r2, [r1, #23]
	rv = rv << 8 | ptr[0];
 800c148:	7d8b      	ldrb	r3, [r1, #22]
	rv = rv << 8 | ptr[1];
 800c14a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800c14e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c152:	0c1a      	lsrs	r2, r3, #16
 800c154:	80eb      	strh	r3, [r5, #6]
 800c156:	80aa      	strh	r2, [r5, #4]
}
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	461f      	mov	r7, r3
 800c15e:	e7b4      	b.n	800c0ca <get_fileinfo+0x52>
			if (!lfv) fno->fname[j] = '.';
 800c160:	182c      	adds	r4, r5, r0
 800c162:	b90f      	cbnz	r7, 800c168 <get_fileinfo+0xf0>
 800c164:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 800c168:	f884 8009 	strb.w	r8, [r4, #9]
 800c16c:	3001      	adds	r0, #1
 800c16e:	e7bf      	b.n	800c0f0 <get_fileinfo+0x78>

0800c170 <dir_read.constprop.12>:
FRESULT dir_read (
 800c170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 800c174:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
 800c176:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800c178:	6805      	ldr	r5, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800c17a:	463e      	mov	r6, r7
	FRESULT res = FR_NO_FILE;
 800c17c:	2004      	movs	r0, #4
 800c17e:	e006      	b.n	800c18e <dir_read.constprop.12+0x1e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c180:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800c182:	2100      	movs	r1, #0
 800c184:	4620      	mov	r0, r4
 800c186:	f7ff fadf 	bl	800b748 <dir_next>
		if (res != FR_OK) break;
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d158      	bne.n	800c240 <dir_read.constprop.12+0xd0>
	while (dp->sect) {
 800c18e:	69e1      	ldr	r1, [r4, #28]
 800c190:	2900      	cmp	r1, #0
 800c192:	d059      	beq.n	800c248 <dir_read.constprop.12+0xd8>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c194:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c196:	428b      	cmp	r3, r1
 800c198:	d004      	beq.n	800c1a4 <dir_read.constprop.12+0x34>
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7fe fe64 	bl	800ae68 <move_window.part.6>
		if (res != FR_OK) break;
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d14d      	bne.n	800c240 <dir_read.constprop.12+0xd0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c1a4:	6a21      	ldr	r1, [r4, #32]
 800c1a6:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800c1a8:	2a00      	cmp	r2, #0
 800c1aa:	d048      	beq.n	800c23e <dir_read.constprop.12+0xce>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c1ac:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c1ae:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1b4:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c1b6:	d0e3      	beq.n	800c180 <dir_read.constprop.12+0x10>
 800c1b8:	2a2e      	cmp	r2, #46	; 0x2e
 800c1ba:	d0e1      	beq.n	800c180 <dir_read.constprop.12+0x10>
 800c1bc:	f023 0020 	bic.w	r0, r3, #32
 800c1c0:	2808      	cmp	r0, #8
 800c1c2:	d0dd      	beq.n	800c180 <dir_read.constprop.12+0x10>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c1c4:	2b0f      	cmp	r3, #15
 800c1c6:	d144      	bne.n	800c252 <dir_read.constprop.12+0xe2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c1c8:	0650      	lsls	r0, r2, #25
 800c1ca:	d535      	bpl.n	800c238 <dir_read.constprop.12+0xc8>
						dp->blk_ofs = dp->dptr;
 800c1cc:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 800c1ce:	7b4f      	ldrb	r7, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800c1d0:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800c1d2:	f002 06bf 	and.w	r6, r2, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c1d6:	7b4b      	ldrb	r3, [r1, #13]
 800c1d8:	42bb      	cmp	r3, r7
 800c1da:	d1d1      	bne.n	800c180 <dir_read.constprop.12+0x10>
	rv = rv << 8 | ptr[0];
 800c1dc:	7eca      	ldrb	r2, [r1, #27]
 800c1de:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c1e0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800c1e4:	d1cc      	bne.n	800c180 <dir_read.constprop.12+0x10>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c1e6:	780a      	ldrb	r2, [r1, #0]
 800c1e8:	4829      	ldr	r0, [pc, #164]	; (800c290 <dir_read.constprop.12+0x120>)
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c1ea:	f8d5 8010 	ldr.w	r8, [r5, #16]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c1ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800c1fe:	f100 0e0c 	add.w	lr, r0, #12
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c202:	469c      	mov	ip, r3
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c204:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800c208:	e009      	b.n	800c21e <dir_read.constprop.12+0xae>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c20a:	2afe      	cmp	r2, #254	; 0xfe
 800c20c:	d8b8      	bhi.n	800c180 <dir_read.constprop.12+0x10>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c20e:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
	rv = rv << 8 | ptr[0];
 800c212:	469c      	mov	ip, r3
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c214:	3201      	adds	r2, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c216:	4586      	cmp	lr, r0
 800c218:	d02e      	beq.n	800c278 <dir_read.constprop.12+0x108>
 800c21a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c21e:	eb01 0a03 	add.w	sl, r1, r3
	rv = rv << 8 | ptr[0];
 800c222:	5ccb      	ldrb	r3, [r1, r3]
 800c224:	f89a a001 	ldrb.w	sl, [sl, #1]
 800c228:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
		if (wc) {
 800c22c:	f1bc 0f00 	cmp.w	ip, #0
 800c230:	d1eb      	bne.n	800c20a <dir_read.constprop.12+0x9a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c232:	454b      	cmp	r3, r9
 800c234:	d0ef      	beq.n	800c216 <dir_read.constprop.12+0xa6>
 800c236:	e7a3      	b.n	800c180 <dir_read.constprop.12+0x10>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c238:	42b2      	cmp	r2, r6
 800c23a:	d1a1      	bne.n	800c180 <dir_read.constprop.12+0x10>
 800c23c:	e7cb      	b.n	800c1d6 <dir_read.constprop.12+0x66>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c23e:	2004      	movs	r0, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c240:	2300      	movs	r3, #0
 800c242:	61e3      	str	r3, [r4, #28]
}
 800c244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c248:	2800      	cmp	r0, #0
 800c24a:	d1f9      	bne.n	800c240 <dir_read.constprop.12+0xd0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c24c:	2000      	movs	r0, #0
}
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c252:	b96e      	cbnz	r6, 800c270 <dir_read.constprop.12+0x100>
 800c254:	f101 000b 	add.w	r0, r1, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c258:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c25c:	01f3      	lsls	r3, r6, #7
 800c25e:	ea43 0656 	orr.w	r6, r3, r6, lsr #1
 800c262:	fa52 f686 	uxtab	r6, r2, r6
	} while (--n);
 800c266:	4281      	cmp	r1, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c268:	b2f6      	uxtb	r6, r6
	} while (--n);
 800c26a:	d1f5      	bne.n	800c258 <dir_read.constprop.12+0xe8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c26c:	42be      	cmp	r6, r7
 800c26e:	d0ed      	beq.n	800c24c <dir_read.constprop.12+0xdc>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c270:	f04f 33ff 	mov.w	r3, #4294967295
 800c274:	6323      	str	r3, [r4, #48]	; 0x30
 800c276:	e7e9      	b.n	800c24c <dir_read.constprop.12+0xdc>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c278:	780b      	ldrb	r3, [r1, #0]
 800c27a:	065b      	lsls	r3, r3, #25
 800c27c:	d505      	bpl.n	800c28a <dir_read.constprop.12+0x11a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c27e:	2afe      	cmp	r2, #254	; 0xfe
 800c280:	f63f af7e 	bhi.w	800c180 <dir_read.constprop.12+0x10>
		lfnbuf[i] = 0;
 800c284:	2300      	movs	r3, #0
 800c286:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c28a:	3e01      	subs	r6, #1
 800c28c:	b2f6      	uxtb	r6, r6
 800c28e:	e778      	b.n	800c182 <dir_read.constprop.12+0x12>
 800c290:	080128cc 	.word	0x080128cc

0800c294 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c298:	b140      	cbz	r0, 800c2ac <validate+0x18>
 800c29a:	6803      	ldr	r3, [r0, #0]
 800c29c:	4604      	mov	r4, r0
 800c29e:	b12b      	cbz	r3, 800c2ac <validate+0x18>
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	b11a      	cbz	r2, 800c2ac <validate+0x18>
 800c2a4:	8881      	ldrh	r1, [r0, #4]
 800c2a6:	88da      	ldrh	r2, [r3, #6]
 800c2a8:	4291      	cmp	r1, r2
 800c2aa:	d003      	beq.n	800c2b4 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800c2ac:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	602b      	str	r3, [r5, #0]
	return res;
}
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c2b4:	6958      	ldr	r0, [r3, #20]
 800c2b6:	f000 ff05 	bl	800d0c4 <ff_req_grant>
 800c2ba:	b910      	cbnz	r0, 800c2c2 <validate+0x2e>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2bc:	4603      	mov	r3, r0
			res = FR_TIMEOUT;
 800c2be:	200f      	movs	r0, #15
 800c2c0:	e7f6      	b.n	800c2b0 <validate+0x1c>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	7858      	ldrb	r0, [r3, #1]
 800c2c6:	f7fe fc47 	bl	800ab58 <disk_status>
 800c2ca:	f010 0001 	ands.w	r0, r0, #1
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2ce:	6823      	ldr	r3, [r4, #0]
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2d0:	d0ee      	beq.n	800c2b0 <validate+0x1c>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0ea      	beq.n	800c2ac <validate+0x18>
		ff_rel_grant(fs->sobj);
 800c2d6:	6958      	ldr	r0, [r3, #20]
 800c2d8:	f000 fefe 	bl	800d0d8 <ff_rel_grant>
 800c2dc:	e7e6      	b.n	800c2ac <validate+0x18>
 800c2de:	bf00      	nop

0800c2e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2e2:	b085      	sub	sp, #20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c2e4:	ab04      	add	r3, sp, #16
{
 800c2e6:	9001      	str	r0, [sp, #4]
	const TCHAR *rp = path;
 800c2e8:	f843 1d04 	str.w	r1, [r3, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c2ec:	4618      	mov	r0, r3
{
 800c2ee:	9100      	str	r1, [sp, #0]
 800c2f0:	4617      	mov	r7, r2
	vol = get_ldnumber(&rp);
 800c2f2:	f7fe fd01 	bl	800acf8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2f6:	1e05      	subs	r5, r0, #0
 800c2f8:	db30      	blt.n	800c35c <f_mount+0x7c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c2fa:	4e23      	ldr	r6, [pc, #140]	; (800c388 <f_mount+0xa8>)
 800c2fc:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]

	if (cfs) {
 800c300:	b184      	cbz	r4, 800c324 <f_mount+0x44>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <f_mount+0xac>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c304:	6960      	ldr	r0, [r4, #20]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	4294      	cmp	r4, r2
 800c30a:	bf04      	itt	eq
 800c30c:	2200      	moveq	r2, #0
 800c30e:	601a      	streq	r2, [r3, #0]
 800c310:	691a      	ldr	r2, [r3, #16]
 800c312:	4294      	cmp	r4, r2
 800c314:	bf04      	itt	eq
 800c316:	2200      	moveq	r2, #0
 800c318:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c31a:	f000 fecd 	bl	800d0b8 <ff_del_syncobj>
 800c31e:	b1c8      	cbz	r0, 800c354 <f_mount+0x74>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c320:	2300      	movs	r3, #0
 800c322:	7023      	strb	r3, [r4, #0]
	}

	if (fs) {
 800c324:	9901      	ldr	r1, [sp, #4]
 800c326:	b179      	cbz	r1, 800c348 <f_mount+0x68>
		fs->fs_type = 0;				/* Clear new fs object */
 800c328:	2400      	movs	r4, #0
 800c32a:	f801 4b14 	strb.w	r4, [r1], #20
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c32e:	b2e8      	uxtb	r0, r5
 800c330:	f000 feb2 	bl	800d098 <ff_cre_syncobj>
 800c334:	b170      	cbz	r0, 800c354 <f_mount+0x74>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c336:	9901      	ldr	r1, [sp, #4]
 800c338:	f846 1025 	str.w	r1, [r6, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c33c:	b131      	cbz	r1, 800c34c <f_mount+0x6c>
 800c33e:	2f01      	cmp	r7, #1
 800c340:	d010      	beq.n	800c364 <f_mount+0x84>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800c342:	4620      	mov	r0, r4
 800c344:	b005      	add	sp, #20
 800c346:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800c348:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c34c:	460c      	mov	r4, r1
}
 800c34e:	4620      	mov	r0, r4
 800c350:	b005      	add	sp, #20
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c354:	2402      	movs	r4, #2
}
 800c356:	4620      	mov	r0, r4
 800c358:	b005      	add	sp, #20
 800c35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800c35c:	240b      	movs	r4, #11
}
 800c35e:	4620      	mov	r0, r4
 800c360:	b005      	add	sp, #20
 800c362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c364:	4622      	mov	r2, r4
 800c366:	a901      	add	r1, sp, #4
 800c368:	4668      	mov	r0, sp
 800c36a:	f7fe fde3 	bl	800af34 <find_volume>
 800c36e:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800c370:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c372:	2800      	cmp	r0, #0
 800c374:	d0e5      	beq.n	800c342 <f_mount+0x62>
 800c376:	2c0c      	cmp	r4, #12
 800c378:	d0e3      	beq.n	800c342 <f_mount+0x62>
 800c37a:	2c0b      	cmp	r4, #11
 800c37c:	d0e1      	beq.n	800c342 <f_mount+0x62>
 800c37e:	4621      	mov	r1, r4
 800c380:	f7ff fe74 	bl	800c06c <unlock_fs.part.10>
 800c384:	e7dd      	b.n	800c342 <f_mount+0x62>
 800c386:	bf00      	nop
 800c388:	20007380 	.word	0x20007380
 800c38c:	20007384 	.word	0x20007384

0800c390 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c394:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c398:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d04d      	beq.n	800c43a <f_open+0xaa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c39e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 800c3a6:	a902      	add	r1, sp, #8
 800c3a8:	463a      	mov	r2, r7
 800c3aa:	a801      	add	r0, sp, #4
 800c3ac:	f7fe fdc2 	bl	800af34 <find_volume>
	if (res == FR_OK) {
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	b198      	cbz	r0, 800c3dc <f_open+0x4c>
		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
 800c3b4:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	6033      	str	r3, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c3bc:	f1bc 0f00 	cmp.w	ip, #0
 800c3c0:	d03c      	beq.n	800c43c <f_open+0xac>
 800c3c2:	2c0c      	cmp	r4, #12
 800c3c4:	d03a      	beq.n	800c43c <f_open+0xac>
 800c3c6:	2c0b      	cmp	r4, #11
 800c3c8:	d038      	beq.n	800c43c <f_open+0xac>
 800c3ca:	4660      	mov	r0, ip
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	f7ff fe4d 	bl	800c06c <unlock_fs.part.10>
}
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3dc:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
		INIT_NAMBUF(fs);
 800c3e0:	aa10      	add	r2, sp, #64	; 0x40
 800c3e2:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3e4:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 800c3e6:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3e8:	f7ff fb3c 	bl	800ba64 <follow_path>
 800c3ec:	f005 081c 	and.w	r8, r5, #28
 800c3f0:	4603      	mov	r3, r0
		if (res == FR_OK) {
 800c3f2:	bb40      	cbnz	r0, 800c446 <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c3f4:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	db48      	blt.n	800c48e <f_open+0xfe>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3fc:	f017 0ffe 	tst.w	r7, #254	; 0xfe
 800c400:	bf14      	ite	ne
 800c402:	f04f 0901 	movne.w	r9, #1
 800c406:	f04f 0900 	moveq.w	r9, #0
 800c40a:	4649      	mov	r1, r9
 800c40c:	a803      	add	r0, sp, #12
 800c40e:	f7fe fbe7 	bl	800abe0 <chk_lock>
 800c412:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c414:	f1b8 0f00 	cmp.w	r8, #0
 800c418:	f000 8106 	beq.w	800c628 <f_open+0x298>
			if (res != FR_OK) {					/* No file, create new */
 800c41c:	b9c0      	cbnz	r0, 800c450 <f_open+0xc0>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c41e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800c422:	f013 0f11 	tst.w	r3, #17
 800c426:	d028      	beq.n	800c47a <f_open+0xea>
	LEAVE_FF(fs, res);
 800c428:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c42c:	6034      	str	r4, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c42e:	f1bc 0f00 	cmp.w	ip, #0
 800c432:	f000 810c 	beq.w	800c64e <f_open+0x2be>
					res = FR_DENIED;
 800c436:	2407      	movs	r4, #7
 800c438:	e7c7      	b.n	800c3ca <f_open+0x3a>
	if (!fp) return FR_INVALID_OBJECT;
 800c43a:	2409      	movs	r4, #9
}
 800c43c:	4620      	mov	r0, r4
 800c43e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c446:	f1b8 0f00 	cmp.w	r8, #0
 800c44a:	d101      	bne.n	800c450 <f_open+0xc0>
 800c44c:	4604      	mov	r4, r0
 800c44e:	e7b1      	b.n	800c3b4 <f_open+0x24>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c450:	2b04      	cmp	r3, #4
 800c452:	f040 811f 	bne.w	800c694 <f_open+0x304>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c456:	4bae      	ldr	r3, [pc, #696]	; (800c710 <f_open+0x380>)
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	2a00      	cmp	r2, #0
 800c45c:	f000 8093 	beq.w	800c586 <f_open+0x1f6>
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	f000 808f 	beq.w	800c586 <f_open+0x1f6>
	LEAVE_FF(fs, res);
 800c468:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c46c:	2300      	movs	r3, #0
 800c46e:	6033      	str	r3, [r6, #0]
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c470:	2412      	movs	r4, #18
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c472:	f1bc 0f00 	cmp.w	ip, #0
 800c476:	d1a8      	bne.n	800c3ca <f_open+0x3a>
 800c478:	e7e0      	b.n	800c43c <f_open+0xac>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c47a:	076b      	lsls	r3, r5, #29
 800c47c:	d50f      	bpl.n	800c49e <f_open+0x10e>
	LEAVE_FF(fs, res);
 800c47e:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c482:	6034      	str	r4, [r6, #0]
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c484:	2408      	movs	r4, #8
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c486:	f1bc 0f00 	cmp.w	ip, #0
 800c48a:	d19e      	bne.n	800c3ca <f_open+0x3a>
 800c48c:	e7d6      	b.n	800c43c <f_open+0xac>
	LEAVE_FF(fs, res);
 800c48e:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c492:	6034      	str	r4, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c494:	2406      	movs	r4, #6
 800c496:	f1bc 0f00 	cmp.w	ip, #0
 800c49a:	d196      	bne.n	800c3ca <f_open+0x3a>
 800c49c:	e7ce      	b.n	800c43c <f_open+0xac>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c49e:	0728      	lsls	r0, r5, #28
 800c4a0:	d479      	bmi.n	800c596 <f_open+0x206>
 800c4a2:	f8dd c008 	ldr.w	ip, [sp, #8]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4a6:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
			fp->dir_ptr = dj.dir;
 800c4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4ac:	6272      	str	r2, [r6, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4ae:	4649      	mov	r1, r9
			fp->dir_ptr = dj.dir;
 800c4b0:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4b2:	a803      	add	r0, sp, #12
 800c4b4:	f7fe fbd4 	bl	800ac60 <inc_lock>
 800c4b8:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d05a      	beq.n	800c574 <f_open+0x1e4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c4be:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 800c4c4:	f89c 1000 	ldrb.w	r1, [ip]
	rv = rv << 8 | ptr[0];
 800c4c8:	7ed8      	ldrb	r0, [r3, #27]
 800c4ca:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c4cc:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800c4ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800c4d2:	d105      	bne.n	800c4e0 <f_open+0x150>
	rv = rv << 8 | ptr[0];
 800c4d4:	7d58      	ldrb	r0, [r3, #21]
 800c4d6:	7d19      	ldrb	r1, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c4d8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800c4dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c4e0:	60b2      	str	r2, [r6, #8]
	rv = rv << 8 | ptr[2];
 800c4e2:	8bd9      	ldrh	r1, [r3, #30]
	rv = rv << 8 | ptr[1];
 800c4e4:	7f5a      	ldrb	r2, [r3, #29]
	rv = rv << 8 | ptr[0];
 800c4e6:	7f1b      	ldrb	r3, [r3, #28]
			fp->obj.id = fs->id;
 800c4e8:	f8bc 0006 	ldrh.w	r0, [ip, #6]
 800c4ec:	80b0      	strh	r0, [r6, #4]
	rv = rv << 8 | ptr[1];
 800c4ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800c4f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c4f6:	f106 0530 	add.w	r5, r6, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f506 5181 	add.w	r1, r6, #4128	; 0x1020
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c500:	60f3      	str	r3, [r6, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c502:	f8c6 c000 	str.w	ip, [r6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c506:	62f2      	str	r2, [r6, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 800c508:	7572      	strb	r2, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c50a:	6232      	str	r2, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c50c:	61b2      	str	r2, [r6, #24]
			fp->flag = mode;		/* Set file access mode */
 800c50e:	7537      	strb	r7, [r6, #20]
	BYTE *d = (BYTE*)dst;
 800c510:	462b      	mov	r3, r5
 800c512:	3110      	adds	r1, #16
		*d++ = (BYTE)val;
 800c514:	f803 2b01 	strb.w	r2, [r3], #1
	} while (--cnt);
 800c518:	428b      	cmp	r3, r1
 800c51a:	d1fb      	bne.n	800c514 <f_open+0x184>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c51c:	06ba      	lsls	r2, r7, #26
 800c51e:	f57f af54 	bpl.w	800c3ca <f_open+0x3a>
 800c522:	68f7      	ldr	r7, [r6, #12]
 800c524:	2f00      	cmp	r7, #0
 800c526:	f43f af50 	beq.w	800c3ca <f_open+0x3a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c52a:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800c52e:	f8bc 800a 	ldrh.w	r8, [ip, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c532:	68b1      	ldr	r1, [r6, #8]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c534:	61b7      	str	r7, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c536:	fb03 f808 	mul.w	r8, r3, r8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c53a:	4547      	cmp	r7, r8
 800c53c:	d805      	bhi.n	800c54a <f_open+0x1ba>
 800c53e:	e097      	b.n	800c670 <f_open+0x2e0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d015      	beq.n	800c570 <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c544:	45b8      	cmp	r8, r7
 800c546:	f080 808f 	bcs.w	800c668 <f_open+0x2d8>
					clst = get_fat(&fp->obj, clst);
 800c54a:	6830      	ldr	r0, [r6, #0]
 800c54c:	f7fe ff78 	bl	800b440 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800c550:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800c552:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c554:	eba7 0708 	sub.w	r7, r7, r8
					if (clst <= 1) res = FR_INT_ERR;
 800c558:	d8f2      	bhi.n	800c540 <f_open+0x1b0>
 800c55a:	2402      	movs	r4, #2
	LEAVE_FF(fs, res);
 800c55c:	f8dd c008 	ldr.w	ip, [sp, #8]
				fp->clust = clst;
 800c560:	61f1      	str	r1, [r6, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c562:	2300      	movs	r3, #0
 800c564:	6033      	str	r3, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c566:	f1bc 0f00 	cmp.w	ip, #0
 800c56a:	f47f af2c 	bne.w	800c3c6 <f_open+0x36>
 800c56e:	e765      	b.n	800c43c <f_open+0xac>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c570:	2401      	movs	r4, #1
 800c572:	e7f3      	b.n	800c55c <f_open+0x1cc>
	LEAVE_FF(fs, res);
 800c574:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c578:	6030      	str	r0, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c57a:	2402      	movs	r4, #2
 800c57c:	f1bc 0f00 	cmp.w	ip, #0
 800c580:	f47f af23 	bne.w	800c3ca <f_open+0x3a>
 800c584:	e75a      	b.n	800c43c <f_open+0xac>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c586:	a803      	add	r0, sp, #12
 800c588:	f7ff fbda 	bl	800bd40 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c58c:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c590:	2800      	cmp	r0, #0
 800c592:	f47f af5b 	bne.w	800c44c <f_open+0xbc>
				dw = GET_FATTIME();
 800c596:	f7fc fd9b 	bl	80090d0 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c59c:	f8dd c008 	ldr.w	ip, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5a0:	b2c5      	uxtb	r5, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800c5a2:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800c5a6:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 800c5aa:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ac:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ae:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5b0:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 800c5b2:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800c5b6:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5b8:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ba:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800c5bc:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 800c5c6:	f89c 2000 	ldrb.w	r2, [ip]
	rv = rv << 8 | ptr[0];
 800c5ca:	7ed9      	ldrb	r1, [r3, #27]
 800c5cc:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c5ce:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800c5d0:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800c5d4:	d063      	beq.n	800c69e <f_open+0x30e>
	*ptr++ = (BYTE)val; val >>= 8;
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800c5da:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c5dc:	f89c 1000 	ldrb.w	r1, [ip]
 800c5e0:	2903      	cmp	r1, #3
 800c5e2:	d059      	beq.n	800c698 <f_open+0x308>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800c5e6:	2200      	movs	r2, #0
					fs->wflag = 1;
 800c5e8:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ea:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ec:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ee:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800c5f0:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800c5f2:	f88c 1003 	strb.w	r1, [ip, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c5f6:	b195      	cbz	r5, 800c61e <f_open+0x28e>
						res = remove_chain(&dj.obj, cl, 0);
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 800c5fc:	f8dc 8038 	ldr.w	r8, [ip, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 800c600:	f7ff f85c 	bl	800b6bc <remove_chain>
						if (res == FR_OK) {
 800c604:	2800      	cmp	r0, #0
 800c606:	f47f af21 	bne.w	800c44c <f_open+0xbc>
							res = move_window(fs, dw);
 800c60a:	f8dd c008 	ldr.w	ip, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c60e:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800c612:	4598      	cmp	r8, r3
 800c614:	f105 35ff 	add.w	r5, r5, #4294967295
 800c618:	d152      	bne.n	800c6c0 <f_open+0x330>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c61a:	f8cc 5018 	str.w	r5, [ip, #24]
				mode |= FA_MODIFIED;
 800c61e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800c622:	f04f 0901 	mov.w	r9, #1
 800c626:	e73e      	b.n	800c4a6 <f_open+0x116>
 800c628:	f8dd c008 	ldr.w	ip, [sp, #8]
			if (res == FR_OK) {					/* Following succeeded */
 800c62c:	2800      	cmp	r0, #0
 800c62e:	f47f af0d 	bne.w	800c44c <f_open+0xbc>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c632:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800c636:	f013 0210 	ands.w	r2, r3, #16
 800c63a:	d10e      	bne.n	800c65a <f_open+0x2ca>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c63c:	07a9      	lsls	r1, r5, #30
 800c63e:	d508      	bpl.n	800c652 <f_open+0x2c2>
 800c640:	07d8      	lsls	r0, r3, #31
 800c642:	d506      	bpl.n	800c652 <f_open+0x2c2>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c644:	6032      	str	r2, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c646:	f1bc 0f00 	cmp.w	ip, #0
 800c64a:	f47f aef4 	bne.w	800c436 <f_open+0xa6>
						res = FR_DENIED;
 800c64e:	2407      	movs	r4, #7
 800c650:	e6f4      	b.n	800c43c <f_open+0xac>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c652:	0729      	lsls	r1, r5, #28
 800c654:	f57f af27 	bpl.w	800c4a6 <f_open+0x116>
 800c658:	e7e1      	b.n	800c61e <f_open+0x28e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c65a:	6034      	str	r4, [r6, #0]
					res = FR_NO_FILE;
 800c65c:	2404      	movs	r4, #4
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c65e:	f1bc 0f00 	cmp.w	ip, #0
 800c662:	f47f aeb2 	bne.w	800c3ca <f_open+0x3a>
 800c666:	e6e9      	b.n	800c43c <f_open+0xac>
 800c668:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c66c:	f8bc 300c 	ldrh.w	r3, [ip, #12]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c670:	fbb7 f2f3 	udiv	r2, r7, r3
 800c674:	fb03 7312 	mls	r3, r3, r2, r7
				fp->clust = clst;
 800c678:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f43f aea5 	beq.w	800c3ca <f_open+0x3a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c680:	f8dc 3020 	ldr.w	r3, [ip, #32]
	clst -= 2;
 800c684:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c686:	3b02      	subs	r3, #2
 800c688:	4299      	cmp	r1, r3
 800c68a:	d30f      	bcc.n	800c6ac <f_open+0x31c>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c68c:	2300      	movs	r3, #0
 800c68e:	6033      	str	r3, [r6, #0]
 800c690:	2402      	movs	r4, #2
 800c692:	e69a      	b.n	800c3ca <f_open+0x3a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c694:	461c      	mov	r4, r3
 800c696:	e68d      	b.n	800c3b4 <f_open+0x24>
	*ptr++ = (BYTE)val; val >>= 8;
 800c698:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800c69a:	755a      	strb	r2, [r3, #21]
 800c69c:	e7a2      	b.n	800c5e4 <f_open+0x254>
	rv = rv << 8 | ptr[0];
 800c69e:	7d59      	ldrb	r1, [r3, #21]
 800c6a0:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c6a6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 800c6aa:	e794      	b.n	800c5d6 <f_open+0x246>
	return clst * fs->csize + fs->database;
 800c6ac:	f8bc 300a 	ldrh.w	r3, [ip, #10]
 800c6b0:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c6b4:	fb01 0103 	mla	r1, r1, r3, r0
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6b8:	b971      	cbnz	r1, 800c6d8 <f_open+0x348>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6ba:	6031      	str	r1, [r6, #0]
 800c6bc:	2402      	movs	r4, #2
 800c6be:	e684      	b.n	800c3ca <f_open+0x3a>
 800c6c0:	4660      	mov	r0, ip
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	f7fe fbd0 	bl	800ae68 <move_window.part.6>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c6c8:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c6cc:	f8cc 5018 	str.w	r5, [ip, #24]
		if (res == FR_OK) {
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d0a4      	beq.n	800c61e <f_open+0x28e>
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	e66d      	b.n	800c3b4 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c6d8:	440a      	add	r2, r1
 800c6da:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	f7fe fa52 	bl	800ab8c <disk_read>
	LEAVE_FF(fs, res);
 800c6e8:	f8dd c008 	ldr.w	ip, [sp, #8]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6ec:	b138      	cbz	r0, 800c6fe <f_open+0x36e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6033      	str	r3, [r6, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c6f2:	2401      	movs	r4, #1
 800c6f4:	f1bc 0f00 	cmp.w	ip, #0
 800c6f8:	f47f ae67 	bne.w	800c3ca <f_open+0x3a>
 800c6fc:	e69e      	b.n	800c43c <f_open+0xac>
 800c6fe:	f1bc 0f00 	cmp.w	ip, #0
 800c702:	f43f ae9b 	beq.w	800c43c <f_open+0xac>
 800c706:	4660      	mov	r0, ip
 800c708:	4621      	mov	r1, r4
 800c70a:	f7ff fcaf 	bl	800c06c <unlock_fs.part.10>
 800c70e:	e660      	b.n	800c3d2 <f_open+0x42>
 800c710:	20007384 	.word	0x20007384

0800c714 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	461f      	mov	r7, r3
 800c71a:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800c71c:	2300      	movs	r3, #0
{
 800c71e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 800c720:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c722:	a903      	add	r1, sp, #12
{
 800c724:	4615      	mov	r5, r2
 800c726:	4606      	mov	r6, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c728:	f7ff fdb4 	bl	800c294 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c72c:	b150      	cbz	r0, 800c744 <f_read+0x30>
 800c72e:	4604      	mov	r4, r0
 800c730:	9803      	ldr	r0, [sp, #12]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c732:	b118      	cbz	r0, 800c73c <f_read+0x28>
 800c734:	2c0c      	cmp	r4, #12
 800c736:	d001      	beq.n	800c73c <f_read+0x28>
 800c738:	2c0b      	cmp	r4, #11
 800c73a:	d151      	bne.n	800c7e0 <f_read+0xcc>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800c73c:	4620      	mov	r0, r4
 800c73e:	b005      	add	sp, #20
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c744:	7d74      	ldrb	r4, [r6, #21]
 800c746:	9803      	ldr	r0, [sp, #12]
 800c748:	2c00      	cmp	r4, #0
 800c74a:	d1f2      	bne.n	800c732 <f_read+0x1e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c74c:	7d33      	ldrb	r3, [r6, #20]
 800c74e:	07db      	lsls	r3, r3, #31
 800c750:	d54d      	bpl.n	800c7ee <f_read+0xda>
	remain = fp->obj.objsize - fp->fptr;
 800c752:	69b1      	ldr	r1, [r6, #24]
 800c754:	68f3      	ldr	r3, [r6, #12]
 800c756:	eba3 0801 	sub.w	r8, r3, r1
 800c75a:	45a8      	cmp	r8, r5
 800c75c:	bf28      	it	cs
 800c75e:	46a8      	movcs	r8, r5
	for ( ;  btr;								/* Repeat until all data read */
 800c760:	f1b8 0f00 	cmp.w	r8, #0
 800c764:	d07f      	beq.n	800c866 <f_read+0x152>
 800c766:	f106 0b30 	add.w	fp, r6, #48	; 0x30
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c76a:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800c76e:	fbb1 f5fc 	udiv	r5, r1, ip
 800c772:	fb0c 1215 	mls	r2, ip, r5, r1
 800c776:	2a00      	cmp	r2, #0
 800c778:	d158      	bne.n	800c82c <f_read+0x118>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c77a:	8943      	ldrh	r3, [r0, #10]
 800c77c:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800c77e:	402b      	ands	r3, r5
 800c780:	d078      	beq.n	800c874 <f_read+0x160>
 800c782:	69f2      	ldr	r2, [r6, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c784:	6a01      	ldr	r1, [r0, #32]
	clst -= 2;
 800c786:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c788:	3902      	subs	r1, #2
 800c78a:	428a      	cmp	r2, r1
 800c78c:	f080 80dd 	bcs.w	800c94a <f_read+0x236>
	return clst * fs->csize + fs->database;
 800c790:	8941      	ldrh	r1, [r0, #10]
 800c792:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c794:	fb01 5502 	mla	r5, r1, r2, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c798:	2d00      	cmp	r5, #0
 800c79a:	f000 80d6 	beq.w	800c94a <f_read+0x236>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c79e:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800c7a2:	fbb8 fafc 	udiv	sl, r8, ip
			sect += csect;
 800c7a6:	441d      	add	r5, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c7a8:	f1ba 0f00 	cmp.w	sl, #0
 800c7ac:	d026      	beq.n	800c7fc <f_read+0xe8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7ae:	eb03 020a 	add.w	r2, r3, sl
 800c7b2:	428a      	cmp	r2, r1
					cc = fs->csize - csect;
 800c7b4:	bf88      	it	hi
 800c7b6:	eba1 0a03 	subhi.w	sl, r1, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7ba:	7840      	ldrb	r0, [r0, #1]
 800c7bc:	4653      	mov	r3, sl
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f7fe f9e3 	bl	800ab8c <disk_read>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	f000 8083 	beq.w	800c8d2 <f_read+0x1be>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7cc:	9b03      	ldr	r3, [sp, #12]
 800c7ce:	2401      	movs	r4, #1
 800c7d0:	7574      	strb	r4, [r6, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 808e 	beq.w	800c8f4 <f_read+0x1e0>
		ff_rel_grant(fs->sobj);
 800c7d8:	6958      	ldr	r0, [r3, #20]
 800c7da:	f000 fc7d 	bl	800d0d8 <ff_rel_grant>
 800c7de:	e7ad      	b.n	800c73c <f_read+0x28>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	f7ff fc43 	bl	800c06c <unlock_fs.part.10>
}
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	b005      	add	sp, #20
 800c7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d06d      	beq.n	800c8ce <f_read+0x1ba>
		ff_rel_grant(fs->sobj);
 800c7f2:	6940      	ldr	r0, [r0, #20]
 800c7f4:	f000 fc70 	bl	800d0d8 <ff_rel_grant>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c7f8:	2407      	movs	r4, #7
 800c7fa:	e79f      	b.n	800c73c <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c7fc:	6a32      	ldr	r2, [r6, #32]
 800c7fe:	42aa      	cmp	r2, r5
 800c800:	d00e      	beq.n	800c820 <f_read+0x10c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c802:	f996 3014 	ldrsb.w	r3, [r6, #20]
 800c806:	7840      	ldrb	r0, [r0, #1]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	db75      	blt.n	800c8f8 <f_read+0x1e4>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c80c:	2301      	movs	r3, #1
 800c80e:	462a      	mov	r2, r5
 800c810:	4659      	mov	r1, fp
 800c812:	f7fe f9bb 	bl	800ab8c <disk_read>
 800c816:	2800      	cmp	r0, #0
 800c818:	d1d8      	bne.n	800c7cc <f_read+0xb8>
 800c81a:	9803      	ldr	r0, [sp, #12]
 800c81c:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800c820:	69b1      	ldr	r1, [r6, #24]
			fp->sect = sect;
 800c822:	6235      	str	r5, [r6, #32]
 800c824:	fbb1 f2fc 	udiv	r2, r1, ip
 800c828:	fb0c 1212 	mls	r2, ip, r2, r1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c82c:	ebac 0302 	sub.w	r3, ip, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c830:	4543      	cmp	r3, r8
 800c832:	d804      	bhi.n	800c83e <f_read+0x12a>
	if (cnt) {
 800c834:	2b00      	cmp	r3, #0
 800c836:	f040 8094 	bne.w	800c962 <f_read+0x24e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c83a:	61b1      	str	r1, [r6, #24]
 800c83c:	e795      	b.n	800c76a <f_read+0x56>
 800c83e:	2500      	movs	r5, #0
 800c840:	eb0b 0102 	add.w	r1, fp, r2
 800c844:	4648      	mov	r0, r9
 800c846:	4642      	mov	r2, r8
 800c848:	f7fe fa7e 	bl	800ad48 <mem_cpy.part.0>
 800c84c:	69b1      	ldr	r1, [r6, #24]
 800c84e:	9803      	ldr	r0, [sp, #12]
 800c850:	44c1      	add	r9, r8
 800c852:	46c2      	mov	sl, r8
 800c854:	46a8      	mov	r8, r5
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	4451      	add	r1, sl
 800c85a:	4453      	add	r3, sl
 800c85c:	61b1      	str	r1, [r6, #24]
 800c85e:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800c860:	f1b8 0f00 	cmp.w	r8, #0
 800c864:	d181      	bne.n	800c76a <f_read+0x56>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c866:	2800      	cmp	r0, #0
 800c868:	f43f af68 	beq.w	800c73c <f_read+0x28>
		ff_rel_grant(fs->sobj);
 800c86c:	6940      	ldr	r0, [r0, #20]
 800c86e:	f000 fc33 	bl	800d0d8 <ff_rel_grant>
 800c872:	e763      	b.n	800c73c <f_read+0x28>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c874:	b931      	cbnz	r1, 800c884 <f_read+0x170>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c876:	68b2      	ldr	r2, [r6, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c878:	2a01      	cmp	r2, #1
 800c87a:	d96c      	bls.n	800c956 <f_read+0x242>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c87c:	1c51      	adds	r1, r2, #1
 800c87e:	d035      	beq.n	800c8ec <f_read+0x1d8>
				fp->clust = clst;				/* Update current cluster */
 800c880:	61f2      	str	r2, [r6, #28]
 800c882:	e77f      	b.n	800c784 <f_read+0x70>
					if (fp->cltbl) {
 800c884:	f8d6 e02c 	ldr.w	lr, [r6, #44]	; 0x2c
 800c888:	f8d6 c000 	ldr.w	ip, [r6]
 800c88c:	f1be 0f00 	cmp.w	lr, #0
 800c890:	d043      	beq.n	800c91a <f_read+0x206>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c892:	f8de 5004 	ldr.w	r5, [lr, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c896:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 800c89a:	f8bc c00a 	ldrh.w	ip, [ip, #10]
 800c89e:	fbb1 f2f2 	udiv	r2, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c8a2:	f10e 0104 	add.w	r1, lr, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c8a6:	fbb2 f2fc 	udiv	r2, r2, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c8aa:	b14d      	cbz	r5, 800c8c0 <f_read+0x1ac>
		if (cl < ncl) break;	/* In this fragment? */
 800c8ac:	42aa      	cmp	r2, r5
 800c8ae:	d202      	bcs.n	800c8b6 <f_read+0x1a2>
 800c8b0:	e030      	b.n	800c914 <f_read+0x200>
 800c8b2:	4295      	cmp	r5, r2
 800c8b4:	d82e      	bhi.n	800c914 <f_read+0x200>
		cl -= ncl; tbl++;		/* Next fragment */
 800c8b6:	1b52      	subs	r2, r2, r5
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8b8:	f851 5f08 	ldr.w	r5, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c8bc:	2d00      	cmp	r5, #0
 800c8be:	d1f8      	bne.n	800c8b2 <f_read+0x19e>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	7573      	strb	r3, [r6, #21]
		ff_rel_grant(fs->sobj);
 800c8c4:	6940      	ldr	r0, [r0, #20]
 800c8c6:	f000 fc07 	bl	800d0d8 <ff_rel_grant>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8ca:	2402      	movs	r4, #2
 800c8cc:	e736      	b.n	800c73c <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c8ce:	2407      	movs	r4, #7
 800c8d0:	e734      	b.n	800c73c <f_read+0x28>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c8d2:	f996 2014 	ldrsb.w	r2, [r6, #20]
 800c8d6:	9803      	ldr	r0, [sp, #12]
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	8983      	ldrh	r3, [r0, #12]
 800c8dc:	db26      	blt.n	800c92c <f_read+0x218>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c8de:	fb03 fa0a 	mul.w	sl, r3, sl
 800c8e2:	69b1      	ldr	r1, [r6, #24]
 800c8e4:	44d1      	add	r9, sl
 800c8e6:	eba8 080a 	sub.w	r8, r8, sl
				continue;
 800c8ea:	e7b4      	b.n	800c856 <f_read+0x142>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8ec:	2401      	movs	r4, #1
 800c8ee:	7574      	strb	r4, [r6, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d1bb      	bne.n	800c86c <f_read+0x158>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8f4:	2401      	movs	r4, #1
 800c8f6:	e721      	b.n	800c73c <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	4659      	mov	r1, fp
 800c8fc:	f7fe f954 	bl	800aba8 <disk_write>
 800c900:	2800      	cmp	r0, #0
 800c902:	f47f af63 	bne.w	800c7cc <f_read+0xb8>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c906:	7d33      	ldrb	r3, [r6, #20]
 800c908:	9a03      	ldr	r2, [sp, #12]
 800c90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c90e:	7533      	strb	r3, [r6, #20]
 800c910:	7850      	ldrb	r0, [r2, #1]
 800c912:	e77b      	b.n	800c80c <f_read+0xf8>
	return cl + *tbl;	/* Return the cluster number */
 800c914:	6849      	ldr	r1, [r1, #4]
 800c916:	440a      	add	r2, r1
 800c918:	e7ae      	b.n	800c878 <f_read+0x164>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c91a:	4660      	mov	r0, ip
 800c91c:	69f1      	ldr	r1, [r6, #28]
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	f7fe fd8e 	bl	800b440 <get_fat.isra.9>
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	4602      	mov	r2, r0
 800c928:	9803      	ldr	r0, [sp, #12]
 800c92a:	e7a5      	b.n	800c878 <f_read+0x164>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c92c:	6a32      	ldr	r2, [r6, #32]
 800c92e:	1b55      	subs	r5, r2, r5
 800c930:	4555      	cmp	r5, sl
 800c932:	d2d4      	bcs.n	800c8de <f_read+0x1ca>
	if (cnt) {
 800c934:	2b00      	cmp	r3, #0
 800c936:	d0d2      	beq.n	800c8de <f_read+0x1ca>
 800c938:	fb03 9005 	mla	r0, r3, r5, r9
 800c93c:	461a      	mov	r2, r3
 800c93e:	4659      	mov	r1, fp
 800c940:	f7fe fa02 	bl	800ad48 <mem_cpy.part.0>
 800c944:	9803      	ldr	r0, [sp, #12]
 800c946:	8983      	ldrh	r3, [r0, #12]
 800c948:	e7c9      	b.n	800c8de <f_read+0x1ca>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c94a:	2402      	movs	r4, #2
 800c94c:	7574      	strb	r4, [r6, #21]
		ff_rel_grant(fs->sobj);
 800c94e:	6940      	ldr	r0, [r0, #20]
 800c950:	f000 fbc2 	bl	800d0d8 <ff_rel_grant>
 800c954:	e6f2      	b.n	800c73c <f_read+0x28>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c956:	2402      	movs	r4, #2
 800c958:	7574      	strb	r4, [r6, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f43f aeee 	beq.w	800c73c <f_read+0x28>
 800c960:	e7b0      	b.n	800c8c4 <f_read+0x1b0>
 800c962:	eba8 0503 	sub.w	r5, r8, r3
	if (cnt) {
 800c966:	4698      	mov	r8, r3
 800c968:	e76a      	b.n	800c840 <f_read+0x12c>
 800c96a:	bf00      	nop

0800c96c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	b082      	sub	sp, #8
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c970:	a901      	add	r1, sp, #4
{
 800c972:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c974:	f7ff fc8e 	bl	800c294 <validate>
	if (res == FR_OK) {
 800c978:	4604      	mov	r4, r0
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d13a      	bne.n	800c9f4 <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c97e:	7d2b      	ldrb	r3, [r5, #20]
 800c980:	065a      	lsls	r2, r3, #25
 800c982:	d540      	bpl.n	800ca06 <f_sync+0x9a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c984:	061b      	lsls	r3, r3, #24
 800c986:	d44f      	bmi.n	800ca28 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c988:	f7fc fba2 	bl	80090d0 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c98c:	9c01      	ldr	r4, [sp, #4]
 800c98e:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c992:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 800c994:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c996:	d13f      	bne.n	800ca18 <f_sync+0xac>
				if (res == FR_OK) {
					dir = fp->dir_ptr;
 800c998:	6aab      	ldr	r3, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c99a:	7ada      	ldrb	r2, [r3, #11]
 800c99c:	f042 0220 	orr.w	r2, r2, #32
 800c9a0:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c9a2:	68aa      	ldr	r2, [r5, #8]
 800c9a4:	6829      	ldr	r1, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9a6:	769a      	strb	r2, [r3, #26]
 800c9a8:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 800c9ac:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c9ae:	7809      	ldrb	r1, [r1, #0]
 800c9b0:	2903      	cmp	r1, #3
 800c9b2:	d103      	bne.n	800c9bc <f_sync+0x50>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9b4:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c9b6:	0a11      	lsrs	r1, r2, #8
 800c9b8:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800c9ba:	7559      	strb	r1, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c9bc:	68ea      	ldr	r2, [r5, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9be:	771a      	strb	r2, [r3, #28]
 800c9c0:	0a11      	lsrs	r1, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800c9c2:	7759      	strb	r1, [r3, #29]
 800c9c4:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c9c6:	0a31      	lsrs	r1, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800c9c8:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800c9ca:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9cc:	7798      	strb	r0, [r3, #30]
	*ptr++ = (BYTE)val;
 800c9ce:	77da      	strb	r2, [r3, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9d0:	75d9      	strb	r1, [r3, #23]
 800c9d2:	0c30      	lsrs	r0, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c9d4:	2200      	movs	r2, #0
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800c9d6:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800c9d8:	0e36      	lsrs	r6, r6, #24
 800c9da:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
 800c9dc:	765e      	strb	r6, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9de:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 800c9e0:	74da      	strb	r2, [r3, #19]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c9e2:	4620      	mov	r0, r4
					fs->wflag = 1;
 800c9e4:	70e1      	strb	r1, [r4, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c9e6:	f7fe f9df 	bl	800ada8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c9ea:	7d2b      	ldrb	r3, [r5, #20]
 800c9ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800c9f0:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c9f2:	752b      	strb	r3, [r5, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c9f4:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c9f6:	b118      	cbz	r0, 800ca00 <f_sync+0x94>
 800c9f8:	2c0c      	cmp	r4, #12
 800c9fa:	d001      	beq.n	800ca00 <f_sync+0x94>
 800c9fc:	2c0b      	cmp	r4, #11
 800c9fe:	d105      	bne.n	800ca0c <f_sync+0xa0>
}
 800ca00:	4620      	mov	r0, r4
 800ca02:	b002      	add	sp, #8
 800ca04:	bd70      	pop	{r4, r5, r6, pc}
	LEAVE_FF(fs, res);
 800ca06:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d0f9      	beq.n	800ca00 <f_sync+0x94>
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7ff fb2d 	bl	800c06c <unlock_fs.part.10>
}
 800ca12:	4620      	mov	r0, r4
 800ca14:	b002      	add	sp, #8
 800ca16:	bd70      	pop	{r4, r5, r6, pc}
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f7fe fa25 	bl	800ae68 <move_window.part.6>
				if (res == FR_OK) {
 800ca1e:	4604      	mov	r4, r0
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d1e7      	bne.n	800c9f4 <f_sync+0x88>
 800ca24:	9c01      	ldr	r4, [sp, #4]
 800ca26:	e7b7      	b.n	800c998 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	6a2a      	ldr	r2, [r5, #32]
 800ca2c:	7858      	ldrb	r0, [r3, #1]
 800ca2e:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800ca32:	2301      	movs	r3, #1
 800ca34:	f7fe f8b8 	bl	800aba8 <disk_write>
 800ca38:	b130      	cbz	r0, 800ca48 <f_sync+0xdc>
 800ca3a:	9b01      	ldr	r3, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ca3c:	b14b      	cbz	r3, 800ca52 <f_sync+0xe6>
		ff_rel_grant(fs->sobj);
 800ca3e:	6958      	ldr	r0, [r3, #20]
 800ca40:	f000 fb4a 	bl	800d0d8 <ff_rel_grant>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca44:	2401      	movs	r4, #1
 800ca46:	e7db      	b.n	800ca00 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca48:	7d2b      	ldrb	r3, [r5, #20]
 800ca4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca4e:	752b      	strb	r3, [r5, #20]
 800ca50:	e79a      	b.n	800c988 <f_sync+0x1c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca52:	2401      	movs	r4, #1
 800ca54:	e7d4      	b.n	800ca00 <f_sync+0x94>
 800ca56:	bf00      	nop

0800ca58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ca58:	b530      	push	{r4, r5, lr}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ca5e:	f7ff ff85 	bl	800c96c <f_sync>
	if (res == FR_OK)
 800ca62:	4604      	mov	r4, r0
 800ca64:	b110      	cbz	r0, 800ca6c <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800ca66:	4620      	mov	r0, r4
 800ca68:	b003      	add	sp, #12
 800ca6a:	bd30      	pop	{r4, r5, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ca6c:	a901      	add	r1, sp, #4
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f7ff fc10 	bl	800c294 <validate>
		if (res == FR_OK) {
 800ca74:	4604      	mov	r4, r0
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d1f5      	bne.n	800ca66 <f_close+0xe>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca7a:	692b      	ldr	r3, [r5, #16]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d909      	bls.n	800ca96 <f_close+0x3e>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca82:	2402      	movs	r4, #2
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ca84:	9b01      	ldr	r3, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0ed      	beq.n	800ca66 <f_close+0xe>
		ff_rel_grant(fs->sobj);
 800ca8a:	6958      	ldr	r0, [r3, #20]
 800ca8c:	f000 fb24 	bl	800d0d8 <ff_rel_grant>
}
 800ca90:	4620      	mov	r0, r4
 800ca92:	b003      	add	sp, #12
 800ca94:	bd30      	pop	{r4, r5, pc}
		n = Files[i].ctr;
 800ca96:	4909      	ldr	r1, [pc, #36]	; (800cabc <f_close+0x64>)
 800ca98:	011b      	lsls	r3, r3, #4
 800ca9a:	18c8      	adds	r0, r1, r3
 800ca9c:	8982      	ldrh	r2, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca9e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800caa2:	d007      	beq.n	800cab4 <f_close+0x5c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800caa4:	b13a      	cbz	r2, 800cab6 <f_close+0x5e>
 800caa6:	3a01      	subs	r2, #1
 800caa8:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800caaa:	8182      	strh	r2, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800caac:	b11a      	cbz	r2, 800cab6 <f_close+0x5e>
				fp->obj.fs = 0;			/* Invalidate file object */
 800caae:	2300      	movs	r3, #0
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	e7e7      	b.n	800ca84 <f_close+0x2c>
		Files[i].ctr = n;
 800cab4:	8184      	strh	r4, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cab6:	2200      	movs	r2, #0
 800cab8:	50ca      	str	r2, [r1, r3]
 800caba:	e7f8      	b.n	800caae <f_close+0x56>
 800cabc:	20007384 	.word	0x20007384

0800cac0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	b083      	sub	sp, #12
 800cac6:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cac8:	a901      	add	r1, sp, #4
{
 800caca:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cacc:	f7ff fbe2 	bl	800c294 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d15e      	bne.n	800cb92 <f_lseek+0xd2>
 800cad4:	7d65      	ldrb	r5, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cad6:	2d00      	cmp	r5, #0
 800cad8:	d15c      	bne.n	800cb94 <f_lseek+0xd4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d064      	beq.n	800cbaa <f_lseek+0xea>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cae0:	1c71      	adds	r1, r6, #1
 800cae2:	f000 80b5 	beq.w	800cc50 <f_lseek+0x190>
 800cae6:	68e3      	ldr	r3, [r4, #12]
 800cae8:	9801      	ldr	r0, [sp, #4]
 800caea:	429e      	cmp	r6, r3
 800caec:	bf28      	it	cs
 800caee:	461e      	movcs	r6, r3
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
			fp->fptr = ofs;				/* Set file pointer */
 800caf0:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800caf2:	2e00      	cmp	r6, #0
 800caf4:	d045      	beq.n	800cb82 <f_lseek+0xc2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800caf6:	6827      	ldr	r7, [r4, #0]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800caf8:	6853      	ldr	r3, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cafa:	89b9      	ldrh	r1, [r7, #12]
 800cafc:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cb00:	3204      	adds	r2, #4
				fp->clust = clmt_clust(fp, ofs - 1);
 800cb02:	1e77      	subs	r7, r6, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb04:	fbb7 f1f1 	udiv	r1, r7, r1
 800cb08:	fbb1 f1fc 	udiv	r1, r1, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cb0c:	b933      	cbnz	r3, 800cb1c <f_lseek+0x5c>
 800cb0e:	e0c8      	b.n	800cca2 <f_lseek+0x1e2>
		cl -= ncl; tbl++;		/* Next fragment */
 800cb10:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb12:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 80c3 	beq.w	800cca2 <f_lseek+0x1e2>
		if (cl < ncl) break;	/* In this fragment? */
 800cb1c:	428b      	cmp	r3, r1
 800cb1e:	d9f7      	bls.n	800cb10 <f_lseek+0x50>
	return cl + *tbl;	/* Return the cluster number */
 800cb20:	6853      	ldr	r3, [r2, #4]
 800cb22:	440b      	add	r3, r1
 800cb24:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb26:	6a01      	ldr	r1, [r0, #32]
				fp->clust = clmt_clust(fp, ofs - 1);
 800cb28:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb2a:	1e8b      	subs	r3, r1, #2
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	f240 80ca 	bls.w	800ccc6 <f_lseek+0x206>
	return clst * fs->csize + fs->database;
 800cb32:	8941      	ldrh	r1, [r0, #10]
 800cb34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb36:	fb02 3301 	mla	r3, r2, r1, r3
				dsc = clust2sect(fs, fp->clust);
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f000 80c3 	beq.w	800ccc6 <f_lseek+0x206>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cb40:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cb44:	fbb6 f2fc 	udiv	r2, r6, ip
 800cb48:	fb0c 6612 	mls	r6, ip, r2, r6
 800cb4c:	b1d6      	cbz	r6, 800cb84 <f_lseek+0xc4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cb4e:	fbb7 f6fc 	udiv	r6, r7, ip
 800cb52:	3901      	subs	r1, #1
 800cb54:	400e      	ands	r6, r1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cb56:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cb58:	441e      	add	r6, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cb5a:	42b2      	cmp	r2, r6
 800cb5c:	d012      	beq.n	800cb84 <f_lseek+0xc4>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb5e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800cb62:	7840      	ldrb	r0, [r0, #1]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f104 0730 	add.w	r7, r4, #48	; 0x30
 800cb6a:	f2c0 810e 	blt.w	800cd8a <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cb6e:	4639      	mov	r1, r7
 800cb70:	2301      	movs	r3, #1
 800cb72:	4632      	mov	r2, r6
 800cb74:	f7fe f80a 	bl	800ab8c <disk_read>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	f040 808a 	bne.w	800cc92 <f_lseek+0x1d2>
 800cb7e:	9801      	ldr	r0, [sp, #4]
#endif
					fp->sect = dsc;
 800cb80:	6226      	str	r6, [r4, #32]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cb82:	b110      	cbz	r0, 800cb8a <f_lseek+0xca>
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7ff fa71 	bl	800c06c <unlock_fs.part.10>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	b003      	add	sp, #12
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb92:	4605      	mov	r5, r0
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cb94:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d0f7      	beq.n	800cb8a <f_lseek+0xca>
 800cb9a:	2d0c      	cmp	r5, #12
 800cb9c:	d0f5      	beq.n	800cb8a <f_lseek+0xca>
 800cb9e:	2d0b      	cmp	r5, #11
 800cba0:	d1f0      	bne.n	800cb84 <f_lseek+0xc4>
}
 800cba2:	4628      	mov	r0, r5
 800cba4:	b003      	add	sp, #12
 800cba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cbaa:	68e3      	ldr	r3, [r4, #12]
 800cbac:	42b3      	cmp	r3, r6
 800cbae:	d204      	bcs.n	800cbba <f_lseek+0xfa>
 800cbb0:	7d22      	ldrb	r2, [r4, #20]
 800cbb2:	f012 0f02 	tst.w	r2, #2
 800cbb6:	bf08      	it	eq
 800cbb8:	461e      	moveq	r6, r3
 800cbba:	9901      	ldr	r1, [sp, #4]
		ifptr = fp->fptr;
 800cbbc:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	d0dc      	beq.n	800cb82 <f_lseek+0xc2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cbc8:	894a      	ldrh	r2, [r1, #10]
 800cbca:	f8b1 800c 	ldrh.w	r8, [r1, #12]
 800cbce:	fb08 f802 	mul.w	r8, r8, r2
			if (ifptr > 0 &&
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d036      	beq.n	800cc44 <f_lseek+0x184>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	1e72      	subs	r2, r6, #1
 800cbda:	fbb3 f1f8 	udiv	r1, r3, r8
 800cbde:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800cbe2:	428a      	cmp	r2, r1
 800cbe4:	d32e      	bcc.n	800cc44 <f_lseek+0x184>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cbe6:	f1c8 0200 	rsb	r2, r8, #0
 800cbea:	4013      	ands	r3, r2
				clst = fp->clust;
 800cbec:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cbee:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 800cbf0:	1af6      	subs	r6, r6, r3
			if (clst != 0) {
 800cbf2:	2f00      	cmp	r7, #0
 800cbf4:	f000 8082 	beq.w	800ccfc <f_lseek+0x23c>
				while (ofs > bcs) {						/* Cluster following loop */
 800cbf8:	4546      	cmp	r6, r8
 800cbfa:	d815      	bhi.n	800cc28 <f_lseek+0x168>
 800cbfc:	e0d3      	b.n	800cda6 <f_lseek+0x2e6>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cbfe:	f7fe fcf5 	bl	800b5ec <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cc02:	4607      	mov	r7, r0
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d078      	beq.n	800ccfa <f_lseek+0x23a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc08:	1c7b      	adds	r3, r7, #1
 800cc0a:	9901      	ldr	r1, [sp, #4]
 800cc0c:	f000 80e0 	beq.w	800cdd0 <f_lseek+0x310>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cc10:	2f01      	cmp	r7, #1
 800cc12:	f240 80e6 	bls.w	800cde2 <f_lseek+0x322>
 800cc16:	6a0b      	ldr	r3, [r1, #32]
 800cc18:	42bb      	cmp	r3, r7
 800cc1a:	f240 80eb 	bls.w	800cdf4 <f_lseek+0x334>
				while (ofs > bcs) {						/* Cluster following loop */
 800cc1e:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800cc20:	61e7      	str	r7, [r4, #28]
 800cc22:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800cc24:	f080 80c0 	bcs.w	800cda8 <f_lseek+0x2e8>
					ofs -= bcs; fp->fptr += bcs;
 800cc28:	4443      	add	r3, r8
 800cc2a:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cc2c:	7d23      	ldrb	r3, [r4, #20]
 800cc2e:	079a      	lsls	r2, r3, #30
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cc30:	4639      	mov	r1, r7
 800cc32:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800cc34:	eba6 0608 	sub.w	r6, r6, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cc38:	d4e1      	bmi.n	800cbfe <f_lseek+0x13e>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cc3a:	6820      	ldr	r0, [r4, #0]
 800cc3c:	f7fe fc00 	bl	800b440 <get_fat.isra.9>
 800cc40:	4607      	mov	r7, r0
 800cc42:	e7e1      	b.n	800cc08 <f_lseek+0x148>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cc44:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cc46:	2f00      	cmp	r7, #0
 800cc48:	d04b      	beq.n	800cce2 <f_lseek+0x222>
 800cc4a:	2300      	movs	r3, #0
				fp->clust = clst;
 800cc4c:	61e7      	str	r7, [r4, #28]
 800cc4e:	e7d0      	b.n	800cbf2 <f_lseek+0x132>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cc50:	68a7      	ldr	r7, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc52:	f8d2 9000 	ldr.w	r9, [r2]
 800cc56:	f102 0a04 	add.w	sl, r2, #4
			if (cl) {
 800cc5a:	b32f      	cbz	r7, 800cca8 <f_lseek+0x1e8>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc5c:	f04f 0802 	mov.w	r8, #2
 800cc60:	463e      	mov	r6, r7
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cc62:	f04f 0b00 	mov.w	fp, #0
 800cc66:	e003      	b.n	800cc70 <f_lseek+0x1b0>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc68:	1c42      	adds	r2, r0, #1
 800cc6a:	d012      	beq.n	800cc92 <f_lseek+0x1d2>
					} while (cl == pcl + 1);
 800cc6c:	4283      	cmp	r3, r0
 800cc6e:	d16f      	bne.n	800cd50 <f_lseek+0x290>
						cl = get_fat(&fp->obj, cl);
 800cc70:	4631      	mov	r1, r6
 800cc72:	6820      	ldr	r0, [r4, #0]
 800cc74:	f7fe fbe4 	bl	800b440 <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cc78:	2801      	cmp	r0, #1
					} while (cl == pcl + 1);
 800cc7a:	f106 0301 	add.w	r3, r6, #1
						pcl = cl; ncl++;
 800cc7e:	f10b 0b01 	add.w	fp, fp, #1
 800cc82:	4606      	mov	r6, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cc84:	d8f0      	bhi.n	800cc68 <f_lseek+0x1a8>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	2502      	movs	r5, #2
 800cc8a:	7565      	strb	r5, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cc8c:	b92b      	cbnz	r3, 800cc9a <f_lseek+0x1da>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cc8e:	2502      	movs	r5, #2
 800cc90:	e77b      	b.n	800cb8a <f_lseek+0xca>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc92:	9b01      	ldr	r3, [sp, #4]
 800cc94:	2501      	movs	r5, #1
 800cc96:	7565      	strb	r5, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cc98:	b1db      	cbz	r3, 800ccd2 <f_lseek+0x212>
		ff_rel_grant(fs->sobj);
 800cc9a:	6958      	ldr	r0, [r3, #20]
 800cc9c:	f000 fa1c 	bl	800d0d8 <ff_rel_grant>
 800cca0:	e773      	b.n	800cb8a <f_lseek+0xca>
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cca2:	f06f 0201 	mvn.w	r2, #1
 800cca6:	e73e      	b.n	800cb26 <f_lseek+0x66>
 800cca8:	9901      	ldr	r1, [sp, #4]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ccaa:	f04f 0802 	mov.w	r8, #2
			if (ulen <= tlen) {
 800ccae:	45c8      	cmp	r8, r9
			*fp->cltbl = ulen;	/* Number of items used */
 800ccb0:	f8c2 8000 	str.w	r8, [r2]
			if (ulen <= tlen) {
 800ccb4:	d80f      	bhi.n	800ccd6 <f_lseek+0x216>
				*tbl = 0;		/* Terminate table */
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	f8ca 3000 	str.w	r3, [sl]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	f47f af60 	bne.w	800cb84 <f_lseek+0xc4>
 800ccc4:	e761      	b.n	800cb8a <f_lseek+0xca>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ccc6:	2502      	movs	r5, #2
 800ccc8:	7565      	strb	r5, [r4, #21]
		ff_rel_grant(fs->sobj);
 800ccca:	6940      	ldr	r0, [r0, #20]
 800cccc:	f000 fa04 	bl	800d0d8 <ff_rel_grant>
 800ccd0:	e75b      	b.n	800cb8a <f_lseek+0xca>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccd2:	2501      	movs	r5, #1
 800ccd4:	e759      	b.n	800cb8a <f_lseek+0xca>
 800ccd6:	4608      	mov	r0, r1
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ccd8:	2511      	movs	r5, #17
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f47f af52 	bne.w	800cb84 <f_lseek+0xc4>
 800cce0:	e753      	b.n	800cb8a <f_lseek+0xca>
					clst = create_chain(&fp->obj, 0);
 800cce2:	4639      	mov	r1, r7
 800cce4:	4620      	mov	r0, r4
 800cce6:	f7fe fc81 	bl	800b5ec <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ccea:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800ccec:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ccee:	d0ca      	beq.n	800cc86 <f_lseek+0x1c6>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccf0:	1c41      	adds	r1, r0, #1
 800ccf2:	d0ce      	beq.n	800cc92 <f_lseek+0x1d2>
					fp->obj.sclust = clst;
 800ccf4:	60a0      	str	r0, [r4, #8]
 800ccf6:	69a3      	ldr	r3, [r4, #24]
 800ccf8:	e7a8      	b.n	800cc4c <f_lseek+0x18c>
 800ccfa:	69a3      	ldr	r3, [r4, #24]
 800ccfc:	9901      	ldr	r1, [sp, #4]
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ccfe:	68e2      	ldr	r2, [r4, #12]
 800cd00:	429a      	cmp	r2, r3
			fp->flag |= FA_MODIFIED;
 800cd02:	bf3f      	itttt	cc
 800cd04:	7d22      	ldrbcc	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800cd06:	60e3      	strcc	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800cd08:	f042 0240 	orrcc.w	r2, r2, #64	; 0x40
 800cd0c:	7522      	strbcc	r2, [r4, #20]
 800cd0e:	898a      	ldrh	r2, [r1, #12]
 800cd10:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd14:	fb02 3310 	mls	r3, r2, r0, r3
 800cd18:	4608      	mov	r0, r1
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f43f af32 	beq.w	800cb84 <f_lseek+0xc4>
 800cd20:	6a22      	ldr	r2, [r4, #32]
 800cd22:	42ba      	cmp	r2, r7
 800cd24:	f43f af2e 	beq.w	800cb84 <f_lseek+0xc4>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cd28:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800cd2c:	7848      	ldrb	r0, [r1, #1]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cd34:	db1c      	blt.n	800cd70 <f_lseek+0x2b0>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd36:	4631      	mov	r1, r6
 800cd38:	2301      	movs	r3, #1
 800cd3a:	463a      	mov	r2, r7
 800cd3c:	f7fd ff26 	bl	800ab8c <disk_read>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d1a6      	bne.n	800cc92 <f_lseek+0x1d2>
 800cd44:	9801      	ldr	r0, [sp, #4]
			fp->sect = nsect;
 800cd46:	6227      	str	r7, [r4, #32]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f47f af1b 	bne.w	800cb84 <f_lseek+0xc4>
 800cd4e:	e71c      	b.n	800cb8a <f_lseek+0xca>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cd50:	f108 0802 	add.w	r8, r8, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cd54:	45c1      	cmp	r9, r8
 800cd56:	d305      	bcc.n	800cd64 <f_lseek+0x2a4>
						*tbl++ = ncl; *tbl++ = tcl;
 800cd58:	4653      	mov	r3, sl
 800cd5a:	f843 bb08 	str.w	fp, [r3], #8
 800cd5e:	f8ca 7004 	str.w	r7, [sl, #4]
 800cd62:	469a      	mov	sl, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cd64:	9901      	ldr	r1, [sp, #4]
 800cd66:	6a0b      	ldr	r3, [r1, #32]
 800cd68:	4283      	cmp	r3, r0
 800cd6a:	d94b      	bls.n	800ce04 <f_lseek+0x344>
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	e777      	b.n	800cc60 <f_lseek+0x1a0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd70:	2301      	movs	r3, #1
 800cd72:	4631      	mov	r1, r6
 800cd74:	f7fd ff18 	bl	800aba8 <disk_write>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d18a      	bne.n	800cc92 <f_lseek+0x1d2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd7c:	7d23      	ldrb	r3, [r4, #20]
 800cd7e:	9a01      	ldr	r2, [sp, #4]
 800cd80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd84:	7523      	strb	r3, [r4, #20]
 800cd86:	7850      	ldrb	r0, [r2, #1]
 800cd88:	e7d5      	b.n	800cd36 <f_lseek+0x276>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	f7fd ff0b 	bl	800aba8 <disk_write>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f47f af7d 	bne.w	800cc92 <f_lseek+0x1d2>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cd98:	7d23      	ldrb	r3, [r4, #20]
 800cd9a:	9a01      	ldr	r2, [sp, #4]
 800cd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda0:	7523      	strb	r3, [r4, #20]
 800cda2:	7850      	ldrb	r0, [r2, #1]
 800cda4:	e6e3      	b.n	800cb6e <f_lseek+0xae>
 800cda6:	9901      	ldr	r1, [sp, #4]
				if (ofs % SS(fs)) {
 800cda8:	898a      	ldrh	r2, [r1, #12]
 800cdaa:	fbb6 f0f2 	udiv	r0, r6, r2
				fp->fptr += ofs;
 800cdae:	4433      	add	r3, r6
				if (ofs % SS(fs)) {
 800cdb0:	fb02 6210 	mls	r2, r2, r0, r6
				fp->fptr += ofs;
 800cdb4:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800cdb6:	b31a      	cbz	r2, 800ce00 <f_lseek+0x340>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cdb8:	6a0a      	ldr	r2, [r1, #32]
	clst -= 2;
 800cdba:	1ebe      	subs	r6, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cdbc:	3a02      	subs	r2, #2
 800cdbe:	4296      	cmp	r6, r2
 800cdc0:	d21b      	bcs.n	800cdfa <f_lseek+0x33a>
	return clst * fs->csize + fs->database;
 800cdc2:	894f      	ldrh	r7, [r1, #10]
 800cdc4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800cdc6:	fb06 2707 	mla	r7, r6, r7, r2
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cdca:	b1b7      	cbz	r7, 800cdfa <f_lseek+0x33a>
					nsect += (DWORD)(ofs / SS(fs));
 800cdcc:	4407      	add	r7, r0
 800cdce:	e796      	b.n	800ccfe <f_lseek+0x23e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdd0:	2501      	movs	r5, #1
 800cdd2:	7565      	strb	r5, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	f43f af7c 	beq.w	800ccd2 <f_lseek+0x212>
		ff_rel_grant(fs->sobj);
 800cdda:	6948      	ldr	r0, [r1, #20]
 800cddc:	f000 f97c 	bl	800d0d8 <ff_rel_grant>
 800cde0:	e6d3      	b.n	800cb8a <f_lseek+0xca>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cde2:	2302      	movs	r3, #2
 800cde4:	7563      	strb	r3, [r4, #21]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cde6:	2900      	cmp	r1, #0
 800cde8:	f43f af51 	beq.w	800cc8e <f_lseek+0x1ce>
		ff_rel_grant(fs->sobj);
 800cdec:	6948      	ldr	r0, [r1, #20]
 800cdee:	f000 f973 	bl	800d0d8 <ff_rel_grant>
 800cdf2:	e74c      	b.n	800cc8e <f_lseek+0x1ce>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	7563      	strb	r3, [r4, #21]
 800cdf8:	e7f8      	b.n	800cdec <f_lseek+0x32c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cdfa:	2502      	movs	r5, #2
 800cdfc:	7565      	strb	r5, [r4, #21]
 800cdfe:	e7ec      	b.n	800cdda <f_lseek+0x31a>
		fp->fptr = nsect = 0;
 800ce00:	4617      	mov	r7, r2
 800ce02:	e77c      	b.n	800ccfe <f_lseek+0x23e>
 800ce04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ce06:	e752      	b.n	800ccae <f_lseek+0x1ee>

0800ce08 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ce08:	b530      	push	{r4, r5, lr}
 800ce0a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800ce0e:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ce10:	b360      	cbz	r0, 800ce6c <f_opendir+0x64>
 800ce12:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800ce14:	a903      	add	r1, sp, #12
 800ce16:	2200      	movs	r2, #0
 800ce18:	a801      	add	r0, sp, #4
 800ce1a:	f7fe f88b 	bl	800af34 <find_volume>
	if (res == FR_OK) {
 800ce1e:	4604      	mov	r4, r0
 800ce20:	b158      	cbz	r0, 800ce3a <f_opendir+0x32>
 800ce22:	9803      	ldr	r0, [sp, #12]
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ce24:	2300      	movs	r3, #0
 800ce26:	602b      	str	r3, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ce28:	b118      	cbz	r0, 800ce32 <f_opendir+0x2a>
 800ce2a:	2c0c      	cmp	r4, #12
 800ce2c:	d001      	beq.n	800ce32 <f_opendir+0x2a>
 800ce2e:	2c0b      	cmp	r4, #11
 800ce30:	d115      	bne.n	800ce5e <f_opendir+0x56>

	LEAVE_FF(fs, res);
}
 800ce32:	4620      	mov	r0, r4
 800ce34:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800ce38:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 800ce3e:	aa04      	add	r2, sp, #16
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ce40:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 800ce42:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ce44:	4628      	mov	r0, r5
 800ce46:	f7fe fe0d 	bl	800ba64 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	b198      	cbz	r0, 800ce76 <f_opendir+0x6e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ce4e:	2c04      	cmp	r4, #4
 800ce50:	9803      	ldr	r0, [sp, #12]
 800ce52:	d1e7      	bne.n	800ce24 <f_opendir+0x1c>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ce54:	2300      	movs	r3, #0
 800ce56:	602b      	str	r3, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d036      	beq.n	800ceca <f_opendir+0xc2>
 800ce5c:	2405      	movs	r4, #5
 800ce5e:	4621      	mov	r1, r4
 800ce60:	f7ff f904 	bl	800c06c <unlock_fs.part.10>
}
 800ce64:	4620      	mov	r0, r4
 800ce66:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800ce6a:	bd30      	pop	{r4, r5, pc}
	if (!dp) return FR_INVALID_OBJECT;
 800ce6c:	2409      	movs	r4, #9
}
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800ce74:	bd30      	pop	{r4, r5, pc}
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ce76:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 800ce7a:	9803      	ldr	r0, [sp, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	db11      	blt.n	800cea4 <f_opendir+0x9c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ce80:	79ab      	ldrb	r3, [r5, #6]
 800ce82:	06db      	lsls	r3, r3, #27
 800ce84:	d51e      	bpl.n	800cec4 <f_opendir+0xbc>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ce86:	6a2a      	ldr	r2, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 800ce88:	7801      	ldrb	r1, [r0, #0]
	rv = rv << 8 | ptr[0];
 800ce8a:	7ed4      	ldrb	r4, [r2, #27]
 800ce8c:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800ce8e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ce90:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800ce94:	d105      	bne.n	800cea2 <f_opendir+0x9a>
	rv = rv << 8 | ptr[0];
 800ce96:	7d51      	ldrb	r1, [r2, #21]
 800ce98:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ce9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cea2:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 800cea4:	88c3      	ldrh	r3, [r0, #6]
 800cea6:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cea8:	2100      	movs	r1, #0
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f7fe fb4c 	bl	800b548 <dir_sdi>
				if (res == FR_OK) {
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d1cb      	bne.n	800ce4e <f_opendir+0x46>
					if (obj->sclust) {
 800ceb6:	68ab      	ldr	r3, [r5, #8]
 800ceb8:	b94b      	cbnz	r3, 800cece <f_opendir+0xc6>
	LEAVE_FF(fs, res);
 800ceba:	9803      	ldr	r0, [sp, #12]
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cebc:	612c      	str	r4, [r5, #16]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d1cd      	bne.n	800ce5e <f_opendir+0x56>
 800cec2:	e7b6      	b.n	800ce32 <f_opendir+0x2a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cec4:	602c      	str	r4, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d1c8      	bne.n	800ce5c <f_opendir+0x54>
	if (!dp) return FR_INVALID_OBJECT;
 800ceca:	2405      	movs	r4, #5
 800cecc:	e7b1      	b.n	800ce32 <f_opendir+0x2a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cece:	4601      	mov	r1, r0
 800ced0:	4628      	mov	r0, r5
 800ced2:	f7fd fec5 	bl	800ac60 <inc_lock>
 800ced6:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ced8:	b928      	cbnz	r0, 800cee6 <f_opendir+0xde>
	LEAVE_FF(fs, res);
 800ceda:	9803      	ldr	r0, [sp, #12]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cedc:	602c      	str	r4, [r5, #0]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cede:	2412      	movs	r4, #18
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d1bc      	bne.n	800ce5e <f_opendir+0x56>
 800cee4:	e7a5      	b.n	800ce32 <f_opendir+0x2a>
	LEAVE_FF(fs, res);
 800cee6:	9803      	ldr	r0, [sp, #12]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d1b8      	bne.n	800ce5e <f_opendir+0x56>
 800ceec:	e7a1      	b.n	800ce32 <f_opendir+0x2a>
 800ceee:	bf00      	nop

0800cef0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef2:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 800cef6:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cef8:	a901      	add	r1, sp, #4
{
 800cefa:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cefc:	f7ff f9ca 	bl	800c294 <validate>
	if (res == FR_OK) {
 800cf00:	4604      	mov	r4, r0
 800cf02:	b950      	cbnz	r0, 800cf1a <f_readdir+0x2a>
		if (!fno) {
 800cf04:	b32e      	cbz	r6, 800cf52 <f_readdir+0x62>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800cf06:	9b01      	ldr	r3, [sp, #4]
 800cf08:	aa02      	add	r2, sp, #8
 800cf0a:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f7ff f92f 	bl	800c170 <dir_read.constprop.12>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
 800cf12:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800cf16:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800cf18:	d00c      	beq.n	800cf34 <f_readdir+0x44>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cf1a:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf1c:	b130      	cbz	r0, 800cf2c <f_readdir+0x3c>
 800cf1e:	2c0c      	cmp	r4, #12
 800cf20:	d004      	beq.n	800cf2c <f_readdir+0x3c>
 800cf22:	2c0b      	cmp	r4, #11
 800cf24:	d002      	beq.n	800cf2c <f_readdir+0x3c>
 800cf26:	4621      	mov	r1, r4
 800cf28:	f7ff f8a0 	bl	800c06c <unlock_fs.part.10>
}
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 800cf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
				get_fileinfo(dp, fno);		/* Get the object information */
 800cf34:	4631      	mov	r1, r6
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7ff f89e 	bl	800c078 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f7fe fc02 	bl	800b748 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf44:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 800cf46:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf48:	d1e7      	bne.n	800cf1a <f_readdir+0x2a>
	LEAVE_FF(fs, res);
 800cf4a:	9801      	ldr	r0, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cf4c:	b138      	cbz	r0, 800cf5e <f_readdir+0x6e>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf4e:	463c      	mov	r4, r7
 800cf50:	e7e9      	b.n	800cf26 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cf52:	4601      	mov	r1, r0
 800cf54:	4628      	mov	r0, r5
 800cf56:	f7fe faf7 	bl	800b548 <dir_sdi>
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	e7dd      	b.n	800cf1a <f_readdir+0x2a>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cf5e:	4604      	mov	r4, r0
 800cf60:	e7e4      	b.n	800cf2c <f_readdir+0x3c>
 800cf62:	bf00      	nop

0800cf64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf64:	b4f0      	push	{r4, r5, r6, r7}
  if(disk.nbr < _VOLUMES)
 800cf66:	4b10      	ldr	r3, [pc, #64]	; (800cfa8 <FATFS_LinkDriver+0x44>)
 800cf68:	7a5c      	ldrb	r4, [r3, #9]
 800cf6a:	b114      	cbz	r4, 800cf72 <FATFS_LinkDriver+0xe>
  uint8_t ret = 1;
 800cf6c:	2001      	movs	r0, #1
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800cf6e:	bcf0      	pop	{r4, r5, r6, r7}
 800cf70:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 800cf72:	7a5f      	ldrb	r7, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800cf74:	7a5e      	ldrb	r6, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800cf76:	7a5d      	ldrb	r5, [r3, #9]
 800cf78:	f004 02ff 	and.w	r2, r4, #255	; 0xff
    DiskNum = disk.nbr++;
 800cf7c:	7a5c      	ldrb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 800cf7e:	55da      	strb	r2, [r3, r7]
    disk.drv[disk.nbr] = drv;
 800cf80:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    DiskNum = disk.nbr++;
 800cf84:	b2e4      	uxtb	r4, r4
    disk.drv[disk.nbr] = drv;
 800cf86:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 800cf88:	441d      	add	r5, r3
    DiskNum = disk.nbr++;
 800cf8a:	1c60      	adds	r0, r4, #1
 800cf8c:	b2c0      	uxtb	r0, r0
 800cf8e:	7258      	strb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800cf90:	722a      	strb	r2, [r5, #8]
    path[0] = DiskNum + '0';
 800cf92:	3430      	adds	r4, #48	; 0x30
    path[1] = ':';
 800cf94:	253a      	movs	r5, #58	; 0x3a
    path[2] = '/';
 800cf96:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800cf98:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 800cf9a:	4610      	mov	r0, r2
    path[1] = ':';
 800cf9c:	704d      	strb	r5, [r1, #1]
    path[3] = 0;
 800cf9e:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800cfa0:	708b      	strb	r3, [r1, #2]
}
 800cfa2:	bcf0      	pop	{r4, r5, r6, r7}
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	200073a8 	.word	0x200073a8

0800cfac <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cfac:	287f      	cmp	r0, #127	; 0x7f
 800cfae:	d91a      	bls.n	800cfe6 <ff_convert+0x3a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cfb0:	b991      	cbnz	r1, 800cfd8 <ff_convert+0x2c>
{
 800cfb2:	b410      	push	{r4}
 800cfb4:	4a0e      	ldr	r2, [pc, #56]	; (800cff0 <ff_convert+0x44>)
		if (dir) {		/* OEM code to Unicode */
 800cfb6:	23c7      	movs	r3, #199	; 0xc7
 800cfb8:	e003      	b.n	800cfc2 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cfba:	2980      	cmp	r1, #128	; 0x80
 800cfbc:	d016      	beq.n	800cfec <ff_convert+0x40>
 800cfbe:	f832 3f02 	ldrh.w	r3, [r2, #2]!
				if (chr == Tbl[c]) break;
 800cfc2:	4298      	cmp	r0, r3
 800cfc4:	b28c      	uxth	r4, r1
 800cfc6:	f101 0101 	add.w	r1, r1, #1
 800cfca:	d1f6      	bne.n	800cfba <ff_convert+0xe>
 800cfcc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800cfd0:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 800cfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfd6:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cfd8:	28ff      	cmp	r0, #255	; 0xff
 800cfda:	d805      	bhi.n	800cfe8 <ff_convert+0x3c>
 800cfdc:	4b04      	ldr	r3, [pc, #16]	; (800cff0 <ff_convert+0x44>)
 800cfde:	3880      	subs	r0, #128	; 0x80
 800cfe0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800cfe4:	4770      	bx	lr
}
 800cfe6:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cfe8:	2000      	movs	r0, #0
 800cfea:	4770      	bx	lr
 800cfec:	2000      	movs	r0, #0
 800cfee:	e7f0      	b.n	800cfd2 <ff_convert+0x26>
 800cff0:	080128f0 	.word	0x080128f0

0800cff4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cff4:	b470      	push	{r4, r5, r6}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cff6:	4a26      	ldr	r2, [pc, #152]	; (800d090 <ff_wtoupper+0x9c>)
 800cff8:	4b26      	ldr	r3, [pc, #152]	; (800d094 <ff_wtoupper+0xa0>)
 800cffa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800cffe:	f641 517d 	movw	r1, #7549	; 0x1d7d
 800d002:	bf3c      	itt	cc
 800d004:	4613      	movcc	r3, r2
 800d006:	2161      	movcc	r1, #97	; 0x61
 800d008:	3304      	adds	r3, #4
 800d00a:	e00d      	b.n	800d028 <ff_wtoupper+0x34>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 800d00c:	4281      	cmp	r1, r0
 800d00e:	d80e      	bhi.n	800d02e <ff_wtoupper+0x3a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d010:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800d014:	b2d4      	uxtb	r4, r2
		if (chr < bc + nc) {	/* In the block? */
 800d016:	1865      	adds	r5, r4, r1
 800d018:	42a8      	cmp	r0, r5
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d01a:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 800d01e:	db08      	blt.n	800d032 <ff_wtoupper+0x3e>
 800d020:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800d022:	b17a      	cbz	r2, 800d044 <ff_wtoupper+0x50>
 800d024:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d028:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 800d02a:	2900      	cmp	r1, #0
 800d02c:	d1ee      	bne.n	800d00c <ff_wtoupper+0x18>
	}

	return chr;
}
 800d02e:	bc70      	pop	{r4, r5, r6}
 800d030:	4770      	bx	lr
			switch (cmd) {
 800d032:	2a08      	cmp	r2, #8
 800d034:	d8fb      	bhi.n	800d02e <ff_wtoupper+0x3a>
 800d036:	e8df f002 	tbb	[pc, r2]
 800d03a:	120e      	.short	0x120e
 800d03c:	211e1b18 	.word	0x211e1b18
 800d040:	2724      	.short	0x2724
 800d042:	0a          	.byte	0x0a
 800d043:	00          	.byte	0x00
		if (!cmd) p += nc;
 800d044:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 800d048:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800d04c:	e7dc      	b.n	800d008 <ff_wtoupper+0x14>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d04e:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800d052:	b280      	uxth	r0, r0
 800d054:	e7eb      	b.n	800d02e <ff_wtoupper+0x3a>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d056:	1a41      	subs	r1, r0, r1
 800d058:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800d05c:	e7e7      	b.n	800d02e <ff_wtoupper+0x3a>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d05e:	1a41      	subs	r1, r0, r1
 800d060:	f001 0301 	and.w	r3, r1, #1
 800d064:	1ac0      	subs	r0, r0, r3
 800d066:	b280      	uxth	r0, r0
 800d068:	e7e1      	b.n	800d02e <ff_wtoupper+0x3a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d06a:	3810      	subs	r0, #16
 800d06c:	b280      	uxth	r0, r0
 800d06e:	e7de      	b.n	800d02e <ff_wtoupper+0x3a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d070:	3820      	subs	r0, #32
 800d072:	b280      	uxth	r0, r0
 800d074:	e7db      	b.n	800d02e <ff_wtoupper+0x3a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d076:	3830      	subs	r0, #48	; 0x30
 800d078:	b280      	uxth	r0, r0
 800d07a:	e7d8      	b.n	800d02e <ff_wtoupper+0x3a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d07c:	381a      	subs	r0, #26
 800d07e:	b280      	uxth	r0, r0
 800d080:	e7d5      	b.n	800d02e <ff_wtoupper+0x3a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d082:	3008      	adds	r0, #8
 800d084:	b280      	uxth	r0, r0
 800d086:	e7d2      	b.n	800d02e <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d088:	3850      	subs	r0, #80	; 0x50
 800d08a:	b280      	uxth	r0, r0
 800d08c:	e7cf      	b.n	800d02e <ff_wtoupper+0x3a>
 800d08e:	bf00      	nop
 800d090:	080129f0 	.word	0x080129f0
 800d094:	08012be4 	.word	0x08012be4

0800d098 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d098:	b510      	push	{r4, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	460c      	mov	r4, r1
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800d09e:	2300      	movs	r3, #0
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	4668      	mov	r0, sp
    osSemaphoreDef(SEM);
 800d0a4:	e9cd 3300 	strd	r3, r3, [sp]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d0a8:	f000 f87c 	bl	800d1a4 <osSemaphoreCreate>
 800d0ac:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800d0ae:	3000      	adds	r0, #0
 800d0b0:	bf18      	it	ne
 800d0b2:	2001      	movne	r0, #1
 800d0b4:	b002      	add	sp, #8
 800d0b6:	bd10      	pop	{r4, pc}

0800d0b8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d0b8:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d0ba:	f000 f8d1 	bl	800d260 <osSemaphoreDelete>
#endif
    return 1;
}
 800d0be:	2001      	movs	r0, #1
 800d0c0:	bd08      	pop	{r3, pc}
 800d0c2:	bf00      	nop

0800d0c4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d0c4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800d0c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d0ca:	f000 f895 	bl	800d1f8 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 800d0ce:	fab0 f080 	clz	r0, r0
 800d0d2:	0940      	lsrs	r0, r0, #5
 800d0d4:	bd08      	pop	{r3, pc}
 800d0d6:	bf00      	nop

0800d0d8 <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d0d8:	f000 b8c0 	b.w	800d25c <osSemaphoreRelease>

0800d0dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d0dc:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d0de:	6945      	ldr	r5, [r0, #20]
 800d0e0:	6902      	ldr	r2, [r0, #16]
 800d0e2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	b086      	sub	sp, #24
 800d0ea:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d0ee:	b16d      	cbz	r5, 800d10c <osThreadCreate+0x30>
 800d0f0:	6980      	ldr	r0, [r0, #24]
 800d0f2:	b158      	cbz	r0, 800d10c <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 800d0f4:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800d0f6:	bf14      	ite	ne
 800d0f8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d0fa:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0fc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800d100:	9400      	str	r4, [sp, #0]
 800d102:	4630      	mov	r0, r6
 800d104:	f001 f8d8 	bl	800e2b8 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800d108:	b006      	add	sp, #24
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800d10c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800d10e:	bf14      	ite	ne
 800d110:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d112:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d114:	ad05      	add	r5, sp, #20
 800d116:	b292      	uxth	r2, r2
 800d118:	9400      	str	r4, [sp, #0]
 800d11a:	4630      	mov	r0, r6
 800d11c:	9501      	str	r5, [sp, #4]
 800d11e:	f001 f903 	bl	800e328 <xTaskCreate>
 800d122:	2801      	cmp	r0, #1
 800d124:	bf0c      	ite	eq
 800d126:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 800d128:	2000      	movne	r0, #0
}
 800d12a:	b006      	add	sp, #24
 800d12c:	bd70      	pop	{r4, r5, r6, pc}
 800d12e:	bf00      	nop

0800d130 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d130:	b530      	push	{r4, r5, lr}
 800d132:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d134:	2500      	movs	r5, #0
 800d136:	9501      	str	r5, [sp, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d138:	f3ef 8405 	mrs	r4, IPSR
  
  if (inHandlerMode()) {
 800d13c:	b19c      	cbz	r4, 800d166 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d13e:	a901      	add	r1, sp, #4
 800d140:	f000 fc30 	bl	800d9a4 <xQueueGiveFromISR>
 800d144:	2801      	cmp	r0, #1
 800d146:	d118      	bne.n	800d17a <osMutexRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d148:	9c01      	ldr	r4, [sp, #4]
 800d14a:	b1cc      	cbz	r4, 800d180 <osMutexRelease+0x50>
 800d14c:	f002 fc1a 	bl	800f984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800d150:	4b0e      	ldr	r3, [pc, #56]	; (800d18c <osMutexRelease+0x5c>)
 800d152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800d160:	4628      	mov	r0, r5
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d162:	b003      	add	sp, #12
 800d164:	bd30      	pop	{r4, r5, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d166:	4623      	mov	r3, r4
 800d168:	4622      	mov	r2, r4
 800d16a:	4621      	mov	r1, r4
 800d16c:	f000 facc 	bl	800d708 <xQueueGenericSend>
 800d170:	2801      	cmp	r0, #1
 800d172:	d102      	bne.n	800d17a <osMutexRelease+0x4a>
  osStatus result = osOK;
 800d174:	4620      	mov	r0, r4
}
 800d176:	b003      	add	sp, #12
 800d178:	bd30      	pop	{r4, r5, pc}
    result = osErrorOS;
 800d17a:	20ff      	movs	r0, #255	; 0xff
}
 800d17c:	b003      	add	sp, #12
 800d17e:	bd30      	pop	{r4, r5, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d180:	f002 fbee 	bl	800f960 <SEGGER_SYSVIEW_RecordExitISR>
  osStatus result = osOK;
 800d184:	4620      	mov	r0, r4
}
 800d186:	b003      	add	sp, #12
 800d188:	bd30      	pop	{r4, r5, pc}
 800d18a:	bf00      	nop
 800d18c:	e000ed04 	.word	0xe000ed04

0800d190 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800d190:	b510      	push	{r4, lr}
 800d192:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800d196:	b91c      	cbnz	r4, 800d1a0 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 800d198:	f000 fec8 	bl	800df2c <vQueueDelete>

  return osOK;
 800d19c:	4620      	mov	r0, r4
}
 800d19e:	bd10      	pop	{r4, pc}
    return osErrorISR;
 800d1a0:	2082      	movs	r0, #130	; 0x82
}
 800d1a2:	bd10      	pop	{r4, pc}

0800d1a4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d1a4:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d1a6:	6844      	ldr	r4, [r0, #4]
{ 
 800d1a8:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 800d1aa:	b16c      	cbz	r4, 800d1c8 <osSemaphoreCreate+0x24>
    if (count == 1) {
 800d1ac:	2901      	cmp	r1, #1
 800d1ae:	d11d      	bne.n	800d1ec <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d1b0:	2503      	movs	r5, #3
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	9500      	str	r5, [sp, #0]
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	f000 fa10 	bl	800d5e0 <xQueueGenericCreateStatic>
 800d1c0:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	b003      	add	sp, #12
 800d1c6:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 800d1c8:	2901      	cmp	r1, #1
 800d1ca:	d113      	bne.n	800d1f4 <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f000 fa63 	bl	800d69c <xQueueGenericCreate>
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d0f2      	beq.n	800d1c2 <osSemaphoreCreate+0x1e>
 800d1dc:	4623      	mov	r3, r4
 800d1de:	4622      	mov	r2, r4
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	f000 fa91 	bl	800d708 <xQueueGenericSend>
}
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	b003      	add	sp, #12
 800d1ea:	bd30      	pop	{r4, r5, pc}
      return NULL;
 800d1ec:	2500      	movs	r5, #0
}
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	b003      	add	sp, #12
 800d1f2:	bd30      	pop	{r4, r5, pc}
      return NULL;
 800d1f4:	4625      	mov	r5, r4
 800d1f6:	e7e4      	b.n	800d1c2 <osSemaphoreCreate+0x1e>

0800d1f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d1f8:	b530      	push	{r4, r5, lr}
 800d1fa:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	9501      	str	r5, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d200:	b330      	cbz	r0, 800d250 <osSemaphoreWait+0x58>
 800d202:	f3ef 8405 	mrs	r4, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d206:	b934      	cbnz	r4, 800d216 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d208:	f000 fd22 	bl	800dc50 <xQueueSemaphoreTake>
 800d20c:	2801      	cmp	r0, #1
 800d20e:	d117      	bne.n	800d240 <osSemaphoreWait+0x48>
    return osErrorOS;
  }
  
  return osOK;
 800d210:	4620      	mov	r0, r4
}
 800d212:	b003      	add	sp, #12
 800d214:	bd30      	pop	{r4, r5, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d216:	aa01      	add	r2, sp, #4
 800d218:	4629      	mov	r1, r5
 800d21a:	f000 fe19 	bl	800de50 <xQueueReceiveFromISR>
 800d21e:	2801      	cmp	r0, #1
 800d220:	d10e      	bne.n	800d240 <osSemaphoreWait+0x48>
	portEND_SWITCHING_ISR(taskWoken);
 800d222:	9c01      	ldr	r4, [sp, #4]
 800d224:	b17c      	cbz	r4, 800d246 <osSemaphoreWait+0x4e>
 800d226:	f002 fbad 	bl	800f984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800d22a:	4b0b      	ldr	r3, [pc, #44]	; (800d258 <osSemaphoreWait+0x60>)
 800d22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	f3bf 8f6f 	isb	sy
  return osOK;
 800d23a:	4628      	mov	r0, r5
}
 800d23c:	b003      	add	sp, #12
 800d23e:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 800d240:	20ff      	movs	r0, #255	; 0xff
}
 800d242:	b003      	add	sp, #12
 800d244:	bd30      	pop	{r4, r5, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800d246:	f002 fb8b 	bl	800f960 <SEGGER_SYSVIEW_RecordExitISR>
  return osOK;
 800d24a:	4620      	mov	r0, r4
}
 800d24c:	b003      	add	sp, #12
 800d24e:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 800d250:	2080      	movs	r0, #128	; 0x80
}
 800d252:	b003      	add	sp, #12
 800d254:	bd30      	pop	{r4, r5, pc}
 800d256:	bf00      	nop
 800d258:	e000ed04 	.word	0xe000ed04

0800d25c <osSemaphoreRelease>:
 800d25c:	f7ff bf68 	b.w	800d130 <osMutexRelease>

0800d260 <osSemaphoreDelete>:
 800d260:	f7ff bf96 	b.w	800d190 <osMutexDelete>

0800d264 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d264:	b530      	push	{r4, r5, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d266:	6882      	ldr	r2, [r0, #8]
{
 800d268:	b083      	sub	sp, #12
 800d26a:	e9d0 4100 	ldrd	r4, r1, [r0]
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d26e:	b10a      	cbz	r2, 800d274 <osMessageCreate+0x10>
 800d270:	68c3      	ldr	r3, [r0, #12]
 800d272:	b933      	cbnz	r3, 800d282 <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d274:	4620      	mov	r0, r4
 800d276:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d278:	b003      	add	sp, #12
 800d27a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d27e:	f000 ba0d 	b.w	800d69c <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d282:	2500      	movs	r5, #0
 800d284:	4620      	mov	r0, r4
 800d286:	9500      	str	r5, [sp, #0]
 800d288:	f000 f9aa 	bl	800d5e0 <xQueueGenericCreateStatic>
}
 800d28c:	b003      	add	sp, #12
 800d28e:	bd30      	pop	{r4, r5, pc}

0800d290 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d290:	b530      	push	{r4, r5, lr}
 800d292:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken = pdFALSE;
 800d294:	2500      	movs	r5, #0
{
 800d296:	9101      	str	r1, [sp, #4]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800d298:	42aa      	cmp	r2, r5
 800d29a:	bf08      	it	eq
 800d29c:	2201      	moveq	r2, #1
  portBASE_TYPE taskWoken = pdFALSE;
 800d29e:	9503      	str	r5, [sp, #12]
 800d2a0:	f3ef 8405 	mrs	r4, IPSR
  }
  
  if (inHandlerMode()) {
 800d2a4:	b1ac      	cbz	r4, 800d2d2 <osMessagePut+0x42>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d2a6:	462b      	mov	r3, r5
 800d2a8:	aa03      	add	r2, sp, #12
 800d2aa:	a901      	add	r1, sp, #4
 800d2ac:	f000 fb06 	bl	800d8bc <xQueueGenericSendFromISR>
 800d2b0:	2801      	cmp	r0, #1
 800d2b2:	d117      	bne.n	800d2e4 <osMessagePut+0x54>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d2b4:	9c03      	ldr	r4, [sp, #12]
 800d2b6:	b1c4      	cbz	r4, 800d2ea <osMessagePut+0x5a>
 800d2b8:	f002 fb64 	bl	800f984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	; (800d2f4 <osMessagePut+0x64>)
 800d2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800d2cc:	4628      	mov	r0, r5
}
 800d2ce:	b005      	add	sp, #20
 800d2d0:	bd30      	pop	{r4, r5, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d2d2:	4623      	mov	r3, r4
 800d2d4:	a901      	add	r1, sp, #4
 800d2d6:	f000 fa17 	bl	800d708 <xQueueGenericSend>
 800d2da:	2801      	cmp	r0, #1
 800d2dc:	d102      	bne.n	800d2e4 <osMessagePut+0x54>
  return osOK;
 800d2de:	4620      	mov	r0, r4
}
 800d2e0:	b005      	add	sp, #20
 800d2e2:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 800d2e4:	20ff      	movs	r0, #255	; 0xff
}
 800d2e6:	b005      	add	sp, #20
 800d2e8:	bd30      	pop	{r4, r5, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d2ea:	f002 fb39 	bl	800f960 <SEGGER_SYSVIEW_RecordExitISR>
  return osOK;
 800d2ee:	4620      	mov	r0, r4
}
 800d2f0:	b005      	add	sp, #20
 800d2f2:	bd30      	pop	{r4, r5, pc}
 800d2f4:	e000ed04 	.word	0xe000ed04

0800d2f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800d2fc:	2500      	movs	r5, #0
  event.def.message_id = queue_id;
 800d2fe:	9103      	str	r1, [sp, #12]
{
 800d300:	4604      	mov	r4, r0
  event.value.v = 0;
 800d302:	9502      	str	r5, [sp, #8]
  
  if (queue_id == NULL) {
 800d304:	b379      	cbz	r1, 800d366 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800d306:	9500      	str	r5, [sp, #0]
 800d308:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d30c:	b99b      	cbnz	r3, 800d336 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d30e:	4608      	mov	r0, r1
 800d310:	a902      	add	r1, sp, #8
 800d312:	4616      	mov	r6, r2
 800d314:	f000 fbb0 	bl	800da78 <xQueueReceive>
 800d318:	2801      	cmp	r0, #1
 800d31a:	d032      	beq.n	800d382 <osMessageGet+0x8a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d31c:	2e00      	cmp	r6, #0
 800d31e:	bf0c      	ite	eq
 800d320:	2300      	moveq	r3, #0
 800d322:	2340      	movne	r3, #64	; 0x40
 800d324:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 800d326:	ab04      	add	r3, sp, #16
 800d328:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d32c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d330:	4620      	mov	r0, r4
 800d332:	b004      	add	sp, #16
 800d334:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d336:	4608      	mov	r0, r1
 800d338:	466a      	mov	r2, sp
 800d33a:	a902      	add	r1, sp, #8
 800d33c:	f000 fd88 	bl	800de50 <xQueueReceiveFromISR>
 800d340:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800d342:	bf04      	itt	eq
 800d344:	2310      	moveq	r3, #16
 800d346:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800d348:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 800d34a:	bf18      	it	ne
 800d34c:	9501      	strne	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800d34e:	b1ab      	cbz	r3, 800d37c <osMessageGet+0x84>
 800d350:	f002 fb18 	bl	800f984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800d354:	4b0c      	ldr	r3, [pc, #48]	; (800d388 <osMessageGet+0x90>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	e7df      	b.n	800d326 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 800d366:	ab04      	add	r3, sp, #16
 800d368:	2280      	movs	r2, #128	; 0x80
 800d36a:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 800d36e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d376:	4620      	mov	r0, r4
 800d378:	b004      	add	sp, #16
 800d37a:	bd70      	pop	{r4, r5, r6, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d37c:	f002 faf0 	bl	800f960 <SEGGER_SYSVIEW_RecordExitISR>
 800d380:	e7d1      	b.n	800d326 <osMessageGet+0x2e>
      event.status = osEventMessage;
 800d382:	2310      	movs	r3, #16
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	e7ce      	b.n	800d326 <osMessageGet+0x2e>
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d38c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d390:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d394:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d396:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d398:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d39a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d39c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop

0800d3a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop

0800d3ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3ac:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d3ae:	6802      	ldr	r2, [r0, #0]
{
 800d3b0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3b2:	689c      	ldr	r4, [r3, #8]
 800d3b4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3b6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d3b8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d3ba:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3bc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d3be:	6099      	str	r1, [r3, #8]
}
 800d3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800d3c4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d3c6:	6002      	str	r2, [r0, #0]
}
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop

0800d3cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3cc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d3ce:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d3d0:	1c6b      	adds	r3, r5, #1
 800d3d2:	d011      	beq.n	800d3f8 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d3d4:	f100 0208 	add.w	r2, r0, #8
 800d3d8:	e000      	b.n	800d3dc <vListInsert+0x10>
 800d3da:	461a      	mov	r2, r3
 800d3dc:	6853      	ldr	r3, [r2, #4]
 800d3de:	681c      	ldr	r4, [r3, #0]
 800d3e0:	42ac      	cmp	r4, r5
 800d3e2:	d9fa      	bls.n	800d3da <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d3e4:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d3e6:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d3e8:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d3ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d3ec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d3ee:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 800d3f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d3f2:	6004      	str	r4, [r0, #0]
}
 800d3f4:	bc30      	pop	{r4, r5}
 800d3f6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800d3f8:	6902      	ldr	r2, [r0, #16]
 800d3fa:	6853      	ldr	r3, [r2, #4]
 800d3fc:	e7f2      	b.n	800d3e4 <vListInsert+0x18>
 800d3fe:	bf00      	nop

0800d400 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d400:	6842      	ldr	r2, [r0, #4]
 800d402:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 800d404:	6903      	ldr	r3, [r0, #16]
{
 800d406:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d408:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d40a:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d40c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d40e:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800d410:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800d412:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d414:	bf08      	it	eq
 800d416:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800d418:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800d41a:	2100      	movs	r1, #0
 800d41c:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d41e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d420:	6818      	ldr	r0, [r3, #0]
}
 800d422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d42c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d42e:	6b85      	ldr	r5, [r0, #56]	; 0x38
{
 800d430:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d432:	b932      	cbnz	r2, 800d442 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d434:	6806      	ldr	r6, [r0, #0]
 800d436:	3501      	adds	r5, #1
 800d438:	2e00      	cmp	r6, #0
 800d43a:	d02d      	beq.n	800d498 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800d43c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d43e:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800d440:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d442:	b986      	cbnz	r6, 800d466 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d444:	6840      	ldr	r0, [r0, #4]
 800d446:	f002 fd82 	bl	800ff4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d44a:	6863      	ldr	r3, [r4, #4]
 800d44c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d44e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d450:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d452:	4293      	cmp	r3, r2
 800d454:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d458:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d45a:	d3ef      	bcc.n	800d43c <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d460:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d462:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800d464:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d466:	68c0      	ldr	r0, [r0, #12]
 800d468:	f002 fd71 	bl	800ff4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d46c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d46e:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d470:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d472:	4252      	negs	r2, r2
 800d474:	4413      	add	r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d476:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d478:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d47a:	d202      	bcs.n	800d482 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d47c:	68a3      	ldr	r3, [r4, #8]
 800d47e:	441a      	add	r2, r3
 800d480:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d482:	2e02      	cmp	r6, #2
 800d484:	d003      	beq.n	800d48e <prvCopyDataToQueue+0x66>
 800d486:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800d488:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d48a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800d48c:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d48e:	2d00      	cmp	r5, #0
 800d490:	d1d4      	bne.n	800d43c <prvCopyDataToQueue+0x14>
 800d492:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 800d494:	2000      	movs	r0, #0
 800d496:	e7d2      	b.n	800d43e <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d498:	6880      	ldr	r0, [r0, #8]
 800d49a:	f001 fa8f 	bl	800e9bc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d49e:	60a6      	str	r6, [r4, #8]
 800d4a0:	e7cd      	b.n	800d43e <prvCopyDataToQueue+0x16>
 800d4a2:	bf00      	nop

0800d4a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d4a6:	b172      	cbz	r2, 800d4c6 <prvCopyDataFromQueue+0x22>
{
 800d4a8:	b410      	push	{r4}
 800d4aa:	460b      	mov	r3, r1
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4ac:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4b0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4b2:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4b4:	60c1      	str	r1, [r0, #12]
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4b6:	bf24      	itt	cs
 800d4b8:	6801      	ldrcs	r1, [r0, #0]
 800d4ba:	60c1      	strcs	r1, [r0, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
	}
}
 800d4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f002 bd44 	b.w	800ff4e <memcpy>
 800d4c6:	4770      	bx	lr

0800d4c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4cc:	f001 fbaa 	bl	800ec24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4d0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800d4d4:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4d6:	2c00      	cmp	r4, #0
 800d4d8:	dd16      	ble.n	800d508 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4dc:	b1a3      	cbz	r3, 800d508 <prvUnlockQueue+0x40>
 800d4de:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800d4e2:	e005      	b.n	800d4f0 <prvUnlockQueue+0x28>
 800d4e4:	3c01      	subs	r4, #1
 800d4e6:	b2e3      	uxtb	r3, r4
 800d4e8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ea:	b16b      	cbz	r3, 800d508 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4ee:	b15b      	cbz	r3, 800d508 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f001 f95d 	bl	800e7b0 <xTaskRemoveFromEventList>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0f4      	beq.n	800d4e4 <prvUnlockQueue+0x1c>
 800d4fa:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4fc:	f001 f9f2 	bl	800e8e4 <vTaskMissedYield>
 800d500:	b2e3      	uxtb	r3, r4
 800d502:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1f1      	bne.n	800d4ec <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d508:	23ff      	movs	r3, #255	; 0xff
 800d50a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d50e:	f001 fbab 	bl	800ec68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d512:	f001 fb87 	bl	800ec24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d516:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800d51a:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d51c:	2c00      	cmp	r4, #0
 800d51e:	dd16      	ble.n	800d54e <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d520:	692b      	ldr	r3, [r5, #16]
 800d522:	b1a3      	cbz	r3, 800d54e <prvUnlockQueue+0x86>
 800d524:	f105 0610 	add.w	r6, r5, #16
 800d528:	e005      	b.n	800d536 <prvUnlockQueue+0x6e>
 800d52a:	3c01      	subs	r4, #1
 800d52c:	b2e3      	uxtb	r3, r4
 800d52e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d530:	b16b      	cbz	r3, 800d54e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d532:	692b      	ldr	r3, [r5, #16]
 800d534:	b15b      	cbz	r3, 800d54e <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d536:	4630      	mov	r0, r6
 800d538:	f001 f93a 	bl	800e7b0 <xTaskRemoveFromEventList>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d0f4      	beq.n	800d52a <prvUnlockQueue+0x62>
 800d540:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800d542:	f001 f9cf 	bl	800e8e4 <vTaskMissedYield>
 800d546:	b2e3      	uxtb	r3, r4
 800d548:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1f1      	bne.n	800d532 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d54e:	23ff      	movs	r3, #255	; 0xff
 800d550:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800d554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d558:	f001 bb86 	b.w	800ec68 <vPortExitCritical>

0800d55c <xQueueGenericReset>:
{
 800d55c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800d55e:	b1e0      	cbz	r0, 800d59a <xQueueGenericReset+0x3e>
 800d560:	4604      	mov	r4, r0
 800d562:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800d564:	f001 fb5e 	bl	800ec24 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d568:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 800d56c:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d56e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d570:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d574:	1acb      	subs	r3, r1, r3
 800d576:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d578:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d57a:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800d57c:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d57e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d580:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800d584:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d588:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800d58c:	b975      	cbnz	r5, 800d5ac <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d58e:	6923      	ldr	r3, [r4, #16]
 800d590:	b9ab      	cbnz	r3, 800d5be <xQueueGenericReset+0x62>
	taskEXIT_CRITICAL();
 800d592:	f001 fb69 	bl	800ec68 <vPortExitCritical>
}
 800d596:	2001      	movs	r0, #1
 800d598:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	e7fe      	b.n	800d5aa <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5ac:	f104 0010 	add.w	r0, r4, #16
 800d5b0:	f7ff feec 	bl	800d38c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d5b8:	f7ff fee8 	bl	800d38c <vListInitialise>
 800d5bc:	e7e9      	b.n	800d592 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5be:	f104 0010 	add.w	r0, r4, #16
 800d5c2:	f001 f8f5 	bl	800e7b0 <xTaskRemoveFromEventList>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d0e3      	beq.n	800d592 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800d5ca:	4b04      	ldr	r3, [pc, #16]	; (800d5dc <xQueueGenericReset+0x80>)
 800d5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	e7da      	b.n	800d592 <xQueueGenericReset+0x36>
 800d5dc:	e000ed04 	.word	0xe000ed04

0800d5e0 <xQueueGenericCreateStatic>:
	{
 800d5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	f89d 7020 	ldrb.w	r7, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5e8:	b940      	cbnz	r0, 800d5fc <xQueueGenericCreateStatic+0x1c>
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	e7fe      	b.n	800d5fa <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800d5fc:	b183      	cbz	r3, 800d620 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d5fe:	2a00      	cmp	r2, #0
 800d600:	d037      	beq.n	800d672 <xQueueGenericCreateStatic+0x92>
 800d602:	b1b1      	cbz	r1, 800d632 <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d604:	2448      	movs	r4, #72	; 0x48
 800d606:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d608:	9c01      	ldr	r4, [sp, #4]
 800d60a:	2c48      	cmp	r4, #72	; 0x48
 800d60c:	d01a      	beq.n	800d644 <xQueueGenericCreateStatic+0x64>
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	e7fe      	b.n	800d61e <xQueueGenericCreateStatic+0x3e>
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	e7fe      	b.n	800d630 <xQueueGenericCreateStatic+0x50>
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	e7fe      	b.n	800d642 <xQueueGenericCreateStatic+0x62>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d644:	601a      	str	r2, [r3, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d646:	9c01      	ldr	r4, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d64e:	e9c3 010f 	strd	r0, r1, [r3, #60]	; 0x3c
 800d652:	4605      	mov	r5, r0
 800d654:	460e      	mov	r6, r1
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d656:	4618      	mov	r0, r3
 800d658:	2101      	movs	r1, #1
 800d65a:	461c      	mov	r4, r3
 800d65c:	f7ff ff7e 	bl	800d55c <xQueueGenericReset>
	traceQUEUE_CREATE( pxNewQueue );
 800d660:	463b      	mov	r3, r7
 800d662:	4632      	mov	r2, r6
 800d664:	4629      	mov	r1, r5
 800d666:	2073      	movs	r0, #115	; 0x73
 800d668:	f002 f81e 	bl	800f6a8 <SEGGER_SYSVIEW_RecordU32x3>
	}
 800d66c:	4620      	mov	r0, r4
 800d66e:	b003      	add	sp, #12
 800d670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d672:	b141      	cbz	r1, 800d686 <xQueueGenericCreateStatic+0xa6>
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	e7fe      	b.n	800d684 <xQueueGenericCreateStatic+0xa4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d686:	2248      	movs	r2, #72	; 0x48
 800d688:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d68a:	9a01      	ldr	r2, [sp, #4]
 800d68c:	2a48      	cmp	r2, #72	; 0x48
 800d68e:	d1be      	bne.n	800d60e <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d690:	2201      	movs	r2, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d692:	9c01      	ldr	r4, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d694:	601b      	str	r3, [r3, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d69a:	e7d8      	b.n	800d64e <xQueueGenericCreateStatic+0x6e>

0800d69c <xQueueGenericCreate>:
	{
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d69e:	b940      	cbnz	r0, 800d6b2 <xQueueGenericCreate+0x16>
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	e7fe      	b.n	800d6b0 <xQueueGenericCreate+0x14>
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	4617      	mov	r7, r2
 800d6b6:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 800d6b8:	b1d1      	cbz	r1, 800d6f0 <xQueueGenericCreate+0x54>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6ba:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6be:	3048      	adds	r0, #72	; 0x48
 800d6c0:	f001 fc34 	bl	800ef2c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	b1c0      	cbz	r0, 800d6fa <xQueueGenericCreate+0x5e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6c8:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6ca:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6ce:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6d2:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d6d4:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6d8:	2101      	movs	r1, #1
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7ff ff3e 	bl	800d55c <xQueueGenericReset>
	traceQUEUE_CREATE( pxNewQueue );
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	4631      	mov	r1, r6
 800d6e6:	2073      	movs	r0, #115	; 0x73
 800d6e8:	f001 ffde 	bl	800f6a8 <SEGGER_SYSVIEW_RecordU32x3>
	}
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6f0:	2048      	movs	r0, #72	; 0x48
 800d6f2:	f001 fc1b 	bl	800ef2c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	b910      	cbnz	r0, 800d700 <xQueueGenericCreate+0x64>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6fa:	2400      	movs	r4, #0
	}
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d700:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d704:	6024      	str	r4, [r4, #0]
 800d706:	e7e5      	b.n	800d6d4 <xQueueGenericCreate+0x38>

0800d708 <xQueueGenericSend>:
{
 800d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	b086      	sub	sp, #24
 800d70e:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
 800d710:	2800      	cmp	r0, #0
 800d712:	f000 80ac 	beq.w	800d86e <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d716:	2900      	cmp	r1, #0
 800d718:	f000 809c 	beq.w	800d854 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d10b      	bne.n	800d738 <xQueueGenericSend+0x30>
 800d720:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d722:	2a01      	cmp	r2, #1
 800d724:	d008      	beq.n	800d738 <xQueueGenericSend+0x30>
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	e7fe      	b.n	800d736 <xQueueGenericSend+0x2e>
 800d738:	4604      	mov	r4, r0
 800d73a:	461d      	mov	r5, r3
 800d73c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d73e:	f001 f8d7 	bl	800e8f0 <xTaskGetSchedulerState>
 800d742:	2800      	cmp	r0, #0
 800d744:	f040 8083 	bne.w	800d84e <xQueueGenericSend+0x146>
 800d748:	9b03      	ldr	r3, [sp, #12]
 800d74a:	b143      	cbz	r3, 800d75e <xQueueGenericSend+0x56>
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	e7fe      	b.n	800d75c <xQueueGenericSend+0x54>
 800d75e:	4698      	mov	r8, r3
					portYIELD_WITHIN_API();
 800d760:	f8df a154 	ldr.w	sl, [pc, #340]	; 800d8b8 <xQueueGenericSend+0x1b0>
		prvLockQueue( pxQueue );
 800d764:	f04f 0900 	mov.w	r9, #0
 800d768:	e008      	b.n	800d77c <xQueueGenericSend+0x74>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d76a:	f001 fa7d 	bl	800ec68 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d76e:	4620      	mov	r0, r4
 800d770:	f7ff feaa 	bl	800d4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d774:	f000 ff04 	bl	800e580 <xTaskResumeAll>
 800d778:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800d77c:	f001 fa52 	bl	800ec24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d784:	429a      	cmp	r2, r3
 800d786:	d341      	bcc.n	800d80c <xQueueGenericSend+0x104>
 800d788:	2d02      	cmp	r5, #2
 800d78a:	d03f      	beq.n	800d80c <xQueueGenericSend+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d78c:	9f03      	ldr	r7, [sp, #12]
 800d78e:	2f00      	cmp	r7, #0
 800d790:	d076      	beq.n	800d880 <xQueueGenericSend+0x178>
				else if( xEntryTimeSet == pdFALSE )
 800d792:	f1b8 0f00 	cmp.w	r8, #0
 800d796:	d102      	bne.n	800d79e <xQueueGenericSend+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d798:	a804      	add	r0, sp, #16
 800d79a:	f001 f851 	bl	800e840 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d79e:	f001 fa63 	bl	800ec68 <vPortExitCritical>
		vTaskSuspendAll();
 800d7a2:	f000 fe3b 	bl	800e41c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7a6:	f001 fa3d 	bl	800ec24 <vPortEnterCritical>
 800d7aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d7ae:	2bff      	cmp	r3, #255	; 0xff
 800d7b0:	bf08      	it	eq
 800d7b2:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800d7b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d7ba:	2bff      	cmp	r3, #255	; 0xff
 800d7bc:	bf08      	it	eq
 800d7be:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800d7c2:	f001 fa51 	bl	800ec68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7c6:	a903      	add	r1, sp, #12
 800d7c8:	a804      	add	r0, sp, #16
 800d7ca:	f001 f845 	bl	800e858 <xTaskCheckForTimeOut>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d16b      	bne.n	800d8aa <xQueueGenericSend+0x1a2>
	taskENTER_CRITICAL();
 800d7d2:	f001 fa27 	bl	800ec24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d7d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d1c5      	bne.n	800d76a <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800d7de:	f001 fa43 	bl	800ec68 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7e2:	9903      	ldr	r1, [sp, #12]
 800d7e4:	f104 0010 	add.w	r0, r4, #16
 800d7e8:	f000 ffc8 	bl	800e77c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff fe6b 	bl	800d4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7f2:	f000 fec5 	bl	800e580 <xTaskResumeAll>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d1be      	bne.n	800d778 <xQueueGenericSend+0x70>
					portYIELD_WITHIN_API();
 800d7fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7fe:	f8ca 3000 	str.w	r3, [sl]
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	e7b5      	b.n	800d778 <xQueueGenericSend+0x70>
				traceQUEUE_SEND( pxQueue );
 800d80c:	4620      	mov	r0, r4
 800d80e:	f001 fd4b 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800d812:	9b03      	ldr	r3, [sp, #12]
 800d814:	9500      	str	r5, [sp, #0]
 800d816:	4601      	mov	r1, r0
 800d818:	4632      	mov	r2, r6
 800d81a:	205a      	movs	r0, #90	; 0x5a
 800d81c:	f001 ff7a 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d820:	462a      	mov	r2, r5
 800d822:	4631      	mov	r1, r6
 800d824:	4620      	mov	r0, r4
 800d826:	f7ff fdff 	bl	800d428 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d135      	bne.n	800d89c <xQueueGenericSend+0x194>
					else if( xYieldRequired != pdFALSE )
 800d830:	b138      	cbz	r0, 800d842 <xQueueGenericSend+0x13a>
						queueYIELD_IF_USING_PREEMPTION();
 800d832:	4b21      	ldr	r3, [pc, #132]	; (800d8b8 <xQueueGenericSend+0x1b0>)
 800d834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d842:	f001 fa11 	bl	800ec68 <vPortExitCritical>
				return pdPASS;
 800d846:	2001      	movs	r0, #1
}
 800d848:	b006      	add	sp, #24
 800d84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84e:	f04f 0800 	mov.w	r8, #0
 800d852:	e785      	b.n	800d760 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d854:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d856:	2a00      	cmp	r2, #0
 800d858:	f43f af60 	beq.w	800d71c <xQueueGenericSend+0x14>
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	e7fe      	b.n	800d86c <xQueueGenericSend+0x164>
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	e7fe      	b.n	800d87e <xQueueGenericSend+0x176>
					taskEXIT_CRITICAL();
 800d880:	f001 f9f2 	bl	800ec68 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 800d884:	4620      	mov	r0, r4
 800d886:	f001 fd0f 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800d88a:	9500      	str	r5, [sp, #0]
 800d88c:	4601      	mov	r1, r0
 800d88e:	4632      	mov	r2, r6
 800d890:	205a      	movs	r0, #90	; 0x5a
 800d892:	9b03      	ldr	r3, [sp, #12]
 800d894:	f001 ff3e 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800d898:	2000      	movs	r0, #0
 800d89a:	e7d5      	b.n	800d848 <xQueueGenericSend+0x140>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d89c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d8a0:	f000 ff86 	bl	800e7b0 <xTaskRemoveFromEventList>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d1c4      	bne.n	800d832 <xQueueGenericSend+0x12a>
 800d8a8:	e7cb      	b.n	800d842 <xQueueGenericSend+0x13a>
			prvUnlockQueue( pxQueue );
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f7ff fe0c 	bl	800d4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8b0:	f000 fe66 	bl	800e580 <xTaskResumeAll>
 800d8b4:	e7e6      	b.n	800d884 <xQueueGenericSend+0x17c>
 800d8b6:	bf00      	nop
 800d8b8:	e000ed04 	.word	0xe000ed04

0800d8bc <xQueueGenericSendFromISR>:
{
 800d8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d04d      	beq.n	800d960 <xQueueGenericSendFromISR+0xa4>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8c4:	2900      	cmp	r1, #0
 800d8c6:	d03f      	beq.n	800d948 <xQueueGenericSendFromISR+0x8c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d10b      	bne.n	800d8e4 <xQueueGenericSendFromISR+0x28>
 800d8cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d8ce:	2c01      	cmp	r4, #1
 800d8d0:	d008      	beq.n	800d8e4 <xQueueGenericSendFromISR+0x28>
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	e7fe      	b.n	800d8e2 <xQueueGenericSendFromISR+0x26>
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	4698      	mov	r8, r3
 800d8e8:	4617      	mov	r7, r2
 800d8ea:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8ec:	f001 fac8 	bl	800ee80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8f0:	f3ef 8611 	mrs	r6, BASEPRI
 800d8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f8:	f383 8811 	msr	BASEPRI, r3
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d908:	429a      	cmp	r2, r3
 800d90a:	d302      	bcc.n	800d912 <xQueueGenericSendFromISR+0x56>
 800d90c:	f1b8 0f02 	cmp.w	r8, #2
 800d910:	d12f      	bne.n	800d972 <xQueueGenericSendFromISR+0xb6>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800d912:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d914:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800d918:	f001 fcc6 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800d91c:	463a      	mov	r2, r7
 800d91e:	4601      	mov	r1, r0
 800d920:	2060      	movs	r0, #96	; 0x60
 800d922:	f001 fe7d 	bl	800f620 <SEGGER_SYSVIEW_RecordU32x2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d926:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d928:	4642      	mov	r2, r8
 800d92a:	4649      	mov	r1, r9
 800d92c:	4620      	mov	r0, r4
 800d92e:	f7ff fd7b 	bl	800d428 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d932:	1c6b      	adds	r3, r5, #1
 800d934:	d027      	beq.n	800d986 <xQueueGenericSendFromISR+0xca>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d936:	1c6b      	adds	r3, r5, #1
 800d938:	b25b      	sxtb	r3, r3
 800d93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800d93e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d940:	f386 8811 	msr	BASEPRI, r6
}
 800d944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d948:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d94a:	2c00      	cmp	r4, #0
 800d94c:	d0bc      	beq.n	800d8c8 <xQueueGenericSendFromISR+0xc>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	e7fe      	b.n	800d95e <xQueueGenericSendFromISR+0xa2>
 800d960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	e7fe      	b.n	800d970 <xQueueGenericSendFromISR+0xb4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800d972:	4620      	mov	r0, r4
 800d974:	f001 fc98 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800d978:	463a      	mov	r2, r7
 800d97a:	4601      	mov	r1, r0
 800d97c:	2060      	movs	r0, #96	; 0x60
 800d97e:	f001 fe4f 	bl	800f620 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800d982:	2000      	movs	r0, #0
 800d984:	e7dc      	b.n	800d940 <xQueueGenericSendFromISR+0x84>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d0d8      	beq.n	800d93e <xQueueGenericSendFromISR+0x82>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d98c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d990:	f000 ff0e 	bl	800e7b0 <xTaskRemoveFromEventList>
 800d994:	2800      	cmp	r0, #0
 800d996:	d0d2      	beq.n	800d93e <xQueueGenericSendFromISR+0x82>
							if( pxHigherPriorityTaskWoken != NULL )
 800d998:	2f00      	cmp	r7, #0
 800d99a:	d0d0      	beq.n	800d93e <xQueueGenericSendFromISR+0x82>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d99c:	2001      	movs	r0, #1
 800d99e:	6038      	str	r0, [r7, #0]
 800d9a0:	e7ce      	b.n	800d940 <xQueueGenericSendFromISR+0x84>
 800d9a2:	bf00      	nop

0800d9a4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d037      	beq.n	800da18 <xQueueGiveFromISR+0x74>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d9aa:	b143      	cbz	r3, 800d9be <xQueueGiveFromISR+0x1a>
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	e7fe      	b.n	800d9bc <xQueueGiveFromISR+0x18>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d9be:	6803      	ldr	r3, [r0, #0]
 800d9c0:	b39b      	cbz	r3, 800da2a <xQueueGiveFromISR+0x86>
{
 800d9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460f      	mov	r7, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9ca:	f001 fa59 	bl	800ee80 <vPortValidateInterruptPriority>
	__asm volatile
 800d9ce:	f3ef 8611 	mrs	r6, BASEPRI
 800d9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9e2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d9e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d9e8:	4543      	cmp	r3, r8
 800d9ea:	d92a      	bls.n	800da42 <xQueueGiveFromISR+0x9e>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800d9ec:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d9ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800d9f2:	f001 fc59 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	2060      	movs	r0, #96	; 0x60
 800d9fc:	f001 fe10 	bl	800f620 <SEGGER_SYSVIEW_RecordU32x2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800da00:	b26d      	sxtb	r5, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da02:	f108 0301 	add.w	r3, r8, #1
 800da06:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800da08:	1c6b      	adds	r3, r5, #1
 800da0a:	d027      	beq.n	800da5c <xQueueGiveFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da0c:	1c6b      	adds	r3, r5, #1
 800da0e:	b25b      	sxtb	r3, r3
 800da10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800da14:	2001      	movs	r0, #1
 800da16:	e01d      	b.n	800da54 <xQueueGiveFromISR+0xb0>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	e7fe      	b.n	800da28 <xQueueGiveFromISR+0x84>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da2a:	6883      	ldr	r3, [r0, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d0c8      	beq.n	800d9c2 <xQueueGiveFromISR+0x1e>
 800da30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	e7fe      	b.n	800da40 <xQueueGiveFromISR+0x9c>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800da42:	4620      	mov	r0, r4
 800da44:	f001 fc30 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800da48:	463a      	mov	r2, r7
 800da4a:	4601      	mov	r1, r0
 800da4c:	2060      	movs	r0, #96	; 0x60
 800da4e:	f001 fde7 	bl	800f620 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800da52:	2000      	movs	r0, #0
	__asm volatile
 800da54:	f386 8811 	msr	BASEPRI, r6
}
 800da58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d0d8      	beq.n	800da14 <xQueueGiveFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da66:	f000 fea3 	bl	800e7b0 <xTaskRemoveFromEventList>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d0d2      	beq.n	800da14 <xQueueGiveFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800da6e:	2f00      	cmp	r7, #0
 800da70:	d0d0      	beq.n	800da14 <xQueueGiveFromISR+0x70>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da72:	2001      	movs	r0, #1
 800da74:	6038      	str	r0, [r7, #0]
 800da76:	e7ed      	b.n	800da54 <xQueueGiveFromISR+0xb0>

0800da78 <xQueueReceive>:
{
 800da78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da7c:	b087      	sub	sp, #28
 800da7e:	9203      	str	r2, [sp, #12]
	configASSERT( ( pxQueue ) );
 800da80:	2800      	cmp	r0, #0
 800da82:	f000 80b8 	beq.w	800dbf6 <xQueueReceive+0x17e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da86:	2900      	cmp	r1, #0
 800da88:	f000 80a8 	beq.w	800dbdc <xQueueReceive+0x164>
 800da8c:	4604      	mov	r4, r0
 800da8e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da90:	f000 ff2e 	bl	800e8f0 <xTaskGetSchedulerState>
 800da94:	b950      	cbnz	r0, 800daac <xQueueReceive+0x34>
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	b143      	cbz	r3, 800daac <xQueueReceive+0x34>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	e7fe      	b.n	800daaa <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 800daac:	f001 f8ba 	bl	800ec24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dab0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dab2:	2d00      	cmp	r5, #0
 800dab4:	d149      	bne.n	800db4a <xQueueReceive+0xd2>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dab6:	9b03      	ldr	r3, [sp, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d07a      	beq.n	800dbb2 <xQueueReceive+0x13a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dabc:	a804      	add	r0, sp, #16
 800dabe:	f000 febf 	bl	800e840 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800dac2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800dc4c <xQueueReceive+0x1d4>
		prvLockQueue( pxQueue );
 800dac6:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dac8:	f104 0824 	add.w	r8, r4, #36	; 0x24
 800dacc:	e012      	b.n	800daf4 <xQueueReceive+0x7c>
	taskENTER_CRITICAL();
 800dace:	f001 f8a9 	bl	800ec24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d056      	beq.n	800db86 <xQueueReceive+0x10e>
	taskEXIT_CRITICAL();
 800dad8:	f001 f8c6 	bl	800ec68 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dadc:	4620      	mov	r0, r4
 800dade:	f7ff fcf3 	bl	800d4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dae2:	f000 fd4d 	bl	800e580 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800dae6:	f001 f89d 	bl	800ec24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daec:	bb6d      	cbnz	r5, 800db4a <xQueueReceive+0xd2>
				if( xTicksToWait == ( TickType_t ) 0 )
 800daee:	9b03      	ldr	r3, [sp, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d05e      	beq.n	800dbb2 <xQueueReceive+0x13a>
		taskEXIT_CRITICAL();
 800daf4:	f001 f8b8 	bl	800ec68 <vPortExitCritical>
		vTaskSuspendAll();
 800daf8:	f000 fc90 	bl	800e41c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dafc:	f001 f892 	bl	800ec24 <vPortEnterCritical>
 800db00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800db04:	2bff      	cmp	r3, #255	; 0xff
 800db06:	bf08      	it	eq
 800db08:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 800db0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800db10:	2bff      	cmp	r3, #255	; 0xff
 800db12:	bf08      	it	eq
 800db14:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 800db18:	f001 f8a6 	bl	800ec68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db1c:	a903      	add	r1, sp, #12
 800db1e:	a804      	add	r0, sp, #16
 800db20:	f000 fe9a 	bl	800e858 <xTaskCheckForTimeOut>
 800db24:	2800      	cmp	r0, #0
 800db26:	d0d2      	beq.n	800dace <xQueueReceive+0x56>
			prvUnlockQueue( pxQueue );
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff fccd 	bl	800d4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db2e:	f000 fd27 	bl	800e580 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800db32:	f001 f877 	bl	800ec24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db36:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800db38:	2d00      	cmp	r5, #0
 800db3a:	d065      	beq.n	800dc08 <xQueueReceive+0x190>
	taskEXIT_CRITICAL();
 800db3c:	f001 f894 	bl	800ec68 <vPortExitCritical>
		taskENTER_CRITICAL();
 800db40:	f001 f870 	bl	800ec24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db44:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db46:	2d00      	cmp	r5, #0
 800db48:	d0d1      	beq.n	800daee <xQueueReceive+0x76>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db4a:	4639      	mov	r1, r7
 800db4c:	4620      	mov	r0, r4
 800db4e:	f7ff fca9 	bl	800d4a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800db52:	4620      	mov	r0, r4
 800db54:	f001 fba8 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800db58:	4607      	mov	r7, r0
 800db5a:	2000      	movs	r0, #0
 800db5c:	f001 fba4 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800db60:	2601      	movs	r6, #1
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	9600      	str	r6, [sp, #0]
 800db66:	4602      	mov	r2, r0
 800db68:	4639      	mov	r1, r7
 800db6a:	205c      	movs	r0, #92	; 0x5c
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db6c:	3d01      	subs	r5, #1
				traceQUEUE_RECEIVE( pxQueue );
 800db6e:	f001 fdd1 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db72:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db74:	6923      	ldr	r3, [r4, #16]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d159      	bne.n	800dc2e <xQueueReceive+0x1b6>
				taskEXIT_CRITICAL();
 800db7a:	f001 f875 	bl	800ec68 <vPortExitCritical>
				return pdPASS;
 800db7e:	2001      	movs	r0, #1
}
 800db80:	b007      	add	sp, #28
 800db82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800db86:	f001 f86f 	bl	800ec68 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db8a:	9903      	ldr	r1, [sp, #12]
 800db8c:	4640      	mov	r0, r8
 800db8e:	f000 fdf5 	bl	800e77c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db92:	4620      	mov	r0, r4
 800db94:	f7ff fc98 	bl	800d4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db98:	f000 fcf2 	bl	800e580 <xTaskResumeAll>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d1a2      	bne.n	800dae6 <xQueueReceive+0x6e>
					portYIELD_WITHIN_API();
 800dba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dba4:	f8c9 3000 	str.w	r3, [r9]
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	e799      	b.n	800dae6 <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 800dbb2:	f001 f859 	bl	800ec68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f001 fb76 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dbbc:	4605      	mov	r5, r0
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	f001 fb72 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dbc4:	2401      	movs	r4, #1
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	9b03      	ldr	r3, [sp, #12]
 800dbca:	9400      	str	r4, [sp, #0]
 800dbcc:	205c      	movs	r0, #92	; 0x5c
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f001 fda0 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800dbd4:	2000      	movs	r0, #0
}
 800dbd6:	b007      	add	sp, #28
 800dbd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbdc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f43f af54 	beq.w	800da8c <xQueueReceive+0x14>
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	e7fe      	b.n	800dbf4 <xQueueReceive+0x17c>
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	e7fe      	b.n	800dc06 <xQueueReceive+0x18e>
	taskEXIT_CRITICAL();
 800dc08:	f001 f82e 	bl	800ec68 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f001 fb4b 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dc12:	4604      	mov	r4, r0
 800dc14:	4628      	mov	r0, r5
 800dc16:	f001 fb47 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	205c      	movs	r0, #92	; 0x5c
 800dc22:	4621      	mov	r1, r4
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	f001 fd75 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	e7d3      	b.n	800dbd6 <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc2e:	f104 0010 	add.w	r0, r4, #16
 800dc32:	f000 fdbd 	bl	800e7b0 <xTaskRemoveFromEventList>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d09f      	beq.n	800db7a <xQueueReceive+0x102>
						queueYIELD_IF_USING_PREEMPTION();
 800dc3a:	4b04      	ldr	r3, [pc, #16]	; (800dc4c <xQueueReceive+0x1d4>)
 800dc3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc40:	601a      	str	r2, [r3, #0]
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	e796      	b.n	800db7a <xQueueReceive+0x102>
 800dc4c:	e000ed04 	.word	0xe000ed04

0800dc50 <xQueueSemaphoreTake>:
{
 800dc50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc54:	b087      	sub	sp, #28
 800dc56:	9103      	str	r1, [sp, #12]
	configASSERT( ( pxQueue ) );
 800dc58:	b150      	cbz	r0, 800dc70 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc5a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800dc5c:	b18d      	cbz	r5, 800dc82 <xQueueSemaphoreTake+0x32>
 800dc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	e7fe      	b.n	800dc6e <xQueueSemaphoreTake+0x1e>
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	e7fe      	b.n	800dc80 <xQueueSemaphoreTake+0x30>
 800dc82:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc84:	f000 fe34 	bl	800e8f0 <xTaskGetSchedulerState>
 800dc88:	b950      	cbnz	r0, 800dca0 <xQueueSemaphoreTake+0x50>
 800dc8a:	9d03      	ldr	r5, [sp, #12]
 800dc8c:	b145      	cbz	r5, 800dca0 <xQueueSemaphoreTake+0x50>
 800dc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc92:	f383 8811 	msr	BASEPRI, r3
 800dc96:	f3bf 8f6f 	isb	sy
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	e7fe      	b.n	800dc9e <xQueueSemaphoreTake+0x4e>
 800dca0:	462e      	mov	r6, r5
					portYIELD_WITHIN_API();
 800dca2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800de4c <xQueueSemaphoreTake+0x1fc>
		prvLockQueue( pxQueue );
 800dca6:	2700      	movs	r7, #0
 800dca8:	e00c      	b.n	800dcc4 <xQueueSemaphoreTake+0x74>
	taskENTER_CRITICAL();
 800dcaa:	f000 ffbb 	bl	800ec24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d03c      	beq.n	800dd2e <xQueueSemaphoreTake+0xde>
	taskEXIT_CRITICAL();
 800dcb4:	f000 ffd8 	bl	800ec68 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7ff fc05 	bl	800d4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcbe:	f000 fc5f 	bl	800e580 <xTaskResumeAll>
 800dcc2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dcc4:	f000 ffae 	bl	800ec24 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dcc8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dccc:	f1b8 0f00 	cmp.w	r8, #0
 800dcd0:	f040 8090 	bne.w	800ddf4 <xQueueSemaphoreTake+0x1a4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d070      	beq.n	800ddbc <xQueueSemaphoreTake+0x16c>
				else if( xEntryTimeSet == pdFALSE )
 800dcda:	b916      	cbnz	r6, 800dce2 <xQueueSemaphoreTake+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcdc:	a804      	add	r0, sp, #16
 800dcde:	f000 fdaf 	bl	800e840 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dce2:	f000 ffc1 	bl	800ec68 <vPortExitCritical>
		vTaskSuspendAll();
 800dce6:	f000 fb99 	bl	800e41c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcea:	f000 ff9b 	bl	800ec24 <vPortEnterCritical>
 800dcee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcf2:	2bff      	cmp	r3, #255	; 0xff
 800dcf4:	bf08      	it	eq
 800dcf6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800dcfa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dcfe:	2bff      	cmp	r3, #255	; 0xff
 800dd00:	bf08      	it	eq
 800dd02:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800dd06:	f000 ffaf 	bl	800ec68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd0a:	a903      	add	r1, sp, #12
 800dd0c:	a804      	add	r0, sp, #16
 800dd0e:	f000 fda3 	bl	800e858 <xTaskCheckForTimeOut>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d0c9      	beq.n	800dcaa <xQueueSemaphoreTake+0x5a>
			prvUnlockQueue( pxQueue );
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff fbd6 	bl	800d4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd1c:	f000 fc30 	bl	800e580 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800dd20:	f000 ff80 	bl	800ec24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd26:	b1db      	cbz	r3, 800dd60 <xQueueSemaphoreTake+0x110>
	taskEXIT_CRITICAL();
 800dd28:	f000 ff9e 	bl	800ec68 <vPortExitCritical>
 800dd2c:	e7c9      	b.n	800dcc2 <xQueueSemaphoreTake+0x72>
 800dd2e:	f000 ff9b 	bl	800ec68 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd32:	6823      	ldr	r3, [r4, #0]
 800dd34:	b35b      	cbz	r3, 800dd8e <xQueueSemaphoreTake+0x13e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd36:	9903      	ldr	r1, [sp, #12]
 800dd38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dd3c:	f000 fd1e 	bl	800e77c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7ff fbc1 	bl	800d4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd46:	f000 fc1b 	bl	800e580 <xTaskResumeAll>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d1b9      	bne.n	800dcc2 <xQueueSemaphoreTake+0x72>
					portYIELD_WITHIN_API();
 800dd4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd52:	f8c9 3000 	str.w	r3, [r9]
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	e7b0      	b.n	800dcc2 <xQueueSemaphoreTake+0x72>
	taskEXIT_CRITICAL();
 800dd60:	f000 ff82 	bl	800ec68 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800dd64:	b9e5      	cbnz	r5, 800dda0 <xQueueSemaphoreTake+0x150>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800dd66:	4620      	mov	r0, r4
 800dd68:	f001 fa9e 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	2000      	movs	r0, #0
 800dd70:	f001 fa9a 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dd74:	2301      	movs	r3, #1
 800dd76:	4602      	mov	r2, r0
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	9b03      	ldr	r3, [sp, #12]
 800dd7e:	205c      	movs	r0, #92	; 0x5c
 800dd80:	f001 fcc8 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800dd84:	2500      	movs	r5, #0
}
 800dd86:	4628      	mov	r0, r5
 800dd88:	b007      	add	sp, #28
 800dd8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						taskENTER_CRITICAL();
 800dd8e:	f000 ff49 	bl	800ec24 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd92:	68a0      	ldr	r0, [r4, #8]
 800dd94:	f000 fdbc 	bl	800e910 <xTaskPriorityInherit>
 800dd98:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800dd9a:	f000 ff65 	bl	800ec68 <vPortExitCritical>
 800dd9e:	e7ca      	b.n	800dd36 <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
 800dda0:	f000 ff40 	bl	800ec24 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dda4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dda6:	b119      	cbz	r1, 800ddb0 <xQueueSemaphoreTake+0x160>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dda8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ddaa:	6819      	ldr	r1, [r3, #0]
 800ddac:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ddb0:	68a0      	ldr	r0, [r4, #8]
 800ddb2:	f000 fe61 	bl	800ea78 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800ddb6:	f000 ff57 	bl	800ec68 <vPortExitCritical>
 800ddba:	e7d4      	b.n	800dd66 <xQueueSemaphoreTake+0x116>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ddbc:	b145      	cbz	r5, 800ddd0 <xQueueSemaphoreTake+0x180>
 800ddbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	e7fe      	b.n	800ddce <xQueueSemaphoreTake+0x17e>
					taskEXIT_CRITICAL();
 800ddd0:	f000 ff4a 	bl	800ec68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f001 fa67 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800ddda:	4604      	mov	r4, r0
 800dddc:	4628      	mov	r0, r5
 800ddde:	f001 fa63 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dde2:	2301      	movs	r3, #1
 800dde4:	4602      	mov	r2, r0
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	4621      	mov	r1, r4
 800ddea:	9b03      	ldr	r3, [sp, #12]
 800ddec:	205c      	movs	r0, #92	; 0x5c
 800ddee:	f001 fc91 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800ddf2:	e7c8      	b.n	800dd86 <xQueueSemaphoreTake+0x136>
				traceQUEUE_RECEIVE( pxQueue );
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f001 fa57 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	f001 fa53 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800de02:	2301      	movs	r3, #1
 800de04:	4602      	mov	r2, r0
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	4629      	mov	r1, r5
 800de0a:	9b03      	ldr	r3, [sp, #12]
 800de0c:	205c      	movs	r0, #92	; 0x5c
 800de0e:	f001 fc81 	bl	800f714 <SEGGER_SYSVIEW_RecordU32x4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de12:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de14:	f108 33ff 	add.w	r3, r8, #4294967295
 800de18:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de1a:	b912      	cbnz	r2, 800de22 <xQueueSemaphoreTake+0x1d2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de1c:	f000 fe90 	bl	800eb40 <pvTaskIncrementMutexHeldCount>
 800de20:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de22:	6923      	ldr	r3, [r4, #16]
 800de24:	b91b      	cbnz	r3, 800de2e <xQueueSemaphoreTake+0x1de>
				taskEXIT_CRITICAL();
 800de26:	f000 ff1f 	bl	800ec68 <vPortExitCritical>
				return pdPASS;
 800de2a:	2501      	movs	r5, #1
 800de2c:	e7ab      	b.n	800dd86 <xQueueSemaphoreTake+0x136>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de2e:	f104 0010 	add.w	r0, r4, #16
 800de32:	f000 fcbd 	bl	800e7b0 <xTaskRemoveFromEventList>
 800de36:	2800      	cmp	r0, #0
 800de38:	d0f5      	beq.n	800de26 <xQueueSemaphoreTake+0x1d6>
						queueYIELD_IF_USING_PREEMPTION();
 800de3a:	4b04      	ldr	r3, [pc, #16]	; (800de4c <xQueueSemaphoreTake+0x1fc>)
 800de3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	e7ec      	b.n	800de26 <xQueueSemaphoreTake+0x1d6>
 800de4c:	e000ed04 	.word	0xe000ed04

0800de50 <xQueueReceiveFromISR>:
	configASSERT( pxQueue );
 800de50:	b3a8      	cbz	r0, 800debe <xQueueReceiveFromISR+0x6e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de52:	2900      	cmp	r1, #0
 800de54:	d04e      	beq.n	800def4 <xQueueReceiveFromISR+0xa4>
{
 800de56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de5a:	4605      	mov	r5, r0
 800de5c:	4690      	mov	r8, r2
 800de5e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de60:	f001 f80e 	bl	800ee80 <vPortValidateInterruptPriority>
	__asm volatile
 800de64:	f3ef 8711 	mrs	r7, BASEPRI
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de78:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de7a:	b34c      	cbz	r4, 800ded0 <xQueueReceiveFromISR+0x80>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800de7c:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 800de7e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800de82:	f001 fa11 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800de86:	4682      	mov	sl, r0
 800de88:	4648      	mov	r0, r9
 800de8a:	f001 fa0d 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800de8e:	4643      	mov	r3, r8
 800de90:	4602      	mov	r2, r0
 800de92:	4651      	mov	r1, sl
 800de94:	2062      	movs	r0, #98	; 0x62
 800de96:	f001 fc07 	bl	800f6a8 <SEGGER_SYSVIEW_RecordU32x3>
			const int8_t cRxLock = pxQueue->cRxLock;
 800de9a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de9c:	4649      	mov	r1, r9
 800de9e:	4628      	mov	r0, r5
 800dea0:	f7ff fb00 	bl	800d4a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dea4:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800dea6:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dea8:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800deaa:	d02f      	beq.n	800df0c <xQueueReceiveFromISR+0xbc>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800deac:	1c73      	adds	r3, r6, #1
 800deae:	b25b      	sxtb	r3, r3
 800deb0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
			xReturn = pdPASS;
 800deb4:	2001      	movs	r0, #1
	__asm volatile
 800deb6:	f387 8811 	msr	BASEPRI, r7
}
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	e7fe      	b.n	800dece <xQueueReceiveFromISR+0x7e>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800ded0:	4628      	mov	r0, r5
 800ded2:	f001 f9e9 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800ded6:	4605      	mov	r5, r0
 800ded8:	4648      	mov	r0, r9
 800deda:	f001 f9e5 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800dede:	4643      	mov	r3, r8
 800dee0:	4602      	mov	r2, r0
 800dee2:	4629      	mov	r1, r5
 800dee4:	2062      	movs	r0, #98	; 0x62
 800dee6:	f001 fbdf 	bl	800f6a8 <SEGGER_SYSVIEW_RecordU32x3>
			xReturn = pdFAIL;
 800deea:	4620      	mov	r0, r4
	__asm volatile
 800deec:	f387 8811 	msr	BASEPRI, r7
}
 800def0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800def4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0ad      	beq.n	800de56 <xQueueReceiveFromISR+0x6>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	e7fe      	b.n	800df0a <xQueueReceiveFromISR+0xba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df0c:	692b      	ldr	r3, [r5, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d0d0      	beq.n	800deb4 <xQueueReceiveFromISR+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df12:	f105 0010 	add.w	r0, r5, #16
 800df16:	f000 fc4b 	bl	800e7b0 <xTaskRemoveFromEventList>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d0ca      	beq.n	800deb4 <xQueueReceiveFromISR+0x64>
						if( pxHigherPriorityTaskWoken != NULL )
 800df1e:	f1b8 0f00 	cmp.w	r8, #0
 800df22:	d0c7      	beq.n	800deb4 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df24:	2001      	movs	r0, #1
 800df26:	f8c8 0000 	str.w	r0, [r8]
 800df2a:	e7c4      	b.n	800deb6 <xQueueReceiveFromISR+0x66>

0800df2c <vQueueDelete>:
	configASSERT( pxQueue );
 800df2c:	b1b0      	cbz	r0, 800df5c <vQueueDelete+0x30>
{
 800df2e:	b510      	push	{r4, lr}
 800df30:	4604      	mov	r4, r0
	traceQUEUE_DELETE( pxQueue );
 800df32:	f001 f9b9 	bl	800f2a8 <SEGGER_SYSVIEW_ShrinkId>
 800df36:	4601      	mov	r1, r0
 800df38:	205f      	movs	r0, #95	; 0x5f
 800df3a:	f001 fb53 	bl	800f5e4 <SEGGER_SYSVIEW_RecordU32>
 800df3e:	4a12      	ldr	r2, [pc, #72]	; (800df88 <vQueueDelete+0x5c>)
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df40:	2300      	movs	r3, #0
 800df42:	4611      	mov	r1, r2
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800df44:	6848      	ldr	r0, [r1, #4]
 800df46:	4284      	cmp	r4, r0
 800df48:	f101 0108 	add.w	r1, r1, #8
 800df4c:	d00f      	beq.n	800df6e <vQueueDelete+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df4e:	3301      	adds	r3, #1
 800df50:	2b08      	cmp	r3, #8
 800df52:	d1f7      	bne.n	800df44 <vQueueDelete+0x18>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800df54:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800df58:	b183      	cbz	r3, 800df7c <vQueueDelete+0x50>
}
 800df5a:	bd10      	pop	{r4, pc}
 800df5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df60:	f383 8811 	msr	BASEPRI, r3
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	e7fe      	b.n	800df6c <vQueueDelete+0x40>
				xQueueRegistry[ ux ].pcQueueName = NULL;

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800df6e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800df72:	2100      	movs	r1, #0
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800df74:	6041      	str	r1, [r0, #4]
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800df76:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800df7a:	e7eb      	b.n	800df54 <vQueueDelete+0x28>
			vPortFree( pxQueue );
 800df7c:	4620      	mov	r0, r4
}
 800df7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800df82:	f001 b865 	b.w	800f050 <vPortFree>
 800df86:	bf00      	nop
 800df88:	2000f80c 	.word	0x2000f80c

0800df8c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df90:	b083      	sub	sp, #12
 800df92:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df94:	f000 fe46 	bl	800ec24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df98:	4a3d      	ldr	r2, [pc, #244]	; (800e090 <prvAddNewTaskToReadyList+0x104>)
		if( pxCurrentTCB == NULL )
 800df9a:	4d3e      	ldr	r5, [pc, #248]	; (800e094 <prvAddNewTaskToReadyList+0x108>)
		uxCurrentNumberOfTasks++;
 800df9c:	6813      	ldr	r3, [r2, #0]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dfa2:	682b      	ldr	r3, [r5, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d046      	beq.n	800e036 <prvAddNewTaskToReadyList+0xaa>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dfa8:	4e3b      	ldr	r6, [pc, #236]	; (800e098 <prvAddNewTaskToReadyList+0x10c>)
 800dfaa:	6833      	ldr	r3, [r6, #0]
 800dfac:	b35b      	cbz	r3, 800e006 <prvAddNewTaskToReadyList+0x7a>
 800dfae:	4f3b      	ldr	r7, [pc, #236]	; (800e09c <prvAddNewTaskToReadyList+0x110>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfb0:	4a3b      	ldr	r2, [pc, #236]	; (800e0a0 <prvAddNewTaskToReadyList+0x114>)
 800dfb2:	6813      	ldr	r3, [r2, #0]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800dfb8:	2c00      	cmp	r4, #0
 800dfba:	d12e      	bne.n	800e01a <prvAddNewTaskToReadyList+0x8e>

		prvAddTaskToReadyList( pxNewTCB );
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f001 fd49 	bl	800fa54 <SEGGER_SYSVIEW_OnTaskStartReady>
 800dfc2:	4a38      	ldr	r2, [pc, #224]	; (800e0a4 <prvAddNewTaskToReadyList+0x118>)
 800dfc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dfc6:	6811      	ldr	r1, [r2, #0]
 800dfc8:	2301      	movs	r3, #1
 800dfca:	4083      	lsls	r3, r0
 800dfcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dfd0:	430b      	orrs	r3, r1
 800dfd2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800dfd6:	1d21      	adds	r1, r4, #4
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	f7ff f9e7 	bl	800d3ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dfde:	f000 fe43 	bl	800ec68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dfe2:	6833      	ldr	r3, [r6, #0]
 800dfe4:	b163      	cbz	r3, 800e000 <prvAddNewTaskToReadyList+0x74>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dfe6:	682a      	ldr	r2, [r5, #0]
 800dfe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dfea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d207      	bcs.n	800e000 <prvAddNewTaskToReadyList+0x74>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dff0:	4b2d      	ldr	r3, [pc, #180]	; (800e0a8 <prvAddNewTaskToReadyList+0x11c>)
 800dff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e000:	b003      	add	sp, #12
 800e002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e006:	682a      	ldr	r2, [r5, #0]
 800e008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e00a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d919      	bls.n	800e044 <prvAddNewTaskToReadyList+0xb8>
		uxTaskNumber++;
 800e010:	4a23      	ldr	r2, [pc, #140]	; (800e0a0 <prvAddNewTaskToReadyList+0x114>)
 800e012:	4f22      	ldr	r7, [pc, #136]	; (800e09c <prvAddNewTaskToReadyList+0x110>)
 800e014:	6813      	ldr	r3, [r2, #0]
 800e016:	3301      	adds	r3, #1
 800e018:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 800e01a:	4620      	mov	r0, r4
 800e01c:	f001 fcd6 	bl	800f9cc <SEGGER_SYSVIEW_OnTaskCreate>
 800e020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e022:	6821      	ldr	r1, [r4, #0]
 800e024:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e026:	1ac9      	subs	r1, r1, r3
 800e028:	9100      	str	r1, [sp, #0]
 800e02a:	4620      	mov	r0, r4
 800e02c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800e030:	f001 f846 	bl	800f0c0 <SYSVIEW_AddTask>
 800e034:	e7c2      	b.n	800dfbc <prvAddNewTaskToReadyList+0x30>
			pxCurrentTCB = pxNewTCB;
 800e036:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e038:	6813      	ldr	r3, [r2, #0]
 800e03a:	4f18      	ldr	r7, [pc, #96]	; (800e09c <prvAddNewTaskToReadyList+0x110>)
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d003      	beq.n	800e048 <prvAddNewTaskToReadyList+0xbc>
 800e040:	4e15      	ldr	r6, [pc, #84]	; (800e098 <prvAddNewTaskToReadyList+0x10c>)
 800e042:	e7b5      	b.n	800dfb0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 800e044:	602c      	str	r4, [r5, #0]
 800e046:	e7e3      	b.n	800e010 <prvAddNewTaskToReadyList+0x84>
 800e048:	463e      	mov	r6, r7
 800e04a:	f107 088c 	add.w	r8, r7, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e04e:	4630      	mov	r0, r6
 800e050:	3614      	adds	r6, #20
 800e052:	f7ff f99b 	bl	800d38c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e056:	45b0      	cmp	r8, r6
 800e058:	d1f9      	bne.n	800e04e <prvAddNewTaskToReadyList+0xc2>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e05a:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800e0c0 <prvAddNewTaskToReadyList+0x134>
	vListInitialise( &xDelayedTaskList2 );
 800e05e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800e0c4 <prvAddNewTaskToReadyList+0x138>
 800e062:	4e0d      	ldr	r6, [pc, #52]	; (800e098 <prvAddNewTaskToReadyList+0x10c>)
	vListInitialise( &xDelayedTaskList1 );
 800e064:	4648      	mov	r0, r9
 800e066:	f7ff f991 	bl	800d38c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e06a:	4640      	mov	r0, r8
 800e06c:	f7ff f98e 	bl	800d38c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e070:	480e      	ldr	r0, [pc, #56]	; (800e0ac <prvAddNewTaskToReadyList+0x120>)
 800e072:	f7ff f98b 	bl	800d38c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e076:	480e      	ldr	r0, [pc, #56]	; (800e0b0 <prvAddNewTaskToReadyList+0x124>)
 800e078:	f7ff f988 	bl	800d38c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e07c:	480d      	ldr	r0, [pc, #52]	; (800e0b4 <prvAddNewTaskToReadyList+0x128>)
 800e07e:	f7ff f985 	bl	800d38c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e082:	4a0d      	ldr	r2, [pc, #52]	; (800e0b8 <prvAddNewTaskToReadyList+0x12c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e084:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <prvAddNewTaskToReadyList+0x130>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800e086:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e08a:	f8c3 8000 	str.w	r8, [r3]
 800e08e:	e78f      	b.n	800dfb0 <prvAddNewTaskToReadyList+0x24>
 800e090:	2000744c 	.word	0x2000744c
 800e094:	200073b4 	.word	0x200073b4
 800e098:	200074ac 	.word	0x200074ac
 800e09c:	200073c0 	.word	0x200073c0
 800e0a0:	2000745c 	.word	0x2000745c
 800e0a4:	20007460 	.word	0x20007460
 800e0a8:	e000ed04 	.word	0xe000ed04
 800e0ac:	20007498 	.word	0x20007498
 800e0b0:	200074c4 	.word	0x200074c4
 800e0b4:	200074b0 	.word	0x200074b0
 800e0b8:	200073b8 	.word	0x200073b8
 800e0bc:	200073bc 	.word	0x200073bc
 800e0c0:	20007464 	.word	0x20007464
 800e0c4:	20007478 	.word	0x20007478

0800e0c8 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0c8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800e0cc:	b163      	cbz	r3, 800e0e8 <prvDeleteTCB+0x20>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d014      	beq.n	800e0fc <prvDeleteTCB+0x34>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d014      	beq.n	800e100 <prvDeleteTCB+0x38>
 800e0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0da:	f383 8811 	msr	BASEPRI, r3
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f3bf 8f4f 	dsb	sy
 800e0e6:	e7fe      	b.n	800e0e6 <prvDeleteTCB+0x1e>
	{
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 800e0ec:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e0ee:	f000 ffaf 	bl	800f050 <vPortFree>
				vPortFree( pxTCB );
 800e0f2:	4620      	mov	r0, r4
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e0f8:	f000 bfaa 	b.w	800f050 <vPortFree>
				vPortFree( pxTCB );
 800e0fc:	f000 bfa8 	b.w	800f050 <vPortFree>
 800e100:	4770      	bx	lr
 800e102:	bf00      	nop

0800e104 <prvIdleTask>:
{
 800e104:	b580      	push	{r7, lr}
 800e106:	4c15      	ldr	r4, [pc, #84]	; (800e15c <prvIdleTask+0x58>)
 800e108:	4e15      	ldr	r6, [pc, #84]	; (800e160 <prvIdleTask+0x5c>)
 800e10a:	4d16      	ldr	r5, [pc, #88]	; (800e164 <prvIdleTask+0x60>)
 800e10c:	f8df a058 	ldr.w	sl, [pc, #88]	; 800e168 <prvIdleTask+0x64>
				taskYIELD();
 800e110:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e16c <prvIdleTask+0x68>
 800e114:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 800e118:	e011      	b.n	800e13e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800e11a:	f000 fd83 	bl	800ec24 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e11e:	68f3      	ldr	r3, [r6, #12]
 800e120:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e122:	1d38      	adds	r0, r7, #4
 800e124:	f7ff f96c 	bl	800d400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e128:	682b      	ldr	r3, [r5, #0]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e12e:	6823      	ldr	r3, [r4, #0]
 800e130:	3b01      	subs	r3, #1
 800e132:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e134:	f000 fd98 	bl	800ec68 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e138:	4638      	mov	r0, r7
 800e13a:	f7ff ffc5 	bl	800e0c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1ea      	bne.n	800e11a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e144:	f8da 3000 	ldr.w	r3, [sl]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d9f8      	bls.n	800e13e <prvIdleTask+0x3a>
				taskYIELD();
 800e14c:	f8c9 8000 	str.w	r8, [r9]
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	e7f1      	b.n	800e13e <prvIdleTask+0x3a>
 800e15a:	bf00      	nop
 800e15c:	20007450 	.word	0x20007450
 800e160:	200074c4 	.word	0x200074c4
 800e164:	2000744c 	.word	0x2000744c
 800e168:	200073c0 	.word	0x200073c0
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e172:	4b20      	ldr	r3, [pc, #128]	; (800e1f4 <prvAddCurrentTaskToDelayedList+0x84>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e174:	4d20      	ldr	r5, [pc, #128]	; (800e1f8 <prvAddCurrentTaskToDelayedList+0x88>)
const TickType_t xConstTickCount = xTickCount;
 800e176:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e178:	682b      	ldr	r3, [r5, #0]
{
 800e17a:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e17c:	1d18      	adds	r0, r3, #4
{
 800e17e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e180:	f7ff f93e 	bl	800d400 <uxListRemove>
 800e184:	b940      	cbnz	r0, 800e198 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e186:	682b      	ldr	r3, [r5, #0]
 800e188:	491c      	ldr	r1, [pc, #112]	; (800e1fc <prvAddCurrentTaskToDelayedList+0x8c>)
 800e18a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e18c:	680b      	ldr	r3, [r1, #0]
 800e18e:	2201      	movs	r2, #1
 800e190:	4082      	lsls	r2, r0
 800e192:	ea23 0302 	bic.w	r3, r3, r2
 800e196:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e198:	1c73      	adds	r3, r6, #1
 800e19a:	d01e      	beq.n	800e1da <prvAddCurrentTaskToDelayedList+0x6a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e19c:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800e19e:	6828      	ldr	r0, [r5, #0]
 800e1a0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1a2:	605c      	str	r4, [r3, #4]
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800e1a4:	f04f 0104 	mov.w	r1, #4
			if( xTimeToWake < xConstTickCount )
 800e1a8:	d20d      	bcs.n	800e1c6 <prvAddCurrentTaskToDelayedList+0x56>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
        traceMOVED_TASK_TO_DELAYED_LIST();
 800e1aa:	f001 fc75 	bl	800fa98 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ae:	4b14      	ldr	r3, [pc, #80]	; (800e200 <prvAddCurrentTaskToDelayedList+0x90>)
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	6829      	ldr	r1, [r5, #0]
 800e1b4:	3104      	adds	r1, #4
 800e1b6:	f7ff f909 	bl	800d3cc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800e1ba:	4b12      	ldr	r3, [pc, #72]	; (800e204 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 800e1c0:	bf88      	it	hi
 800e1c2:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800e1c6:	f001 fc67 	bl	800fa98 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ca:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <prvAddCurrentTaskToDelayedList+0x98>)
 800e1cc:	6818      	ldr	r0, [r3, #0]
 800e1ce:	6829      	ldr	r1, [r5, #0]
}
 800e1d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1d4:	3104      	adds	r1, #4
 800e1d6:	f7ff b8f9 	b.w	800d3cc <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1da:	2f00      	cmp	r7, #0
 800e1dc:	d0de      	beq.n	800e19c <prvAddCurrentTaskToDelayedList+0x2c>
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800e1de:	6828      	ldr	r0, [r5, #0]
 800e1e0:	211b      	movs	r1, #27
 800e1e2:	f001 fc59 	bl	800fa98 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1e6:	6829      	ldr	r1, [r5, #0]
 800e1e8:	4808      	ldr	r0, [pc, #32]	; (800e20c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e1ea:	3104      	adds	r1, #4
}
 800e1ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f0:	f7ff b8dc 	b.w	800d3ac <vListInsertEnd>
 800e1f4:	200074d8 	.word	0x200074d8
 800e1f8:	200073b4 	.word	0x200073b4
 800e1fc:	20007460 	.word	0x20007460
 800e200:	200073b8 	.word	0x200073b8
 800e204:	20007490 	.word	0x20007490
 800e208:	200073bc 	.word	0x200073bc
 800e20c:	200074b0 	.word	0x200074b0

0800e210 <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e210:	4a03      	ldr	r2, [pc, #12]	; (800e220 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e212:	4b04      	ldr	r3, [pc, #16]	; (800e224 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e214:	6812      	ldr	r2, [r2, #0]
 800e216:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e218:	68d2      	ldr	r2, [r2, #12]
 800e21a:	6852      	ldr	r2, [r2, #4]
 800e21c:	601a      	str	r2, [r3, #0]
}
 800e21e:	4770      	bx	lr
 800e220:	200073b8 	.word	0x200073b8
 800e224:	20007490 	.word	0x20007490

0800e228 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e22e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e230:	6b25      	ldr	r5, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e232:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e236:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800e23a:	3a01      	subs	r2, #1
 800e23c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e240:	4681      	mov	r9, r0
 800e242:	469b      	mov	fp, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e244:	f025 0a07 	bic.w	sl, r5, #7
	if( pcName != NULL )
 800e248:	b399      	cbz	r1, 800e2b2 <prvInitialiseNewTask.isra.2+0x8a>
 800e24a:	1e48      	subs	r0, r1, #1
 800e24c:	f104 0533 	add.w	r5, r4, #51	; 0x33
 800e250:	310f      	adds	r1, #15
 800e252:	e001      	b.n	800e258 <prvInitialiseNewTask.isra.2+0x30>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e254:	4288      	cmp	r0, r1
 800e256:	d006      	beq.n	800e266 <prvInitialiseNewTask.isra.2+0x3e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e258:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e25c:	f805 7f01 	strb.w	r7, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e260:	7807      	ldrb	r7, [r0, #0]
 800e262:	2f00      	cmp	r7, #0
 800e264:	d1f6      	bne.n	800e254 <prvInitialiseNewTask.isra.2+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e266:	2300      	movs	r3, #0
 800e268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e26c:	2e06      	cmp	r6, #6
 800e26e:	bf28      	it	cs
 800e270:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 800e272:	2500      	movs	r5, #0
	pxNewTCB->uxPriority = uxPriority;
 800e274:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800e276:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e27a:	1d20      	adds	r0, r4, #4
 800e27c:	f7ff f892 	bl	800d3a4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e280:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e284:	f104 0018 	add.w	r0, r4, #24
 800e288:	f7ff f88c 	bl	800d3a4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e28c:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e28e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e290:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e292:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e296:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e298:	465a      	mov	r2, fp
 800e29a:	4649      	mov	r1, r9
 800e29c:	4650      	mov	r0, sl
 800e29e:	f000 fc99 	bl	800ebd4 <pxPortInitialiseStack>
 800e2a2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e2a4:	f1b8 0f00 	cmp.w	r8, #0
 800e2a8:	d001      	beq.n	800e2ae <prvInitialiseNewTask.isra.2+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2aa:	f8c8 4000 	str.w	r4, [r8]
}
 800e2ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800e2b6:	e7d9      	b.n	800e26c <prvInitialiseNewTask.isra.2+0x44>

0800e2b8 <xTaskCreateStatic>:
	{
 800e2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800e2c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800e2c2:	b1bd      	cbz	r5, 800e2f4 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 800e2c4:	b16c      	cbz	r4, 800e2e2 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e2c6:	2754      	movs	r7, #84	; 0x54
 800e2c8:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e2ca:	9f05      	ldr	r7, [sp, #20]
 800e2cc:	2f54      	cmp	r7, #84	; 0x54
 800e2ce:	d01a      	beq.n	800e306 <xTaskCreateStatic+0x4e>
 800e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	e7fe      	b.n	800e2e0 <xTaskCreateStatic+0x28>
 800e2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	e7fe      	b.n	800e2f2 <xTaskCreateStatic+0x3a>
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	e7fe      	b.n	800e304 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e306:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e308:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e30a:	ad04      	add	r5, sp, #16
 800e30c:	9402      	str	r4, [sp, #8]
 800e30e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e310:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e314:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e316:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e318:	f7ff ff86 	bl	800e228 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e31c:	4620      	mov	r0, r4
 800e31e:	f7ff fe35 	bl	800df8c <prvAddNewTaskToReadyList>
	}
 800e322:	9804      	ldr	r0, [sp, #16]
 800e324:	b007      	add	sp, #28
 800e326:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e328 <xTaskCreate>:
	{
 800e328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e32c:	4607      	mov	r7, r0
 800e32e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e330:	0090      	lsls	r0, r2, #2
	{
 800e332:	4616      	mov	r6, r2
 800e334:	4688      	mov	r8, r1
 800e336:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e338:	f000 fdf8 	bl	800ef2c <pvPortMalloc>
			if( pxStack != NULL )
 800e33c:	b320      	cbz	r0, 800e388 <xTaskCreate+0x60>
 800e33e:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e340:	2054      	movs	r0, #84	; 0x54
 800e342:	f000 fdf3 	bl	800ef2c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e346:	4604      	mov	r4, r0
 800e348:	b1b0      	cbz	r0, 800e378 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800e34a:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e34c:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e350:	9d0d      	ldr	r5, [sp, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e352:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e356:	9501      	str	r5, [sp, #4]
 800e358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e35a:	9402      	str	r4, [sp, #8]
 800e35c:	464b      	mov	r3, r9
 800e35e:	4632      	mov	r2, r6
 800e360:	4641      	mov	r1, r8
 800e362:	4638      	mov	r0, r7
 800e364:	9500      	str	r5, [sp, #0]
 800e366:	f7ff ff5f 	bl	800e228 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7ff fe0e 	bl	800df8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e370:	2001      	movs	r0, #1
	}
 800e372:	b005      	add	sp, #20
 800e374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800e378:	4628      	mov	r0, r5
 800e37a:	f000 fe69 	bl	800f050 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e37e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e382:	b005      	add	sp, #20
 800e384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800e38c:	e7f1      	b.n	800e372 <xTaskCreate+0x4a>
 800e38e:	bf00      	nop

0800e390 <vTaskStartScheduler>:
{
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e394:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e396:	aa07      	add	r2, sp, #28
 800e398:	a906      	add	r1, sp, #24
 800e39a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e39c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3a0:	f7f2 f946 	bl	8000630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3a4:	a805      	add	r0, sp, #20
 800e3a6:	c807      	ldmia	r0, {r0, r1, r2}
 800e3a8:	4623      	mov	r3, r4
 800e3aa:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800e3ae:	9400      	str	r4, [sp, #0]
 800e3b0:	4913      	ldr	r1, [pc, #76]	; (800e400 <vTaskStartScheduler+0x70>)
 800e3b2:	4814      	ldr	r0, [pc, #80]	; (800e404 <vTaskStartScheduler+0x74>)
 800e3b4:	f7ff ff80 	bl	800e2b8 <xTaskCreateStatic>
 800e3b8:	4b13      	ldr	r3, [pc, #76]	; (800e408 <vTaskStartScheduler+0x78>)
 800e3ba:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800e3bc:	b1d0      	cbz	r0, 800e3f4 <vTaskStartScheduler+0x64>
 800e3be:	f04f 0250 	mov.w	r2, #80	; 0x50
 800e3c2:	f382 8811 	msr	BASEPRI, r2
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3ce:	4d0f      	ldr	r5, [pc, #60]	; (800e40c <vTaskStartScheduler+0x7c>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3d0:	490f      	ldr	r1, [pc, #60]	; (800e410 <vTaskStartScheduler+0x80>)
		xSchedulerRunning = pdTRUE;
 800e3d2:	4810      	ldr	r0, [pc, #64]	; (800e414 <vTaskStartScheduler+0x84>)
		traceTASK_SWITCHED_IN();
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	4b10      	ldr	r3, [pc, #64]	; (800e418 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3d8:	f04f 36ff 	mov.w	r6, #4294967295
 800e3dc:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
 800e3de:	2501      	movs	r5, #1
 800e3e0:	6005      	str	r5, [r0, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3e2:	600c      	str	r4, [r1, #0]
		traceTASK_SWITCHED_IN();
 800e3e4:	6819      	ldr	r1, [r3, #0]
 800e3e6:	4291      	cmp	r1, r2
 800e3e8:	d006      	beq.n	800e3f8 <vTaskStartScheduler+0x68>
 800e3ea:	6818      	ldr	r0, [r3, #0]
 800e3ec:	f001 fb10 	bl	800fa10 <SEGGER_SYSVIEW_OnTaskStartExec>
		if( xPortStartScheduler() != pdFALSE )
 800e3f0:	f000 fcbe 	bl	800ed70 <xPortStartScheduler>
}
 800e3f4:	b008      	add	sp, #32
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
		traceTASK_SWITCHED_IN();
 800e3f8:	f001 fad6 	bl	800f9a8 <SEGGER_SYSVIEW_OnIdle>
 800e3fc:	e7f8      	b.n	800e3f0 <vTaskStartScheduler+0x60>
 800e3fe:	bf00      	nop
 800e400:	08012ca0 	.word	0x08012ca0
 800e404:	0800e105 	.word	0x0800e105
 800e408:	2000748c 	.word	0x2000748c
 800e40c:	20007490 	.word	0x20007490
 800e410:	200074d8 	.word	0x200074d8
 800e414:	200074ac 	.word	0x200074ac
 800e418:	200073b4 	.word	0x200073b4

0800e41c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e41c:	4a02      	ldr	r2, [pc, #8]	; (800e428 <vTaskSuspendAll+0xc>)
 800e41e:	6813      	ldr	r3, [r2, #0]
 800e420:	3301      	adds	r3, #1
 800e422:	6013      	str	r3, [r2, #0]
}
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	20007458 	.word	0x20007458

0800e42c <xTaskIncrementTick>:
{
 800e42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e430:	4b48      	ldr	r3, [pc, #288]	; (800e554 <xTaskIncrementTick+0x128>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	b9cb      	cbnz	r3, 800e46a <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e436:	4b48      	ldr	r3, [pc, #288]	; (800e558 <xTaskIncrementTick+0x12c>)
 800e438:	681e      	ldr	r6, [r3, #0]
 800e43a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800e43c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e43e:	b30e      	cbz	r6, 800e484 <xTaskIncrementTick+0x58>
 800e440:	f8df b134 	ldr.w	fp, [pc, #308]	; 800e578 <xTaskIncrementTick+0x14c>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e444:	f8db 3000 	ldr.w	r3, [fp]
 800e448:	42b3      	cmp	r3, r6
 800e44a:	d929      	bls.n	800e4a0 <xTaskIncrementTick+0x74>
 800e44c:	4f43      	ldr	r7, [pc, #268]	; (800e55c <xTaskIncrementTick+0x130>)
 800e44e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800e57c <xTaskIncrementTick+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 800e452:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e454:	f8d8 3000 	ldr.w	r3, [r8]
 800e458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800e462:	2b02      	cmp	r3, #2
 800e464:	bf28      	it	cs
 800e466:	2401      	movcs	r4, #1
 800e468:	e004      	b.n	800e474 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800e46a:	4a3d      	ldr	r2, [pc, #244]	; (800e560 <xTaskIncrementTick+0x134>)
 800e46c:	6813      	ldr	r3, [r2, #0]
 800e46e:	3301      	adds	r3, #1
 800e470:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e472:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800e474:	4b3b      	ldr	r3, [pc, #236]	; (800e564 <xTaskIncrementTick+0x138>)
 800e476:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800e478:	2b00      	cmp	r3, #0
}
 800e47a:	bf0c      	ite	eq
 800e47c:	4620      	moveq	r0, r4
 800e47e:	2001      	movne	r0, #1
 800e480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800e484:	4d38      	ldr	r5, [pc, #224]	; (800e568 <xTaskIncrementTick+0x13c>)
 800e486:	682b      	ldr	r3, [r5, #0]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d04b      	beq.n	800e526 <xTaskIncrementTick+0xfa>
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	e7fe      	b.n	800e49e <xTaskIncrementTick+0x72>
 800e4a0:	4d31      	ldr	r5, [pc, #196]	; (800e568 <xTaskIncrementTick+0x13c>)
 800e4a2:	4f2e      	ldr	r7, [pc, #184]	; (800e55c <xTaskIncrementTick+0x130>)
 800e4a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e57c <xTaskIncrementTick+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 800e4a8:	2400      	movs	r4, #0
 800e4aa:	e030      	b.n	800e50e <xTaskIncrementTick+0xe2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	f8d3 900c 	ldr.w	r9, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4b8:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800e4bc:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4be:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800e4c0:	d32e      	bcc.n	800e520 <xTaskIncrementTick+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4c2:	f7fe ff9d 	bl	800d400 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4c6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4ca:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4ce:	b109      	cbz	r1, 800e4d4 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4d0:	f7fe ff96 	bl	800d400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4d4:	4648      	mov	r0, r9
 800e4d6:	f001 fabd 	bl	800fa54 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e4da:	4a24      	ldr	r2, [pc, #144]	; (800e56c <xTaskIncrementTick+0x140>)
 800e4dc:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800e4e0:	6813      	ldr	r3, [r2, #0]
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	fa01 fc00 	lsl.w	ip, r1, r0
 800e4e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e4ec:	ea4c 0c03 	orr.w	ip, ip, r3
 800e4f0:	4651      	mov	r1, sl
 800e4f2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800e4f6:	f8c2 c000 	str.w	ip, [r2]
 800e4fa:	f7fe ff57 	bl	800d3ac <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4fe:	f8d8 0000 	ldr.w	r0, [r8]
 800e502:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800e506:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800e508:	4299      	cmp	r1, r3
 800e50a:	bf28      	it	cs
 800e50c:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e50e:	682b      	ldr	r3, [r5, #0]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1ca      	bne.n	800e4ac <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e516:	f04f 33ff 	mov.w	r3, #4294967295
 800e51a:	f8cb 3000 	str.w	r3, [fp]
					break;
 800e51e:	e799      	b.n	800e454 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 800e520:	f8cb 1000 	str.w	r1, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e524:	e796      	b.n	800e454 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 800e526:	4b12      	ldr	r3, [pc, #72]	; (800e570 <xTaskIncrementTick+0x144>)
 800e528:	6829      	ldr	r1, [r5, #0]
 800e52a:	4a12      	ldr	r2, [pc, #72]	; (800e574 <xTaskIncrementTick+0x148>)
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	6028      	str	r0, [r5, #0]
 800e530:	6019      	str	r1, [r3, #0]
 800e532:	6813      	ldr	r3, [r2, #0]
 800e534:	3301      	adds	r3, #1
 800e536:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	b933      	cbnz	r3, 800e54c <xTaskIncrementTick+0x120>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e53e:	f8df b038 	ldr.w	fp, [pc, #56]	; 800e578 <xTaskIncrementTick+0x14c>
 800e542:	f04f 33ff 	mov.w	r3, #4294967295
 800e546:	f8cb 3000 	str.w	r3, [fp]
 800e54a:	e77b      	b.n	800e444 <xTaskIncrementTick+0x18>
 800e54c:	f7ff fe60 	bl	800e210 <prvResetNextTaskUnblockTime.part.1>
 800e550:	e776      	b.n	800e440 <xTaskIncrementTick+0x14>
 800e552:	bf00      	nop
 800e554:	20007458 	.word	0x20007458
 800e558:	200074d8 	.word	0x200074d8
 800e55c:	200073c0 	.word	0x200073c0
 800e560:	20007454 	.word	0x20007454
 800e564:	200074dc 	.word	0x200074dc
 800e568:	200073b8 	.word	0x200073b8
 800e56c:	20007460 	.word	0x20007460
 800e570:	200073bc 	.word	0x200073bc
 800e574:	20007494 	.word	0x20007494
 800e578:	20007490 	.word	0x20007490
 800e57c:	200073b4 	.word	0x200073b4

0800e580 <xTaskResumeAll>:
{
 800e580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800e584:	4c37      	ldr	r4, [pc, #220]	; (800e664 <xTaskResumeAll+0xe4>)
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	b943      	cbnz	r3, 800e59c <xTaskResumeAll+0x1c>
 800e58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	e7fe      	b.n	800e59a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e59c:	f000 fb42 	bl	800ec24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5a6:	6824      	ldr	r4, [r4, #0]
 800e5a8:	bb94      	cbnz	r4, 800e610 <xTaskResumeAll+0x90>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5aa:	4b2f      	ldr	r3, [pc, #188]	; (800e668 <xTaskResumeAll+0xe8>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	b37b      	cbz	r3, 800e610 <xTaskResumeAll+0x90>
 800e5b0:	4d2e      	ldr	r5, [pc, #184]	; (800e66c <xTaskResumeAll+0xec>)
 800e5b2:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800e684 <xTaskResumeAll+0x104>
					prvAddTaskToReadyList( pxTCB );
 800e5b6:	4e2e      	ldr	r6, [pc, #184]	; (800e670 <xTaskResumeAll+0xf0>)
 800e5b8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800e688 <xTaskResumeAll+0x108>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5bc:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800e68c <xTaskResumeAll+0x10c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5c0:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800e5c4:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5c6:	b34b      	cbz	r3, 800e61c <xTaskResumeAll+0x9c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e5cc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5ce:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5d2:	f104 0018 	add.w	r0, r4, #24
 800e5d6:	f7fe ff13 	bl	800d400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5da:	4640      	mov	r0, r8
 800e5dc:	f7fe ff10 	bl	800d400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f001 fa37 	bl	800fa54 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e5e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e5e8:	6832      	ldr	r2, [r6, #0]
 800e5ea:	fa07 f300 	lsl.w	r3, r7, r0
 800e5ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	4641      	mov	r1, r8
 800e5f6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800e5fa:	6033      	str	r3, [r6, #0]
 800e5fc:	f7fe fed6 	bl	800d3ac <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e600:	f8db 3000 	ldr.w	r3, [fp]
 800e604:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e608:	429a      	cmp	r2, r3
 800e60a:	d3d9      	bcc.n	800e5c0 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800e60c:	602f      	str	r7, [r5, #0]
 800e60e:	e7d7      	b.n	800e5c0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800e610:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e612:	f000 fb29 	bl	800ec68 <vPortExitCritical>
}
 800e616:	4620      	mov	r0, r4
 800e618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800e61c:	b13c      	cbz	r4, 800e62e <xTaskResumeAll+0xae>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e61e:	4b15      	ldr	r3, [pc, #84]	; (800e674 <xTaskResumeAll+0xf4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	b9db      	cbnz	r3, 800e65e <xTaskResumeAll+0xde>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e626:	4b14      	ldr	r3, [pc, #80]	; (800e678 <xTaskResumeAll+0xf8>)
 800e628:	f04f 32ff 	mov.w	r2, #4294967295
 800e62c:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e62e:	4e13      	ldr	r6, [pc, #76]	; (800e67c <xTaskResumeAll+0xfc>)
 800e630:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e632:	b13c      	cbz	r4, 800e644 <xTaskResumeAll+0xc4>
								xYieldPending = pdTRUE;
 800e634:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e636:	f7ff fef9 	bl	800e42c <xTaskIncrementTick>
 800e63a:	b100      	cbz	r0, 800e63e <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800e63c:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e63e:	3c01      	subs	r4, #1
 800e640:	d1f9      	bne.n	800e636 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 800e642:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d0e2      	beq.n	800e610 <xTaskResumeAll+0x90>
					taskYIELD_IF_USING_PREEMPTION();
 800e64a:	4b0d      	ldr	r3, [pc, #52]	; (800e680 <xTaskResumeAll+0x100>)
 800e64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e650:	601a      	str	r2, [r3, #0]
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e65a:	2401      	movs	r4, #1
 800e65c:	e7d9      	b.n	800e612 <xTaskResumeAll+0x92>
 800e65e:	f7ff fdd7 	bl	800e210 <prvResetNextTaskUnblockTime.part.1>
 800e662:	e7e4      	b.n	800e62e <xTaskResumeAll+0xae>
 800e664:	20007458 	.word	0x20007458
 800e668:	2000744c 	.word	0x2000744c
 800e66c:	200074dc 	.word	0x200074dc
 800e670:	20007460 	.word	0x20007460
 800e674:	200073b8 	.word	0x200073b8
 800e678:	20007490 	.word	0x20007490
 800e67c:	20007454 	.word	0x20007454
 800e680:	e000ed04 	.word	0xe000ed04
 800e684:	20007498 	.word	0x20007498
 800e688:	200073c0 	.word	0x200073c0
 800e68c:	200073b4 	.word	0x200073b4

0800e690 <vTaskDelay>:
	{
 800e690:	b538      	push	{r3, r4, r5, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e692:	b1d0      	cbz	r0, 800e6ca <vTaskDelay+0x3a>
			configASSERT( uxSchedulerSuspended == 0 );
 800e694:	4b11      	ldr	r3, [pc, #68]	; (800e6dc <vTaskDelay+0x4c>)
 800e696:	681d      	ldr	r5, [r3, #0]
 800e698:	b145      	cbz	r5, 800e6ac <vTaskDelay+0x1c>
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	e7fe      	b.n	800e6aa <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	3201      	adds	r2, #1
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	601a      	str	r2, [r3, #0]
				traceTASK_DELAY();
 800e6b4:	2023      	movs	r0, #35	; 0x23
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	f000 ff94 	bl	800f5e4 <SEGGER_SYSVIEW_RecordU32>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7ff fd56 	bl	800e170 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e6c4:	f7ff ff5c 	bl	800e580 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e6c8:	b938      	cbnz	r0, 800e6da <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 800e6ca:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <vTaskDelay+0x50>)
 800e6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	f3bf 8f6f 	isb	sy
	}
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	20007458 	.word	0x20007458
 800e6e0:	e000ed04 	.word	0xe000ed04

0800e6e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6e4:	4b1f      	ldr	r3, [pc, #124]	; (800e764 <vTaskSwitchContext+0x80>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	bb23      	cbnz	r3, 800e734 <vTaskSwitchContext+0x50>
		xYieldPending = pdFALSE;
 800e6ea:	491f      	ldr	r1, [pc, #124]	; (800e768 <vTaskSwitchContext+0x84>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ec:	4a1f      	ldr	r2, [pc, #124]	; (800e76c <vTaskSwitchContext+0x88>)
{
 800e6ee:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800e6f0:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6f2:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e6f4:	fab3 f383 	clz	r3, r3
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	f1c3 031f 	rsb	r3, r3, #31
 800e6fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e702:	0092      	lsls	r2, r2, #2
 800e704:	481a      	ldr	r0, [pc, #104]	; (800e770 <vTaskSwitchContext+0x8c>)
 800e706:	5881      	ldr	r1, [r0, r2]
 800e708:	1884      	adds	r4, r0, r2
 800e70a:	b1b9      	cbz	r1, 800e73c <vTaskSwitchContext+0x58>
 800e70c:	6861      	ldr	r1, [r4, #4]
 800e70e:	3208      	adds	r2, #8
 800e710:	6849      	ldr	r1, [r1, #4]
 800e712:	6061      	str	r1, [r4, #4]
 800e714:	4402      	add	r2, r0
 800e716:	4291      	cmp	r1, r2
 800e718:	d01d      	beq.n	800e756 <vTaskSwitchContext+0x72>
 800e71a:	4b16      	ldr	r3, [pc, #88]	; (800e774 <vTaskSwitchContext+0x90>)
 800e71c:	68c9      	ldr	r1, [r1, #12]
		traceTASK_SWITCHED_IN();
 800e71e:	4a16      	ldr	r2, [pc, #88]	; (800e778 <vTaskSwitchContext+0x94>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e720:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e722:	6819      	ldr	r1, [r3, #0]
 800e724:	6812      	ldr	r2, [r2, #0]
 800e726:	4291      	cmp	r1, r2
 800e728:	d011      	beq.n	800e74e <vTaskSwitchContext+0x6a>
 800e72a:	6818      	ldr	r0, [r3, #0]
}
 800e72c:	f85d 4b04 	ldr.w	r4, [sp], #4
		traceTASK_SWITCHED_IN();
 800e730:	f001 b96e 	b.w	800fa10 <SEGGER_SYSVIEW_OnTaskStartExec>
		xYieldPending = pdTRUE;
 800e734:	4b0c      	ldr	r3, [pc, #48]	; (800e768 <vTaskSwitchContext+0x84>)
 800e736:	2201      	movs	r2, #1
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	4770      	bx	lr
	__asm volatile
 800e73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e740:	f383 8811 	msr	BASEPRI, r3
 800e744:	f3bf 8f6f 	isb	sy
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	e7fe      	b.n	800e74c <vTaskSwitchContext+0x68>
}
 800e74e:	f85d 4b04 	ldr.w	r4, [sp], #4
		traceTASK_SWITCHED_IN();
 800e752:	f001 b929 	b.w	800f9a8 <SEGGER_SYSVIEW_OnIdle>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e756:	2214      	movs	r2, #20
 800e758:	fb02 0303 	mla	r3, r2, r3, r0
 800e75c:	6849      	ldr	r1, [r1, #4]
 800e75e:	6059      	str	r1, [r3, #4]
 800e760:	e7db      	b.n	800e71a <vTaskSwitchContext+0x36>
 800e762:	bf00      	nop
 800e764:	20007458 	.word	0x20007458
 800e768:	200074dc 	.word	0x200074dc
 800e76c:	20007460 	.word	0x20007460
 800e770:	200073c0 	.word	0x200073c0
 800e774:	200073b4 	.word	0x200073b4
 800e778:	2000748c 	.word	0x2000748c

0800e77c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800e77c:	b940      	cbnz	r0, 800e790 <vTaskPlaceOnEventList+0x14>
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	e7fe      	b.n	800e78e <vTaskPlaceOnEventList+0x12>
{
 800e790:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e792:	4b06      	ldr	r3, [pc, #24]	; (800e7ac <vTaskPlaceOnEventList+0x30>)
 800e794:	460c      	mov	r4, r1
 800e796:	6819      	ldr	r1, [r3, #0]
 800e798:	3118      	adds	r1, #24
 800e79a:	f7fe fe17 	bl	800d3cc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e79e:	4620      	mov	r0, r4
 800e7a0:	2101      	movs	r1, #1
}
 800e7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7a6:	f7ff bce3 	b.w	800e170 <prvAddCurrentTaskToDelayedList>
 800e7aa:	bf00      	nop
 800e7ac:	200073b4 	.word	0x200073b4

0800e7b0 <xTaskRemoveFromEventList>:
{
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b2:	68c3      	ldr	r3, [r0, #12]
 800e7b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e7b6:	b344      	cbz	r4, 800e80a <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7b8:	f104 0518 	add.w	r5, r4, #24
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f7fe fe1f 	bl	800d400 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7c2:	4b19      	ldr	r3, [pc, #100]	; (800e828 <xTaskRemoveFromEventList+0x78>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	bb4b      	cbnz	r3, 800e81c <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7c8:	1d26      	adds	r6, r4, #4
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	f7fe fe18 	bl	800d400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7d0:	4d16      	ldr	r5, [pc, #88]	; (800e82c <xTaskRemoveFromEventList+0x7c>)
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f001 f93e 	bl	800fa54 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e7d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e7da:	682f      	ldr	r7, [r5, #0]
 800e7dc:	4814      	ldr	r0, [pc, #80]	; (800e830 <xTaskRemoveFromEventList+0x80>)
 800e7de:	2301      	movs	r3, #1
 800e7e0:	4093      	lsls	r3, r2
 800e7e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e7e6:	433b      	orrs	r3, r7
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e7ee:	602b      	str	r3, [r5, #0]
 800e7f0:	f7fe fddc 	bl	800d3ac <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7f4:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <xTaskRemoveFromEventList+0x84>)
 800e7f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800e7fe:	bf83      	ittte	hi
 800e800:	4b0d      	ldrhi	r3, [pc, #52]	; (800e838 <xTaskRemoveFromEventList+0x88>)
 800e802:	2001      	movhi	r0, #1
 800e804:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800e806:	2000      	movls	r0, #0
}
 800e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	e7fe      	b.n	800e81a <xTaskRemoveFromEventList+0x6a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e81c:	4629      	mov	r1, r5
 800e81e:	4807      	ldr	r0, [pc, #28]	; (800e83c <xTaskRemoveFromEventList+0x8c>)
 800e820:	f7fe fdc4 	bl	800d3ac <vListInsertEnd>
 800e824:	e7e6      	b.n	800e7f4 <xTaskRemoveFromEventList+0x44>
 800e826:	bf00      	nop
 800e828:	20007458 	.word	0x20007458
 800e82c:	20007460 	.word	0x20007460
 800e830:	200073c0 	.word	0x200073c0
 800e834:	200073b4 	.word	0x200073b4
 800e838:	200074dc 	.word	0x200074dc
 800e83c:	20007498 	.word	0x20007498

0800e840 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e840:	4a03      	ldr	r2, [pc, #12]	; (800e850 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e842:	4b04      	ldr	r3, [pc, #16]	; (800e854 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e844:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	e9c0 2300 	strd	r2, r3, [r0]
}
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	20007494 	.word	0x20007494
 800e854:	200074d8 	.word	0x200074d8

0800e858 <xTaskCheckForTimeOut>:
{
 800e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800e85a:	b340      	cbz	r0, 800e8ae <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800e85c:	b1f1      	cbz	r1, 800e89c <xTaskCheckForTimeOut+0x44>
 800e85e:	460d      	mov	r5, r1
 800e860:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e862:	f000 f9df 	bl	800ec24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e866:	f8df c078 	ldr.w	ip, [pc, #120]	; 800e8e0 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 800e86a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e86c:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800e86e:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800e872:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e874:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 800e878:	d022      	beq.n	800e8c0 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e87a:	4918      	ldr	r1, [pc, #96]	; (800e8dc <xTaskCheckForTimeOut+0x84>)
 800e87c:	6822      	ldr	r2, [r4, #0]
 800e87e:	f8d1 e000 	ldr.w	lr, [r1]
 800e882:	4572      	cmp	r2, lr
 800e884:	d001      	beq.n	800e88a <xTaskCheckForTimeOut+0x32>
 800e886:	42b7      	cmp	r7, r6
 800e888:	d925      	bls.n	800e8d6 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e88a:	4283      	cmp	r3, r0
 800e88c:	d81a      	bhi.n	800e8c4 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800e892:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800e894:	f000 f9e8 	bl	800ec68 <vPortExitCritical>
}
 800e898:	4628      	mov	r0, r5
 800e89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	e7fe      	b.n	800e8ac <xTaskCheckForTimeOut+0x54>
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	e7fe      	b.n	800e8be <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 800e8c0:	2500      	movs	r5, #0
 800e8c2:	e7e7      	b.n	800e894 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8c4:	6809      	ldr	r1, [r1, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8c6:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 800e8ca:	1a1b      	subs	r3, r3, r0
 800e8cc:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800e8ce:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8d0:	e9c4 1200 	strd	r1, r2, [r4]
 800e8d4:	e7de      	b.n	800e894 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 800e8d6:	2501      	movs	r5, #1
 800e8d8:	e7dc      	b.n	800e894 <xTaskCheckForTimeOut+0x3c>
 800e8da:	bf00      	nop
 800e8dc:	20007494 	.word	0x20007494
 800e8e0:	200074d8 	.word	0x200074d8

0800e8e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e8e4:	4b01      	ldr	r3, [pc, #4]	; (800e8ec <vTaskMissedYield+0x8>)
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	601a      	str	r2, [r3, #0]
}
 800e8ea:	4770      	bx	lr
 800e8ec:	200074dc 	.word	0x200074dc

0800e8f0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e8f0:	4b05      	ldr	r3, [pc, #20]	; (800e908 <xTaskGetSchedulerState+0x18>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	b133      	cbz	r3, 800e904 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8f6:	4b05      	ldr	r3, [pc, #20]	; (800e90c <xTaskGetSchedulerState+0x1c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8fc:	bf0c      	ite	eq
 800e8fe:	2002      	moveq	r0, #2
 800e900:	2000      	movne	r0, #0
 800e902:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e904:	2001      	movs	r0, #1
	}
 800e906:	4770      	bx	lr
 800e908:	200074ac 	.word	0x200074ac
 800e90c:	20007458 	.word	0x20007458

0800e910 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800e910:	b340      	cbz	r0, 800e964 <xTaskPriorityInherit+0x54>
	{
 800e912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e914:	4d26      	ldr	r5, [pc, #152]	; (800e9b0 <xTaskPriorityInherit+0xa0>)
 800e916:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e918:	682a      	ldr	r2, [r5, #0]
 800e91a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d219      	bcs.n	800e954 <xTaskPriorityInherit+0x44>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e920:	6982      	ldr	r2, [r0, #24]
 800e922:	2a00      	cmp	r2, #0
 800e924:	db04      	blt.n	800e930 <xTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e926:	682a      	ldr	r2, [r5, #0]
 800e928:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e92a:	f1c2 0207 	rsb	r2, r2, #7
 800e92e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e930:	4e20      	ldr	r6, [pc, #128]	; (800e9b4 <xTaskPriorityInherit+0xa4>)
 800e932:	6942      	ldr	r2, [r0, #20]
 800e934:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e93c:	429a      	cmp	r2, r3
 800e93e:	4604      	mov	r4, r0
 800e940:	d011      	beq.n	800e966 <xTaskPriorityInherit+0x56>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e942:	682b      	ldr	r3, [r5, #0]
 800e944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e946:	62c3      	str	r3, [r0, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800e948:	4621      	mov	r1, r4
 800e94a:	2049      	movs	r0, #73	; 0x49
 800e94c:	f000 fe4a 	bl	800f5e4 <SEGGER_SYSVIEW_RecordU32>
				xReturn = pdTRUE;
 800e950:	2001      	movs	r0, #1
	}
 800e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95a:	4298      	cmp	r0, r3
 800e95c:	bf2c      	ite	cs
 800e95e:	2000      	movcs	r0, #0
 800e960:	2001      	movcc	r0, #1
	}
 800e962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e964:	4770      	bx	lr
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e966:	1d07      	adds	r7, r0, #4
 800e968:	4638      	mov	r0, r7
 800e96a:	f7fe fd49 	bl	800d400 <uxListRemove>
 800e96e:	b970      	cbnz	r0, 800e98e <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e970:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e972:	4a11      	ldr	r2, [pc, #68]	; (800e9b8 <xTaskPriorityInherit+0xa8>)
 800e974:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	58f3      	ldr	r3, [r6, r3]
 800e97c:	b943      	cbnz	r3, 800e990 <xTaskPriorityInherit+0x80>
 800e97e:	6813      	ldr	r3, [r2, #0]
 800e980:	2001      	movs	r0, #1
 800e982:	fa00 f101 	lsl.w	r1, r0, r1
 800e986:	ea23 0101 	bic.w	r1, r3, r1
 800e98a:	6011      	str	r1, [r2, #0]
 800e98c:	e000      	b.n	800e990 <xTaskPriorityInherit+0x80>
 800e98e:	4a0a      	ldr	r2, [pc, #40]	; (800e9b8 <xTaskPriorityInherit+0xa8>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e990:	682b      	ldr	r3, [r5, #0]
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 800e992:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e994:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e996:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 800e998:	2301      	movs	r3, #1
 800e99a:	4083      	lsls	r3, r0
 800e99c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e9a0:	432b      	orrs	r3, r5
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	f7fe fcff 	bl	800d3ac <vListInsertEnd>
 800e9ae:	e7cb      	b.n	800e948 <xTaskPriorityInherit+0x38>
 800e9b0:	200073b4 	.word	0x200073b4
 800e9b4:	200073c0 	.word	0x200073c0
 800e9b8:	20007460 	.word	0x20007460

0800e9bc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800e9bc:	b160      	cbz	r0, 800e9d8 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB == pxCurrentTCB );
 800e9be:	4b2b      	ldr	r3, [pc, #172]	; (800ea6c <xTaskPriorityDisinherit+0xb0>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4283      	cmp	r3, r0
 800e9c4:	d00a      	beq.n	800e9dc <xTaskPriorityDisinherit+0x20>
 800e9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	e7fe      	b.n	800e9d6 <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800e9d8:	2000      	movs	r0, #0
	}
 800e9da:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800e9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9de:	b943      	cbnz	r3, 800e9f2 <xTaskPriorityDisinherit+0x36>
 800e9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	e7fe      	b.n	800e9f0 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800e9f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800e9f6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9f8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800e9fa:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9fc:	d0ec      	beq.n	800e9d8 <xTaskPriorityDisinherit+0x1c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1ea      	bne.n	800e9d8 <xTaskPriorityDisinherit+0x1c>
	{
 800ea02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea06:	f100 0804 	add.w	r8, r0, #4
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	f7fe fcf7 	bl	800d400 <uxListRemove>
 800ea12:	b1d8      	cbz	r0, 800ea4c <xTaskPriorityDisinherit+0x90>
 800ea14:	4f16      	ldr	r7, [pc, #88]	; (800ea70 <xTaskPriorityDisinherit+0xb4>)
 800ea16:	4d17      	ldr	r5, [pc, #92]	; (800ea74 <xTaskPriorityDisinherit+0xb8>)
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800ea18:	4621      	mov	r1, r4
 800ea1a:	204a      	movs	r0, #74	; 0x4a
 800ea1c:	f000 fde2 	bl	800f5e4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea20:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvReaddTaskToReadyList( pxTCB );
 800ea22:	f8d5 c000 	ldr.w	ip, [r5]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea26:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvReaddTaskToReadyList( pxTCB );
 800ea28:	2601      	movs	r6, #1
 800ea2a:	2014      	movs	r0, #20
 800ea2c:	fb00 7003 	mla	r0, r0, r3, r7
 800ea30:	fa06 f203 	lsl.w	r2, r6, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea34:	f1c3 0307 	rsb	r3, r3, #7
					prvReaddTaskToReadyList( pxTCB );
 800ea38:	ea42 020c 	orr.w	r2, r2, ip
 800ea3c:	4641      	mov	r1, r8
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea3e:	61a3      	str	r3, [r4, #24]
					prvReaddTaskToReadyList( pxTCB );
 800ea40:	602a      	str	r2, [r5, #0]
 800ea42:	f7fe fcb3 	bl	800d3ac <vListInsertEnd>
					xReturn = pdTRUE;
 800ea46:	4630      	mov	r0, r6
	}
 800ea48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ea4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ea4e:	4f08      	ldr	r7, [pc, #32]	; (800ea70 <xTaskPriorityDisinherit+0xb4>)
 800ea50:	4d08      	ldr	r5, [pc, #32]	; (800ea74 <xTaskPriorityDisinherit+0xb8>)
 800ea52:	2314      	movs	r3, #20
 800ea54:	fb03 f301 	mul.w	r3, r3, r1
 800ea58:	58fb      	ldr	r3, [r7, r3]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1dc      	bne.n	800ea18 <xTaskPriorityDisinherit+0x5c>
 800ea5e:	682b      	ldr	r3, [r5, #0]
 800ea60:	2201      	movs	r2, #1
 800ea62:	408a      	lsls	r2, r1
 800ea64:	ea23 0302 	bic.w	r3, r3, r2
 800ea68:	602b      	str	r3, [r5, #0]
 800ea6a:	e7d5      	b.n	800ea18 <xTaskPriorityDisinherit+0x5c>
 800ea6c:	200073b4 	.word	0x200073b4
 800ea70:	200073c0 	.word	0x200073c0
 800ea74:	20007460 	.word	0x20007460

0800ea78 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800ea78:	b1a8      	cbz	r0, 800eaa6 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 800ea7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800ea7c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800ea7e:	b943      	cbnz	r3, 800ea92 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	e7fe      	b.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0x18>
 800ea92:	6c45      	ldr	r5, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ea94:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ea96:	428d      	cmp	r5, r1
 800ea98:	bf38      	it	cc
 800ea9a:	460d      	movcc	r5, r1
 800ea9c:	42aa      	cmp	r2, r5
 800ea9e:	d001      	beq.n	800eaa4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d001      	beq.n	800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 800eaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa6:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 800eaa8:	4b22      	ldr	r3, [pc, #136]	; (800eb34 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4283      	cmp	r3, r0
 800eaae:	d02a      	beq.n	800eb06 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 800eab0:	4604      	mov	r4, r0
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800eab2:	4601      	mov	r1, r0
 800eab4:	204a      	movs	r0, #74	; 0x4a
 800eab6:	f000 fd95 	bl	800f5e4 <SEGGER_SYSVIEW_RecordU32>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eaba:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eabc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eabe:	4e1e      	ldr	r6, [pc, #120]	; (800eb38 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
					pxTCB->uxPriority = uxPriorityToUse;
 800eac0:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eac2:	2a00      	cmp	r2, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eac4:	bfa4      	itt	ge
 800eac6:	f1c5 0507 	rsbge	r5, r5, #7
 800eaca:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eacc:	6962      	ldr	r2, [r4, #20]
 800eace:	2514      	movs	r5, #20
 800ead0:	fb05 6303 	mla	r3, r5, r3, r6
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d1e5      	bne.n	800eaa4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ead8:	1d27      	adds	r7, r4, #4
 800eada:	4638      	mov	r0, r7
 800eadc:	f7fe fc90 	bl	800d400 <uxListRemove>
 800eae0:	b1d0      	cbz	r0, 800eb18 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 800eae2:	4d16      	ldr	r5, [pc, #88]	; (800eb3c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
						prvAddTaskToReadyList( pxTCB );
 800eae4:	4620      	mov	r0, r4
 800eae6:	f000 ffb5 	bl	800fa54 <SEGGER_SYSVIEW_OnTaskStartReady>
 800eaea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eaec:	682c      	ldr	r4, [r5, #0]
 800eaee:	2301      	movs	r3, #1
 800eaf0:	4093      	lsls	r3, r2
 800eaf2:	4323      	orrs	r3, r4
 800eaf4:	2014      	movs	r0, #20
 800eaf6:	4639      	mov	r1, r7
 800eaf8:	fb00 6002 	mla	r0, r0, r2, r6
 800eafc:	602b      	str	r3, [r5, #0]
	}
 800eafe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800eb02:	f7fe bc53 	b.w	800d3ac <vListInsertEnd>
 800eb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	e7fe      	b.n	800eb16 <vTaskPriorityDisinheritAfterTimeout+0x9e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eb18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eb1a:	fb05 f501 	mul.w	r5, r5, r1
 800eb1e:	5973      	ldr	r3, [r6, r5]
 800eb20:	4d06      	ldr	r5, [pc, #24]	; (800eb3c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1de      	bne.n	800eae4 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 800eb26:	682b      	ldr	r3, [r5, #0]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	408a      	lsls	r2, r1
 800eb2c:	ea23 0302 	bic.w	r3, r3, r2
 800eb30:	602b      	str	r3, [r5, #0]
 800eb32:	e7d7      	b.n	800eae4 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 800eb34:	200073b4 	.word	0x200073b4
 800eb38:	200073c0 	.word	0x200073c0
 800eb3c:	20007460 	.word	0x20007460

0800eb40 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800eb40:	4b04      	ldr	r3, [pc, #16]	; (800eb54 <pvTaskIncrementMutexHeldCount+0x14>)
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	b11a      	cbz	r2, 800eb4e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb46:	6819      	ldr	r1, [r3, #0]
 800eb48:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800eb4a:	3201      	adds	r2, #1
 800eb4c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800eb4e:	6818      	ldr	r0, [r3, #0]
	}
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	200073b4 	.word	0x200073b4

0800eb58 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb58:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <prvTaskExitError+0x3c>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
{
 800eb5c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800eb5e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800eb60:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800eb62:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800eb64:	d008      	beq.n	800eb78 <prvTaskExitError+0x20>
 800eb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	e7fe      	b.n	800eb76 <prvTaskExitError+0x1e>
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb88:	9b01      	ldr	r3, [sp, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0fc      	beq.n	800eb88 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb8e:	b002      	add	sp, #8
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	20000090 	.word	0x20000090

0800eb98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb98:	4808      	ldr	r0, [pc, #32]	; (800ebbc <prvPortStartFirstTask+0x24>)
 800eb9a:	6800      	ldr	r0, [r0, #0]
 800eb9c:	6800      	ldr	r0, [r0, #0]
 800eb9e:	f380 8808 	msr	MSP, r0
 800eba2:	f04f 0000 	mov.w	r0, #0
 800eba6:	f380 8814 	msr	CONTROL, r0
 800ebaa:	b662      	cpsie	i
 800ebac:	b661      	cpsie	f
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	df00      	svc	0
 800ebb8:	bf00      	nop
 800ebba:	0000      	.short	0x0000
 800ebbc:	e000ed08 	.word	0xe000ed08

0800ebc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ebd0 <vPortEnableVFP+0x10>
 800ebc4:	6801      	ldr	r1, [r0, #0]
 800ebc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebca:	6001      	str	r1, [r0, #0]
 800ebcc:	4770      	bx	lr
 800ebce:	0000      	.short	0x0000
 800ebd0:	e000ed88 	.word	0xe000ed88

0800ebd4 <pxPortInitialiseStack>:
{
 800ebd4:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebd6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebda:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebde:	4c07      	ldr	r4, [pc, #28]	; (800ebfc <pxPortInitialiseStack+0x28>)
 800ebe0:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebe4:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebe8:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebec:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebf0:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800ebf4:	bc30      	pop	{r4, r5}
 800ebf6:	3844      	subs	r0, #68	; 0x44
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	0800eb59 	.word	0x0800eb59

0800ec00 <SVC_Handler>:
	__asm volatile (
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <pxCurrentTCBConst2>)
 800ec02:	6819      	ldr	r1, [r3, #0]
 800ec04:	6808      	ldr	r0, [r1, #0]
 800ec06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0a:	f380 8809 	msr	PSP, r0
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f04f 0000 	mov.w	r0, #0
 800ec16:	f380 8811 	msr	BASEPRI, r0
 800ec1a:	4770      	bx	lr
 800ec1c:	f3af 8000 	nop.w

0800ec20 <pxCurrentTCBConst2>:
 800ec20:	200073b4 	.word	0x200073b4

0800ec24 <vPortEnterCritical>:
 800ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ec34:	4a0a      	ldr	r2, [pc, #40]	; (800ec60 <vPortEnterCritical+0x3c>)
 800ec36:	6813      	ldr	r3, [r2, #0]
 800ec38:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ec3a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ec3c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ec3e:	d000      	beq.n	800ec42 <vPortEnterCritical+0x1e>
}
 800ec40:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec42:	4b08      	ldr	r3, [pc, #32]	; (800ec64 <vPortEnterCritical+0x40>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec4a:	d0f9      	beq.n	800ec40 <vPortEnterCritical+0x1c>
 800ec4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec50:	f383 8811 	msr	BASEPRI, r3
 800ec54:	f3bf 8f6f 	isb	sy
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	e7fe      	b.n	800ec5c <vPortEnterCritical+0x38>
 800ec5e:	bf00      	nop
 800ec60:	20000090 	.word	0x20000090
 800ec64:	e000ed04 	.word	0xe000ed04

0800ec68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ec68:	4a08      	ldr	r2, [pc, #32]	; (800ec8c <vPortExitCritical+0x24>)
 800ec6a:	6813      	ldr	r3, [r2, #0]
 800ec6c:	b943      	cbnz	r3, 800ec80 <vPortExitCritical+0x18>
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	e7fe      	b.n	800ec7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ec80:	3b01      	subs	r3, #1
 800ec82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec84:	b90b      	cbnz	r3, 800ec8a <vPortExitCritical+0x22>
	__asm volatile
 800ec86:	f383 8811 	msr	BASEPRI, r3
}
 800ec8a:	4770      	bx	lr
 800ec8c:	20000090 	.word	0x20000090

0800ec90 <PendSV_Handler>:
	__asm volatile
 800ec90:	f3ef 8009 	mrs	r0, PSP
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	4b15      	ldr	r3, [pc, #84]	; (800ecf0 <pxCurrentTCBConst>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	f01e 0f10 	tst.w	lr, #16
 800eca0:	bf08      	it	eq
 800eca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecaa:	6010      	str	r0, [r2, #0]
 800ecac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecb4:	f380 8811 	msr	BASEPRI, r0
 800ecb8:	f3bf 8f4f 	dsb	sy
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	f7ff fd10 	bl	800e6e4 <vTaskSwitchContext>
 800ecc4:	f04f 0000 	mov.w	r0, #0
 800ecc8:	f380 8811 	msr	BASEPRI, r0
 800eccc:	bc09      	pop	{r0, r3}
 800ecce:	6819      	ldr	r1, [r3, #0]
 800ecd0:	6808      	ldr	r0, [r1, #0]
 800ecd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd6:	f01e 0f10 	tst.w	lr, #16
 800ecda:	bf08      	it	eq
 800ecdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ece0:	f380 8809 	msr	PSP, r0
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop
 800ecec:	f3af 8000 	nop.w

0800ecf0 <pxCurrentTCBConst>:
 800ecf0:	200073b4 	.word	0x200073b4

0800ecf4 <SysTick_Handler>:
{
 800ecf4:	b508      	push	{r3, lr}
	__asm volatile
 800ecf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfa:	f383 8811 	msr	BASEPRI, r3
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f3bf 8f4f 	dsb	sy
  traceISR_ENTER();
 800ed06:	f000 fe07 	bl	800f918 <SEGGER_SYSVIEW_RecordEnterISR>
		if( xTaskIncrementTick() != pdFALSE )
 800ed0a:	f7ff fb8f 	bl	800e42c <xTaskIncrementTick>
 800ed0e:	b928      	cbnz	r0, 800ed1c <SysTick_Handler+0x28>
			traceISR_EXIT();
 800ed10:	f000 fe26 	bl	800f960 <SEGGER_SYSVIEW_RecordExitISR>
	__asm volatile
 800ed14:	2300      	movs	r3, #0
 800ed16:	f383 8811 	msr	BASEPRI, r3
}
 800ed1a:	bd08      	pop	{r3, pc}
			traceISR_EXIT_TO_SCHEDULER();
 800ed1c:	f000 fe32 	bl	800f984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed20:	4b03      	ldr	r3, [pc, #12]	; (800ed30 <SysTick_Handler+0x3c>)
 800ed22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed26:	601a      	str	r2, [r3, #0]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	f383 8811 	msr	BASEPRI, r3
}
 800ed2e:	bd08      	pop	{r3, pc}
 800ed30:	e000ed04 	.word	0xe000ed04

0800ed34 <vPortSetupTimerInterrupt>:
{
 800ed34:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed38:	4d09      	ldr	r5, [pc, #36]	; (800ed60 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed3a:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <vPortSetupTimerInterrupt+0x30>)
 800ed3c:	4c0a      	ldr	r4, [pc, #40]	; (800ed68 <vPortSetupTimerInterrupt+0x34>)
 800ed3e:	480b      	ldr	r0, [pc, #44]	; (800ed6c <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed40:	2100      	movs	r1, #0
 800ed42:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed44:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	fba4 1303 	umull	r1, r3, r4, r3
 800ed4c:	099b      	lsrs	r3, r3, #6
 800ed4e:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed50:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed52:	6003      	str	r3, [r0, #0]
}
 800ed54:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed56:	6011      	str	r1, [r2, #0]
}
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	e000e010 	.word	0xe000e010
 800ed60:	e000e018 	.word	0xe000e018
 800ed64:	20000004 	.word	0x20000004
 800ed68:	10624dd3 	.word	0x10624dd3
 800ed6c:	e000e014 	.word	0xe000e014

0800ed70 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed70:	4b3a      	ldr	r3, [pc, #232]	; (800ee5c <xPortStartScheduler+0xec>)
 800ed72:	4a3b      	ldr	r2, [pc, #236]	; (800ee60 <xPortStartScheduler+0xf0>)
 800ed74:	6819      	ldr	r1, [r3, #0]
 800ed76:	4291      	cmp	r1, r2
 800ed78:	d040      	beq.n	800edfc <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	4b39      	ldr	r3, [pc, #228]	; (800ee64 <xPortStartScheduler+0xf4>)
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d033      	beq.n	800edea <xPortStartScheduler+0x7a>
{
 800ed82:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed84:	4b38      	ldr	r3, [pc, #224]	; (800ee68 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed86:	4839      	ldr	r0, [pc, #228]	; (800ee6c <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed88:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed8a:	4c39      	ldr	r4, [pc, #228]	; (800ee70 <xPortStartScheduler+0x100>)
{
 800ed8c:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed8e:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed90:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed92:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed94:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eda2:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eda6:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eda8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800edac:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edae:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800edb0:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edb2:	d511      	bpl.n	800edd8 <xPortStartScheduler+0x68>
 800edb4:	2306      	movs	r3, #6
 800edb6:	e000      	b.n	800edba <xPortStartScheduler+0x4a>
 800edb8:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800edba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800edbe:	0052      	lsls	r2, r2, #1
 800edc0:	b2d2      	uxtb	r2, r2
 800edc2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edc6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800edca:	0612      	lsls	r2, r2, #24
 800edcc:	f103 31ff 	add.w	r1, r3, #4294967295
 800edd0:	d4f2      	bmi.n	800edb8 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800edd2:	2b03      	cmp	r3, #3
 800edd4:	6003      	str	r3, [r0, #0]
 800edd6:	d01a      	beq.n	800ee0e <xPortStartScheduler+0x9e>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	e7fe      	b.n	800ede8 <xPortStartScheduler+0x78>
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	e7fe      	b.n	800edfa <xPortStartScheduler+0x8a>
 800edfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	e7fe      	b.n	800ee0c <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee0e:	9901      	ldr	r1, [sp, #4]
 800ee10:	4c15      	ldr	r4, [pc, #84]	; (800ee68 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee12:	4a18      	ldr	r2, [pc, #96]	; (800ee74 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee14:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee16:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee1c:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee1e:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee20:	6813      	ldr	r3, [r2, #0]
 800ee22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee28:	6813      	ldr	r3, [r2, #0]
 800ee2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ee2e:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800ee30:	f7ff ff80 	bl	800ed34 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ee34:	4b10      	ldr	r3, [pc, #64]	; (800ee78 <xPortStartScheduler+0x108>)
 800ee36:	2400      	movs	r4, #0
 800ee38:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800ee3a:	f7ff fec1 	bl	800ebc0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee3e:	4a0f      	ldr	r2, [pc, #60]	; (800ee7c <xPortStartScheduler+0x10c>)
 800ee40:	6813      	ldr	r3, [r2, #0]
 800ee42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee46:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800ee48:	f7ff fea6 	bl	800eb98 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ee4c:	f7ff fc4a 	bl	800e6e4 <vTaskSwitchContext>
	prvTaskExitError();
 800ee50:	f7ff fe82 	bl	800eb58 <prvTaskExitError>
}
 800ee54:	4620      	mov	r0, r4
 800ee56:	b002      	add	sp, #8
 800ee58:	bd10      	pop	{r4, pc}
 800ee5a:	bf00      	nop
 800ee5c:	e000ed00 	.word	0xe000ed00
 800ee60:	410fc271 	.word	0x410fc271
 800ee64:	410fc270 	.word	0x410fc270
 800ee68:	e000e400 	.word	0xe000e400
 800ee6c:	200074e4 	.word	0x200074e4
 800ee70:	200074e0 	.word	0x200074e0
 800ee74:	e000ed20 	.word	0xe000ed20
 800ee78:	20000090 	.word	0x20000090
 800ee7c:	e000ef34 	.word	0xe000ef34

0800ee80 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee80:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee84:	2b0f      	cmp	r3, #15
 800ee86:	d90e      	bls.n	800eea6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee88:	4910      	ldr	r1, [pc, #64]	; (800eecc <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee8a:	4a11      	ldr	r2, [pc, #68]	; (800eed0 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee8c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee8e:	7812      	ldrb	r2, [r2, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d908      	bls.n	800eea6 <vPortValidateInterruptPriority+0x26>
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	e7fe      	b.n	800eea4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eea6:	4b0b      	ldr	r3, [pc, #44]	; (800eed4 <vPortValidateInterruptPriority+0x54>)
 800eea8:	4a0b      	ldr	r2, [pc, #44]	; (800eed8 <vPortValidateInterruptPriority+0x58>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6812      	ldr	r2, [r2, #0]
 800eeae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d908      	bls.n	800eec8 <vPortValidateInterruptPriority+0x48>
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	e7fe      	b.n	800eec6 <vPortValidateInterruptPriority+0x46>
	}
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	e000e3f0 	.word	0xe000e3f0
 800eed0:	200074e0 	.word	0x200074e0
 800eed4:	e000ed0c 	.word	0xe000ed0c
 800eed8:	200074e4 	.word	0x200074e4

0800eedc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eedc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eede:	4b11      	ldr	r3, [pc, #68]	; (800ef24 <prvInsertBlockIntoFreeList+0x48>)
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	4282      	cmp	r2, r0
 800eee4:	d201      	bcs.n	800eeea <prvInsertBlockIntoFreeList+0xe>
 800eee6:	4613      	mov	r3, r2
 800eee8:	e7fa      	b.n	800eee0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeea:	685c      	ldr	r4, [r3, #4]
 800eeec:	1919      	adds	r1, r3, r4
 800eeee:	4288      	cmp	r0, r1
 800eef0:	d103      	bne.n	800eefa <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eef2:	6841      	ldr	r1, [r0, #4]
 800eef4:	4421      	add	r1, r4
 800eef6:	6059      	str	r1, [r3, #4]
 800eef8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eefa:	6844      	ldr	r4, [r0, #4]
 800eefc:	1901      	adds	r1, r0, r4
 800eefe:	428a      	cmp	r2, r1
 800ef00:	d109      	bne.n	800ef16 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef02:	4909      	ldr	r1, [pc, #36]	; (800ef28 <prvInsertBlockIntoFreeList+0x4c>)
 800ef04:	6809      	ldr	r1, [r1, #0]
 800ef06:	428a      	cmp	r2, r1
 800ef08:	d005      	beq.n	800ef16 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef0a:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef0e:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef10:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef12:	6041      	str	r1, [r0, #4]
 800ef14:	e000      	b.n	800ef18 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef16:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef18:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef1a:	bf18      	it	ne
 800ef1c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	2000cffc 	.word	0x2000cffc
 800ef28:	200074e8 	.word	0x200074e8

0800ef2c <pvPortMalloc>:
{
 800ef2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef30:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800ef32:	f7ff fa73 	bl	800e41c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ef36:	483f      	ldr	r0, [pc, #252]	; (800f034 <pvPortMalloc+0x108>)
 800ef38:	6803      	ldr	r3, [r0, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d05c      	beq.n	800eff8 <pvPortMalloc+0xcc>
 800ef3e:	4b3e      	ldr	r3, [pc, #248]	; (800f038 <pvPortMalloc+0x10c>)
 800ef40:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef42:	422c      	tst	r4, r5
 800ef44:	d151      	bne.n	800efea <pvPortMalloc+0xbe>
			if( xWantedSize > 0 )
 800ef46:	2c00      	cmp	r4, #0
 800ef48:	d04f      	beq.n	800efea <pvPortMalloc+0xbe>
				xWantedSize += xHeapStructSize;
 800ef4a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef4e:	0759      	lsls	r1, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef50:	bf1c      	itt	ne
 800ef52:	f023 0307 	bicne.w	r3, r3, #7
 800ef56:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d046      	beq.n	800efea <pvPortMalloc+0xbe>
 800ef5c:	4f37      	ldr	r7, [pc, #220]	; (800f03c <pvPortMalloc+0x110>)
 800ef5e:	683e      	ldr	r6, [r7, #0]
 800ef60:	429e      	cmp	r6, r3
 800ef62:	d342      	bcc.n	800efea <pvPortMalloc+0xbe>
				pxBlock = xStart.pxNextFreeBlock;
 800ef64:	4936      	ldr	r1, [pc, #216]	; (800f040 <pvPortMalloc+0x114>)
 800ef66:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef68:	e006      	b.n	800ef78 <pvPortMalloc+0x4c>
 800ef6a:	f8d4 c000 	ldr.w	ip, [r4]
 800ef6e:	f1bc 0f00 	cmp.w	ip, #0
 800ef72:	d004      	beq.n	800ef7e <pvPortMalloc+0x52>
 800ef74:	4621      	mov	r1, r4
 800ef76:	4664      	mov	r4, ip
 800ef78:	6862      	ldr	r2, [r4, #4]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d3f5      	bcc.n	800ef6a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800ef7e:	6800      	ldr	r0, [r0, #0]
 800ef80:	42a0      	cmp	r0, r4
 800ef82:	d032      	beq.n	800efea <pvPortMalloc+0xbe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef84:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef86:	f8d1 8000 	ldr.w	r8, [r1]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef8a:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef8c:	1ad1      	subs	r1, r2, r3
 800ef8e:	2910      	cmp	r1, #16
 800ef90:	d910      	bls.n	800efb4 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef92:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef94:	0742      	lsls	r2, r0, #29
 800ef96:	d008      	beq.n	800efaa <pvPortMalloc+0x7e>
 800ef98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9c:	f383 8811 	msr	BASEPRI, r3
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	e7fe      	b.n	800efa8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efaa:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efac:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efae:	f7ff ff95 	bl	800eedc <prvInsertBlockIntoFreeList>
 800efb2:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800efb4:	4823      	ldr	r0, [pc, #140]	; (800f044 <pvPortMalloc+0x118>)
 800efb6:	6801      	ldr	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efb8:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 800efba:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800efbc:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800efbe:	428e      	cmp	r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800efc0:	6062      	str	r2, [r4, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800efc2:	f108 0808 	add.w	r8, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 800efc6:	6023      	str	r3, [r4, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efc8:	bf38      	it	cc
 800efca:	6006      	strcc	r6, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efcc:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800efce:	f7ff fad7 	bl	800e580 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efd2:	f018 0f07 	tst.w	r8, #7
 800efd6:	d00c      	beq.n	800eff2 <pvPortMalloc+0xc6>
 800efd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efdc:	f383 8811 	msr	BASEPRI, r3
 800efe0:	f3bf 8f6f 	isb	sy
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	e7fe      	b.n	800efe8 <pvPortMalloc+0xbc>
	( void ) xTaskResumeAll();
 800efea:	f7ff fac9 	bl	800e580 <xTaskResumeAll>
 800efee:	f04f 0800 	mov.w	r8, #0
}
 800eff2:	4640      	mov	r0, r8
 800eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 800eff8:	4b13      	ldr	r3, [pc, #76]	; (800f048 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 800effa:	4a14      	ldr	r2, [pc, #80]	; (800f04c <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800effc:	4f11      	ldr	r7, [pc, #68]	; (800f044 <pvPortMalloc+0x118>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800effe:	4e10      	ldr	r6, [pc, #64]	; (800f040 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f000:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f002:	bf18      	it	ne
 800f004:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f006:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f00a:	bf18      	it	ne
 800f00c:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f010:	4d0a      	ldr	r5, [pc, #40]	; (800f03c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800f012:	6002      	str	r2, [r0, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f014:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f016:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f018:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f01a:	602b      	str	r3, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f01c:	4f06      	ldr	r7, [pc, #24]	; (800f038 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800f01e:	2500      	movs	r5, #0
	pxEnd->pxNextFreeBlock = NULL;
 800f020:	e9c2 5500 	strd	r5, r5, [r2]
	xStart.xBlockSize = ( size_t ) 0;
 800f024:	6075      	str	r5, [r6, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f026:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f02a:	600a      	str	r2, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f02c:	604b      	str	r3, [r1, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f02e:	6031      	str	r1, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f030:	603d      	str	r5, [r7, #0]
 800f032:	e786      	b.n	800ef42 <pvPortMalloc+0x16>
 800f034:	200074e8 	.word	0x200074e8
 800f038:	2000cff0 	.word	0x2000cff0
 800f03c:	2000cff4 	.word	0x2000cff4
 800f040:	2000cffc 	.word	0x2000cffc
 800f044:	2000cff8 	.word	0x2000cff8
 800f048:	200074ec 	.word	0x200074ec
 800f04c:	2000cfe8 	.word	0x2000cfe8

0800f050 <vPortFree>:
	if( pv != NULL )
 800f050:	b1d0      	cbz	r0, 800f088 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f052:	4a19      	ldr	r2, [pc, #100]	; (800f0b8 <vPortFree+0x68>)
 800f054:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f058:	6812      	ldr	r2, [r2, #0]
 800f05a:	4213      	tst	r3, r2
 800f05c:	d108      	bne.n	800f070 <vPortFree+0x20>
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	e7fe      	b.n	800f06e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f070:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f074:	b149      	cbz	r1, 800f08a <vPortFree+0x3a>
 800f076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07a:	f383 8811 	msr	BASEPRI, r3
 800f07e:	f3bf 8f6f 	isb	sy
 800f082:	f3bf 8f4f 	dsb	sy
 800f086:	e7fe      	b.n	800f086 <vPortFree+0x36>
 800f088:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f08a:	ea23 0302 	bic.w	r3, r3, r2
{
 800f08e:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f090:	f840 3c04 	str.w	r3, [r0, #-4]
 800f094:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800f096:	f7ff f9c1 	bl	800e41c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f09a:	4a08      	ldr	r2, [pc, #32]	; (800f0bc <vPortFree+0x6c>)
 800f09c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f0a0:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0a2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0a6:	440b      	add	r3, r1
 800f0a8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0aa:	f7ff ff17 	bl	800eedc <prvInsertBlockIntoFreeList>
}
 800f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800f0b2:	f7ff ba65 	b.w	800e580 <xTaskResumeAll>
 800f0b6:	bf00      	nop
 800f0b8:	2000cff0 	.word	0x2000cff0
 800f0bc:	2000cff4 	.word	0x2000cff4

0800f0c0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	b087      	sub	sp, #28
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	4616      	mov	r6, r2
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	2205      	movs	r2, #5
 800f0ce:	4914      	ldr	r1, [pc, #80]	; (800f120 <SYSVIEW_AddTask+0x60>)
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f0d0:	461d      	mov	r5, r3
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f0d2:	f000 ff2d 	bl	800ff30 <memcmp>
 800f0d6:	b1e0      	cbz	r0, 800f112 <SYSVIEW_AddTask+0x52>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f0d8:	4912      	ldr	r1, [pc, #72]	; (800f124 <SYSVIEW_AddTask+0x64>)
 800f0da:	680b      	ldr	r3, [r1, #0]
 800f0dc:	2b07      	cmp	r3, #7
 800f0de:	d81a      	bhi.n	800f116 <SYSVIEW_AddTask+0x56>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
    return;
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f0e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f0e4:	f8df c044 	ldr.w	ip, [pc, #68]	; 800f12c <SYSVIEW_AddTask+0x6c>
  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
  TaskInfo.TaskID     = TaskID;
  TaskInfo.sName      = sName;
  TaskInfo.Prio       = Prio;
  TaskInfo.StackBase  = StackBase;
  TaskInfo.StackSize  = StackSize;
 800f0e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f0ea:	9005      	str	r0, [sp, #20]
  _aTasks[_NumTasks].xHandle = xHandle;
 800f0ec:	0092      	lsls	r2, r2, #2
  _NumTasks++;
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	600b      	str	r3, [r1, #0]
  _aTasks[_NumTasks].xHandle = xHandle;
 800f0f2:	eb0c 0302 	add.w	r3, ip, r2
 800f0f6:	f84c 7002 	str.w	r7, [ip, r2]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f0fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  _aTasks[_NumTasks].pxStack = pxStack;
 800f0fc:	60dd      	str	r5, [r3, #12]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f0fe:	a801      	add	r0, sp, #4
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f100:	e9c3 4601 	strd	r4, r6, [r3, #4]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f104:	611a      	str	r2, [r3, #16]
  TaskInfo.TaskID     = TaskID;
 800f106:	9701      	str	r7, [sp, #4]
  TaskInfo.Prio       = Prio;
 800f108:	e9cd 4602 	strd	r4, r6, [sp, #8]
  TaskInfo.StackBase  = StackBase;
 800f10c:	9504      	str	r5, [sp, #16]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f10e:	f000 fb9d 	bl	800f84c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f112:	b007      	add	sp, #28
 800f114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f116:	4804      	ldr	r0, [pc, #16]	; (800f128 <SYSVIEW_AddTask+0x68>)
 800f118:	f000 fd32 	bl	800fb80 <SEGGER_SYSVIEW_Warn>
}
 800f11c:	b007      	add	sp, #28
 800f11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f120:	08012ca0 	.word	0x08012ca0
 800f124:	2000d004 	.word	0x2000d004
 800f128:	08012ca8 	.word	0x08012ca8
 800f12c:	2000d008 	.word	0x2000d008

0800f130 <_DoInit>:
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800f130:	4a15      	ldr	r2, [pc, #84]	; (800f188 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800f132:	4b16      	ldr	r3, [pc, #88]	; (800f18c <_DoInit+0x5c>)
  STRCPY((char*)&p->acID[7], "RTT");
 800f134:	6810      	ldr	r0, [r2, #0]
  p->aUp[0].sName         = "Terminal";
 800f136:	4916      	ldr	r1, [pc, #88]	; (800f190 <_DoInit+0x60>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800f138:	2203      	movs	r2, #3
static void _DoInit(void) {
 800f13a:	b470      	push	{r4, r5, r6}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800f13c:	611a      	str	r2, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800f13e:	4e15      	ldr	r6, [pc, #84]	; (800f194 <_DoInit+0x64>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800f140:	615a      	str	r2, [r3, #20]
  p->aDown[0].pBuffer       = _acDownBuffer;
 800f142:	4c15      	ldr	r4, [pc, #84]	; (800f198 <_DoInit+0x68>)
  STRCPY((char*)&p->acID[7], "RTT");
 800f144:	f8c3 0007 	str.w	r0, [r3, #7]
  p->aUp[0].RdOff         = 0u;
 800f148:	2200      	movs	r2, #0
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800f14a:	f44f 6580 	mov.w	r5, #1024	; 0x400
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800f14e:	2010      	movs	r0, #16
  p->aUp[0].sName         = "Terminal";
 800f150:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800f152:	61de      	str	r6, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800f154:	621d      	str	r5, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800f156:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800f158:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f15a:	62da      	str	r2, [r3, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
 800f15c:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800f15e:	665c      	str	r4, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800f160:	6698      	str	r0, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800f162:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800f164:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f166:	675a      	str	r2, [r3, #116]	; 0x74
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800f168:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800f16c:	4a0b      	ldr	r2, [pc, #44]	; (800f19c <_DoInit+0x6c>)
 800f16e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f172:	6018      	str	r0, [r3, #0]
 800f174:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800f176:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800f17a:	2220      	movs	r2, #32
 800f17c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800f17e:	f3bf 8f5f 	dmb	sy
}
 800f182:	bc70      	pop	{r4, r5, r6}
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	08012d04 	.word	0x08012d04
 800f18c:	2000f84c 	.word	0x2000f84c
 800f190:	08012cf8 	.word	0x08012cf8
 800f194:	2000d0b8 	.word	0x2000d0b8
 800f198:	2000d0a8 	.word	0x2000d0a8
 800f19c:	08012d08 	.word	0x08012d08

0800f1a0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800f1a4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800f250 <SEGGER_RTT_ReadNoLock+0xb0>
 800f1a8:	f899 3000 	ldrb.w	r3, [r9]
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800f1ac:	b083      	sub	sp, #12
 800f1ae:	4680      	mov	r8, r0
 800f1b0:	468b      	mov	fp, r1
 800f1b2:	4692      	mov	sl, r2
  INIT();
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d047      	beq.n	800f248 <SEGGER_RTT_ReadNoLock+0xa8>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 800f1b8:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800f1bc:	eb07 0608 	add.w	r6, r7, r8
 800f1c0:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 800f1c4:	6f35      	ldr	r5, [r6, #112]	; 0x70
  WrOff = pRing->WrOff;
 800f1c6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800f1c8:	429d      	cmp	r5, r3
 800f1ca:	d81f      	bhi.n	800f20c <SEGGER_RTT_ReadNoLock+0x6c>
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800f1cc:	1b5c      	subs	r4, r3, r5
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f1ce:	4554      	cmp	r4, sl
 800f1d0:	bf28      	it	cs
 800f1d2:	4654      	movcs	r4, sl
  if (NumBytesRem > 0u) {
 800f1d4:	b91c      	cbnz	r4, 800f1de <SEGGER_RTT_ReadNoLock+0x3e>
  if (NumBytesRead) {
    pRing->RdOff = RdOff;
  }
  //
  return NumBytesRead;
}
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	b003      	add	sp, #12
 800f1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  NumBytesRead = 0u;
 800f1de:	2600      	movs	r6, #0
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f1e0:	eb07 0308 	add.w	r3, r7, r8
 800f1e4:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f1e8:	4622      	mov	r2, r4
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f1ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f1ec:	4658      	mov	r0, fp
 800f1ee:	4429      	add	r1, r5
 800f1f0:	f000 fead 	bl	800ff4e <memcpy>
    RdOff        += NumBytesRem;
 800f1f4:	4425      	add	r5, r4
    NumBytesRead += NumBytesRem;
 800f1f6:	4434      	add	r4, r6
  if (NumBytesRead) {
 800f1f8:	2c00      	cmp	r4, #0
 800f1fa:	d0ec      	beq.n	800f1d6 <SEGGER_RTT_ReadNoLock+0x36>
    pRing->RdOff = RdOff;
 800f1fc:	4447      	add	r7, r8
 800f1fe:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
}
 800f202:	4620      	mov	r0, r4
    pRing->RdOff = RdOff;
 800f204:	673d      	str	r5, [r7, #112]	; 0x70
}
 800f206:	b003      	add	sp, #12
 800f208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f20c:	e9d6 1419 	ldrd	r1, r4, [r6, #100]	; 0x64
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800f210:	1b64      	subs	r4, r4, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f212:	4554      	cmp	r4, sl
 800f214:	bf28      	it	cs
 800f216:	4654      	movcs	r4, sl
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f218:	4622      	mov	r2, r4
 800f21a:	4429      	add	r1, r5
 800f21c:	4658      	mov	r0, fp
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	f000 fe95 	bl	800ff4e <memcpy>
    if (RdOff == pRing->SizeOfBuffer) {
 800f224:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 800f226:	9b01      	ldr	r3, [sp, #4]
    RdOff        += NumBytesRem;
 800f228:	4425      	add	r5, r4
    if (RdOff == pRing->SizeOfBuffer) {
 800f22a:	42aa      	cmp	r2, r5
    BufferSize   -= NumBytesRem;
 800f22c:	ebaa 0a04 	sub.w	sl, sl, r4
 800f230:	bf14      	ite	ne
 800f232:	1b5b      	subne	r3, r3, r5
      RdOff = 0u;
 800f234:	2500      	moveq	r5, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f236:	4553      	cmp	r3, sl
 800f238:	bf28      	it	cs
 800f23a:	4653      	movcs	r3, sl
  if (NumBytesRem > 0u) {
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d0db      	beq.n	800f1f8 <SEGGER_RTT_ReadNoLock+0x58>
    pBuffer      += NumBytesRem;
 800f240:	44a3      	add	fp, r4
 800f242:	4626      	mov	r6, r4
 800f244:	461c      	mov	r4, r3
 800f246:	e7cb      	b.n	800f1e0 <SEGGER_RTT_ReadNoLock+0x40>
  INIT();
 800f248:	f7ff ff72 	bl	800f130 <_DoInit>
 800f24c:	e7b4      	b.n	800f1b8 <SEGGER_RTT_ReadNoLock+0x18>
 800f24e:	bf00      	nop
 800f250:	2000f84c 	.word	0x2000f84c

0800f254 <_EncodeStr>:
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  while(*(pText + Len) != 0) {
 800f254:	780b      	ldrb	r3, [r1, #0]
 800f256:	b31b      	cbz	r3, 800f2a0 <_EncodeStr+0x4c>
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800f258:	b430      	push	{r4, r5}
  Len = 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	460c      	mov	r4, r1
  while(*(pText + Len) != 0) {
 800f25e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    Len++;
 800f262:	3301      	adds	r3, #1
  while(*(pText + Len) != 0) {
 800f264:	2d00      	cmp	r5, #0
 800f266:	d1fa      	bne.n	800f25e <_EncodeStr+0xa>
 800f268:	4293      	cmp	r3, r2
 800f26a:	bf28      	it	cs
 800f26c:	4613      	movcs	r3, r2
    Len = Limit;
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800f26e:	2bfe      	cmp	r3, #254	; 0xfe
 800f270:	b2dc      	uxtb	r4, r3
 800f272:	d910      	bls.n	800f296 <_EncodeStr+0x42>
    *pPayload++ = Len; 
  } else {
    *pPayload++ = 255;
 800f274:	25ff      	movs	r5, #255	; 0xff
    *pPayload++ = (Len & 255);
    *pPayload++ = ((Len >> 8) & 255);
 800f276:	0a1a      	lsrs	r2, r3, #8
    *pPayload++ = (Len & 255);
 800f278:	7044      	strb	r4, [r0, #1]
    *pPayload++ = 255;
 800f27a:	7005      	strb	r5, [r0, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800f27c:	7082      	strb	r2, [r0, #2]
 800f27e:	3003      	adds	r0, #3
 800f280:	1e44      	subs	r4, r0, #1
 800f282:	18ca      	adds	r2, r1, r3
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
    *pPayload++ = *pText++;
 800f284:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f288:	f804 5f01 	strb.w	r5, [r4, #1]!
  while (n < Len) {
 800f28c:	428a      	cmp	r2, r1
 800f28e:	d1f9      	bne.n	800f284 <_EncodeStr+0x30>
 800f290:	4418      	add	r0, r3
    n++;
  }
  return pPayload;
}
 800f292:	bc30      	pop	{r4, r5}
 800f294:	4770      	bx	lr
    *pPayload++ = Len; 
 800f296:	7004      	strb	r4, [r0, #0]
 800f298:	3001      	adds	r0, #1
  while (n < Len) {
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1f0      	bne.n	800f280 <_EncodeStr+0x2c>
 800f29e:	e7f8      	b.n	800f292 <_EncodeStr+0x3e>
    *pPayload++ = Len; 
 800f2a0:	7003      	strb	r3, [r0, #0]
 800f2a2:	3001      	adds	r0, #1
}
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop

0800f2a8 <SEGGER_SYSVIEW_ShrinkId>:
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
  return SHRINK_ID(Id);
 800f2a8:	4b01      	ldr	r3, [pc, #4]	; (800f2b0 <SEGGER_SYSVIEW_ShrinkId+0x8>)
 800f2aa:	691b      	ldr	r3, [r3, #16]
}
 800f2ac:	1ac0      	subs	r0, r0, r3
 800f2ae:	4770      	bx	lr
 800f2b0:	2000d4bc 	.word	0x2000d4bc

0800f2b4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f2b4:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f2b6:	f3ef 8411 	mrs	r4, BASEPRI
 800f2ba:	f04f 0120 	mov.w	r1, #32
 800f2be:	f381 8811 	msr	BASEPRI, r1
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 800f2c2:	4b09      	ldr	r3, [pc, #36]	; (800f2e8 <SEGGER_SYSVIEW_SendNumModules+0x34>)
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b7f      	cmp	r3, #127	; 0x7f
 800f2c8:	d90c      	bls.n	800f2e4 <SEGGER_SYSVIEW_SendNumModules+0x30>
 800f2ca:	4908      	ldr	r1, [pc, #32]	; (800f2ec <SEGGER_SYSVIEW_SendNumModules+0x38>)
 800f2cc:	710b      	strb	r3, [r1, #4]
 800f2ce:	3105      	adds	r1, #5
 800f2d0:	2301      	movs	r3, #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f2d2:	4807      	ldr	r0, [pc, #28]	; (800f2f0 <SEGGER_SYSVIEW_SendNumModules+0x3c>)
  ENCODE_U32(pPayload, _NumModules);
 800f2d4:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f2d8:	221b      	movs	r2, #27
 800f2da:	f000 f8c7 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f2de:	f384 8811 	msr	BASEPRI, r4
}
 800f2e2:	bd10      	pop	{r4, pc}
  ENCODE_U32(pPayload, _NumModules);
 800f2e4:	4902      	ldr	r1, [pc, #8]	; (800f2f0 <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 800f2e6:	e7f4      	b.n	800f2d2 <SEGGER_SYSVIEW_SendNumModules+0x1e>
 800f2e8:	2000d4b8 	.word	0x2000d4b8
 800f2ec:	2000d4e4 	.word	0x2000d4e4
 800f2f0:	2000d4e8 	.word	0x2000d4e8

0800f2f4 <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 800f2f4:	b538      	push	{r3, r4, r5, lr}
    _SYSVIEW_Globals.EnableState = 1;
 800f2f6:	4c2b      	ldr	r4, [pc, #172]	; (800f3a4 <SEGGER_SYSVIEW_Start+0xb0>)
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	7023      	strb	r3, [r4, #0]
    SEGGER_SYSVIEW_LOCK();
 800f2fc:	f3ef 8511 	mrs	r5, BASEPRI
 800f300:	f04f 0120 	mov.w	r1, #32
 800f304:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800f308:	220a      	movs	r2, #10
 800f30a:	7860      	ldrb	r0, [r4, #1]
 800f30c:	4926      	ldr	r1, [pc, #152]	; (800f3a8 <SEGGER_SYSVIEW_Start+0xb4>)
 800f30e:	f7f0 ff5f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800f312:	f385 8811 	msr	BASEPRI, r5
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800f316:	200a      	movs	r0, #10
 800f318:	f000 f952 	bl	800f5c0 <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800f31c:	f3ef 8511 	mrs	r5, BASEPRI
 800f320:	f04f 0120 	mov.w	r1, #32
 800f324:	f381 8811 	msr	BASEPRI, r1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f328:	6862      	ldr	r2, [r4, #4]
 800f32a:	4b20      	ldr	r3, [pc, #128]	; (800f3ac <SEGGER_SYSVIEW_Start+0xb8>)
 800f32c:	2a7f      	cmp	r2, #127	; 0x7f
 800f32e:	d906      	bls.n	800f33e <SEGGER_SYSVIEW_Start+0x4a>
 800f330:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f334:	09d2      	lsrs	r2, r2, #7
 800f336:	2a7f      	cmp	r2, #127	; 0x7f
 800f338:	f803 1b01 	strb.w	r1, [r3], #1
 800f33c:	d8f8      	bhi.n	800f330 <SEGGER_SYSVIEW_Start+0x3c>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f33e:	68a1      	ldr	r1, [r4, #8]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f340:	701a      	strb	r2, [r3, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f342:	297f      	cmp	r1, #127	; 0x7f
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f344:	f103 0301 	add.w	r3, r3, #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f348:	d906      	bls.n	800f358 <SEGGER_SYSVIEW_Start+0x64>
 800f34a:	f061 027f 	orn	r2, r1, #127	; 0x7f
 800f34e:	09c9      	lsrs	r1, r1, #7
 800f350:	297f      	cmp	r1, #127	; 0x7f
 800f352:	f803 2b01 	strb.w	r2, [r3], #1
 800f356:	d8f8      	bhi.n	800f34a <SEGGER_SYSVIEW_Start+0x56>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f358:	6922      	ldr	r2, [r4, #16]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f35a:	7019      	strb	r1, [r3, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f35c:	2a7f      	cmp	r2, #127	; 0x7f
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f35e:	f103 0301 	add.w	r3, r3, #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f362:	d906      	bls.n	800f372 <SEGGER_SYSVIEW_Start+0x7e>
 800f364:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f368:	09d2      	lsrs	r2, r2, #7
 800f36a:	2a7f      	cmp	r2, #127	; 0x7f
 800f36c:	f803 1b01 	strb.w	r1, [r3], #1
 800f370:	d8f8      	bhi.n	800f364 <SEGGER_SYSVIEW_Start+0x70>
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800f372:	2000      	movs	r0, #0
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f374:	701a      	strb	r2, [r3, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800f376:	7058      	strb	r0, [r3, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800f378:	1c99      	adds	r1, r3, #2
 800f37a:	2218      	movs	r2, #24
 800f37c:	480b      	ldr	r0, [pc, #44]	; (800f3ac <SEGGER_SYSVIEW_Start+0xb8>)
 800f37e:	f000 f875 	bl	800f46c <_SendPacket>
      RECORD_END();
 800f382:	f385 8811 	msr	BASEPRI, r5
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800f386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f388:	b103      	cbz	r3, 800f38c <SEGGER_SYSVIEW_Start+0x98>
      _SYSVIEW_Globals.pfSendSysDesc();
 800f38a:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 800f38c:	f000 f972 	bl	800f674 <SEGGER_SYSVIEW_RecordSystime>
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800f390:	6a23      	ldr	r3, [r4, #32]
 800f392:	b113      	cbz	r3, 800f39a <SEGGER_SYSVIEW_Start+0xa6>
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	b103      	cbz	r3, 800f39a <SEGGER_SYSVIEW_Start+0xa6>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800f398:	4798      	blx	r3
}
 800f39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SEGGER_SYSVIEW_SendNumModules();
 800f39e:	f7ff bf89 	b.w	800f2b4 <SEGGER_SYSVIEW_SendNumModules>
 800f3a2:	bf00      	nop
 800f3a4:	2000d4bc 	.word	0x2000d4bc
 800f3a8:	08012d10 	.word	0x08012d10
 800f3ac:	2000d4e8 	.word	0x2000d4e8

0800f3b0 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 800f3b0:	b510      	push	{r4, lr}
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f3b2:	4c2c      	ldr	r4, [pc, #176]	; (800f464 <_HandleIncomingPacket+0xb4>)
static void _HandleIncomingPacket(void) {
 800f3b4:	b082      	sub	sp, #8
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f3b6:	7e20      	ldrb	r0, [r4, #24]
 800f3b8:	f10d 0107 	add.w	r1, sp, #7
 800f3bc:	2201      	movs	r2, #1
 800f3be:	f7ff feef 	bl	800f1a0 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	dd13      	ble.n	800f3ee <_HandleIncomingPacket+0x3e>
    switch (Cmd) {
 800f3c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f3ca:	2b05      	cmp	r3, #5
 800f3cc:	d036      	beq.n	800f43c <_HandleIncomingPacket+0x8c>
 800f3ce:	d910      	bls.n	800f3f2 <_HandleIncomingPacket+0x42>
 800f3d0:	2b07      	cmp	r3, #7
 800f3d2:	d025      	beq.n	800f420 <_HandleIncomingPacket+0x70>
 800f3d4:	d321      	bcc.n	800f41a <_HandleIncomingPacket+0x6a>
 800f3d6:	2b7f      	cmp	r3, #127	; 0x7f
 800f3d8:	d009      	beq.n	800f3ee <_HandleIncomingPacket+0x3e>
 800f3da:	2b80      	cmp	r3, #128	; 0x80
 800f3dc:	d131      	bne.n	800f442 <_HandleIncomingPacket+0x92>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f3de:	f10d 0107 	add.w	r1, sp, #7
 800f3e2:	7e20      	ldrb	r0, [r4, #24]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f7ff fedb 	bl	800f1a0 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	dc35      	bgt.n	800f45a <_HandleIncomingPacket+0xaa>
}
 800f3ee:	b002      	add	sp, #8
 800f3f0:	bd10      	pop	{r4, pc}
    switch (Cmd) {
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d01f      	beq.n	800f436 <_HandleIncomingPacket+0x86>
 800f3f6:	d90b      	bls.n	800f410 <_HandleIncomingPacket+0x60>
 800f3f8:	2b03      	cmp	r3, #3
 800f3fa:	d02b      	beq.n	800f454 <_HandleIncomingPacket+0xa4>
 800f3fc:	2b04      	cmp	r3, #4
 800f3fe:	d120      	bne.n	800f442 <_HandleIncomingPacket+0x92>
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800f400:	6a23      	ldr	r3, [r4, #32]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d0f3      	beq.n	800f3ee <_HandleIncomingPacket+0x3e>
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d0f0      	beq.n	800f3ee <_HandleIncomingPacket+0x3e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800f40c:	4798      	blx	r3
 800f40e:	e7ee      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
    switch (Cmd) {
 800f410:	2b01      	cmp	r3, #1
 800f412:	d116      	bne.n	800f442 <_HandleIncomingPacket+0x92>
      SEGGER_SYSVIEW_Start();
 800f414:	f7ff ff6e 	bl	800f2f4 <SEGGER_SYSVIEW_Start>
      break;
 800f418:	e7e9      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
      SEGGER_SYSVIEW_SendNumModules();
 800f41a:	f7ff ff4b 	bl	800f2b4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800f41e:	e7e6      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
  if (_pFirstModule != 0) {
 800f420:	4b11      	ldr	r3, [pc, #68]	; (800f468 <_HandleIncomingPacket+0xb8>)
 800f422:	681c      	ldr	r4, [r3, #0]
 800f424:	2c00      	cmp	r4, #0
 800f426:	d0e2      	beq.n	800f3ee <_HandleIncomingPacket+0x3e>
      if (pModule->pfSendModuleDesc) {
 800f428:	68e3      	ldr	r3, [r4, #12]
 800f42a:	b103      	cbz	r3, 800f42e <_HandleIncomingPacket+0x7e>
        pModule->pfSendModuleDesc();
 800f42c:	4798      	blx	r3
      pModule = pModule->pNext;
 800f42e:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 800f430:	2c00      	cmp	r4, #0
 800f432:	d1f9      	bne.n	800f428 <_HandleIncomingPacket+0x78>
 800f434:	e7db      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
      SEGGER_SYSVIEW_Stop();
 800f436:	f000 f9af 	bl	800f798 <SEGGER_SYSVIEW_Stop>
      break;
 800f43a:	e7d8      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
      SEGGER_SYSVIEW_GetSysDesc();
 800f43c:	f000 f9c4 	bl	800f7c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800f440:	e7d5      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800f442:	061b      	lsls	r3, r3, #24
 800f444:	d5d3      	bpl.n	800f3ee <_HandleIncomingPacket+0x3e>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f446:	f10d 0107 	add.w	r1, sp, #7
 800f44a:	7e20      	ldrb	r0, [r4, #24]
 800f44c:	2201      	movs	r2, #1
 800f44e:	f7ff fea7 	bl	800f1a0 <SEGGER_RTT_ReadNoLock>
}
 800f452:	e7cc      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
      SEGGER_SYSVIEW_RecordSystime();
 800f454:	f000 f90e 	bl	800f674 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800f458:	e7c9      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800f45a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f45e:	f000 fb49 	bl	800faf4 <SEGGER_SYSVIEW_SendModule>
 800f462:	e7c4      	b.n	800f3ee <_HandleIncomingPacket+0x3e>
 800f464:	2000d4bc 	.word	0x2000d4bc
 800f468:	2000d5c8 	.word	0x2000d5c8

0800f46c <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800f470:	4d50      	ldr	r5, [pc, #320]	; (800f5b4 <_SendPacket+0x148>)
 800f472:	782b      	ldrb	r3, [r5, #0]
 800f474:	2b01      	cmp	r3, #1
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800f476:	b084      	sub	sp, #16
 800f478:	4606      	mov	r6, r0
 800f47a:	460c      	mov	r4, r1
 800f47c:	4617      	mov	r7, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800f47e:	d012      	beq.n	800f4a6 <_SendPacket+0x3a>
  if (_SYSVIEW_Globals.EnableState == 0) {
 800f480:	b97b      	cbnz	r3, 800f4a2 <_SendPacket+0x36>
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800f482:	7e2a      	ldrb	r2, [r5, #24]
 800f484:	4b4c      	ldr	r3, [pc, #304]	; (800f5b8 <_SendPacket+0x14c>)
 800f486:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f48e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f492:	429a      	cmp	r2, r3
 800f494:	d002      	beq.n	800f49c <_SendPacket+0x30>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800f496:	78ac      	ldrb	r4, [r5, #2]
 800f498:	2c00      	cmp	r4, #0
 800f49a:	d03b      	beq.n	800f514 <_SendPacket+0xa8>
}
 800f49c:	b004      	add	sp, #16
 800f49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_SYSVIEW_Globals.EnableState == 2) {
 800f4a2:	2b02      	cmp	r3, #2
 800f4a4:	d047      	beq.n	800f536 <_SendPacket+0xca>
  if (EventId < 32) {
 800f4a6:	2f1f      	cmp	r7, #31
 800f4a8:	d912      	bls.n	800f4d0 <_SendPacket+0x64>
 800f4aa:	b2fb      	uxtb	r3, r7
    NumBytes = pEndPacket - pStartPacket;
 800f4ac:	1ba2      	subs	r2, r4, r6
    if (NumBytes > 127) {
 800f4ae:	2a7f      	cmp	r2, #127	; 0x7f
 800f4b0:	b2d1      	uxtb	r1, r2
 800f4b2:	d837      	bhi.n	800f524 <_SendPacket+0xb8>
      *--pStartPacket = NumBytes;
 800f4b4:	f806 1c01 	strb.w	r1, [r6, #-1]
 800f4b8:	3e01      	subs	r6, #1
    if (EventId > 127) {
 800f4ba:	2f7f      	cmp	r7, #127	; 0x7f
 800f4bc:	d90f      	bls.n	800f4de <_SendPacket+0x72>
      *--pStartPacket = (EventId >> 7);
 800f4be:	09ff      	lsrs	r7, r7, #7
      *--pStartPacket = EventId | 0x80;
 800f4c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *--pStartPacket = (EventId >> 7);
 800f4c4:	f806 7c01 	strb.w	r7, [r6, #-1]
      *--pStartPacket = EventId | 0x80;
 800f4c8:	f806 3c02 	strb.w	r3, [r6, #-2]
 800f4cc:	1eb2      	subs	r2, r6, #2
 800f4ce:	e009      	b.n	800f4e4 <_SendPacket+0x78>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800f4d0:	69eb      	ldr	r3, [r5, #28]
 800f4d2:	40fb      	lsrs	r3, r7
 800f4d4:	07db      	lsls	r3, r3, #31
 800f4d6:	d4d4      	bmi.n	800f482 <_SendPacket+0x16>
  if (EventId < 24) {
 800f4d8:	2f17      	cmp	r7, #23
 800f4da:	b2fb      	uxtb	r3, r7
 800f4dc:	d8e6      	bhi.n	800f4ac <_SendPacket+0x40>
      *--pStartPacket = EventId;
 800f4de:	f806 3c01 	strb.w	r3, [r6, #-1]
 800f4e2:	1e72      	subs	r2, r6, #1
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f4e4:	4935      	ldr	r1, [pc, #212]	; (800f5bc <_SendPacket+0x150>)
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800f4e6:	68eb      	ldr	r3, [r5, #12]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f4e8:	680e      	ldr	r6, [r1, #0]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800f4ea:	1af3      	subs	r3, r6, r3
  ENCODE_U32(pEndPacket, Delta);
 800f4ec:	2b7f      	cmp	r3, #127	; 0x7f
 800f4ee:	d906      	bls.n	800f4fe <_SendPacket+0x92>
 800f4f0:	f063 017f 	orn	r1, r3, #127	; 0x7f
 800f4f4:	09db      	lsrs	r3, r3, #7
 800f4f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f4f8:	f804 1b01 	strb.w	r1, [r4], #1
 800f4fc:	d8f8      	bhi.n	800f4f0 <_SendPacket+0x84>
 800f4fe:	f804 3b01 	strb.w	r3, [r4], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800f502:	4611      	mov	r1, r2
 800f504:	7868      	ldrb	r0, [r5, #1]
 800f506:	1aa2      	subs	r2, r4, r2
 800f508:	f7f0 fe62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d045      	beq.n	800f59c <_SendPacket+0x130>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800f510:	60ee      	str	r6, [r5, #12]
 800f512:	e7b6      	b.n	800f482 <_SendPacket+0x16>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800f514:	2301      	movs	r3, #1
 800f516:	70ab      	strb	r3, [r5, #2]
      _HandleIncomingPacket();
 800f518:	f7ff ff4a 	bl	800f3b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800f51c:	70ac      	strb	r4, [r5, #2]
}
 800f51e:	b004      	add	sp, #16
 800f520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *--pStartPacket = (NumBytes >> 7);
 800f524:	09d2      	lsrs	r2, r2, #7
      *--pStartPacket = NumBytes | 0x80;
 800f526:	f061 017f 	orn	r1, r1, #127	; 0x7f
      *--pStartPacket = (NumBytes >> 7);
 800f52a:	f806 2c01 	strb.w	r2, [r6, #-1]
      *--pStartPacket = NumBytes | 0x80;
 800f52e:	f806 1c02 	strb.w	r1, [r6, #-2]
 800f532:	3e02      	subs	r6, #2
 800f534:	e7c1      	b.n	800f4ba <_SendPacket+0x4e>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f536:	696a      	ldr	r2, [r5, #20]
  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800f538:	2301      	movs	r3, #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f53a:	2a7f      	cmp	r2, #127	; 0x7f
  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800f53c:	f88d 3004 	strb.w	r3, [sp, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f540:	f10d 0305 	add.w	r3, sp, #5
 800f544:	d906      	bls.n	800f554 <_SendPacket+0xe8>
 800f546:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f54a:	09d2      	lsrs	r2, r2, #7
 800f54c:	2a7f      	cmp	r2, #127	; 0x7f
 800f54e:	f803 1b01 	strb.w	r1, [r3], #1
 800f552:	d8f8      	bhi.n	800f546 <_SendPacket+0xda>
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f554:	4919      	ldr	r1, [pc, #100]	; (800f5bc <_SendPacket+0x150>)
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f556:	701a      	strb	r2, [r3, #0]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f558:	f8d1 8000 	ldr.w	r8, [r1]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800f55c:	68e9      	ldr	r1, [r5, #12]
 800f55e:	eba8 0101 	sub.w	r1, r8, r1
  ENCODE_U32(pPayload, Delta);
 800f562:	297f      	cmp	r1, #127	; 0x7f
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f564:	f103 0201 	add.w	r2, r3, #1
  ENCODE_U32(pPayload, Delta);
 800f568:	d906      	bls.n	800f578 <_SendPacket+0x10c>
 800f56a:	f061 037f 	orn	r3, r1, #127	; 0x7f
 800f56e:	09c9      	lsrs	r1, r1, #7
 800f570:	297f      	cmp	r1, #127	; 0x7f
 800f572:	f802 3b01 	strb.w	r3, [r2], #1
 800f576:	d8f8      	bhi.n	800f56a <_SendPacket+0xfe>
 800f578:	4613      	mov	r3, r2
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800f57a:	aa01      	add	r2, sp, #4
  ENCODE_U32(pPayload, Delta);
 800f57c:	f803 1b01 	strb.w	r1, [r3], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800f580:	7868      	ldrb	r0, [r5, #1]
 800f582:	4611      	mov	r1, r2
 800f584:	1a9a      	subs	r2, r3, r2
 800f586:	f7f0 fe23 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 800f58a:	b958      	cbnz	r0, 800f5a4 <_SendPacket+0x138>
    _SYSVIEW_Globals.DropCount++;
 800f58c:	696a      	ldr	r2, [r5, #20]
 800f58e:	782b      	ldrb	r3, [r5, #0]
 800f590:	3201      	adds	r2, #1
 800f592:	616a      	str	r2, [r5, #20]
    if (_SYSVIEW_Globals.EnableState != 1) {
 800f594:	2b01      	cmp	r3, #1
 800f596:	f47f af74 	bne.w	800f482 <_SendPacket+0x16>
 800f59a:	e784      	b.n	800f4a6 <_SendPacket+0x3a>
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800f59c:	782b      	ldrb	r3, [r5, #0]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	702b      	strb	r3, [r5, #0]
 800f5a2:	e76e      	b.n	800f482 <_SendPacket+0x16>
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800f5a4:	782b      	ldrb	r3, [r5, #0]
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800f5a6:	f8c5 800c 	str.w	r8, [r5, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	702b      	strb	r3, [r5, #0]
 800f5b0:	e7f0      	b.n	800f594 <_SendPacket+0x128>
 800f5b2:	bf00      	nop
 800f5b4:	2000d4bc 	.word	0x2000d4bc
 800f5b8:	2000f84c 	.word	0x2000f84c
 800f5bc:	e0001004 	.word	0xe0001004

0800f5c0 <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	4602      	mov	r2, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f5c4:	f3ef 8411 	mrs	r4, BASEPRI
 800f5c8:	f04f 0120 	mov.w	r1, #32
 800f5cc:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800f5d0:	4903      	ldr	r1, [pc, #12]	; (800f5e0 <SEGGER_SYSVIEW_RecordVoid+0x20>)
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	f7ff ff4a 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f5d8:	f384 8811 	msr	BASEPRI, r4
}
 800f5dc:	bd10      	pop	{r4, pc}
 800f5de:	bf00      	nop
 800f5e0:	2000d4e8 	.word	0x2000d4e8

0800f5e4 <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f5ea:	f3ef 8411 	mrs	r4, BASEPRI
 800f5ee:	f04f 0120 	mov.w	r1, #32
 800f5f2:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, Value);
 800f5f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f5f8:	4908      	ldr	r1, [pc, #32]	; (800f61c <SEGGER_SYSVIEW_RecordU32+0x38>)
 800f5fa:	d906      	bls.n	800f60a <SEGGER_SYSVIEW_RecordU32+0x26>
 800f5fc:	f063 007f 	orn	r0, r3, #127	; 0x7f
 800f600:	09db      	lsrs	r3, r3, #7
 800f602:	2b7f      	cmp	r3, #127	; 0x7f
 800f604:	f801 0b01 	strb.w	r0, [r1], #1
 800f608:	d8f8      	bhi.n	800f5fc <SEGGER_SYSVIEW_RecordU32+0x18>
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f60a:	4804      	ldr	r0, [pc, #16]	; (800f61c <SEGGER_SYSVIEW_RecordU32+0x38>)
  ENCODE_U32(pPayload, Value);
 800f60c:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f610:	f7ff ff2c 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f614:	f384 8811 	msr	BASEPRI, r4
}
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	bf00      	nop
 800f61c:	2000d4e8 	.word	0x2000d4e8

0800f620 <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	460c      	mov	r4, r1
 800f624:	4613      	mov	r3, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800f626:	f3ef 8511 	mrs	r5, BASEPRI
 800f62a:	f04f 0120 	mov.w	r1, #32
 800f62e:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, Para0);
 800f632:	2c7f      	cmp	r4, #127	; 0x7f
 800f634:	490e      	ldr	r1, [pc, #56]	; (800f670 <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 800f636:	d906      	bls.n	800f646 <SEGGER_SYSVIEW_RecordU32x2+0x26>
 800f638:	f064 027f 	orn	r2, r4, #127	; 0x7f
 800f63c:	09e4      	lsrs	r4, r4, #7
 800f63e:	2c7f      	cmp	r4, #127	; 0x7f
 800f640:	f801 2b01 	strb.w	r2, [r1], #1
 800f644:	d8f8      	bhi.n	800f638 <SEGGER_SYSVIEW_RecordU32x2+0x18>
  ENCODE_U32(pPayload, Para1);
 800f646:	2b7f      	cmp	r3, #127	; 0x7f
  ENCODE_U32(pPayload, Para0);
 800f648:	700c      	strb	r4, [r1, #0]
 800f64a:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Para1);
 800f64e:	d906      	bls.n	800f65e <SEGGER_SYSVIEW_RecordU32x2+0x3e>
 800f650:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f654:	09db      	lsrs	r3, r3, #7
 800f656:	2b7f      	cmp	r3, #127	; 0x7f
 800f658:	f801 2b01 	strb.w	r2, [r1], #1
 800f65c:	d8f8      	bhi.n	800f650 <SEGGER_SYSVIEW_RecordU32x2+0x30>
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f65e:	4602      	mov	r2, r0
  ENCODE_U32(pPayload, Para1);
 800f660:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f664:	4802      	ldr	r0, [pc, #8]	; (800f670 <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 800f666:	f7ff ff01 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f66a:	f385 8811 	msr	BASEPRI, r5
}
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	2000d4e8 	.word	0x2000d4e8

0800f674 <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 800f674:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800f676:	4b0a      	ldr	r3, [pc, #40]	; (800f6a0 <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	b14b      	cbz	r3, 800f690 <SEGGER_SYSVIEW_RecordSystime+0x1c>
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	b13b      	cbz	r3, 800f690 <SEGGER_SYSVIEW_RecordSystime+0x1c>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800f680:	4798      	blx	r3
}
 800f682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f686:	460a      	mov	r2, r1
 800f688:	4601      	mov	r1, r0
 800f68a:	200d      	movs	r0, #13
 800f68c:	f7ff bfc8 	b.w	800f620 <SEGGER_SYSVIEW_RecordU32x2>
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800f690:	4b04      	ldr	r3, [pc, #16]	; (800f6a4 <SEGGER_SYSVIEW_RecordSystime+0x30>)
 800f692:	200c      	movs	r0, #12
 800f694:	6819      	ldr	r1, [r3, #0]
}
 800f696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800f69a:	f7ff bfa3 	b.w	800f5e4 <SEGGER_SYSVIEW_RecordU32>
 800f69e:	bf00      	nop
 800f6a0:	2000d4bc 	.word	0x2000d4bc
 800f6a4:	e0001004 	.word	0xe0001004

0800f6a8 <SEGGER_SYSVIEW_RecordU32x3>:
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800f6ac:	f3ef 8511 	mrs	r5, BASEPRI
 800f6b0:	f04f 0120 	mov.w	r1, #32
 800f6b4:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, Para0);
 800f6b8:	2c7f      	cmp	r4, #127	; 0x7f
 800f6ba:	4915      	ldr	r1, [pc, #84]	; (800f710 <SEGGER_SYSVIEW_RecordU32x3+0x68>)
 800f6bc:	d906      	bls.n	800f6cc <SEGGER_SYSVIEW_RecordU32x3+0x24>
 800f6be:	f064 067f 	orn	r6, r4, #127	; 0x7f
 800f6c2:	09e4      	lsrs	r4, r4, #7
 800f6c4:	2c7f      	cmp	r4, #127	; 0x7f
 800f6c6:	f801 6b01 	strb.w	r6, [r1], #1
 800f6ca:	d8f8      	bhi.n	800f6be <SEGGER_SYSVIEW_RecordU32x3+0x16>
  ENCODE_U32(pPayload, Para1);
 800f6cc:	2a7f      	cmp	r2, #127	; 0x7f
  ENCODE_U32(pPayload, Para0);
 800f6ce:	700c      	strb	r4, [r1, #0]
 800f6d0:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Para1);
 800f6d4:	d906      	bls.n	800f6e4 <SEGGER_SYSVIEW_RecordU32x3+0x3c>
 800f6d6:	f062 047f 	orn	r4, r2, #127	; 0x7f
 800f6da:	09d2      	lsrs	r2, r2, #7
 800f6dc:	2a7f      	cmp	r2, #127	; 0x7f
 800f6de:	f801 4b01 	strb.w	r4, [r1], #1
 800f6e2:	d8f8      	bhi.n	800f6d6 <SEGGER_SYSVIEW_RecordU32x3+0x2e>
  ENCODE_U32(pPayload, Para2);
 800f6e4:	2b7f      	cmp	r3, #127	; 0x7f
  ENCODE_U32(pPayload, Para1);
 800f6e6:	700a      	strb	r2, [r1, #0]
 800f6e8:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Para2);
 800f6ec:	d906      	bls.n	800f6fc <SEGGER_SYSVIEW_RecordU32x3+0x54>
 800f6ee:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f6f2:	09db      	lsrs	r3, r3, #7
 800f6f4:	2b7f      	cmp	r3, #127	; 0x7f
 800f6f6:	f801 2b01 	strb.w	r2, [r1], #1
 800f6fa:	d8f8      	bhi.n	800f6ee <SEGGER_SYSVIEW_RecordU32x3+0x46>
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f6fc:	4602      	mov	r2, r0
  ENCODE_U32(pPayload, Para2);
 800f6fe:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f702:	4803      	ldr	r0, [pc, #12]	; (800f710 <SEGGER_SYSVIEW_RecordU32x3+0x68>)
 800f704:	f7ff feb2 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f708:	f385 8811 	msr	BASEPRI, r5
}
 800f70c:	bd70      	pop	{r4, r5, r6, pc}
 800f70e:	bf00      	nop
 800f710:	2000d4e8 	.word	0x2000d4e8

0800f714 <SEGGER_SYSVIEW_RecordU32x4>:
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	9c06      	ldr	r4, [sp, #24]
 800f718:	460e      	mov	r6, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800f71a:	f3ef 8511 	mrs	r5, BASEPRI
 800f71e:	f04f 0120 	mov.w	r1, #32
 800f722:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, Para0);
 800f726:	2e7f      	cmp	r6, #127	; 0x7f
 800f728:	491a      	ldr	r1, [pc, #104]	; (800f794 <SEGGER_SYSVIEW_RecordU32x4+0x80>)
 800f72a:	d906      	bls.n	800f73a <SEGGER_SYSVIEW_RecordU32x4+0x26>
 800f72c:	f066 077f 	orn	r7, r6, #127	; 0x7f
 800f730:	09f6      	lsrs	r6, r6, #7
 800f732:	2e7f      	cmp	r6, #127	; 0x7f
 800f734:	f801 7b01 	strb.w	r7, [r1], #1
 800f738:	d8f8      	bhi.n	800f72c <SEGGER_SYSVIEW_RecordU32x4+0x18>
  ENCODE_U32(pPayload, Para1);
 800f73a:	2a7f      	cmp	r2, #127	; 0x7f
  ENCODE_U32(pPayload, Para0);
 800f73c:	700e      	strb	r6, [r1, #0]
 800f73e:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Para1);
 800f742:	d906      	bls.n	800f752 <SEGGER_SYSVIEW_RecordU32x4+0x3e>
 800f744:	f062 067f 	orn	r6, r2, #127	; 0x7f
 800f748:	09d2      	lsrs	r2, r2, #7
 800f74a:	2a7f      	cmp	r2, #127	; 0x7f
 800f74c:	f801 6b01 	strb.w	r6, [r1], #1
 800f750:	d8f8      	bhi.n	800f744 <SEGGER_SYSVIEW_RecordU32x4+0x30>
  ENCODE_U32(pPayload, Para2);
 800f752:	2b7f      	cmp	r3, #127	; 0x7f
  ENCODE_U32(pPayload, Para1);
 800f754:	700a      	strb	r2, [r1, #0]
 800f756:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Para2);
 800f75a:	d906      	bls.n	800f76a <SEGGER_SYSVIEW_RecordU32x4+0x56>
 800f75c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f760:	09db      	lsrs	r3, r3, #7
 800f762:	2b7f      	cmp	r3, #127	; 0x7f
 800f764:	f801 2b01 	strb.w	r2, [r1], #1
 800f768:	d8f8      	bhi.n	800f75c <SEGGER_SYSVIEW_RecordU32x4+0x48>
  ENCODE_U32(pPayload, Para3);
 800f76a:	2c7f      	cmp	r4, #127	; 0x7f
  ENCODE_U32(pPayload, Para2);
 800f76c:	700b      	strb	r3, [r1, #0]
 800f76e:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Para3);
 800f772:	d906      	bls.n	800f782 <SEGGER_SYSVIEW_RecordU32x4+0x6e>
 800f774:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800f778:	09e4      	lsrs	r4, r4, #7
 800f77a:	2c7f      	cmp	r4, #127	; 0x7f
 800f77c:	f801 3b01 	strb.w	r3, [r1], #1
 800f780:	d8f8      	bhi.n	800f774 <SEGGER_SYSVIEW_RecordU32x4+0x60>
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f782:	4602      	mov	r2, r0
  ENCODE_U32(pPayload, Para3);
 800f784:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 800f788:	4802      	ldr	r0, [pc, #8]	; (800f794 <SEGGER_SYSVIEW_RecordU32x4+0x80>)
 800f78a:	f7ff fe6f 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f78e:	f385 8811 	msr	BASEPRI, r5
}
 800f792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f794:	2000d4e8 	.word	0x2000d4e8

0800f798 <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 800f798:	b538      	push	{r3, r4, r5, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f79a:	f3ef 8511 	mrs	r5, BASEPRI
 800f79e:	f04f 0120 	mov.w	r1, #32
 800f7a2:	f381 8811 	msr	BASEPRI, r1
  if (_SYSVIEW_Globals.EnableState) {
 800f7a6:	4c06      	ldr	r4, [pc, #24]	; (800f7c0 <SEGGER_SYSVIEW_Stop+0x28>)
 800f7a8:	7823      	ldrb	r3, [r4, #0]
 800f7aa:	b133      	cbz	r3, 800f7ba <SEGGER_SYSVIEW_Stop+0x22>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800f7ac:	4905      	ldr	r1, [pc, #20]	; (800f7c4 <SEGGER_SYSVIEW_Stop+0x2c>)
 800f7ae:	220b      	movs	r2, #11
 800f7b0:	4608      	mov	r0, r1
 800f7b2:	f7ff fe5b 	bl	800f46c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	7023      	strb	r3, [r4, #0]
  RECORD_END();
 800f7ba:	f385 8811 	msr	BASEPRI, r5
}
 800f7be:	bd38      	pop	{r3, r4, r5, pc}
 800f7c0:	2000d4bc 	.word	0x2000d4bc
 800f7c4:	2000d4e8 	.word	0x2000d4e8

0800f7c8 <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800f7c8:	b570      	push	{r4, r5, r6, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800f7ca:	f3ef 8511 	mrs	r5, BASEPRI
 800f7ce:	f04f 0120 	mov.w	r1, #32
 800f7d2:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f7d6:	4c1b      	ldr	r4, [pc, #108]	; (800f844 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 800f7d8:	4b1b      	ldr	r3, [pc, #108]	; (800f848 <SEGGER_SYSVIEW_GetSysDesc+0x80>)
 800f7da:	6862      	ldr	r2, [r4, #4]
 800f7dc:	2a7f      	cmp	r2, #127	; 0x7f
 800f7de:	d906      	bls.n	800f7ee <SEGGER_SYSVIEW_GetSysDesc+0x26>
 800f7e0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f7e4:	09d2      	lsrs	r2, r2, #7
 800f7e6:	2a7f      	cmp	r2, #127	; 0x7f
 800f7e8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7ec:	d8f8      	bhi.n	800f7e0 <SEGGER_SYSVIEW_GetSysDesc+0x18>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f7ee:	68a1      	ldr	r1, [r4, #8]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f7f0:	701a      	strb	r2, [r3, #0]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f7f2:	297f      	cmp	r1, #127	; 0x7f
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f7f4:	f103 0301 	add.w	r3, r3, #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f7f8:	d906      	bls.n	800f808 <SEGGER_SYSVIEW_GetSysDesc+0x40>
 800f7fa:	f061 027f 	orn	r2, r1, #127	; 0x7f
 800f7fe:	09c9      	lsrs	r1, r1, #7
 800f800:	297f      	cmp	r1, #127	; 0x7f
 800f802:	f803 2b01 	strb.w	r2, [r3], #1
 800f806:	d8f8      	bhi.n	800f7fa <SEGGER_SYSVIEW_GetSysDesc+0x32>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f808:	6922      	ldr	r2, [r4, #16]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f80a:	7019      	strb	r1, [r3, #0]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f80c:	2a7f      	cmp	r2, #127	; 0x7f
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f80e:	f103 0301 	add.w	r3, r3, #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f812:	d906      	bls.n	800f822 <SEGGER_SYSVIEW_GetSysDesc+0x5a>
 800f814:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f818:	09d2      	lsrs	r2, r2, #7
 800f81a:	2a7f      	cmp	r2, #127	; 0x7f
 800f81c:	f803 1b01 	strb.w	r1, [r3], #1
 800f820:	d8f8      	bhi.n	800f814 <SEGGER_SYSVIEW_GetSysDesc+0x4c>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800f822:	2000      	movs	r0, #0
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f824:	701a      	strb	r2, [r3, #0]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800f826:	7058      	strb	r0, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800f828:	1c99      	adds	r1, r3, #2
 800f82a:	2218      	movs	r2, #24
 800f82c:	4806      	ldr	r0, [pc, #24]	; (800f848 <SEGGER_SYSVIEW_GetSysDesc+0x80>)
 800f82e:	f7ff fe1d 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f832:	f385 8811 	msr	BASEPRI, r5
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800f836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f838:	b113      	cbz	r3, 800f840 <SEGGER_SYSVIEW_GetSysDesc+0x78>
}
 800f83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SYSVIEW_Globals.pfSendSysDesc();
 800f83e:	4718      	bx	r3
}
 800f840:	bd70      	pop	{r4, r5, r6, pc}
 800f842:	bf00      	nop
 800f844:	2000d4bc 	.word	0x2000d4bc
 800f848:	2000d4e8 	.word	0x2000d4e8

0800f84c <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800f84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84e:	4606      	mov	r6, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800f850:	f3ef 8511 	mrs	r5, BASEPRI
 800f854:	f04f 0120 	mov.w	r1, #32
 800f858:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f85c:	4f2c      	ldr	r7, [pc, #176]	; (800f910 <SEGGER_SYSVIEW_SendTaskInfo+0xc4>)
 800f85e:	6803      	ldr	r3, [r0, #0]
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	4c2c      	ldr	r4, [pc, #176]	; (800f914 <SEGGER_SYSVIEW_SendTaskInfo+0xc8>)
 800f864:	1a9b      	subs	r3, r3, r2
 800f866:	2b7f      	cmp	r3, #127	; 0x7f
 800f868:	4620      	mov	r0, r4
 800f86a:	d906      	bls.n	800f87a <SEGGER_SYSVIEW_SendTaskInfo+0x2e>
 800f86c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f870:	09db      	lsrs	r3, r3, #7
 800f872:	2b7f      	cmp	r3, #127	; 0x7f
 800f874:	f800 2b01 	strb.w	r2, [r0], #1
 800f878:	d8f8      	bhi.n	800f86c <SEGGER_SYSVIEW_SendTaskInfo+0x20>
 800f87a:	7003      	strb	r3, [r0, #0]
  ENCODE_U32(pPayload, pInfo->Prio);
 800f87c:	68b3      	ldr	r3, [r6, #8]
 800f87e:	2b7f      	cmp	r3, #127	; 0x7f
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f880:	f100 0001 	add.w	r0, r0, #1
  ENCODE_U32(pPayload, pInfo->Prio);
 800f884:	d906      	bls.n	800f894 <SEGGER_SYSVIEW_SendTaskInfo+0x48>
 800f886:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f88a:	09db      	lsrs	r3, r3, #7
 800f88c:	2b7f      	cmp	r3, #127	; 0x7f
 800f88e:	f800 2b01 	strb.w	r2, [r0], #1
 800f892:	d8f8      	bhi.n	800f886 <SEGGER_SYSVIEW_SendTaskInfo+0x3a>
 800f894:	f800 3b01 	strb.w	r3, [r0], #1
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800f898:	2220      	movs	r2, #32
 800f89a:	6871      	ldr	r1, [r6, #4]
 800f89c:	f7ff fcda 	bl	800f254 <_EncodeStr>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800f8a0:	2209      	movs	r2, #9
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	481b      	ldr	r0, [pc, #108]	; (800f914 <SEGGER_SYSVIEW_SendTaskInfo+0xc8>)
 800f8a6:	f7ff fde1 	bl	800f46c <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	6832      	ldr	r2, [r6, #0]
 800f8ae:	1ad2      	subs	r2, r2, r3
 800f8b0:	2a7f      	cmp	r2, #127	; 0x7f
 800f8b2:	4623      	mov	r3, r4
 800f8b4:	d906      	bls.n	800f8c4 <SEGGER_SYSVIEW_SendTaskInfo+0x78>
 800f8b6:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f8ba:	09d2      	lsrs	r2, r2, #7
 800f8bc:	2a7f      	cmp	r2, #127	; 0x7f
 800f8be:	f803 1b01 	strb.w	r1, [r3], #1
 800f8c2:	d8f8      	bhi.n	800f8b6 <SEGGER_SYSVIEW_SendTaskInfo+0x6a>
 800f8c4:	701a      	strb	r2, [r3, #0]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800f8c6:	68f2      	ldr	r2, [r6, #12]
 800f8c8:	2a7f      	cmp	r2, #127	; 0x7f
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f8ca:	f103 0301 	add.w	r3, r3, #1
  ENCODE_U32(pPayload, pInfo->StackBase);
 800f8ce:	d906      	bls.n	800f8de <SEGGER_SYSVIEW_SendTaskInfo+0x92>
 800f8d0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800f8d4:	09d2      	lsrs	r2, r2, #7
 800f8d6:	2a7f      	cmp	r2, #127	; 0x7f
 800f8d8:	f803 1b01 	strb.w	r1, [r3], #1
 800f8dc:	d8f8      	bhi.n	800f8d0 <SEGGER_SYSVIEW_SendTaskInfo+0x84>
 800f8de:	701a      	strb	r2, [r3, #0]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800f8e0:	6930      	ldr	r0, [r6, #16]
 800f8e2:	287f      	cmp	r0, #127	; 0x7f
  ENCODE_U32(pPayload, pInfo->StackBase);
 800f8e4:	f103 0301 	add.w	r3, r3, #1
  ENCODE_U32(pPayload, pInfo->StackSize);
 800f8e8:	d906      	bls.n	800f8f8 <SEGGER_SYSVIEW_SendTaskInfo+0xac>
 800f8ea:	f060 027f 	orn	r2, r0, #127	; 0x7f
 800f8ee:	09c0      	lsrs	r0, r0, #7
 800f8f0:	287f      	cmp	r0, #127	; 0x7f
 800f8f2:	f803 2b01 	strb.w	r2, [r3], #1
 800f8f6:	d8f8      	bhi.n	800f8ea <SEGGER_SYSVIEW_SendTaskInfo+0x9e>
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800f8f8:	2400      	movs	r4, #0
  ENCODE_U32(pPayload, pInfo->StackSize);
 800f8fa:	7018      	strb	r0, [r3, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800f8fc:	1c99      	adds	r1, r3, #2
 800f8fe:	2215      	movs	r2, #21
 800f900:	4804      	ldr	r0, [pc, #16]	; (800f914 <SEGGER_SYSVIEW_SendTaskInfo+0xc8>)
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800f902:	705c      	strb	r4, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800f904:	f7ff fdb2 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f908:	f385 8811 	msr	BASEPRI, r5
}
 800f90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f90e:	bf00      	nop
 800f910:	2000d4bc 	.word	0x2000d4bc
 800f914:	2000d4e8 	.word	0x2000d4e8

0800f918 <SEGGER_SYSVIEW_RecordEnterISR>:
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800f918:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f91a:	f3ef 8411 	mrs	r4, BASEPRI
 800f91e:	f04f 0120 	mov.w	r1, #32
 800f922:	f381 8811 	msr	BASEPRI, r1
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800f926:	4b0b      	ldr	r3, [pc, #44]	; (800f954 <SEGGER_SYSVIEW_RecordEnterISR+0x3c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  ENCODE_U32(pPayload, v);
 800f92e:	2b7f      	cmp	r3, #127	; 0x7f
 800f930:	d90e      	bls.n	800f950 <SEGGER_SYSVIEW_RecordEnterISR+0x38>
 800f932:	4909      	ldr	r1, [pc, #36]	; (800f958 <SEGGER_SYSVIEW_RecordEnterISR+0x40>)
 800f934:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f938:	710a      	strb	r2, [r1, #4]
 800f93a:	09db      	lsrs	r3, r3, #7
 800f93c:	3105      	adds	r1, #5
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800f93e:	4807      	ldr	r0, [pc, #28]	; (800f95c <SEGGER_SYSVIEW_RecordEnterISR+0x44>)
  ENCODE_U32(pPayload, v);
 800f940:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800f944:	2202      	movs	r2, #2
 800f946:	f7ff fd91 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f94a:	f384 8811 	msr	BASEPRI, r4
}
 800f94e:	bd10      	pop	{r4, pc}
  ENCODE_U32(pPayload, v);
 800f950:	4902      	ldr	r1, [pc, #8]	; (800f95c <SEGGER_SYSVIEW_RecordEnterISR+0x44>)
 800f952:	e7f4      	b.n	800f93e <SEGGER_SYSVIEW_RecordEnterISR+0x26>
 800f954:	e000ed04 	.word	0xe000ed04
 800f958:	2000d4e4 	.word	0x2000d4e4
 800f95c:	2000d4e8 	.word	0x2000d4e8

0800f960 <SEGGER_SYSVIEW_RecordExitISR>:
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800f960:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f962:	f3ef 8411 	mrs	r4, BASEPRI
 800f966:	f04f 0120 	mov.w	r1, #32
 800f96a:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800f96e:	4904      	ldr	r1, [pc, #16]	; (800f980 <SEGGER_SYSVIEW_RecordExitISR+0x20>)
 800f970:	2203      	movs	r2, #3
 800f972:	4608      	mov	r0, r1
 800f974:	f7ff fd7a 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f978:	f384 8811 	msr	BASEPRI, r4
}
 800f97c:	bd10      	pop	{r4, pc}
 800f97e:	bf00      	nop
 800f980:	2000d4e8 	.word	0x2000d4e8

0800f984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800f984:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f986:	f3ef 8411 	mrs	r4, BASEPRI
 800f98a:	f04f 0120 	mov.w	r1, #32
 800f98e:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800f992:	4904      	ldr	r1, [pc, #16]	; (800f9a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x20>)
 800f994:	2212      	movs	r2, #18
 800f996:	4608      	mov	r0, r1
 800f998:	f7ff fd68 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f99c:	f384 8811 	msr	BASEPRI, r4
}
 800f9a0:	bd10      	pop	{r4, pc}
 800f9a2:	bf00      	nop
 800f9a4:	2000d4e8 	.word	0x2000d4e8

0800f9a8 <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 800f9a8:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f9aa:	f3ef 8411 	mrs	r4, BASEPRI
 800f9ae:	f04f 0120 	mov.w	r1, #32
 800f9b2:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800f9b6:	4904      	ldr	r1, [pc, #16]	; (800f9c8 <SEGGER_SYSVIEW_OnIdle+0x20>)
 800f9b8:	2211      	movs	r2, #17
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	f7ff fd56 	bl	800f46c <_SendPacket>
  RECORD_END();
 800f9c0:	f384 8811 	msr	BASEPRI, r4
}
 800f9c4:	bd10      	pop	{r4, pc}
 800f9c6:	bf00      	nop
 800f9c8:	2000d4e8 	.word	0x2000d4e8

0800f9cc <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800f9cc:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f9ce:	f3ef 8411 	mrs	r4, BASEPRI
 800f9d2:	f04f 0120 	mov.w	r1, #32
 800f9d6:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 800f9da:	4b0b      	ldr	r3, [pc, #44]	; (800fa08 <SEGGER_SYSVIEW_OnTaskCreate+0x3c>)
  ENCODE_U32(pPayload, TaskId);
 800f9dc:	490b      	ldr	r1, [pc, #44]	; (800fa0c <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
  TaskId = SHRINK_ID(TaskId);
 800f9de:	691b      	ldr	r3, [r3, #16]
 800f9e0:	1ac3      	subs	r3, r0, r3
  ENCODE_U32(pPayload, TaskId);
 800f9e2:	2b7f      	cmp	r3, #127	; 0x7f
 800f9e4:	d906      	bls.n	800f9f4 <SEGGER_SYSVIEW_OnTaskCreate+0x28>
 800f9e6:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800f9ea:	09db      	lsrs	r3, r3, #7
 800f9ec:	2b7f      	cmp	r3, #127	; 0x7f
 800f9ee:	f801 2b01 	strb.w	r2, [r1], #1
 800f9f2:	d8f8      	bhi.n	800f9e6 <SEGGER_SYSVIEW_OnTaskCreate+0x1a>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800f9f4:	4805      	ldr	r0, [pc, #20]	; (800fa0c <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
  ENCODE_U32(pPayload, TaskId);
 800f9f6:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800f9fa:	2208      	movs	r2, #8
 800f9fc:	f7ff fd36 	bl	800f46c <_SendPacket>
  RECORD_END();
 800fa00:	f384 8811 	msr	BASEPRI, r4
}
 800fa04:	bd10      	pop	{r4, pc}
 800fa06:	bf00      	nop
 800fa08:	2000d4bc 	.word	0x2000d4bc
 800fa0c:	2000d4e8 	.word	0x2000d4e8

0800fa10 <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800fa10:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800fa12:	f3ef 8411 	mrs	r4, BASEPRI
 800fa16:	f04f 0120 	mov.w	r1, #32
 800fa1a:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 800fa1e:	4b0b      	ldr	r3, [pc, #44]	; (800fa4c <SEGGER_SYSVIEW_OnTaskStartExec+0x3c>)
  ENCODE_U32(pPayload, TaskId);
 800fa20:	490b      	ldr	r1, [pc, #44]	; (800fa50 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
  TaskId = SHRINK_ID(TaskId);
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	1ac3      	subs	r3, r0, r3
  ENCODE_U32(pPayload, TaskId);
 800fa26:	2b7f      	cmp	r3, #127	; 0x7f
 800fa28:	d906      	bls.n	800fa38 <SEGGER_SYSVIEW_OnTaskStartExec+0x28>
 800fa2a:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800fa2e:	09db      	lsrs	r3, r3, #7
 800fa30:	2b7f      	cmp	r3, #127	; 0x7f
 800fa32:	f801 2b01 	strb.w	r2, [r1], #1
 800fa36:	d8f8      	bhi.n	800fa2a <SEGGER_SYSVIEW_OnTaskStartExec+0x1a>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800fa38:	4805      	ldr	r0, [pc, #20]	; (800fa50 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
  ENCODE_U32(pPayload, TaskId);
 800fa3a:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800fa3e:	2204      	movs	r2, #4
 800fa40:	f7ff fd14 	bl	800f46c <_SendPacket>
  RECORD_END();
 800fa44:	f384 8811 	msr	BASEPRI, r4
}
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	bf00      	nop
 800fa4c:	2000d4bc 	.word	0x2000d4bc
 800fa50:	2000d4e8 	.word	0x2000d4e8

0800fa54 <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800fa54:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800fa56:	f3ef 8411 	mrs	r4, BASEPRI
 800fa5a:	f04f 0120 	mov.w	r1, #32
 800fa5e:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 800fa62:	4b0b      	ldr	r3, [pc, #44]	; (800fa90 <SEGGER_SYSVIEW_OnTaskStartReady+0x3c>)
  ENCODE_U32(pPayload, TaskId);
 800fa64:	490b      	ldr	r1, [pc, #44]	; (800fa94 <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
  TaskId = SHRINK_ID(TaskId);
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	1ac3      	subs	r3, r0, r3
  ENCODE_U32(pPayload, TaskId);
 800fa6a:	2b7f      	cmp	r3, #127	; 0x7f
 800fa6c:	d906      	bls.n	800fa7c <SEGGER_SYSVIEW_OnTaskStartReady+0x28>
 800fa6e:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800fa72:	09db      	lsrs	r3, r3, #7
 800fa74:	2b7f      	cmp	r3, #127	; 0x7f
 800fa76:	f801 2b01 	strb.w	r2, [r1], #1
 800fa7a:	d8f8      	bhi.n	800fa6e <SEGGER_SYSVIEW_OnTaskStartReady+0x1a>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800fa7c:	4805      	ldr	r0, [pc, #20]	; (800fa94 <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
  ENCODE_U32(pPayload, TaskId);
 800fa7e:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800fa82:	2206      	movs	r2, #6
 800fa84:	f7ff fcf2 	bl	800f46c <_SendPacket>
  RECORD_END();
 800fa88:	f384 8811 	msr	BASEPRI, r4
}
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	bf00      	nop
 800fa90:	2000d4bc 	.word	0x2000d4bc
 800fa94:	2000d4e8 	.word	0x2000d4e8

0800fa98 <SEGGER_SYSVIEW_OnTaskStopReady>:
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800fa98:	b510      	push	{r4, lr}
 800fa9a:	460b      	mov	r3, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800fa9c:	f3ef 8411 	mrs	r4, BASEPRI
 800faa0:	f04f 0120 	mov.w	r1, #32
 800faa4:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 800faa8:	4a10      	ldr	r2, [pc, #64]	; (800faec <SEGGER_SYSVIEW_OnTaskStopReady+0x54>)
  ENCODE_U32(pPayload, TaskId);
 800faaa:	4911      	ldr	r1, [pc, #68]	; (800faf0 <SEGGER_SYSVIEW_OnTaskStopReady+0x58>)
  TaskId = SHRINK_ID(TaskId);
 800faac:	6912      	ldr	r2, [r2, #16]
 800faae:	1a80      	subs	r0, r0, r2
  ENCODE_U32(pPayload, TaskId);
 800fab0:	287f      	cmp	r0, #127	; 0x7f
 800fab2:	d906      	bls.n	800fac2 <SEGGER_SYSVIEW_OnTaskStopReady+0x2a>
 800fab4:	f060 027f 	orn	r2, r0, #127	; 0x7f
 800fab8:	09c0      	lsrs	r0, r0, #7
 800faba:	287f      	cmp	r0, #127	; 0x7f
 800fabc:	f801 2b01 	strb.w	r2, [r1], #1
 800fac0:	d8f8      	bhi.n	800fab4 <SEGGER_SYSVIEW_OnTaskStopReady+0x1c>
  ENCODE_U32(pPayload, Cause);
 800fac2:	2b7f      	cmp	r3, #127	; 0x7f
  ENCODE_U32(pPayload, TaskId);
 800fac4:	7008      	strb	r0, [r1, #0]
 800fac6:	f101 0101 	add.w	r1, r1, #1
  ENCODE_U32(pPayload, Cause);
 800faca:	d906      	bls.n	800fada <SEGGER_SYSVIEW_OnTaskStopReady+0x42>
 800facc:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800fad0:	09db      	lsrs	r3, r3, #7
 800fad2:	2b7f      	cmp	r3, #127	; 0x7f
 800fad4:	f801 2b01 	strb.w	r2, [r1], #1
 800fad8:	d8f8      	bhi.n	800facc <SEGGER_SYSVIEW_OnTaskStopReady+0x34>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800fada:	2207      	movs	r2, #7
  ENCODE_U32(pPayload, Cause);
 800fadc:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800fae0:	4803      	ldr	r0, [pc, #12]	; (800faf0 <SEGGER_SYSVIEW_OnTaskStopReady+0x58>)
 800fae2:	f7ff fcc3 	bl	800f46c <_SendPacket>
  RECORD_END();
 800fae6:	f384 8811 	msr	BASEPRI, r4
}
 800faea:	bd10      	pop	{r4, pc}
 800faec:	2000d4bc 	.word	0x2000d4bc
 800faf0:	2000d4e8 	.word	0x2000d4e8

0800faf4 <SEGGER_SYSVIEW_SendModule>:
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800faf4:	b538      	push	{r3, r4, r5, lr}
  if (_pFirstModule != 0) {
 800faf6:	4b1f      	ldr	r3, [pc, #124]	; (800fb74 <SEGGER_SYSVIEW_SendModule+0x80>)
 800faf8:	681c      	ldr	r4, [r3, #0]
 800fafa:	b384      	cbz	r4, 800fb5e <SEGGER_SYSVIEW_SendModule+0x6a>
    for (n = 0; n < ModuleId; n++) {
 800fafc:	b380      	cbz	r0, 800fb60 <SEGGER_SYSVIEW_SendModule+0x6c>
      pModule = pModule->pNext;
 800fafe:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 800fb00:	b36c      	cbz	r4, 800fb5e <SEGGER_SYSVIEW_SendModule+0x6a>
    for (n = 0; n < ModuleId; n++) {
 800fb02:	2300      	movs	r3, #0
 800fb04:	e001      	b.n	800fb0a <SEGGER_SYSVIEW_SendModule+0x16>
      pModule = pModule->pNext;
 800fb06:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 800fb08:	b34c      	cbz	r4, 800fb5e <SEGGER_SYSVIEW_SendModule+0x6a>
    for (n = 0; n < ModuleId; n++) {
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	4283      	cmp	r3, r0
 800fb0e:	d1fa      	bne.n	800fb06 <SEGGER_SYSVIEW_SendModule+0x12>
 800fb10:	b2d8      	uxtb	r0, r3
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fb12:	f3ef 8511 	mrs	r5, BASEPRI
 800fb16:	f04f 0120 	mov.w	r1, #32
 800fb1a:	f381 8811 	msr	BASEPRI, r1
      ENCODE_U32(pPayload, ModuleId);
 800fb1e:	2b7f      	cmp	r3, #127	; 0x7f
 800fb20:	d926      	bls.n	800fb70 <SEGGER_SYSVIEW_SendModule+0x7c>
 800fb22:	4b15      	ldr	r3, [pc, #84]	; (800fb78 <SEGGER_SYSVIEW_SendModule+0x84>)
 800fb24:	7118      	strb	r0, [r3, #4]
 800fb26:	3305      	adds	r3, #5
 800fb28:	2001      	movs	r0, #1
 800fb2a:	7018      	strb	r0, [r3, #0]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800fb2c:	68a1      	ldr	r1, [r4, #8]
 800fb2e:	297f      	cmp	r1, #127	; 0x7f
      ENCODE_U32(pPayload, ModuleId);
 800fb30:	f103 0001 	add.w	r0, r3, #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800fb34:	d906      	bls.n	800fb44 <SEGGER_SYSVIEW_SendModule+0x50>
 800fb36:	f061 037f 	orn	r3, r1, #127	; 0x7f
 800fb3a:	09c9      	lsrs	r1, r1, #7
 800fb3c:	297f      	cmp	r1, #127	; 0x7f
 800fb3e:	f800 3b01 	strb.w	r3, [r0], #1
 800fb42:	d8f8      	bhi.n	800fb36 <SEGGER_SYSVIEW_SendModule+0x42>
 800fb44:	f800 1b01 	strb.w	r1, [r0], #1
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fb48:	2280      	movs	r2, #128	; 0x80
 800fb4a:	6821      	ldr	r1, [r4, #0]
 800fb4c:	f7ff fb82 	bl	800f254 <_EncodeStr>
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800fb50:	2216      	movs	r2, #22
 800fb52:	4601      	mov	r1, r0
 800fb54:	4809      	ldr	r0, [pc, #36]	; (800fb7c <SEGGER_SYSVIEW_SendModule+0x88>)
 800fb56:	f7ff fc89 	bl	800f46c <_SendPacket>
      RECORD_END();
 800fb5a:	f385 8811 	msr	BASEPRI, r5
}
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fb60:	f3ef 8511 	mrs	r5, BASEPRI
 800fb64:	f04f 0120 	mov.w	r1, #32
 800fb68:	f381 8811 	msr	BASEPRI, r1
      ENCODE_U32(pPayload, ModuleId);
 800fb6c:	4b03      	ldr	r3, [pc, #12]	; (800fb7c <SEGGER_SYSVIEW_SendModule+0x88>)
 800fb6e:	e7dc      	b.n	800fb2a <SEGGER_SYSVIEW_SendModule+0x36>
 800fb70:	4b02      	ldr	r3, [pc, #8]	; (800fb7c <SEGGER_SYSVIEW_SendModule+0x88>)
 800fb72:	e7da      	b.n	800fb2a <SEGGER_SYSVIEW_SendModule+0x36>
 800fb74:	2000d5c8 	.word	0x2000d5c8
 800fb78:	2000d4e4 	.word	0x2000d4e4
 800fb7c:	2000d4e8 	.word	0x2000d4e8

0800fb80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800fb80:	b538      	push	{r3, r4, r5, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fb82:	f3ef 8511 	mrs	r5, BASEPRI
 800fb86:	f04f 0120 	mov.w	r1, #32
 800fb8a:	f381 8811 	msr	BASEPRI, r1
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fb8e:	4c09      	ldr	r4, [pc, #36]	; (800fbb4 <SEGGER_SYSVIEW_Warn+0x34>)
 800fb90:	4601      	mov	r1, r0
 800fb92:	2280      	movs	r2, #128	; 0x80
 800fb94:	4620      	mov	r0, r4
 800fb96:	f7ff fb5d 	bl	800f254 <_EncodeStr>
 800fb9a:	4601      	mov	r1, r0
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
  ENCODE_U32(pPayload, 0);
 800fb9c:	2300      	movs	r3, #0
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800fb9e:	2201      	movs	r2, #1
 800fba0:	700a      	strb	r2, [r1, #0]
  ENCODE_U32(pPayload, 0);
 800fba2:	704b      	strb	r3, [r1, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800fba4:	4620      	mov	r0, r4
 800fba6:	3102      	adds	r1, #2
 800fba8:	221a      	movs	r2, #26
 800fbaa:	f7ff fc5f 	bl	800f46c <_SendPacket>
  RECORD_END();
 800fbae:	f385 8811 	msr	BASEPRI, r5
}
 800fbb2:	bd38      	pop	{r3, r4, r5, pc}
 800fbb4:	2000d4e8 	.word	0x2000d4e8

0800fbb8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fbb8:	2904      	cmp	r1, #4
 800fbba:	d00b      	beq.n	800fbd4 <USBH_UserProcess+0x1c>
 800fbbc:	2905      	cmp	r1, #5
 800fbbe:	d005      	beq.n	800fbcc <USBH_UserProcess+0x14>
 800fbc0:	2902      	cmp	r1, #2
 800fbc2:	d000      	beq.n	800fbc6 <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fbc4:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 800fbc6:	4b05      	ldr	r3, [pc, #20]	; (800fbdc <USBH_UserProcess+0x24>)
 800fbc8:	7019      	strb	r1, [r3, #0]
  break;
 800fbca:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800fbcc:	4b03      	ldr	r3, [pc, #12]	; (800fbdc <USBH_UserProcess+0x24>)
 800fbce:	2203      	movs	r2, #3
 800fbd0:	701a      	strb	r2, [r3, #0]
  break;
 800fbd2:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800fbd4:	4b01      	ldr	r3, [pc, #4]	; (800fbdc <USBH_UserProcess+0x24>)
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	701a      	strb	r2, [r3, #0]
}
 800fbda:	4770      	bx	lr
 800fbdc:	2000d5cc 	.word	0x2000d5cc

0800fbe0 <MX_USB_HOST_Init>:
{
 800fbe0:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	490c      	ldr	r1, [pc, #48]	; (800fc18 <MX_USB_HOST_Init+0x38>)
 800fbe6:	480d      	ldr	r0, [pc, #52]	; (800fc1c <MX_USB_HOST_Init+0x3c>)
 800fbe8:	f7fa f914 	bl	8009e14 <USBH_Init>
 800fbec:	b980      	cbnz	r0, 800fc10 <MX_USB_HOST_Init+0x30>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fbee:	490c      	ldr	r1, [pc, #48]	; (800fc20 <MX_USB_HOST_Init+0x40>)
 800fbf0:	480a      	ldr	r0, [pc, #40]	; (800fc1c <MX_USB_HOST_Init+0x3c>)
 800fbf2:	f7fa f96b 	bl	8009ecc <USBH_RegisterClass>
 800fbf6:	b940      	cbnz	r0, 800fc0a <MX_USB_HOST_Init+0x2a>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fbf8:	4808      	ldr	r0, [pc, #32]	; (800fc1c <MX_USB_HOST_Init+0x3c>)
 800fbfa:	f7fa f99f 	bl	8009f3c <USBH_Start>
 800fbfe:	b900      	cbnz	r0, 800fc02 <MX_USB_HOST_Init+0x22>
}
 800fc00:	bd08      	pop	{r3, pc}
 800fc02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800fc06:	f7f0 be3b 	b.w	8000880 <Error_Handler>
    Error_Handler();
 800fc0a:	f7f0 fe39 	bl	8000880 <Error_Handler>
 800fc0e:	e7f3      	b.n	800fbf8 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 800fc10:	f7f0 fe36 	bl	8000880 <Error_Handler>
 800fc14:	e7eb      	b.n	800fbee <MX_USB_HOST_Init+0xe>
 800fc16:	bf00      	nop
 800fc18:	0800fbb9 	.word	0x0800fbb9
 800fc1c:	2000f8f4 	.word	0x2000f8f4
 800fc20:	20000070 	.word	0x20000070

0800fc24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fc24:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 800fc26:	6803      	ldr	r3, [r0, #0]
{
 800fc28:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc2a:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 800fc2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc30:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800fc34:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800fc38:	9407      	str	r4, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fc3a:	d001      	beq.n	800fc40 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc3c:	b009      	add	sp, #36	; 0x24
 800fc3e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc40:	4d1b      	ldr	r5, [pc, #108]	; (800fcb0 <HAL_HCD_MspInit+0x8c>)
 800fc42:	9401      	str	r4, [sp, #4]
 800fc44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fc46:	481b      	ldr	r0, [pc, #108]	; (800fcb4 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc48:	f043 0301 	orr.w	r3, r3, #1
 800fc4c:	632b      	str	r3, [r5, #48]	; 0x30
 800fc4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fc56:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fc58:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc5c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fc5e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fc60:	f7f6 f9a0 	bl	8005fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fc64:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc68:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc6a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc6c:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fc6e:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc70:	4810      	ldr	r0, [pc, #64]	; (800fcb4 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc72:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc74:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc76:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc7a:	f7f6 f993 	bl	8005fa4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc84:	636b      	str	r3, [r5, #52]	; 0x34
 800fc86:	9402      	str	r4, [sp, #8]
 800fc88:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fc8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc8e:	646b      	str	r3, [r5, #68]	; 0x44
 800fc90:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fc92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fc96:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc98:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fc9a:	2105      	movs	r1, #5
 800fc9c:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc9e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fca0:	f7f5 ff04 	bl	8005aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fca4:	2043      	movs	r0, #67	; 0x43
 800fca6:	f7f5 ff37 	bl	8005b18 <HAL_NVIC_EnableIRQ>
}
 800fcaa:	b009      	add	sp, #36	; 0x24
 800fcac:	bd30      	pop	{r4, r5, pc}
 800fcae:	bf00      	nop
 800fcb0:	40023800 	.word	0x40023800
 800fcb4:	40020000 	.word	0x40020000

0800fcb8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800fcb8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800fcbc:	f7fa bbb8 	b.w	800a430 <USBH_LL_IncTimer>

0800fcc0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800fcc0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800fcc4:	f7fa bbd2 	b.w	800a46c <USBH_LL_Connect>

0800fcc8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800fcc8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800fccc:	f7fa bbe2 	b.w	800a494 <USBH_LL_Disconnect>

0800fcd0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800fcd0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800fcd4:	f7fa bbfc 	b.w	800a4d0 <USBH_LL_NotifyURBChange>

0800fcd8 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800fcd8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800fcdc:	f7fa bbb8 	b.w	800a450 <USBH_LL_PortEnabled>

0800fce0 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800fce0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800fce4:	f7fa bbbe 	b.w	800a464 <USBH_LL_PortDisabled>

0800fce8 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fce8:	f890 23cc 	ldrb.w	r2, [r0, #972]	; 0x3cc
 800fcec:	2a01      	cmp	r2, #1
 800fcee:	d001      	beq.n	800fcf4 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4770      	bx	lr
  hhcd_USB_OTG_FS.pData = phost;
 800fcf4:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <USBH_LL_Init+0x50>)
{
 800fcf6:	b570      	push	{r4, r5, r6, lr}
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fcf8:	2102      	movs	r1, #2
 800fcfa:	4604      	mov	r4, r0
  phost->pData = &hhcd_USB_OTG_FS;
 800fcfc:	f8c0 33d0 	str.w	r3, [r0, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd00:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fd04:	2508      	movs	r5, #8
  hhcd_USB_OTG_FS.pData = phost;
 800fd06:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fd0a:	60da      	str	r2, [r3, #12]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fd0c:	4618      	mov	r0, r3
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd0e:	2200      	movs	r2, #0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd10:	601e      	str	r6, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fd12:	609d      	str	r5, [r3, #8]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fd14:	6199      	str	r1, [r3, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd16:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd18:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fd1a:	f7f6 fb53 	bl	80063c4 <HAL_HCD_Init>
 800fd1e:	b940      	cbnz	r0, 800fd32 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fd20:	4805      	ldr	r0, [pc, #20]	; (800fd38 <USBH_LL_Init+0x50>)
 800fd22:	f7f7 f833 	bl	8006d8c <HAL_HCD_GetCurrentFrame>
 800fd26:	4601      	mov	r1, r0
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f7fa fb7d 	bl	800a428 <USBH_LL_SetTimer>
}
 800fd2e:	2000      	movs	r0, #0
 800fd30:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 800fd32:	f7f0 fda5 	bl	8000880 <Error_Handler>
 800fd36:	e7f3      	b.n	800fd20 <USBH_LL_Init+0x38>
 800fd38:	2000fcd8 	.word	0x2000fcd8

0800fd3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fd3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800fd3e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fd42:	f7f6 ffe9 	bl	8006d18 <HAL_HCD_Start>
 800fd46:	2803      	cmp	r0, #3
 800fd48:	bf96      	itet	ls
 800fd4a:	4b02      	ldrls	r3, [pc, #8]	; (800fd54 <USBH_LL_Start+0x18>)
 800fd4c:	2002      	movhi	r0, #2
 800fd4e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800fd50:	bd08      	pop	{r3, pc}
 800fd52:	bf00      	nop
 800fd54:	08012d20 	.word	0x08012d20

0800fd58 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fd58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800fd5a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fd5e:	f7f6 fff1 	bl	8006d44 <HAL_HCD_Stop>
 800fd62:	2803      	cmp	r0, #3
 800fd64:	bf96      	itet	ls
 800fd66:	4b02      	ldrls	r3, [pc, #8]	; (800fd70 <USBH_LL_Stop+0x18>)
 800fd68:	2002      	movhi	r0, #2
 800fd6a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800fd6c:	bd08      	pop	{r3, pc}
 800fd6e:	bf00      	nop
 800fd70:	08012d20 	.word	0x08012d20

0800fd74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fd74:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fd76:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fd7a:	f7f7 f80b 	bl	8006d94 <HAL_HCD_GetCurrentSpeed>
 800fd7e:	2802      	cmp	r0, #2
 800fd80:	bf96      	itet	ls
 800fd82:	4b02      	ldrls	r3, [pc, #8]	; (800fd8c <USBH_LL_GetSpeed+0x18>)
 800fd84:	2001      	movhi	r0, #1
 800fd86:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800fd88:	bd08      	pop	{r3, pc}
 800fd8a:	bf00      	nop
 800fd8c:	08012d1c 	.word	0x08012d1c

0800fd90 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fd90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fd92:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fd96:	f7f6 ffe7 	bl	8006d68 <HAL_HCD_ResetPort>
 800fd9a:	2803      	cmp	r0, #3
 800fd9c:	bf96      	itet	ls
 800fd9e:	4b02      	ldrls	r3, [pc, #8]	; (800fda8 <USBH_LL_ResetPort+0x18>)
 800fda0:	2002      	movhi	r0, #2
 800fda2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800fda4:	bd08      	pop	{r3, pc}
 800fda6:	bf00      	nop
 800fda8:	08012d20 	.word	0x08012d20

0800fdac <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fdac:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fdb0:	f7f6 bfe6 	b.w	8006d80 <HAL_HCD_HC_GetXferCount>

0800fdb4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fdb4:	b530      	push	{r4, r5, lr}
 800fdb6:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fdb8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
{
 800fdbc:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800fdc0:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fdc4:	9400      	str	r4, [sp, #0]
{
 800fdc6:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fdca:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800fdce:	f7f6 faa9 	bl	8006324 <HAL_HCD_HC_Init>
 800fdd2:	2803      	cmp	r0, #3
 800fdd4:	bf9a      	itte	ls
 800fdd6:	4b02      	ldrls	r3, [pc, #8]	; (800fde0 <USBH_LL_OpenPipe+0x2c>)
 800fdd8:	5c18      	ldrbls	r0, [r3, r0]
 800fdda:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800fddc:	b005      	add	sp, #20
 800fdde:	bd30      	pop	{r4, r5, pc}
 800fde0:	08012d20 	.word	0x08012d20

0800fde4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fde4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fde6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fdea:	f7f6 fad9 	bl	80063a0 <HAL_HCD_HC_Halt>
 800fdee:	2803      	cmp	r0, #3
 800fdf0:	bf96      	itet	ls
 800fdf2:	4b02      	ldrls	r3, [pc, #8]	; (800fdfc <USBH_LL_ClosePipe+0x18>)
 800fdf4:	2002      	movhi	r0, #2
 800fdf6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800fdf8:	bd08      	pop	{r3, pc}
 800fdfa:	bf00      	nop
 800fdfc:	08012d20 	.word	0x08012d20

0800fe00 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fe00:	b530      	push	{r4, r5, lr}
 800fe02:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fe04:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
{
 800fe08:	f89d 5020 	ldrb.w	r5, [sp, #32]
 800fe0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fe0e:	9500      	str	r5, [sp, #0]
 800fe10:	9401      	str	r4, [sp, #4]
{
 800fe12:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800fe16:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fe1a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800fe1e:	f7f6 fb21 	bl	8006464 <HAL_HCD_HC_SubmitRequest>
 800fe22:	2803      	cmp	r0, #3
 800fe24:	bf9a      	itte	ls
 800fe26:	4b02      	ldrls	r3, [pc, #8]	; (800fe30 <USBH_LL_SubmitURB+0x30>)
 800fe28:	5c18      	ldrbls	r0, [r3, r0]
 800fe2a:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 800fe2c:	b005      	add	sp, #20
 800fe2e:	bd30      	pop	{r4, r5, pc}
 800fe30:	08012d20 	.word	0x08012d20

0800fe34 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fe34:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800fe38:	f7f6 bf9a 	b.w	8006d70 <HAL_HCD_HC_GetURBState>

0800fe3c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fe3c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800fe3e:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d004      	beq.n	800fe50 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fe46:	20c8      	movs	r0, #200	; 0xc8
 800fe48:	f7f5 fbe0 	bl	800560c <HAL_Delay>
  return USBH_OK;
}
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800fe50:	4608      	mov	r0, r1
 800fe52:	f000 f829 	bl	800fea8 <MX_DriverVbusFS>
  HAL_Delay(200);
 800fe56:	20c8      	movs	r0, #200	; 0xc8
 800fe58:	f7f5 fbd8 	bl	800560c <HAL_Delay>
}
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	bd08      	pop	{r3, pc}

0800fe60 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fe60:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800fe64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fe68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fe6c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800fe70:	b91b      	cbnz	r3, 800fe7a <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fe72:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 800fe76:	2000      	movs	r0, #0
 800fe78:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 800fe7a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 800fe7e:	2000      	movs	r0, #0
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop

0800fe84 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fe84:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800fe88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fe8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fe90:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800fe94:	b913      	cbnz	r3, 800fe9c <USBH_LL_GetToggle+0x18>
  {
    toggle = pHandle->hc[pipe].toggle_in;
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fe96:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 800fe9a:	4770      	bx	lr
    toggle = pHandle->hc[pipe].toggle_in;
 800fe9c:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop

0800fea4 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800fea4:	f7f5 bbb2 	b.w	800560c <HAL_Delay>

0800fea8 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fea8:	fab0 f280 	clz	r2, r0
 800feac:	0952      	lsrs	r2, r2, #5
 800feae:	2101      	movs	r1, #1
 800feb0:	4801      	ldr	r0, [pc, #4]	; (800feb8 <MX_DriverVbusFS+0x10>)
 800feb2:	f7f6 ba2b 	b.w	800630c <HAL_GPIO_WritePin>
 800feb6:	bf00      	nop
 800feb8:	40020800 	.word	0x40020800

0800febc <__errno>:
 800febc:	4b01      	ldr	r3, [pc, #4]	; (800fec4 <__errno+0x8>)
 800febe:	6818      	ldr	r0, [r3, #0]
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	20000094 	.word	0x20000094

0800fec8 <__libc_init_array>:
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	4e0d      	ldr	r6, [pc, #52]	; (800ff00 <__libc_init_array+0x38>)
 800fecc:	4c0d      	ldr	r4, [pc, #52]	; (800ff04 <__libc_init_array+0x3c>)
 800fece:	1ba4      	subs	r4, r4, r6
 800fed0:	10a4      	asrs	r4, r4, #2
 800fed2:	2500      	movs	r5, #0
 800fed4:	42a5      	cmp	r5, r4
 800fed6:	d109      	bne.n	800feec <__libc_init_array+0x24>
 800fed8:	4e0b      	ldr	r6, [pc, #44]	; (800ff08 <__libc_init_array+0x40>)
 800feda:	4c0c      	ldr	r4, [pc, #48]	; (800ff0c <__libc_init_array+0x44>)
 800fedc:	f000 fc86 	bl	80107ec <_init>
 800fee0:	1ba4      	subs	r4, r4, r6
 800fee2:	10a4      	asrs	r4, r4, #2
 800fee4:	2500      	movs	r5, #0
 800fee6:	42a5      	cmp	r5, r4
 800fee8:	d105      	bne.n	800fef6 <__libc_init_array+0x2e>
 800feea:	bd70      	pop	{r4, r5, r6, pc}
 800feec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fef0:	4798      	blx	r3
 800fef2:	3501      	adds	r5, #1
 800fef4:	e7ee      	b.n	800fed4 <__libc_init_array+0xc>
 800fef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fefa:	4798      	blx	r3
 800fefc:	3501      	adds	r5, #1
 800fefe:	e7f2      	b.n	800fee6 <__libc_init_array+0x1e>
 800ff00:	08012dc0 	.word	0x08012dc0
 800ff04:	08012dc0 	.word	0x08012dc0
 800ff08:	08012dc0 	.word	0x08012dc0
 800ff0c:	08012dc4 	.word	0x08012dc4

0800ff10 <malloc>:
 800ff10:	4b02      	ldr	r3, [pc, #8]	; (800ff1c <malloc+0xc>)
 800ff12:	4601      	mov	r1, r0
 800ff14:	6818      	ldr	r0, [r3, #0]
 800ff16:	f000 b895 	b.w	8010044 <_malloc_r>
 800ff1a:	bf00      	nop
 800ff1c:	20000094 	.word	0x20000094

0800ff20 <free>:
 800ff20:	4b02      	ldr	r3, [pc, #8]	; (800ff2c <free+0xc>)
 800ff22:	4601      	mov	r1, r0
 800ff24:	6818      	ldr	r0, [r3, #0]
 800ff26:	f000 b83f 	b.w	800ffa8 <_free_r>
 800ff2a:	bf00      	nop
 800ff2c:	20000094 	.word	0x20000094

0800ff30 <memcmp>:
 800ff30:	b530      	push	{r4, r5, lr}
 800ff32:	2400      	movs	r4, #0
 800ff34:	42a2      	cmp	r2, r4
 800ff36:	d101      	bne.n	800ff3c <memcmp+0xc>
 800ff38:	2000      	movs	r0, #0
 800ff3a:	e007      	b.n	800ff4c <memcmp+0x1c>
 800ff3c:	5d03      	ldrb	r3, [r0, r4]
 800ff3e:	3401      	adds	r4, #1
 800ff40:	190d      	adds	r5, r1, r4
 800ff42:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ff46:	42ab      	cmp	r3, r5
 800ff48:	d0f4      	beq.n	800ff34 <memcmp+0x4>
 800ff4a:	1b58      	subs	r0, r3, r5
 800ff4c:	bd30      	pop	{r4, r5, pc}

0800ff4e <memcpy>:
 800ff4e:	b510      	push	{r4, lr}
 800ff50:	1e43      	subs	r3, r0, #1
 800ff52:	440a      	add	r2, r1
 800ff54:	4291      	cmp	r1, r2
 800ff56:	d100      	bne.n	800ff5a <memcpy+0xc>
 800ff58:	bd10      	pop	{r4, pc}
 800ff5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff62:	e7f7      	b.n	800ff54 <memcpy+0x6>

0800ff64 <memmove>:
 800ff64:	4288      	cmp	r0, r1
 800ff66:	b510      	push	{r4, lr}
 800ff68:	eb01 0302 	add.w	r3, r1, r2
 800ff6c:	d807      	bhi.n	800ff7e <memmove+0x1a>
 800ff6e:	1e42      	subs	r2, r0, #1
 800ff70:	4299      	cmp	r1, r3
 800ff72:	d00a      	beq.n	800ff8a <memmove+0x26>
 800ff74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff78:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ff7c:	e7f8      	b.n	800ff70 <memmove+0xc>
 800ff7e:	4283      	cmp	r3, r0
 800ff80:	d9f5      	bls.n	800ff6e <memmove+0xa>
 800ff82:	1881      	adds	r1, r0, r2
 800ff84:	1ad2      	subs	r2, r2, r3
 800ff86:	42d3      	cmn	r3, r2
 800ff88:	d100      	bne.n	800ff8c <memmove+0x28>
 800ff8a:	bd10      	pop	{r4, pc}
 800ff8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ff94:	e7f7      	b.n	800ff86 <memmove+0x22>

0800ff96 <memset>:
 800ff96:	4402      	add	r2, r0
 800ff98:	4603      	mov	r3, r0
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d100      	bne.n	800ffa0 <memset+0xa>
 800ff9e:	4770      	bx	lr
 800ffa0:	f803 1b01 	strb.w	r1, [r3], #1
 800ffa4:	e7f9      	b.n	800ff9a <memset+0x4>
	...

0800ffa8 <_free_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4605      	mov	r5, r0
 800ffac:	2900      	cmp	r1, #0
 800ffae:	d045      	beq.n	801003c <_free_r+0x94>
 800ffb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffb4:	1f0c      	subs	r4, r1, #4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	bfb8      	it	lt
 800ffba:	18e4      	addlt	r4, r4, r3
 800ffbc:	f000 f8fd 	bl	80101ba <__malloc_lock>
 800ffc0:	4a1f      	ldr	r2, [pc, #124]	; (8010040 <_free_r+0x98>)
 800ffc2:	6813      	ldr	r3, [r2, #0]
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	b933      	cbnz	r3, 800ffd6 <_free_r+0x2e>
 800ffc8:	6063      	str	r3, [r4, #4]
 800ffca:	6014      	str	r4, [r2, #0]
 800ffcc:	4628      	mov	r0, r5
 800ffce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffd2:	f000 b8f3 	b.w	80101bc <__malloc_unlock>
 800ffd6:	42a3      	cmp	r3, r4
 800ffd8:	d90c      	bls.n	800fff4 <_free_r+0x4c>
 800ffda:	6821      	ldr	r1, [r4, #0]
 800ffdc:	1862      	adds	r2, r4, r1
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	bf04      	itt	eq
 800ffe2:	681a      	ldreq	r2, [r3, #0]
 800ffe4:	685b      	ldreq	r3, [r3, #4]
 800ffe6:	6063      	str	r3, [r4, #4]
 800ffe8:	bf04      	itt	eq
 800ffea:	1852      	addeq	r2, r2, r1
 800ffec:	6022      	streq	r2, [r4, #0]
 800ffee:	6004      	str	r4, [r0, #0]
 800fff0:	e7ec      	b.n	800ffcc <_free_r+0x24>
 800fff2:	4613      	mov	r3, r2
 800fff4:	685a      	ldr	r2, [r3, #4]
 800fff6:	b10a      	cbz	r2, 800fffc <_free_r+0x54>
 800fff8:	42a2      	cmp	r2, r4
 800fffa:	d9fa      	bls.n	800fff2 <_free_r+0x4a>
 800fffc:	6819      	ldr	r1, [r3, #0]
 800fffe:	1858      	adds	r0, r3, r1
 8010000:	42a0      	cmp	r0, r4
 8010002:	d10b      	bne.n	801001c <_free_r+0x74>
 8010004:	6820      	ldr	r0, [r4, #0]
 8010006:	4401      	add	r1, r0
 8010008:	1858      	adds	r0, r3, r1
 801000a:	4282      	cmp	r2, r0
 801000c:	6019      	str	r1, [r3, #0]
 801000e:	d1dd      	bne.n	800ffcc <_free_r+0x24>
 8010010:	6810      	ldr	r0, [r2, #0]
 8010012:	6852      	ldr	r2, [r2, #4]
 8010014:	605a      	str	r2, [r3, #4]
 8010016:	4401      	add	r1, r0
 8010018:	6019      	str	r1, [r3, #0]
 801001a:	e7d7      	b.n	800ffcc <_free_r+0x24>
 801001c:	d902      	bls.n	8010024 <_free_r+0x7c>
 801001e:	230c      	movs	r3, #12
 8010020:	602b      	str	r3, [r5, #0]
 8010022:	e7d3      	b.n	800ffcc <_free_r+0x24>
 8010024:	6820      	ldr	r0, [r4, #0]
 8010026:	1821      	adds	r1, r4, r0
 8010028:	428a      	cmp	r2, r1
 801002a:	bf04      	itt	eq
 801002c:	6811      	ldreq	r1, [r2, #0]
 801002e:	6852      	ldreq	r2, [r2, #4]
 8010030:	6062      	str	r2, [r4, #4]
 8010032:	bf04      	itt	eq
 8010034:	1809      	addeq	r1, r1, r0
 8010036:	6021      	streq	r1, [r4, #0]
 8010038:	605c      	str	r4, [r3, #4]
 801003a:	e7c7      	b.n	800ffcc <_free_r+0x24>
 801003c:	bd38      	pop	{r3, r4, r5, pc}
 801003e:	bf00      	nop
 8010040:	2000d5d0 	.word	0x2000d5d0

08010044 <_malloc_r>:
 8010044:	b570      	push	{r4, r5, r6, lr}
 8010046:	1ccd      	adds	r5, r1, #3
 8010048:	f025 0503 	bic.w	r5, r5, #3
 801004c:	3508      	adds	r5, #8
 801004e:	2d0c      	cmp	r5, #12
 8010050:	bf38      	it	cc
 8010052:	250c      	movcc	r5, #12
 8010054:	2d00      	cmp	r5, #0
 8010056:	4606      	mov	r6, r0
 8010058:	db01      	blt.n	801005e <_malloc_r+0x1a>
 801005a:	42a9      	cmp	r1, r5
 801005c:	d903      	bls.n	8010066 <_malloc_r+0x22>
 801005e:	230c      	movs	r3, #12
 8010060:	6033      	str	r3, [r6, #0]
 8010062:	2000      	movs	r0, #0
 8010064:	bd70      	pop	{r4, r5, r6, pc}
 8010066:	f000 f8a8 	bl	80101ba <__malloc_lock>
 801006a:	4a21      	ldr	r2, [pc, #132]	; (80100f0 <_malloc_r+0xac>)
 801006c:	6814      	ldr	r4, [r2, #0]
 801006e:	4621      	mov	r1, r4
 8010070:	b991      	cbnz	r1, 8010098 <_malloc_r+0x54>
 8010072:	4c20      	ldr	r4, [pc, #128]	; (80100f4 <_malloc_r+0xb0>)
 8010074:	6823      	ldr	r3, [r4, #0]
 8010076:	b91b      	cbnz	r3, 8010080 <_malloc_r+0x3c>
 8010078:	4630      	mov	r0, r6
 801007a:	f000 f845 	bl	8010108 <_sbrk_r>
 801007e:	6020      	str	r0, [r4, #0]
 8010080:	4629      	mov	r1, r5
 8010082:	4630      	mov	r0, r6
 8010084:	f000 f840 	bl	8010108 <_sbrk_r>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d124      	bne.n	80100d6 <_malloc_r+0x92>
 801008c:	230c      	movs	r3, #12
 801008e:	6033      	str	r3, [r6, #0]
 8010090:	4630      	mov	r0, r6
 8010092:	f000 f893 	bl	80101bc <__malloc_unlock>
 8010096:	e7e4      	b.n	8010062 <_malloc_r+0x1e>
 8010098:	680b      	ldr	r3, [r1, #0]
 801009a:	1b5b      	subs	r3, r3, r5
 801009c:	d418      	bmi.n	80100d0 <_malloc_r+0x8c>
 801009e:	2b0b      	cmp	r3, #11
 80100a0:	d90f      	bls.n	80100c2 <_malloc_r+0x7e>
 80100a2:	600b      	str	r3, [r1, #0]
 80100a4:	50cd      	str	r5, [r1, r3]
 80100a6:	18cc      	adds	r4, r1, r3
 80100a8:	4630      	mov	r0, r6
 80100aa:	f000 f887 	bl	80101bc <__malloc_unlock>
 80100ae:	f104 000b 	add.w	r0, r4, #11
 80100b2:	1d23      	adds	r3, r4, #4
 80100b4:	f020 0007 	bic.w	r0, r0, #7
 80100b8:	1ac3      	subs	r3, r0, r3
 80100ba:	d0d3      	beq.n	8010064 <_malloc_r+0x20>
 80100bc:	425a      	negs	r2, r3
 80100be:	50e2      	str	r2, [r4, r3]
 80100c0:	e7d0      	b.n	8010064 <_malloc_r+0x20>
 80100c2:	428c      	cmp	r4, r1
 80100c4:	684b      	ldr	r3, [r1, #4]
 80100c6:	bf16      	itet	ne
 80100c8:	6063      	strne	r3, [r4, #4]
 80100ca:	6013      	streq	r3, [r2, #0]
 80100cc:	460c      	movne	r4, r1
 80100ce:	e7eb      	b.n	80100a8 <_malloc_r+0x64>
 80100d0:	460c      	mov	r4, r1
 80100d2:	6849      	ldr	r1, [r1, #4]
 80100d4:	e7cc      	b.n	8010070 <_malloc_r+0x2c>
 80100d6:	1cc4      	adds	r4, r0, #3
 80100d8:	f024 0403 	bic.w	r4, r4, #3
 80100dc:	42a0      	cmp	r0, r4
 80100de:	d005      	beq.n	80100ec <_malloc_r+0xa8>
 80100e0:	1a21      	subs	r1, r4, r0
 80100e2:	4630      	mov	r0, r6
 80100e4:	f000 f810 	bl	8010108 <_sbrk_r>
 80100e8:	3001      	adds	r0, #1
 80100ea:	d0cf      	beq.n	801008c <_malloc_r+0x48>
 80100ec:	6025      	str	r5, [r4, #0]
 80100ee:	e7db      	b.n	80100a8 <_malloc_r+0x64>
 80100f0:	2000d5d0 	.word	0x2000d5d0
 80100f4:	2000d5d4 	.word	0x2000d5d4

080100f8 <realloc>:
 80100f8:	4b02      	ldr	r3, [pc, #8]	; (8010104 <realloc+0xc>)
 80100fa:	460a      	mov	r2, r1
 80100fc:	4601      	mov	r1, r0
 80100fe:	6818      	ldr	r0, [r3, #0]
 8010100:	f000 b85d 	b.w	80101be <_realloc_r>
 8010104:	20000094 	.word	0x20000094

08010108 <_sbrk_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4c06      	ldr	r4, [pc, #24]	; (8010124 <_sbrk_r+0x1c>)
 801010c:	2300      	movs	r3, #0
 801010e:	4605      	mov	r5, r0
 8010110:	4608      	mov	r0, r1
 8010112:	6023      	str	r3, [r4, #0]
 8010114:	f7f4 fa22 	bl	800455c <_sbrk>
 8010118:	1c43      	adds	r3, r0, #1
 801011a:	d102      	bne.n	8010122 <_sbrk_r+0x1a>
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	b103      	cbz	r3, 8010122 <_sbrk_r+0x1a>
 8010120:	602b      	str	r3, [r5, #0]
 8010122:	bd38      	pop	{r3, r4, r5, pc}
 8010124:	2000ff9c 	.word	0x2000ff9c

08010128 <siprintf>:
 8010128:	b40e      	push	{r1, r2, r3}
 801012a:	b500      	push	{lr}
 801012c:	b09c      	sub	sp, #112	; 0x70
 801012e:	ab1d      	add	r3, sp, #116	; 0x74
 8010130:	9002      	str	r0, [sp, #8]
 8010132:	9006      	str	r0, [sp, #24]
 8010134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010138:	4809      	ldr	r0, [pc, #36]	; (8010160 <siprintf+0x38>)
 801013a:	9107      	str	r1, [sp, #28]
 801013c:	9104      	str	r1, [sp, #16]
 801013e:	4909      	ldr	r1, [pc, #36]	; (8010164 <siprintf+0x3c>)
 8010140:	f853 2b04 	ldr.w	r2, [r3], #4
 8010144:	9105      	str	r1, [sp, #20]
 8010146:	6800      	ldr	r0, [r0, #0]
 8010148:	9301      	str	r3, [sp, #4]
 801014a:	a902      	add	r1, sp, #8
 801014c:	f000 f8b8 	bl	80102c0 <_svfiprintf_r>
 8010150:	9b02      	ldr	r3, [sp, #8]
 8010152:	2200      	movs	r2, #0
 8010154:	701a      	strb	r2, [r3, #0]
 8010156:	b01c      	add	sp, #112	; 0x70
 8010158:	f85d eb04 	ldr.w	lr, [sp], #4
 801015c:	b003      	add	sp, #12
 801015e:	4770      	bx	lr
 8010160:	20000094 	.word	0x20000094
 8010164:	ffff0208 	.word	0xffff0208

08010168 <strncpy>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	3901      	subs	r1, #1
 801016c:	4604      	mov	r4, r0
 801016e:	b902      	cbnz	r2, 8010172 <strncpy+0xa>
 8010170:	bd70      	pop	{r4, r5, r6, pc}
 8010172:	4623      	mov	r3, r4
 8010174:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8010178:	f803 5b01 	strb.w	r5, [r3], #1
 801017c:	1e56      	subs	r6, r2, #1
 801017e:	b92d      	cbnz	r5, 801018c <strncpy+0x24>
 8010180:	4414      	add	r4, r2
 8010182:	42a3      	cmp	r3, r4
 8010184:	d0f4      	beq.n	8010170 <strncpy+0x8>
 8010186:	f803 5b01 	strb.w	r5, [r3], #1
 801018a:	e7fa      	b.n	8010182 <strncpy+0x1a>
 801018c:	461c      	mov	r4, r3
 801018e:	4632      	mov	r2, r6
 8010190:	e7ed      	b.n	801016e <strncpy+0x6>

08010192 <strrchr>:
 8010192:	b538      	push	{r3, r4, r5, lr}
 8010194:	4603      	mov	r3, r0
 8010196:	460d      	mov	r5, r1
 8010198:	b969      	cbnz	r1, 80101b6 <strrchr+0x24>
 801019a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801019e:	f000 bb0f 	b.w	80107c0 <strchr>
 80101a2:	1c43      	adds	r3, r0, #1
 80101a4:	4604      	mov	r4, r0
 80101a6:	4629      	mov	r1, r5
 80101a8:	4618      	mov	r0, r3
 80101aa:	f000 fb09 	bl	80107c0 <strchr>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d1f7      	bne.n	80101a2 <strrchr+0x10>
 80101b2:	4620      	mov	r0, r4
 80101b4:	bd38      	pop	{r3, r4, r5, pc}
 80101b6:	2400      	movs	r4, #0
 80101b8:	e7f5      	b.n	80101a6 <strrchr+0x14>

080101ba <__malloc_lock>:
 80101ba:	4770      	bx	lr

080101bc <__malloc_unlock>:
 80101bc:	4770      	bx	lr

080101be <_realloc_r>:
 80101be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c0:	4607      	mov	r7, r0
 80101c2:	4614      	mov	r4, r2
 80101c4:	460e      	mov	r6, r1
 80101c6:	b921      	cbnz	r1, 80101d2 <_realloc_r+0x14>
 80101c8:	4611      	mov	r1, r2
 80101ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80101ce:	f7ff bf39 	b.w	8010044 <_malloc_r>
 80101d2:	b922      	cbnz	r2, 80101de <_realloc_r+0x20>
 80101d4:	f7ff fee8 	bl	800ffa8 <_free_r>
 80101d8:	4625      	mov	r5, r4
 80101da:	4628      	mov	r0, r5
 80101dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101de:	f000 fafc 	bl	80107da <_malloc_usable_size_r>
 80101e2:	42a0      	cmp	r0, r4
 80101e4:	d20f      	bcs.n	8010206 <_realloc_r+0x48>
 80101e6:	4621      	mov	r1, r4
 80101e8:	4638      	mov	r0, r7
 80101ea:	f7ff ff2b 	bl	8010044 <_malloc_r>
 80101ee:	4605      	mov	r5, r0
 80101f0:	2800      	cmp	r0, #0
 80101f2:	d0f2      	beq.n	80101da <_realloc_r+0x1c>
 80101f4:	4631      	mov	r1, r6
 80101f6:	4622      	mov	r2, r4
 80101f8:	f7ff fea9 	bl	800ff4e <memcpy>
 80101fc:	4631      	mov	r1, r6
 80101fe:	4638      	mov	r0, r7
 8010200:	f7ff fed2 	bl	800ffa8 <_free_r>
 8010204:	e7e9      	b.n	80101da <_realloc_r+0x1c>
 8010206:	4635      	mov	r5, r6
 8010208:	e7e7      	b.n	80101da <_realloc_r+0x1c>

0801020a <__ssputs_r>:
 801020a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801020e:	688e      	ldr	r6, [r1, #8]
 8010210:	429e      	cmp	r6, r3
 8010212:	4682      	mov	sl, r0
 8010214:	460c      	mov	r4, r1
 8010216:	4690      	mov	r8, r2
 8010218:	4699      	mov	r9, r3
 801021a:	d837      	bhi.n	801028c <__ssputs_r+0x82>
 801021c:	898a      	ldrh	r2, [r1, #12]
 801021e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010222:	d031      	beq.n	8010288 <__ssputs_r+0x7e>
 8010224:	6825      	ldr	r5, [r4, #0]
 8010226:	6909      	ldr	r1, [r1, #16]
 8010228:	1a6f      	subs	r7, r5, r1
 801022a:	6965      	ldr	r5, [r4, #20]
 801022c:	2302      	movs	r3, #2
 801022e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010232:	fb95 f5f3 	sdiv	r5, r5, r3
 8010236:	f109 0301 	add.w	r3, r9, #1
 801023a:	443b      	add	r3, r7
 801023c:	429d      	cmp	r5, r3
 801023e:	bf38      	it	cc
 8010240:	461d      	movcc	r5, r3
 8010242:	0553      	lsls	r3, r2, #21
 8010244:	d530      	bpl.n	80102a8 <__ssputs_r+0x9e>
 8010246:	4629      	mov	r1, r5
 8010248:	f7ff fefc 	bl	8010044 <_malloc_r>
 801024c:	4606      	mov	r6, r0
 801024e:	b950      	cbnz	r0, 8010266 <__ssputs_r+0x5c>
 8010250:	230c      	movs	r3, #12
 8010252:	f8ca 3000 	str.w	r3, [sl]
 8010256:	89a3      	ldrh	r3, [r4, #12]
 8010258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801025c:	81a3      	strh	r3, [r4, #12]
 801025e:	f04f 30ff 	mov.w	r0, #4294967295
 8010262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010266:	463a      	mov	r2, r7
 8010268:	6921      	ldr	r1, [r4, #16]
 801026a:	f7ff fe70 	bl	800ff4e <memcpy>
 801026e:	89a3      	ldrh	r3, [r4, #12]
 8010270:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010278:	81a3      	strh	r3, [r4, #12]
 801027a:	6126      	str	r6, [r4, #16]
 801027c:	6165      	str	r5, [r4, #20]
 801027e:	443e      	add	r6, r7
 8010280:	1bed      	subs	r5, r5, r7
 8010282:	6026      	str	r6, [r4, #0]
 8010284:	60a5      	str	r5, [r4, #8]
 8010286:	464e      	mov	r6, r9
 8010288:	454e      	cmp	r6, r9
 801028a:	d900      	bls.n	801028e <__ssputs_r+0x84>
 801028c:	464e      	mov	r6, r9
 801028e:	4632      	mov	r2, r6
 8010290:	4641      	mov	r1, r8
 8010292:	6820      	ldr	r0, [r4, #0]
 8010294:	f7ff fe66 	bl	800ff64 <memmove>
 8010298:	68a3      	ldr	r3, [r4, #8]
 801029a:	1b9b      	subs	r3, r3, r6
 801029c:	60a3      	str	r3, [r4, #8]
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	441e      	add	r6, r3
 80102a2:	6026      	str	r6, [r4, #0]
 80102a4:	2000      	movs	r0, #0
 80102a6:	e7dc      	b.n	8010262 <__ssputs_r+0x58>
 80102a8:	462a      	mov	r2, r5
 80102aa:	f7ff ff88 	bl	80101be <_realloc_r>
 80102ae:	4606      	mov	r6, r0
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d1e2      	bne.n	801027a <__ssputs_r+0x70>
 80102b4:	6921      	ldr	r1, [r4, #16]
 80102b6:	4650      	mov	r0, sl
 80102b8:	f7ff fe76 	bl	800ffa8 <_free_r>
 80102bc:	e7c8      	b.n	8010250 <__ssputs_r+0x46>
	...

080102c0 <_svfiprintf_r>:
 80102c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	461d      	mov	r5, r3
 80102c6:	898b      	ldrh	r3, [r1, #12]
 80102c8:	061f      	lsls	r7, r3, #24
 80102ca:	b09d      	sub	sp, #116	; 0x74
 80102cc:	4680      	mov	r8, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	4616      	mov	r6, r2
 80102d2:	d50f      	bpl.n	80102f4 <_svfiprintf_r+0x34>
 80102d4:	690b      	ldr	r3, [r1, #16]
 80102d6:	b96b      	cbnz	r3, 80102f4 <_svfiprintf_r+0x34>
 80102d8:	2140      	movs	r1, #64	; 0x40
 80102da:	f7ff feb3 	bl	8010044 <_malloc_r>
 80102de:	6020      	str	r0, [r4, #0]
 80102e0:	6120      	str	r0, [r4, #16]
 80102e2:	b928      	cbnz	r0, 80102f0 <_svfiprintf_r+0x30>
 80102e4:	230c      	movs	r3, #12
 80102e6:	f8c8 3000 	str.w	r3, [r8]
 80102ea:	f04f 30ff 	mov.w	r0, #4294967295
 80102ee:	e0c8      	b.n	8010482 <_svfiprintf_r+0x1c2>
 80102f0:	2340      	movs	r3, #64	; 0x40
 80102f2:	6163      	str	r3, [r4, #20]
 80102f4:	2300      	movs	r3, #0
 80102f6:	9309      	str	r3, [sp, #36]	; 0x24
 80102f8:	2320      	movs	r3, #32
 80102fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102fe:	2330      	movs	r3, #48	; 0x30
 8010300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010304:	9503      	str	r5, [sp, #12]
 8010306:	f04f 0b01 	mov.w	fp, #1
 801030a:	4637      	mov	r7, r6
 801030c:	463d      	mov	r5, r7
 801030e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010312:	b10b      	cbz	r3, 8010318 <_svfiprintf_r+0x58>
 8010314:	2b25      	cmp	r3, #37	; 0x25
 8010316:	d13e      	bne.n	8010396 <_svfiprintf_r+0xd6>
 8010318:	ebb7 0a06 	subs.w	sl, r7, r6
 801031c:	d00b      	beq.n	8010336 <_svfiprintf_r+0x76>
 801031e:	4653      	mov	r3, sl
 8010320:	4632      	mov	r2, r6
 8010322:	4621      	mov	r1, r4
 8010324:	4640      	mov	r0, r8
 8010326:	f7ff ff70 	bl	801020a <__ssputs_r>
 801032a:	3001      	adds	r0, #1
 801032c:	f000 80a4 	beq.w	8010478 <_svfiprintf_r+0x1b8>
 8010330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010332:	4453      	add	r3, sl
 8010334:	9309      	str	r3, [sp, #36]	; 0x24
 8010336:	783b      	ldrb	r3, [r7, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 809d 	beq.w	8010478 <_svfiprintf_r+0x1b8>
 801033e:	2300      	movs	r3, #0
 8010340:	f04f 32ff 	mov.w	r2, #4294967295
 8010344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010348:	9304      	str	r3, [sp, #16]
 801034a:	9307      	str	r3, [sp, #28]
 801034c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010350:	931a      	str	r3, [sp, #104]	; 0x68
 8010352:	462f      	mov	r7, r5
 8010354:	2205      	movs	r2, #5
 8010356:	f817 1b01 	ldrb.w	r1, [r7], #1
 801035a:	4850      	ldr	r0, [pc, #320]	; (801049c <_svfiprintf_r+0x1dc>)
 801035c:	f7ef ff98 	bl	8000290 <memchr>
 8010360:	9b04      	ldr	r3, [sp, #16]
 8010362:	b9d0      	cbnz	r0, 801039a <_svfiprintf_r+0xda>
 8010364:	06d9      	lsls	r1, r3, #27
 8010366:	bf44      	itt	mi
 8010368:	2220      	movmi	r2, #32
 801036a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801036e:	071a      	lsls	r2, r3, #28
 8010370:	bf44      	itt	mi
 8010372:	222b      	movmi	r2, #43	; 0x2b
 8010374:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010378:	782a      	ldrb	r2, [r5, #0]
 801037a:	2a2a      	cmp	r2, #42	; 0x2a
 801037c:	d015      	beq.n	80103aa <_svfiprintf_r+0xea>
 801037e:	9a07      	ldr	r2, [sp, #28]
 8010380:	462f      	mov	r7, r5
 8010382:	2000      	movs	r0, #0
 8010384:	250a      	movs	r5, #10
 8010386:	4639      	mov	r1, r7
 8010388:	f811 3b01 	ldrb.w	r3, [r1], #1
 801038c:	3b30      	subs	r3, #48	; 0x30
 801038e:	2b09      	cmp	r3, #9
 8010390:	d94d      	bls.n	801042e <_svfiprintf_r+0x16e>
 8010392:	b1b8      	cbz	r0, 80103c4 <_svfiprintf_r+0x104>
 8010394:	e00f      	b.n	80103b6 <_svfiprintf_r+0xf6>
 8010396:	462f      	mov	r7, r5
 8010398:	e7b8      	b.n	801030c <_svfiprintf_r+0x4c>
 801039a:	4a40      	ldr	r2, [pc, #256]	; (801049c <_svfiprintf_r+0x1dc>)
 801039c:	1a80      	subs	r0, r0, r2
 801039e:	fa0b f000 	lsl.w	r0, fp, r0
 80103a2:	4318      	orrs	r0, r3
 80103a4:	9004      	str	r0, [sp, #16]
 80103a6:	463d      	mov	r5, r7
 80103a8:	e7d3      	b.n	8010352 <_svfiprintf_r+0x92>
 80103aa:	9a03      	ldr	r2, [sp, #12]
 80103ac:	1d11      	adds	r1, r2, #4
 80103ae:	6812      	ldr	r2, [r2, #0]
 80103b0:	9103      	str	r1, [sp, #12]
 80103b2:	2a00      	cmp	r2, #0
 80103b4:	db01      	blt.n	80103ba <_svfiprintf_r+0xfa>
 80103b6:	9207      	str	r2, [sp, #28]
 80103b8:	e004      	b.n	80103c4 <_svfiprintf_r+0x104>
 80103ba:	4252      	negs	r2, r2
 80103bc:	f043 0302 	orr.w	r3, r3, #2
 80103c0:	9207      	str	r2, [sp, #28]
 80103c2:	9304      	str	r3, [sp, #16]
 80103c4:	783b      	ldrb	r3, [r7, #0]
 80103c6:	2b2e      	cmp	r3, #46	; 0x2e
 80103c8:	d10c      	bne.n	80103e4 <_svfiprintf_r+0x124>
 80103ca:	787b      	ldrb	r3, [r7, #1]
 80103cc:	2b2a      	cmp	r3, #42	; 0x2a
 80103ce:	d133      	bne.n	8010438 <_svfiprintf_r+0x178>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	9203      	str	r2, [sp, #12]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bfb8      	it	lt
 80103dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80103e0:	3702      	adds	r7, #2
 80103e2:	9305      	str	r3, [sp, #20]
 80103e4:	4d2e      	ldr	r5, [pc, #184]	; (80104a0 <_svfiprintf_r+0x1e0>)
 80103e6:	7839      	ldrb	r1, [r7, #0]
 80103e8:	2203      	movs	r2, #3
 80103ea:	4628      	mov	r0, r5
 80103ec:	f7ef ff50 	bl	8000290 <memchr>
 80103f0:	b138      	cbz	r0, 8010402 <_svfiprintf_r+0x142>
 80103f2:	2340      	movs	r3, #64	; 0x40
 80103f4:	1b40      	subs	r0, r0, r5
 80103f6:	fa03 f000 	lsl.w	r0, r3, r0
 80103fa:	9b04      	ldr	r3, [sp, #16]
 80103fc:	4303      	orrs	r3, r0
 80103fe:	3701      	adds	r7, #1
 8010400:	9304      	str	r3, [sp, #16]
 8010402:	7839      	ldrb	r1, [r7, #0]
 8010404:	4827      	ldr	r0, [pc, #156]	; (80104a4 <_svfiprintf_r+0x1e4>)
 8010406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801040a:	2206      	movs	r2, #6
 801040c:	1c7e      	adds	r6, r7, #1
 801040e:	f7ef ff3f 	bl	8000290 <memchr>
 8010412:	2800      	cmp	r0, #0
 8010414:	d038      	beq.n	8010488 <_svfiprintf_r+0x1c8>
 8010416:	4b24      	ldr	r3, [pc, #144]	; (80104a8 <_svfiprintf_r+0x1e8>)
 8010418:	bb13      	cbnz	r3, 8010460 <_svfiprintf_r+0x1a0>
 801041a:	9b03      	ldr	r3, [sp, #12]
 801041c:	3307      	adds	r3, #7
 801041e:	f023 0307 	bic.w	r3, r3, #7
 8010422:	3308      	adds	r3, #8
 8010424:	9303      	str	r3, [sp, #12]
 8010426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010428:	444b      	add	r3, r9
 801042a:	9309      	str	r3, [sp, #36]	; 0x24
 801042c:	e76d      	b.n	801030a <_svfiprintf_r+0x4a>
 801042e:	fb05 3202 	mla	r2, r5, r2, r3
 8010432:	2001      	movs	r0, #1
 8010434:	460f      	mov	r7, r1
 8010436:	e7a6      	b.n	8010386 <_svfiprintf_r+0xc6>
 8010438:	2300      	movs	r3, #0
 801043a:	3701      	adds	r7, #1
 801043c:	9305      	str	r3, [sp, #20]
 801043e:	4619      	mov	r1, r3
 8010440:	250a      	movs	r5, #10
 8010442:	4638      	mov	r0, r7
 8010444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010448:	3a30      	subs	r2, #48	; 0x30
 801044a:	2a09      	cmp	r2, #9
 801044c:	d903      	bls.n	8010456 <_svfiprintf_r+0x196>
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0c8      	beq.n	80103e4 <_svfiprintf_r+0x124>
 8010452:	9105      	str	r1, [sp, #20]
 8010454:	e7c6      	b.n	80103e4 <_svfiprintf_r+0x124>
 8010456:	fb05 2101 	mla	r1, r5, r1, r2
 801045a:	2301      	movs	r3, #1
 801045c:	4607      	mov	r7, r0
 801045e:	e7f0      	b.n	8010442 <_svfiprintf_r+0x182>
 8010460:	ab03      	add	r3, sp, #12
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	4622      	mov	r2, r4
 8010466:	4b11      	ldr	r3, [pc, #68]	; (80104ac <_svfiprintf_r+0x1ec>)
 8010468:	a904      	add	r1, sp, #16
 801046a:	4640      	mov	r0, r8
 801046c:	f3af 8000 	nop.w
 8010470:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010474:	4681      	mov	r9, r0
 8010476:	d1d6      	bne.n	8010426 <_svfiprintf_r+0x166>
 8010478:	89a3      	ldrh	r3, [r4, #12]
 801047a:	065b      	lsls	r3, r3, #25
 801047c:	f53f af35 	bmi.w	80102ea <_svfiprintf_r+0x2a>
 8010480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010482:	b01d      	add	sp, #116	; 0x74
 8010484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010488:	ab03      	add	r3, sp, #12
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	4622      	mov	r2, r4
 801048e:	4b07      	ldr	r3, [pc, #28]	; (80104ac <_svfiprintf_r+0x1ec>)
 8010490:	a904      	add	r1, sp, #16
 8010492:	4640      	mov	r0, r8
 8010494:	f000 f882 	bl	801059c <_printf_i>
 8010498:	e7ea      	b.n	8010470 <_svfiprintf_r+0x1b0>
 801049a:	bf00      	nop
 801049c:	08012d84 	.word	0x08012d84
 80104a0:	08012d8a 	.word	0x08012d8a
 80104a4:	08012d8e 	.word	0x08012d8e
 80104a8:	00000000 	.word	0x00000000
 80104ac:	0801020b 	.word	0x0801020b

080104b0 <_printf_common>:
 80104b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b4:	4691      	mov	r9, r2
 80104b6:	461f      	mov	r7, r3
 80104b8:	688a      	ldr	r2, [r1, #8]
 80104ba:	690b      	ldr	r3, [r1, #16]
 80104bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104c0:	4293      	cmp	r3, r2
 80104c2:	bfb8      	it	lt
 80104c4:	4613      	movlt	r3, r2
 80104c6:	f8c9 3000 	str.w	r3, [r9]
 80104ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104ce:	4606      	mov	r6, r0
 80104d0:	460c      	mov	r4, r1
 80104d2:	b112      	cbz	r2, 80104da <_printf_common+0x2a>
 80104d4:	3301      	adds	r3, #1
 80104d6:	f8c9 3000 	str.w	r3, [r9]
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	0699      	lsls	r1, r3, #26
 80104de:	bf42      	ittt	mi
 80104e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80104e4:	3302      	addmi	r3, #2
 80104e6:	f8c9 3000 	strmi.w	r3, [r9]
 80104ea:	6825      	ldr	r5, [r4, #0]
 80104ec:	f015 0506 	ands.w	r5, r5, #6
 80104f0:	d107      	bne.n	8010502 <_printf_common+0x52>
 80104f2:	f104 0a19 	add.w	sl, r4, #25
 80104f6:	68e3      	ldr	r3, [r4, #12]
 80104f8:	f8d9 2000 	ldr.w	r2, [r9]
 80104fc:	1a9b      	subs	r3, r3, r2
 80104fe:	42ab      	cmp	r3, r5
 8010500:	dc28      	bgt.n	8010554 <_printf_common+0xa4>
 8010502:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010506:	6822      	ldr	r2, [r4, #0]
 8010508:	3300      	adds	r3, #0
 801050a:	bf18      	it	ne
 801050c:	2301      	movne	r3, #1
 801050e:	0692      	lsls	r2, r2, #26
 8010510:	d42d      	bmi.n	801056e <_printf_common+0xbe>
 8010512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010516:	4639      	mov	r1, r7
 8010518:	4630      	mov	r0, r6
 801051a:	47c0      	blx	r8
 801051c:	3001      	adds	r0, #1
 801051e:	d020      	beq.n	8010562 <_printf_common+0xb2>
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	68e5      	ldr	r5, [r4, #12]
 8010524:	f8d9 2000 	ldr.w	r2, [r9]
 8010528:	f003 0306 	and.w	r3, r3, #6
 801052c:	2b04      	cmp	r3, #4
 801052e:	bf08      	it	eq
 8010530:	1aad      	subeq	r5, r5, r2
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	6922      	ldr	r2, [r4, #16]
 8010536:	bf0c      	ite	eq
 8010538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801053c:	2500      	movne	r5, #0
 801053e:	4293      	cmp	r3, r2
 8010540:	bfc4      	itt	gt
 8010542:	1a9b      	subgt	r3, r3, r2
 8010544:	18ed      	addgt	r5, r5, r3
 8010546:	f04f 0900 	mov.w	r9, #0
 801054a:	341a      	adds	r4, #26
 801054c:	454d      	cmp	r5, r9
 801054e:	d11a      	bne.n	8010586 <_printf_common+0xd6>
 8010550:	2000      	movs	r0, #0
 8010552:	e008      	b.n	8010566 <_printf_common+0xb6>
 8010554:	2301      	movs	r3, #1
 8010556:	4652      	mov	r2, sl
 8010558:	4639      	mov	r1, r7
 801055a:	4630      	mov	r0, r6
 801055c:	47c0      	blx	r8
 801055e:	3001      	adds	r0, #1
 8010560:	d103      	bne.n	801056a <_printf_common+0xba>
 8010562:	f04f 30ff 	mov.w	r0, #4294967295
 8010566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801056a:	3501      	adds	r5, #1
 801056c:	e7c3      	b.n	80104f6 <_printf_common+0x46>
 801056e:	18e1      	adds	r1, r4, r3
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	2030      	movs	r0, #48	; 0x30
 8010574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010578:	4422      	add	r2, r4
 801057a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801057e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010582:	3302      	adds	r3, #2
 8010584:	e7c5      	b.n	8010512 <_printf_common+0x62>
 8010586:	2301      	movs	r3, #1
 8010588:	4622      	mov	r2, r4
 801058a:	4639      	mov	r1, r7
 801058c:	4630      	mov	r0, r6
 801058e:	47c0      	blx	r8
 8010590:	3001      	adds	r0, #1
 8010592:	d0e6      	beq.n	8010562 <_printf_common+0xb2>
 8010594:	f109 0901 	add.w	r9, r9, #1
 8010598:	e7d8      	b.n	801054c <_printf_common+0x9c>
	...

0801059c <_printf_i>:
 801059c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80105a4:	460c      	mov	r4, r1
 80105a6:	7e09      	ldrb	r1, [r1, #24]
 80105a8:	b085      	sub	sp, #20
 80105aa:	296e      	cmp	r1, #110	; 0x6e
 80105ac:	4617      	mov	r7, r2
 80105ae:	4606      	mov	r6, r0
 80105b0:	4698      	mov	r8, r3
 80105b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105b4:	f000 80b3 	beq.w	801071e <_printf_i+0x182>
 80105b8:	d822      	bhi.n	8010600 <_printf_i+0x64>
 80105ba:	2963      	cmp	r1, #99	; 0x63
 80105bc:	d036      	beq.n	801062c <_printf_i+0x90>
 80105be:	d80a      	bhi.n	80105d6 <_printf_i+0x3a>
 80105c0:	2900      	cmp	r1, #0
 80105c2:	f000 80b9 	beq.w	8010738 <_printf_i+0x19c>
 80105c6:	2958      	cmp	r1, #88	; 0x58
 80105c8:	f000 8083 	beq.w	80106d2 <_printf_i+0x136>
 80105cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80105d4:	e032      	b.n	801063c <_printf_i+0xa0>
 80105d6:	2964      	cmp	r1, #100	; 0x64
 80105d8:	d001      	beq.n	80105de <_printf_i+0x42>
 80105da:	2969      	cmp	r1, #105	; 0x69
 80105dc:	d1f6      	bne.n	80105cc <_printf_i+0x30>
 80105de:	6820      	ldr	r0, [r4, #0]
 80105e0:	6813      	ldr	r3, [r2, #0]
 80105e2:	0605      	lsls	r5, r0, #24
 80105e4:	f103 0104 	add.w	r1, r3, #4
 80105e8:	d52a      	bpl.n	8010640 <_printf_i+0xa4>
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	6011      	str	r1, [r2, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	da03      	bge.n	80105fa <_printf_i+0x5e>
 80105f2:	222d      	movs	r2, #45	; 0x2d
 80105f4:	425b      	negs	r3, r3
 80105f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80105fa:	486f      	ldr	r0, [pc, #444]	; (80107b8 <_printf_i+0x21c>)
 80105fc:	220a      	movs	r2, #10
 80105fe:	e039      	b.n	8010674 <_printf_i+0xd8>
 8010600:	2973      	cmp	r1, #115	; 0x73
 8010602:	f000 809d 	beq.w	8010740 <_printf_i+0x1a4>
 8010606:	d808      	bhi.n	801061a <_printf_i+0x7e>
 8010608:	296f      	cmp	r1, #111	; 0x6f
 801060a:	d020      	beq.n	801064e <_printf_i+0xb2>
 801060c:	2970      	cmp	r1, #112	; 0x70
 801060e:	d1dd      	bne.n	80105cc <_printf_i+0x30>
 8010610:	6823      	ldr	r3, [r4, #0]
 8010612:	f043 0320 	orr.w	r3, r3, #32
 8010616:	6023      	str	r3, [r4, #0]
 8010618:	e003      	b.n	8010622 <_printf_i+0x86>
 801061a:	2975      	cmp	r1, #117	; 0x75
 801061c:	d017      	beq.n	801064e <_printf_i+0xb2>
 801061e:	2978      	cmp	r1, #120	; 0x78
 8010620:	d1d4      	bne.n	80105cc <_printf_i+0x30>
 8010622:	2378      	movs	r3, #120	; 0x78
 8010624:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010628:	4864      	ldr	r0, [pc, #400]	; (80107bc <_printf_i+0x220>)
 801062a:	e055      	b.n	80106d8 <_printf_i+0x13c>
 801062c:	6813      	ldr	r3, [r2, #0]
 801062e:	1d19      	adds	r1, r3, #4
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	6011      	str	r1, [r2, #0]
 8010634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801063c:	2301      	movs	r3, #1
 801063e:	e08c      	b.n	801075a <_printf_i+0x1be>
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	6011      	str	r1, [r2, #0]
 8010644:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010648:	bf18      	it	ne
 801064a:	b21b      	sxthne	r3, r3
 801064c:	e7cf      	b.n	80105ee <_printf_i+0x52>
 801064e:	6813      	ldr	r3, [r2, #0]
 8010650:	6825      	ldr	r5, [r4, #0]
 8010652:	1d18      	adds	r0, r3, #4
 8010654:	6010      	str	r0, [r2, #0]
 8010656:	0628      	lsls	r0, r5, #24
 8010658:	d501      	bpl.n	801065e <_printf_i+0xc2>
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	e002      	b.n	8010664 <_printf_i+0xc8>
 801065e:	0668      	lsls	r0, r5, #25
 8010660:	d5fb      	bpl.n	801065a <_printf_i+0xbe>
 8010662:	881b      	ldrh	r3, [r3, #0]
 8010664:	4854      	ldr	r0, [pc, #336]	; (80107b8 <_printf_i+0x21c>)
 8010666:	296f      	cmp	r1, #111	; 0x6f
 8010668:	bf14      	ite	ne
 801066a:	220a      	movne	r2, #10
 801066c:	2208      	moveq	r2, #8
 801066e:	2100      	movs	r1, #0
 8010670:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010674:	6865      	ldr	r5, [r4, #4]
 8010676:	60a5      	str	r5, [r4, #8]
 8010678:	2d00      	cmp	r5, #0
 801067a:	f2c0 8095 	blt.w	80107a8 <_printf_i+0x20c>
 801067e:	6821      	ldr	r1, [r4, #0]
 8010680:	f021 0104 	bic.w	r1, r1, #4
 8010684:	6021      	str	r1, [r4, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d13d      	bne.n	8010706 <_printf_i+0x16a>
 801068a:	2d00      	cmp	r5, #0
 801068c:	f040 808e 	bne.w	80107ac <_printf_i+0x210>
 8010690:	4665      	mov	r5, ip
 8010692:	2a08      	cmp	r2, #8
 8010694:	d10b      	bne.n	80106ae <_printf_i+0x112>
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	07db      	lsls	r3, r3, #31
 801069a:	d508      	bpl.n	80106ae <_printf_i+0x112>
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	6862      	ldr	r2, [r4, #4]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	bfde      	ittt	le
 80106a4:	2330      	movle	r3, #48	; 0x30
 80106a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106ae:	ebac 0305 	sub.w	r3, ip, r5
 80106b2:	6123      	str	r3, [r4, #16]
 80106b4:	f8cd 8000 	str.w	r8, [sp]
 80106b8:	463b      	mov	r3, r7
 80106ba:	aa03      	add	r2, sp, #12
 80106bc:	4621      	mov	r1, r4
 80106be:	4630      	mov	r0, r6
 80106c0:	f7ff fef6 	bl	80104b0 <_printf_common>
 80106c4:	3001      	adds	r0, #1
 80106c6:	d14d      	bne.n	8010764 <_printf_i+0x1c8>
 80106c8:	f04f 30ff 	mov.w	r0, #4294967295
 80106cc:	b005      	add	sp, #20
 80106ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106d2:	4839      	ldr	r0, [pc, #228]	; (80107b8 <_printf_i+0x21c>)
 80106d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80106d8:	6813      	ldr	r3, [r2, #0]
 80106da:	6821      	ldr	r1, [r4, #0]
 80106dc:	1d1d      	adds	r5, r3, #4
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6015      	str	r5, [r2, #0]
 80106e2:	060a      	lsls	r2, r1, #24
 80106e4:	d50b      	bpl.n	80106fe <_printf_i+0x162>
 80106e6:	07ca      	lsls	r2, r1, #31
 80106e8:	bf44      	itt	mi
 80106ea:	f041 0120 	orrmi.w	r1, r1, #32
 80106ee:	6021      	strmi	r1, [r4, #0]
 80106f0:	b91b      	cbnz	r3, 80106fa <_printf_i+0x15e>
 80106f2:	6822      	ldr	r2, [r4, #0]
 80106f4:	f022 0220 	bic.w	r2, r2, #32
 80106f8:	6022      	str	r2, [r4, #0]
 80106fa:	2210      	movs	r2, #16
 80106fc:	e7b7      	b.n	801066e <_printf_i+0xd2>
 80106fe:	064d      	lsls	r5, r1, #25
 8010700:	bf48      	it	mi
 8010702:	b29b      	uxthmi	r3, r3
 8010704:	e7ef      	b.n	80106e6 <_printf_i+0x14a>
 8010706:	4665      	mov	r5, ip
 8010708:	fbb3 f1f2 	udiv	r1, r3, r2
 801070c:	fb02 3311 	mls	r3, r2, r1, r3
 8010710:	5cc3      	ldrb	r3, [r0, r3]
 8010712:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010716:	460b      	mov	r3, r1
 8010718:	2900      	cmp	r1, #0
 801071a:	d1f5      	bne.n	8010708 <_printf_i+0x16c>
 801071c:	e7b9      	b.n	8010692 <_printf_i+0xf6>
 801071e:	6813      	ldr	r3, [r2, #0]
 8010720:	6825      	ldr	r5, [r4, #0]
 8010722:	6961      	ldr	r1, [r4, #20]
 8010724:	1d18      	adds	r0, r3, #4
 8010726:	6010      	str	r0, [r2, #0]
 8010728:	0628      	lsls	r0, r5, #24
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	d501      	bpl.n	8010732 <_printf_i+0x196>
 801072e:	6019      	str	r1, [r3, #0]
 8010730:	e002      	b.n	8010738 <_printf_i+0x19c>
 8010732:	066a      	lsls	r2, r5, #25
 8010734:	d5fb      	bpl.n	801072e <_printf_i+0x192>
 8010736:	8019      	strh	r1, [r3, #0]
 8010738:	2300      	movs	r3, #0
 801073a:	6123      	str	r3, [r4, #16]
 801073c:	4665      	mov	r5, ip
 801073e:	e7b9      	b.n	80106b4 <_printf_i+0x118>
 8010740:	6813      	ldr	r3, [r2, #0]
 8010742:	1d19      	adds	r1, r3, #4
 8010744:	6011      	str	r1, [r2, #0]
 8010746:	681d      	ldr	r5, [r3, #0]
 8010748:	6862      	ldr	r2, [r4, #4]
 801074a:	2100      	movs	r1, #0
 801074c:	4628      	mov	r0, r5
 801074e:	f7ef fd9f 	bl	8000290 <memchr>
 8010752:	b108      	cbz	r0, 8010758 <_printf_i+0x1bc>
 8010754:	1b40      	subs	r0, r0, r5
 8010756:	6060      	str	r0, [r4, #4]
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	6123      	str	r3, [r4, #16]
 801075c:	2300      	movs	r3, #0
 801075e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010762:	e7a7      	b.n	80106b4 <_printf_i+0x118>
 8010764:	6923      	ldr	r3, [r4, #16]
 8010766:	462a      	mov	r2, r5
 8010768:	4639      	mov	r1, r7
 801076a:	4630      	mov	r0, r6
 801076c:	47c0      	blx	r8
 801076e:	3001      	adds	r0, #1
 8010770:	d0aa      	beq.n	80106c8 <_printf_i+0x12c>
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	079b      	lsls	r3, r3, #30
 8010776:	d413      	bmi.n	80107a0 <_printf_i+0x204>
 8010778:	68e0      	ldr	r0, [r4, #12]
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	4298      	cmp	r0, r3
 801077e:	bfb8      	it	lt
 8010780:	4618      	movlt	r0, r3
 8010782:	e7a3      	b.n	80106cc <_printf_i+0x130>
 8010784:	2301      	movs	r3, #1
 8010786:	464a      	mov	r2, r9
 8010788:	4639      	mov	r1, r7
 801078a:	4630      	mov	r0, r6
 801078c:	47c0      	blx	r8
 801078e:	3001      	adds	r0, #1
 8010790:	d09a      	beq.n	80106c8 <_printf_i+0x12c>
 8010792:	3501      	adds	r5, #1
 8010794:	68e3      	ldr	r3, [r4, #12]
 8010796:	9a03      	ldr	r2, [sp, #12]
 8010798:	1a9b      	subs	r3, r3, r2
 801079a:	42ab      	cmp	r3, r5
 801079c:	dcf2      	bgt.n	8010784 <_printf_i+0x1e8>
 801079e:	e7eb      	b.n	8010778 <_printf_i+0x1dc>
 80107a0:	2500      	movs	r5, #0
 80107a2:	f104 0919 	add.w	r9, r4, #25
 80107a6:	e7f5      	b.n	8010794 <_printf_i+0x1f8>
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1ac      	bne.n	8010706 <_printf_i+0x16a>
 80107ac:	7803      	ldrb	r3, [r0, #0]
 80107ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107b6:	e76c      	b.n	8010692 <_printf_i+0xf6>
 80107b8:	08012d95 	.word	0x08012d95
 80107bc:	08012da6 	.word	0x08012da6

080107c0 <strchr>:
 80107c0:	b2c9      	uxtb	r1, r1
 80107c2:	4603      	mov	r3, r0
 80107c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107c8:	b11a      	cbz	r2, 80107d2 <strchr+0x12>
 80107ca:	428a      	cmp	r2, r1
 80107cc:	d1f9      	bne.n	80107c2 <strchr+0x2>
 80107ce:	4618      	mov	r0, r3
 80107d0:	4770      	bx	lr
 80107d2:	2900      	cmp	r1, #0
 80107d4:	bf18      	it	ne
 80107d6:	2300      	movne	r3, #0
 80107d8:	e7f9      	b.n	80107ce <strchr+0xe>

080107da <_malloc_usable_size_r>:
 80107da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107de:	1f18      	subs	r0, r3, #4
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	bfbc      	itt	lt
 80107e4:	580b      	ldrlt	r3, [r1, r0]
 80107e6:	18c0      	addlt	r0, r0, r3
 80107e8:	4770      	bx	lr
	...

080107ec <_init>:
 80107ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ee:	bf00      	nop
 80107f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107f2:	bc08      	pop	{r3}
 80107f4:	469e      	mov	lr, r3
 80107f6:	4770      	bx	lr

080107f8 <_fini>:
 80107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fa:	bf00      	nop
 80107fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107fe:	bc08      	pop	{r3}
 8010800:	469e      	mov	lr, r3
 8010802:	4770      	bx	lr
